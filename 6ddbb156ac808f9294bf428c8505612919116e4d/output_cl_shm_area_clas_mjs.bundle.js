"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_shm_area_clas_mjs"],{

/***/ "./output/cl_shm_area.clas.mjs":
/*!*************************************!*\
  !*** ./output/cl_shm_area.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_shm_area\": () => (/* binding */ cl_shm_area)\n/* harmony export */ });\nconst {cx_shm_general_error} = await __webpack_require__.e(/*! import() */ \"output_cx_shm_general_error_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_shm_area.clas.abap\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_109200001 = new abap.types.Integer().set(109200001);\nconst constant_1302197000 = new abap.types.Integer().set(1302197000);\nconst constant_1302197002 = new abap.types.Integer().set(1302197002);\nconst constant_1302197003 = new abap.types.Integer().set(1302197003);\nconst constant_281119720 = new abap.types.Integer().set(281119720);\nconst constant_319200300 = new abap.types.Integer().set(319200300);\nclass cl_shm_area extends cx_shm_general_error {\n  async constructor_() {\n    await super.constructor_();\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.properties = new abap.types.Structure({auto_build: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-AUTO_BUILD\"}), has_versions: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-HAS_VERSIONS\"})}, \"SHM_PROPERTIES\");\n    this.inst_name = new abap.types.Character({length: 80, qualifiedName: \"SHM_INST_NAME\"});\n    this.client = new abap.types.Character({length: 3, qualifiedName: \"MANDT\"});\n    this.inst_trace_active = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    this.inst_trace_service = new abap.types.ABAPObject({qualifiedName: \"IF_SHM_TRACE\"});\n    this._lock = new abap.types.Hex({length: 8});\n    this.default_instance = cl_shm_area.default_instance;\n    this.invocation_mode_explicit = cl_shm_area.invocation_mode_explicit;\n    this.life_context_appserver = cl_shm_area.life_context_appserver;\n    this.attach_mode_default = cl_shm_area.attach_mode_default;\n    this.attach_mode_wait = cl_shm_area.attach_mode_wait;\n    this.affect_local_server = cl_shm_area.affect_local_server;\n    this.attach_mode_wait_2nd_try = cl_shm_area.attach_mode_wait_2nd_try;\n    return this;\n  }\n  async is_valid() {\n    let valid = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return valid;\n  }\n  async _free_instance71(INPUT) {\n    return cl_shm_area._free_instance71(INPUT);\n  }\n  static async _free_instance71(INPUT) {\n    let rc = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let inst_name = new abap.types.Character({length: 80, qualifiedName: \"SHM_INST_NAME\"});\n    if (INPUT && INPUT.inst_name) {inst_name.set(INPUT.inst_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer();\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rc;\n  }\n  async detach_commit() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async detach() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async _attach_read71(INPUT) {\n    let sneak_mode = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.sneak_mode) {sneak_mode.set(INPUT.sneak_mode);}\n    if (INPUT === undefined || INPUT.sneak_mode === undefined) {sneak_mode = abap.builtin.abap_false;}\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async _get_instance_infos71(INPUT) {\n    return cl_shm_area._get_instance_infos71(INPUT);\n  }\n  static async _get_instance_infos71(INPUT) {\n    let infos = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return infos;\n  }\n  async _detach_area71(INPUT) {\n    return cl_shm_area._detach_area71(INPUT);\n  }\n  static async _detach_area71(INPUT) {\n    let rc = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rc;\n  }\n  async _free_area71(INPUT) {\n    return cl_shm_area._free_area71(INPUT);\n  }\n  static async _free_area71(INPUT) {\n    let rc = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer();\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rc;\n  }\n  async _set_root(INPUT) {\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async _invalidate_instance71(INPUT) {\n    return cl_shm_area._invalidate_instance71(INPUT);\n  }\n  static async _invalidate_instance71(INPUT) {\n    let rc = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let inst_name = new abap.types.Character({length: 80, qualifiedName: \"SHM_INST_NAME\"});\n    if (INPUT && INPUT.inst_name) {inst_name.set(INPUT.inst_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer();\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rc;\n  }\n  async _invalidate_area71(INPUT) {\n    return cl_shm_area._invalidate_area71(INPUT);\n  }\n  static async _invalidate_area71(INPUT) {\n    let rc = new abap.types.Integer();\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer();\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer();\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rc;\n  }\n  async _attach_update70(INPUT) {\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let mode = new abap.types.Integer();\n    if (INPUT && INPUT.mode) {mode.set(INPUT.mode);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    let wait_time = new abap.types.Integer();\n    if (INPUT && INPUT.wait_time) {wait_time = INPUT.wait_time;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async _attach_write70(INPUT) {\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let mode = new abap.types.Integer();\n    if (INPUT && INPUT.mode) {mode.set(INPUT.mode);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    let wait_time = new abap.types.Integer();\n    if (INPUT && INPUT.wait_time) {wait_time = INPUT.wait_time;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n}\nabap.Classes['CL_SHM_AREA'] = cl_shm_area;\ncl_shm_area.default_instance = new abap.types.Character({length: 80, qualifiedName: \"SHM_INST_NAME\"});\ncl_shm_area.default_instance.set('$DEFAULT_INSTANCE$');\ncl_shm_area.invocation_mode_explicit = new abap.types.Integer();\ncl_shm_area.invocation_mode_explicit.set(319200300);\ncl_shm_area.life_context_appserver = new abap.types.Integer();\ncl_shm_area.life_context_appserver.set(109200001);\ncl_shm_area.attach_mode_default = new abap.types.Integer();\ncl_shm_area.attach_mode_default.set(1302197000);\ncl_shm_area.attach_mode_wait = new abap.types.Integer();\ncl_shm_area.attach_mode_wait.set(1302197002);\ncl_shm_area.affect_local_server = new abap.types.Integer();\ncl_shm_area.affect_local_server.set(281119720);\ncl_shm_area.attach_mode_wait_2nd_try = new abap.types.Integer();\ncl_shm_area.attach_mode_wait_2nd_try.set(1302197003);\n\n//# sourceMappingURL=cl_shm_area.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_shm_area.clas.mjs?");

/***/ })

}]);