"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_express_icf_shim_clas_mjs"],{

/***/ "./output/cl_express_icf_shim.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_express_icf_shim.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_express_icf_shim\": () => (/* binding */ cl_express_icf_shim)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nawait __webpack_require__.e(/*! import() */ \"output_cl_express_icf_shim_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_express_icf_shim.clas.locals.mjs */ \"./output/cl_express_icf_shim.clas.locals.mjs\"));\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_express_icf_shim.clas.abap\nclass cl_express_icf_shim {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async run(INPUT) {\n    return cl_express_icf_shim.run(INPUT);\n  }\n  static async run(INPUT) {\n    let express = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.express) {express = INPUT.express;}\n    let lv_xstr = new abap.types.XString();\n    let lv_str = new abap.types.String();\n    let lv_name = new abap.types.String();\n    let lv_value = new abap.types.String();\n    let lv_code = new abap.types.Integer();\n    let lv_classname = new abap.types.String();\n    let lv_content_type = new abap.types.String();\n    let li_handler = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_EXTENSION\"});\n    let li_server = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_SERVER\"});\n    lv_classname.set(INPUT.class);\n    abap.statements.translate(lv_classname, \"UPPER\");\n    if (abap.Classes[lv_classname.get()] === undefined) { throw new abap.Classes['CX_SY_CREATE_OBJECT_ERROR']; }\n    li_handler.set(await (new abap.Classes[lv_classname.get()]()).constructor_());\n    li_server.set(await (new abap.Classes['CLAS-CL_EXPRESS_ICF_SHIM-LCL_SERVER']()).constructor_());\n    lv_xstr.set(INPUT.req.body.toString(\"hex\").toUpperCase());\n    await li_server.get().if_http_server$request.get().if_http_request$set_data({data: lv_xstr});\n    lv_str.set(INPUT.req.method);\n    await li_server.get().if_http_server$request.get().if_http_request$set_method({method: lv_str});\n    for (const h in INPUT.req.headers) {\n        lv_name.set(h);\n        lv_value.set(INPUT.req.headers[h]);\n      await li_server.get().if_http_server$request.get().if_http_request$set_header_field({name: lv_name, value: lv_value});\n    }\n    lv_value.set(INPUT.req.path);\n    await li_server.get().if_http_server$request.get().if_http_request$set_header_field({name: new abap.types.Character({length: 5}).set('~path'), value: lv_value});\n    await li_handler.get().if_http_extension$handle_request({server: li_server});\n    lv_xstr.set((await li_server.get().if_http_server$response.get().if_http_response$get_data()));\n    await li_server.get().if_http_server$response.get().if_http_response$get_status({code: lv_code});\n    lv_content_type.set((await li_server.get().if_http_server$response.get().if_http_response$get_content_type()));\n    INPUT.res.append(\"Content-Type\", lv_content_type.get());\n    INPUT.res.status(lv_code.get()).send(Buffer.from(lv_xstr.get(), \"hex\"));\n  }\n}\nabap.Classes['CL_EXPRESS_ICF_SHIM'] = cl_express_icf_shim;\n\n//# sourceMappingURL=cl_express_icf_shim.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_express_icf_shim.clas.mjs?");

/***/ })

}]);