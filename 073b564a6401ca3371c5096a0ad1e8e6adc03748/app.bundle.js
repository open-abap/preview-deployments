/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@abaplint/runtime/build/src/abap_regex.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/abap_regex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABAPRegExp = void 0;\nclass ABAPRegExp {\n    // converts from ABAP specific regex to javascript regex\n    static convert(input) {\n        let ret = input;\n        ret = ret.replace(/\\[\\[:punct:\\]\\]/g, \"[@%\\\\.\\\\,\\\\-\\\\{\\\\}\\\\[\\\\]\\\\:\\\\!\\\\?\\\\(\\\\)\\\\;\\\\']\");\n        // https://github.com/micromatch/posix-character-classes#posix-character-classes\n        ret = ret.replace(/\\[\\^\\[:print:\\]\\]/g, \"[\\\\x00-\\\\x1F\\\\x7F]\");\n        ret = ret.replace(\"[[:space:]]\", \"\\\\s\");\n        return ret;\n    }\n    static escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    }\n}\nexports.ABAPRegExp = ABAPRegExp;\n//# sourceMappingURL=abap_regex.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/abap_regex.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/binary_search.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/binary_search.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.binarySearchTo = exports.binarySearchFrom = exports.binarySearchFromRow = void 0;\n/* eslint-disable max-len */\nconst compare_1 = __webpack_require__(/*! ./compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction binarySearchFromRow(array, left, right, keyField, keyValue, usesTableLine) {\n    const isStructured = array[0] instanceof types_1.Structure;\n    while (right - left > 1) {\n        const middle = Math.floor(((right - left) / 2) + left);\n        const a = array[middle];\n        let row = undefined;\n        if (usesTableLine === false && isStructured === true) {\n            row = a.get();\n        }\n        else {\n            row = isStructured ? Object.assign({ table_line: a }, a.get()) : { table_line: a };\n        }\n        if ((0, compare_1.ge)(keyField(row), keyValue)) {\n            right = middle;\n        }\n        else {\n            left = middle;\n        }\n    }\n    return right;\n}\nexports.binarySearchFromRow = binarySearchFromRow;\nfunction binarySearchFrom(array, left, right, keyField, keyValue) {\n    while (right - left > 1) {\n        const middle = Math.floor(((right - left) / 2) + left);\n        if ((0, compare_1.ge)(array[middle].get()[keyField], keyValue)) {\n            right = middle;\n        }\n        else {\n            left = middle;\n        }\n    }\n    return right;\n}\nexports.binarySearchFrom = binarySearchFrom;\nfunction binarySearchTo(array, left, right, keyField, keyValue) {\n    while (right - left > 1) {\n        const middle = Math.floor(((right - left) / 2) + left);\n        if ((0, compare_1.le)(array[middle].get()[keyField], keyValue)) {\n            left = middle;\n        }\n        else {\n            right = middle;\n        }\n    }\n    return right;\n}\nexports.binarySearchTo = binarySearchTo;\n//# sourceMappingURL=binary_search.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/binary_search.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/abs.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/abs.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.abs = void 0;\nfunction abs(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.abs(num_in);\n}\nexports.abs = abs;\n//# sourceMappingURL=abs.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/abs.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/boolc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/boolc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.boolc = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction boolc(input) {\n    if (input === true) {\n        return new types_1.String().set(\"X\");\n    }\n    else if (input === false || input === undefined) {\n        return new types_1.String().set(\" \");\n    }\n    else if (input.val instanceof types_1.String && input.val.get().trim() === \"\") {\n        return new types_1.String().set(\" \");\n    }\n    else if (input.val instanceof types_1.Character && input.val.get().trim() === \"\") {\n        return new types_1.String().set(\" \");\n    }\n    else {\n        return new types_1.String().set(\"X\");\n    }\n}\nexports.boolc = boolc;\n//# sourceMappingURL=boolc.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/boolc.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/ceil.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/ceil.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ceil = void 0;\nfunction ceil(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.ceil(num_in);\n}\nexports.ceil = ceil;\n//# sourceMappingURL=ceil.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/ceil.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/concat_lines_of.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/concat_lines_of.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.concat_lines_of = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction concat_lines_of(input) {\n    let s = input.sep;\n    if (s === undefined) {\n        s = \"\";\n    }\n    else if (typeof s !== \"string\") {\n        s = s.get();\n    }\n    return new string_1.String().set(input.table.array().map(e => e.get()).join(s));\n}\nexports.concat_lines_of = concat_lines_of;\n//# sourceMappingURL=concat_lines_of.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/concat_lines_of.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/condense.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/condense.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.condense = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction condense(input) {\n    let str = typeof input.val === \"string\" ? input.val : input.val.get().toString();\n    let from = \" \";\n    if (input.from) {\n        from = typeof input.from === \"string\" ? input.from : input.from.get().toString();\n    }\n    let to = \" \";\n    if (input.to) {\n        to = typeof input.to === \"string\" ? input.to : input.to.get().toString();\n    }\n    /*\n    let del = \" \";\n    if (input.del) {\n      del = typeof input.del === \"string\" ? input.del : input.del.get().toString();\n    }\n    */\n    str = str.replace(/ +$/, \"\");\n    str = str.replace(/^ +/, \"\");\n    for (const f of from.split(\"\")) {\n        str = str.replace(new RegExp(f.replace(\".\", \"\\\\.\"), \"g\"), to);\n    }\n    return new types_1.String().set(str.replace(/ {2,}/g, \" \"));\n}\nexports.condense = condense;\n//# sourceMappingURL=condense.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/condense.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/contains.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/contains.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.contains = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction contains(input) {\n    if (input.case !== undefined\n        || input.off !== undefined\n        || input.len !== undefined\n        || input.occ !== undefined) {\n        throw \"runtime, contains() todo\";\n    }\n    const ret = input.val.get().match(input.regex.get()) !== null ? \"X\" : \" \";\n    return new types_1.String().set(ret);\n}\nexports.contains = contains;\n//# sourceMappingURL=contains.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/contains.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/cos.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/cos.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cos = void 0;\n/* eslint-disable radix */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction cos(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else if (input.val instanceof types_1.Float) {\n        num_in = input.val.getRaw();\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.cos(num_in);\n}\nexports.cos = cos;\n//# sourceMappingURL=cos.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/cos.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/count.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/count.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.count = void 0;\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction count(input) {\n    let found = 0;\n    let val = input.val.get();\n    if (input.off) {\n        const off = input.off.get();\n        val = val.substring(off);\n    }\n    if (input.len) {\n        const len = input.len.get();\n        val = val.substring(0, len);\n    }\n    let reg = \"\";\n    if (input.sub) {\n        reg = input.sub.get();\n        reg = reg.replace(/\\*/g, \"\\\\*\");\n    }\n    else if (input.regex) {\n        reg = input.regex.get();\n    }\n    let options = \"g\";\n    if (input.case && (0, compare_1.initial)(input.case)) {\n        options += \"i\";\n    }\n    if (val !== \"\") {\n        const res = val.match(new RegExp(reg, options));\n        if (res) {\n            found = res.length;\n        }\n    }\n    return new types_1.Integer().set(found);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/count.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/count_any_of.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/count_any_of.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.count_any_of = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction count_any_of(input) {\n    let found = 0;\n    const val = input.val.get();\n    const sub = input.sub.get();\n    if (sub !== \"\") {\n        for (const char of sub.split(\"\")) {\n            const match = val.match(new RegExp(char, \"g\"));\n            found += (match === null || match === void 0 ? void 0 : match.length) || 0;\n        }\n    }\n    return new types_1.Integer().set(found);\n}\nexports.count_any_of = count_any_of;\n//# sourceMappingURL=count_any_of.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/count_any_of.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/escape.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/escape.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.escape = void 0;\n/* eslint-disable @typescript-eslint/ban-types */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction escape(input) {\n    let val = typeof input.val === \"string\" ? input.val : input.val.get();\n    const format = typeof input.format === \"number\" ? input.format : input.format.get();\n    switch (format) {\n        case 4: // e_html_text\n            val = val.replace(/&/g, \"&amp;\");\n            val = val.replace(/</g, \"&lt;\");\n            val = val.replace(/>/g, \"&gt;\");\n            break;\n        case 5: // e_html_attr\n            val = val.replace(/&/g, \"&amp;\");\n            val = val.replace(/</g, \"&lt;\");\n            val = val.replace(/>/g, \"&gt;\");\n            val = val.replace(/\"/g, \"&quot;\");\n            val = val.replace(/'/g, \"&#39;\");\n            break;\n        case 12: // e_url\n            val = encodeURI(val);\n            break;\n        default:\n        // todo, runtime error\n    }\n    return new types_1.String().set(val);\n}\nexports.escape = escape;\n//# sourceMappingURL=escape.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/escape.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/find.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/find.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.find = void 0;\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction find(input) {\n    var _a, _b, _c, _d, _e;\n    let val = typeof input.val === \"string\" ? input.val : input.val.get();\n    if (input.len !== undefined) {\n        throw \"transpiler find(), todo len\";\n    }\n    if (input.regex) {\n        if (input.off !== undefined) {\n            throw \"transpiler find(), todo off regex\";\n        }\n        const caseInput = typeof input.case === \"string\" ? input.case : (_a = input.case) === null || _a === void 0 ? void 0 : _a.get();\n        const regex = typeof input.regex === \"string\" ? input.regex : input.regex.get();\n        const flags = caseInput !== \"X\" ? \"i\" : \"\";\n        const reg = new RegExp(regex, flags);\n        const ret = (_b = val.match(reg)) === null || _b === void 0 ? void 0 : _b.index;\n        if (ret !== undefined) {\n            return new types_1.Integer().set(ret);\n        }\n        else {\n            return new types_1.Integer().set(-1);\n        }\n    }\n    else {\n        const sub = typeof input.sub === \"string\" ? input.sub : (_c = input.sub) === null || _c === void 0 ? void 0 : _c.get();\n        let off = typeof input.off === \"number\" ? input.off : ((_d = input.off) === null || _d === void 0 ? void 0 : _d.get()) || 0;\n        let occ = typeof input.occ === \"number\" ? input.occ : (_e = input.occ) === null || _e === void 0 ? void 0 : _e.get();\n        if (occ === 0) {\n            (0, throw_error_1.throwError)(\"CX_SY_STRG_PAR_VAL\");\n        }\n        else if (occ === undefined) {\n            occ = 1;\n        }\n        let negative = false;\n        if (occ < 0) {\n            negative = true;\n            val = val.split(\"\").reverse().join(\"\");\n            occ = Math.abs(occ);\n        }\n        let found = -1;\n        for (let i = 0; i < occ; i++) {\n            found = val.indexOf(sub || \"\", off);\n            if (found >= 0) {\n                off = found + 1;\n            }\n        }\n        if (negative === true && found >= 0) {\n            found = val.length - found - 1;\n        }\n        return new types_1.Integer().set(found);\n    }\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/find.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/floor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/floor.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.floor = void 0;\nfunction floor(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.floor(num_in);\n}\nexports.floor = floor;\n//# sourceMappingURL=floor.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/floor.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/frac.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/frac.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.frac = void 0;\n/* eslint-disable radix */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction frac(input) {\n    let num_in = undefined;\n    let ret = 0;\n    let pre = \"0.\";\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else if (input.val instanceof types_1.DecFloat34\n        || input.val instanceof types_1.Float) {\n        num_in = input.val.getRaw();\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    const numSplit = num_in.toString().split(\".\");\n    if (numSplit.length === 2) {\n        if (num_in < 0) {\n            pre = \"-0.\";\n        }\n        ret = parseFloat(pre + numSplit[1]);\n    }\n    if (input.val instanceof types_1.DecFloat34) {\n        return new types_1.DecFloat34().set(ret);\n    }\n    else if (input.val instanceof types_1.Float) {\n        return new types_1.Float().set(ret);\n    }\n    else {\n        return ret;\n    }\n}\nexports.frac = frac;\n//# sourceMappingURL=frac.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/frac.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.space = exports.abap_undefined = exports.abap_false = exports.abap_true = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\n__exportStar(__webpack_require__(/*! ./abs */ \"./node_modules/@abaplint/runtime/build/src/builtin/abs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./boolc */ \"./node_modules/@abaplint/runtime/build/src/builtin/boolc.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ceil */ \"./node_modules/@abaplint/runtime/build/src/builtin/ceil.js\"), exports);\n__exportStar(__webpack_require__(/*! ./concat_lines_of */ \"./node_modules/@abaplint/runtime/build/src/builtin/concat_lines_of.js\"), exports);\n__exportStar(__webpack_require__(/*! ./condense */ \"./node_modules/@abaplint/runtime/build/src/builtin/condense.js\"), exports);\n__exportStar(__webpack_require__(/*! ./contains */ \"./node_modules/@abaplint/runtime/build/src/builtin/contains.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cos */ \"./node_modules/@abaplint/runtime/build/src/builtin/cos.js\"), exports);\n__exportStar(__webpack_require__(/*! ./count_any_of */ \"./node_modules/@abaplint/runtime/build/src/builtin/count_any_of.js\"), exports);\n__exportStar(__webpack_require__(/*! ./count */ \"./node_modules/@abaplint/runtime/build/src/builtin/count.js\"), exports);\n__exportStar(__webpack_require__(/*! ./escape */ \"./node_modules/@abaplint/runtime/build/src/builtin/escape.js\"), exports);\n__exportStar(__webpack_require__(/*! ./find */ \"./node_modules/@abaplint/runtime/build/src/builtin/find.js\"), exports);\n__exportStar(__webpack_require__(/*! ./floor */ \"./node_modules/@abaplint/runtime/build/src/builtin/floor.js\"), exports);\n__exportStar(__webpack_require__(/*! ./frac */ \"./node_modules/@abaplint/runtime/build/src/builtin/frac.js\"), exports);\n__exportStar(__webpack_require__(/*! ./insert */ \"./node_modules/@abaplint/runtime/build/src/builtin/insert.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ipow */ \"./node_modules/@abaplint/runtime/build/src/builtin/ipow.js\"), exports);\n__exportStar(__webpack_require__(/*! ./lines */ \"./node_modules/@abaplint/runtime/build/src/builtin/lines.js\"), exports);\n__exportStar(__webpack_require__(/*! ./match */ \"./node_modules/@abaplint/runtime/build/src/builtin/match.js\"), exports);\n__exportStar(__webpack_require__(/*! ./matches */ \"./node_modules/@abaplint/runtime/build/src/builtin/matches.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nmax */ \"./node_modules/@abaplint/runtime/build/src/builtin/nmax.js\"), exports);\n__exportStar(__webpack_require__(/*! ./nmin */ \"./node_modules/@abaplint/runtime/build/src/builtin/nmin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./numofchar */ \"./node_modules/@abaplint/runtime/build/src/builtin/numofchar.js\"), exports);\n__exportStar(__webpack_require__(/*! ./repeat */ \"./node_modules/@abaplint/runtime/build/src/builtin/repeat.js\"), exports);\n__exportStar(__webpack_require__(/*! ./replace */ \"./node_modules/@abaplint/runtime/build/src/builtin/replace.js\"), exports);\n__exportStar(__webpack_require__(/*! ./reverse */ \"./node_modules/@abaplint/runtime/build/src/builtin/reverse.js\"), exports);\n__exportStar(__webpack_require__(/*! ./round */ \"./node_modules/@abaplint/runtime/build/src/builtin/round.js\"), exports);\n__exportStar(__webpack_require__(/*! ./segment */ \"./node_modules/@abaplint/runtime/build/src/builtin/segment.js\"), exports);\n__exportStar(__webpack_require__(/*! ./shift_left */ \"./node_modules/@abaplint/runtime/build/src/builtin/shift_left.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sign */ \"./node_modules/@abaplint/runtime/build/src/builtin/sign.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sin */ \"./node_modules/@abaplint/runtime/build/src/builtin/sin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sqrt */ \"./node_modules/@abaplint/runtime/build/src/builtin/sqrt.js\"), exports);\n__exportStar(__webpack_require__(/*! ./strlen */ \"./node_modules/@abaplint/runtime/build/src/builtin/strlen.js\"), exports);\n__exportStar(__webpack_require__(/*! ./substring_after */ \"./node_modules/@abaplint/runtime/build/src/builtin/substring_after.js\"), exports);\n__exportStar(__webpack_require__(/*! ./substring_before */ \"./node_modules/@abaplint/runtime/build/src/builtin/substring_before.js\"), exports);\n__exportStar(__webpack_require__(/*! ./substring */ \"./node_modules/@abaplint/runtime/build/src/builtin/substring.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sy */ \"./node_modules/@abaplint/runtime/build/src/builtin/sy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tan */ \"./node_modules/@abaplint/runtime/build/src/builtin/tan.js\"), exports);\n__exportStar(__webpack_require__(/*! ./to_lower */ \"./node_modules/@abaplint/runtime/build/src/builtin/to_lower.js\"), exports);\n__exportStar(__webpack_require__(/*! ./to_mixed */ \"./node_modules/@abaplint/runtime/build/src/builtin/to_mixed.js\"), exports);\n__exportStar(__webpack_require__(/*! ./to_upper */ \"./node_modules/@abaplint/runtime/build/src/builtin/to_upper.js\"), exports);\n__exportStar(__webpack_require__(/*! ./translate */ \"./node_modules/@abaplint/runtime/build/src/builtin/translate.js\"), exports);\n__exportStar(__webpack_require__(/*! ./trunc */ \"./node_modules/@abaplint/runtime/build/src/builtin/trunc.js\"), exports);\n__exportStar(__webpack_require__(/*! ./xstrlen */ \"./node_modules/@abaplint/runtime/build/src/builtin/xstrlen.js\"), exports);\nexports.abap_true = new types_1.Character(1, { qualifiedName: \"ABAP_BOOL\", ddicName: \"ABAP_BOOL\" }).set(\"X\").setConstant();\nexports.abap_false = new types_1.Character(1, { qualifiedName: \"ABAP_BOOL\", ddicName: \"ABAP_BOOL\" }).set(\"\").setConstant();\nexports.abap_undefined = new types_1.Character(1, { qualifiedName: \"ABAP_BOOL\", ddicName: \"ABAP_BOOL\" }).set(\"-\").setConstant();\nexports.space = new types_1.Character(1, { qualifiedName: \"ABAP_BOOL\", ddicName: \"ABAP_BOOL\" }).set(\" \").setConstant();\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/insert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/insert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.insert = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction insert(input) {\n    let offset = 0;\n    if (input.off) {\n        offset = input.off.get();\n    }\n    const value = input.val.getOffset({ offset: 0, length: offset }).get() +\n        input.sub.get() +\n        input.val.getOffset({ offset: offset }).get();\n    return new types_1.String().set(value);\n}\nexports.insert = insert;\n//# sourceMappingURL=insert.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/insert.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/ipow.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/ipow.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ipow = void 0;\nfunction ipow(input) {\n    let base = undefined;\n    if (typeof input.base === \"number\") {\n        base = input.base;\n    }\n    else if (typeof input.base === \"string\") {\n        base = parseFloat(input.base);\n    }\n    else {\n        base = parseFloat(input.base.get().toString());\n    }\n    let exp = undefined;\n    if (typeof input.exp === \"number\") {\n        exp = input.exp;\n    }\n    else if (typeof input.exp === \"string\") {\n        exp = parseFloat(input.exp);\n    }\n    else {\n        exp = parseFloat(input.exp.get().toString());\n    }\n    return Math.pow(base, exp).toFixed(0);\n}\nexports.ipow = ipow;\n//# sourceMappingURL=ipow.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/ipow.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/lines.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/lines.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lines = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction lines(input) {\n    if (input.val instanceof types_1.FieldSymbol) {\n        if (input.val.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return lines({ val: input.val.getPointer() });\n    }\n    return new types_1.Integer().set(input.val.getArrayLength());\n}\nexports.lines = lines;\n//# sourceMappingURL=lines.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/lines.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/match.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/match.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.match = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction match(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    let reg = \"\";\n    if (typeof input.regex === \"string\") {\n        reg = input.regex;\n    }\n    else {\n        reg = input.regex.get();\n    }\n    const r = new RegExp(reg);\n    const res = val.match(r);\n    let ret = \"\";\n    if (res && res[0]) {\n        ret = res[0];\n    }\n    return new string_1.String().set(ret);\n}\nexports.match = match;\n//# sourceMappingURL=match.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/match.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/matches.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/matches.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.matches = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction matches(input) {\n    if (input.pcre !== undefined) {\n        throw \"matches(), todo, pcre\";\n    }\n    else if (input.regex === undefined) {\n        throw \"matches(), regex input expected\";\n    }\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    let reg = \"\";\n    if (typeof input.regex === \"string\") {\n        reg = input.regex;\n    }\n    else {\n        reg = input.regex.get();\n    }\n    const r = new RegExp(\"^\" + reg + \"$\");\n    const res = val.match(r);\n    if (res !== null) {\n        return new types_1.Character().set(\"X\");\n    }\n    else {\n        return new types_1.Character().set(\" \");\n    }\n}\nexports.matches = matches;\n//# sourceMappingURL=matches.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/matches.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/nmax.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/nmax.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nmax = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction nmax(input) {\n    const values = [];\n    values.push((0, _parse_1.parse)(input.val1));\n    values.push((0, _parse_1.parse)(input.val2));\n    if (input.val3) {\n        values.push((0, _parse_1.parse)(input.val3));\n    }\n    if (input.val4) {\n        values.push((0, _parse_1.parse)(input.val4));\n    }\n    if (input.val5) {\n        values.push((0, _parse_1.parse)(input.val5));\n    }\n    if (input.val6) {\n        values.push((0, _parse_1.parse)(input.val6));\n    }\n    if (input.val7) {\n        values.push((0, _parse_1.parse)(input.val7));\n    }\n    if (input.val8) {\n        values.push((0, _parse_1.parse)(input.val8));\n    }\n    if (input.val9) {\n        values.push((0, _parse_1.parse)(input.val9));\n    }\n    values.sort((a, b) => (b - a));\n    return new types_1.Float().set(values[0]);\n}\nexports.nmax = nmax;\n//# sourceMappingURL=nmax.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/nmax.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/nmin.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/nmin.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nmin = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction nmin(input) {\n    const values = [];\n    values.push((0, _parse_1.parse)(input.val1));\n    values.push((0, _parse_1.parse)(input.val2));\n    if (input.val3) {\n        values.push((0, _parse_1.parse)(input.val3));\n    }\n    if (input.val4) {\n        values.push((0, _parse_1.parse)(input.val4));\n    }\n    if (input.val5) {\n        values.push((0, _parse_1.parse)(input.val5));\n    }\n    if (input.val6) {\n        values.push((0, _parse_1.parse)(input.val6));\n    }\n    if (input.val7) {\n        values.push((0, _parse_1.parse)(input.val7));\n    }\n    if (input.val8) {\n        values.push((0, _parse_1.parse)(input.val8));\n    }\n    if (input.val9) {\n        values.push((0, _parse_1.parse)(input.val9));\n    }\n    values.sort((a, b) => (a - b));\n    return new types_1.Float().set(values[0]);\n}\nexports.nmin = nmin;\n//# sourceMappingURL=nmin.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/nmin.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/numofchar.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/numofchar.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.numofchar = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction numofchar(input) {\n    let str = \"\";\n    if (typeof input.val === \"string\") {\n        str = input.val;\n    }\n    else {\n        str = input.val.get();\n    }\n    str = str.trimEnd();\n    return new types_1.Integer().set(str.length);\n}\nexports.numofchar = numofchar;\n//# sourceMappingURL=numofchar.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/numofchar.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/repeat.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/repeat.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.repeat = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction repeat(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    return new string_1.String().set(val.repeat(input.occ.get()));\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/repeat.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/replace.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/replace.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replace = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst abap_regex_1 = __webpack_require__(/*! ../abap_regex */ \"./node_modules/@abaplint/runtime/build/src/abap_regex.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction replace(input) {\n    let val = undefined;\n    if (typeof input.val === \"string\") {\n        val = input.val;\n    }\n    else {\n        val = input.val.get();\n    }\n    let wi = undefined;\n    if (typeof input.with === \"string\") {\n        wi = input.with;\n    }\n    else if (input.with instanceof types_1.Character) {\n        wi = input.with.getTrimEnd();\n    }\n    else if (input.with) {\n        wi = input.with.get();\n    }\n    let sub = undefined;\n    if (typeof input.sub === \"string\") {\n        sub = input.sub;\n    }\n    else if (input.sub) {\n        sub = input.sub.get();\n    }\n    if (sub !== undefined) {\n        sub = sub.replace(/\\\\/g, \"\\\\\\\\\");\n        sub = sub.replace(/\\[/g, \"\\\\[\");\n    }\n    if (typeof input.regex === \"string\") {\n        sub = new RegExp(abap_regex_1.ABAPRegExp.convert(input.regex), \"g\");\n    }\n    else if (input.regex) {\n        sub = new RegExp(abap_regex_1.ABAPRegExp.convert(input.regex.get()), \"g\");\n    }\n    if (input.off && input.len && typeof input.val === \"string\") {\n        const offset = input.off.get();\n        const length = input.len.get();\n        val = val.substring(0, offset) + wi + val.substring(offset + length);\n    }\n    else if (input.off && input.len && !(typeof input.val === \"string\")) {\n        const offset = input.off.get();\n        const length = input.len.get();\n        val = input.val.getOffset({ offset: 0, length: offset }).get() +\n            wi +\n            input.val.getOffset({ offset: offset + length }).get();\n    }\n    else if (input.occ === undefined && sub && wi) {\n        val = val.replace(sub, wi);\n    }\n    else if (input.occ && input.occ.get() === 0 && sub && wi !== undefined) {\n        if (typeof sub === \"string\") {\n            sub = new RegExp(sub, \"g\");\n        }\n        val = val.replace(sub, wi);\n    }\n    return new string_1.String().set(val);\n}\nexports.replace = replace;\n//# sourceMappingURL=replace.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/replace.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/reverse.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/reverse.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reverse = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction reverse(input) {\n    let val = \"\";\n    if (typeof input.val === \"string\") {\n        val = input.val;\n    }\n    else {\n        val = input.val.get();\n    }\n    val = val.split(\"\").reverse().join(\"\");\n    return new types_1.String().set(val);\n}\nexports.reverse = reverse;\n//# sourceMappingURL=reverse.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/reverse.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/round.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/round.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.round = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction round(input) {\n    let mode = input.mode;\n    if (mode === undefined) {\n        mode = 2;\n    }\n    else if (typeof mode !== \"number\") {\n        mode = mode === null || mode === void 0 ? void 0 : mode.get();\n    }\n    const val = (0, _parse_1.parse)(input.val);\n    const dec = (0, _parse_1.parse)(input.dec);\n    if (dec !== 0) {\n        throw \"round(), todo, handle decimals\";\n    }\n    const ret = new types_1.Float();\n    switch (mode) {\n        case 1:\n            ret.set(Math.ceil(val));\n            break;\n        case 2:\n            ret.set(Math.round(val));\n            break;\n        case 4:\n            ret.set(-Math.round(-val));\n            break;\n        case 5:\n            ret.set(Math.trunc(val));\n            break;\n        case 6:\n            ret.set(Math.floor(val));\n            break;\n        default:\n            throw \"round(), unknown mode: \" + mode;\n    }\n    return ret;\n}\nexports.round = round;\n//# sourceMappingURL=round.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/round.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/segment.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/segment.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.segment = void 0;\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction segment(input) {\n    let val = input.val;\n    if (typeof val !== \"string\") {\n        val = val.get();\n    }\n    let sep = input.sep;\n    if (typeof sep !== \"string\") {\n        sep = sep.get();\n    }\n    let index = input.index;\n    if (typeof index !== \"number\") {\n        index = index.get();\n    }\n    if (index === 0 || sep.length === 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_STRG_PAR_VAL\");\n    }\n    const array = val.split(sep);\n    if (index < 0) {\n        array.reverse();\n        index = Math.abs(index);\n    }\n    if (index > array.length) {\n        (0, throw_error_1.throwError)(\"CX_SY_STRG_PAR_VAL\");\n    }\n    return new types_1.String().set(array[index - 1]);\n}\nexports.segment = segment;\n//# sourceMappingURL=segment.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/segment.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/shift_left.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/shift_left.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shift_left = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nfunction shift_left(input) {\n    let val = typeof input.val === \"string\" ? input.val : input.val.get();\n    if (input.sub) {\n        const sub = typeof input.sub === \"string\" ? input.sub : input.sub.get();\n        while (val.startsWith(sub)) {\n            val = val.substr(sub.length);\n        }\n    }\n    else if (input.places) {\n        let places = typeof input.places === \"string\" ? input.places : input.places.get();\n        if (typeof places === \"string\") {\n            places = parseInt(places, 10);\n        }\n        if (places > val.length) {\n            (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n        }\n        val = val.substring(places);\n    }\n    else if (input.circular) {\n        const leftShifts = input.circular.get() % val.length;\n        val = val.slice(leftShifts) + val.slice(0, leftShifts);\n    }\n    return new string_1.String().set(val);\n}\nexports.shift_left = shift_left;\n//# sourceMappingURL=shift_left.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/shift_left.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/sign.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/sign.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sign = void 0;\nfunction sign(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.sign(num_in);\n}\nexports.sign = sign;\n//# sourceMappingURL=sign.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/sign.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/sin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/sin.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sin = void 0;\n/* eslint-disable radix */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction sin(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else if (input.val instanceof types_1.Float) {\n        num_in = input.val.getRaw();\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.sin(num_in);\n}\nexports.sin = sin;\n//# sourceMappingURL=sin.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/sin.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/sqrt.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/sqrt.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sqrt = void 0;\n/* eslint-disable radix */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction sqrt(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else if (input.val instanceof types_1.Float) {\n        num_in = input.val.getRaw();\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.sqrt(num_in);\n}\nexports.sqrt = sqrt;\n//# sourceMappingURL=sqrt.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/sqrt.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/strlen.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/strlen.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.strlen = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction strlen(input) {\n    let str = \"\";\n    if (typeof input.val === \"string\") {\n        str = input.val;\n    }\n    else {\n        str = input.val.get();\n    }\n    return new types_1.Integer().set(str.length);\n}\nexports.strlen = strlen;\n//# sourceMappingURL=strlen.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/strlen.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/substring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/substring.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.substring = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nfunction substring(input) {\n    var _a, _b;\n    let off = (_a = input === null || input === void 0 ? void 0 : input.off) === null || _a === void 0 ? void 0 : _a.get();\n    if (off === undefined) {\n        off = 0;\n    }\n    if (off < 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n    }\n    const len = (_b = input === null || input === void 0 ? void 0 : input.len) === null || _b === void 0 ? void 0 : _b.get();\n    if (len && len < 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n    }\n    let sub = \"\";\n    if (typeof input.val === \"string\") {\n        sub = input.val.substr(off, len);\n    }\n    else {\n        sub = input.val.getOffset({ offset: off, length: len }).get();\n    }\n    return new string_1.String().set(sub);\n}\nexports.substring = substring;\n//# sourceMappingURL=substring.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/substring.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/substring_after.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/substring_after.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.substring_after = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction substring_after(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    let reg = \"\";\n    if (typeof input.regex === \"string\") {\n        reg = input.regex;\n    }\n    else if (input === null || input === void 0 ? void 0 : input.regex) {\n        reg = input.regex.get();\n    }\n    else if (typeof input.sub === \"string\") {\n        reg = input.sub;\n    }\n    else if (input === null || input === void 0 ? void 0 : input.sub) {\n        reg = input.sub.get();\n    }\n    const r = new RegExp(reg + \"(.*)\");\n    const res = val.match(r);\n    let ret = \"\";\n    if (res && res[1]) {\n        ret = res[1];\n    }\n    return new string_1.String().set(ret);\n}\nexports.substring_after = substring_after;\n//# sourceMappingURL=substring_after.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/substring_after.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/substring_before.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/substring_before.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.substring_before = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction substring_before(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    let reg = \"\";\n    if (typeof input.regex === \"string\") {\n        reg = input.regex;\n    }\n    else if (input === null || input === void 0 ? void 0 : input.regex) {\n        reg = input.regex.get();\n    }\n    else if (typeof input.sub === \"string\") {\n        reg = input.sub;\n    }\n    else if (input === null || input === void 0 ? void 0 : input.sub) {\n        reg = input.sub.get();\n    }\n    const r = new RegExp(\"(.*?)\" + reg);\n    const res = val.match(r);\n    let ret = \"\";\n    if (res && res[1]) {\n        ret = res[1];\n    }\n    return new string_1.String().set(ret);\n}\nexports.substring_before = substring_before;\n//# sourceMappingURL=substring_before.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/substring_before.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/sy.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/sy.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sy = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nexports.sy = new types_1.Structure({\n    abcde: new types_1.Character(26).set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n    datlo: new types_1.Date(),\n    datum: new types_1.Date(),\n    dbcnt: new types_1.Integer(),\n    fdpos: new types_1.Integer(),\n    host: new types_1.Character(32).set(\"localhost\"),\n    index: new types_1.Integer(),\n    langu: new types_1.Character(1).set(\"E\"),\n    mandt: new types_1.Character(3).set(\"123\"),\n    msgid: new types_1.Character(20),\n    msgno: new types_1.Numc({ length: 3 }),\n    msgty: new types_1.Character(1),\n    msgv1: new types_1.Character(50),\n    msgv2: new types_1.Character(50),\n    msgv3: new types_1.Character(50),\n    msgv4: new types_1.Character(50),\n    subrc: new types_1.Integer(),\n    sysid: new types_1.Character(3).set(\"ABC\"),\n    tabix: new types_1.Integer(),\n    tfill: new types_1.Integer(),\n    timlo: new types_1.Time(),\n    tzone: new types_1.Integer(),\n    uname: new types_1.Character(12).set(\"USERNAME\"),\n    uzeit: new types_1.Time(),\n});\n//# sourceMappingURL=sy.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/sy.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/tan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/tan.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tan = void 0;\n/* eslint-disable radix */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction tan(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else if (input.val instanceof types_1.Float) {\n        num_in = input.val.getRaw();\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.tan(num_in);\n}\nexports.tan = tan;\n//# sourceMappingURL=tan.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/tan.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/to_lower.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/to_lower.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.to_lower = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction to_lower(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    return new types_1.String().set(val.toLowerCase());\n}\nexports.to_lower = to_lower;\n//# sourceMappingURL=to_lower.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/to_lower.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/to_mixed.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/to_mixed.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.to_mixed = void 0;\n/* eslint-disable @typescript-eslint/ban-types */\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction to_mixed(input) {\n    let sep = input.sep;\n    if (sep === undefined) {\n        sep = \"_\";\n    }\n    if (typeof sep !== \"string\") {\n        sep = sep.get();\n    }\n    if (sep.length === 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_STRG_PAR_VAL\");\n    }\n    const min = 1;\n    if (min < 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_STRG_PAR_VAL\");\n    }\n    let val = input.val;\n    if (typeof val !== \"string\") {\n        val = val.get();\n    }\n    val = val.substring(0, min) + val.substring(min).toLowerCase();\n    if (input.case) {\n        if (typeof input.case === \"string\") {\n            if (input.case === input.case.toLowerCase()) {\n                val = val.substring(0, 1).toLowerCase() + val.substring(1);\n            }\n        }\n        else {\n            if (input.case.get() === input.case.get().toLowerCase()) {\n                val = val.substring(0, 1).toLowerCase() + val.substring(1);\n            }\n        }\n    }\n    const length = sep.length;\n    const regex = new RegExp(sep + \"\\\\w\");\n    while (val.match(regex)) {\n        val = val.replace(regex, (x) => {\n            return x.substring(length).toUpperCase();\n        });\n    }\n    return new types_1.String().set(val);\n}\nexports.to_mixed = to_mixed;\n//# sourceMappingURL=to_mixed.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/to_mixed.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/to_upper.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/to_upper.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.to_upper = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction to_upper(input) {\n    const val = typeof input.val === \"string\" ? input.val : input.val.get();\n    return new types_1.String().set(val.toUpperCase());\n}\nexports.to_upper = to_upper;\n//# sourceMappingURL=to_upper.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/to_upper.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/translate.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/translate.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.translate = void 0;\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction translate(input) {\n    let val = typeof input.val === \"string\" ? input.val : input.val.get();\n    const from = typeof input.from === \"string\" ? input.from : input.from.get();\n    const to = typeof input.to === \"string\" ? input.to : input.to.get();\n    const fromSplit = from.split(\"\");\n    const toSplit = to.split(\"\");\n    const chars = {};\n    for (let i = 0; i < fromSplit.length; i++) {\n        chars[fromSplit[i]] = toSplit[i] || \"\";\n    }\n    const reg = new RegExp(\"[\" + from + \"]\", \"g\");\n    val = val.replace(reg, m => chars[m] || \"\");\n    return new string_1.String().set(val);\n}\nexports.translate = translate;\n//# sourceMappingURL=translate.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/translate.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/trunc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/trunc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.trunc = void 0;\nfunction trunc(input) {\n    let num_in = undefined;\n    if (typeof input.val === \"number\") {\n        num_in = input.val;\n    }\n    else if (typeof input.val === \"string\") {\n        num_in = parseFloat(input.val);\n    }\n    else {\n        num_in = parseFloat(input.val.get().toString());\n    }\n    return Math.trunc(num_in);\n}\nexports.trunc = trunc;\n//# sourceMappingURL=trunc.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/trunc.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/builtin/xstrlen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/builtin/xstrlen.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.xstrlen = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction xstrlen(input) {\n    if (typeof input.val === \"string\") {\n        return new types_1.Integer().set(input.val.length / 2);\n    }\n    else {\n        return new types_1.Integer().set(input.val.get().length / 2);\n    }\n}\nexports.xstrlen = xstrlen;\n//# sourceMappingURL=xstrlen.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/builtin/xstrlen.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/classic_error.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/classic_error.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClassicError = void 0;\nclass ClassicError extends Error {\n    constructor(input) {\n        super();\n        this.classic = input.classic;\n    }\n}\nexports.ClassicError = ClassicError;\n//# sourceMappingURL=classic_error.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/classic_error.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/clone.js":
/*!***********************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/clone.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clone = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction clone(obj) {\n    if (null == obj || \"object\" != typeof obj) {\n        return obj;\n    }\n    if (obj instanceof types_1.ABAPObject) {\n        const n = new types_1.ABAPObject();\n        n.set(obj.get());\n        // @ts-ignore\n        return n;\n    }\n    else if (obj instanceof types_1.DataReference) {\n        const n = new types_1.DataReference(obj.getType());\n        n.assign(obj.getPointer());\n        // @ts-ignore\n        return n;\n    }\n    // @ts-ignore\n    const copy = new obj.constructor();\n    for (const attr in obj) {\n        // @ts-ignore\n        // eslint-disable-next-line no-prototype-builtins\n        if (obj.hasOwnProperty(attr)) {\n            if (null == obj[attr] || \"object\" != typeof obj[attr]) {\n                copy[attr] = obj[attr];\n            }\n            else {\n                copy[attr] = clone(obj[attr]);\n            }\n        }\n    }\n    return copy;\n}\nexports.clone = clone;\n//# sourceMappingURL=clone.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/clone.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/assigned.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/assigned.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assigned = void 0;\nfunction assigned(val) {\n    return val.isAssigned();\n}\nexports.assigned = assigned;\n//# sourceMappingURL=assigned.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/assigned.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/between.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/between.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.between = void 0;\nconst ge_1 = __webpack_require__(/*! ./ge */ \"./node_modules/@abaplint/runtime/build/src/compare/ge.js\");\nconst le_1 = __webpack_require__(/*! ./le */ \"./node_modules/@abaplint/runtime/build/src/compare/le.js\");\nfunction between(left, and1, and2) {\n    return (0, ge_1.ge)(left, and1) && (0, le_1.le)(left, and2);\n}\nexports.between = between;\n//# sourceMappingURL=between.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/between.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/ca.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/ca.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ca = void 0;\nfunction ca(left, right) {\n    let l = \"\";\n    if (typeof left === \"number\" || typeof left === \"string\") {\n        l = left.toString();\n    }\n    else {\n        l = left.get().toString();\n    }\n    if (l === \"\") {\n        l = \" \";\n    }\n    let r = \"\";\n    if (typeof right === \"string\") {\n        r = right.toString();\n    }\n    else {\n        r = right.get().toString();\n    }\n    const characters = r.split(\"\");\n    let fdpos = 0;\n    for (const c of l.split(\"\")) {\n        if (characters.includes(c) === true) {\n            // @ts-ignore\n            abap.builtin.sy.get().fdpos.set(fdpos);\n            return true;\n        }\n        fdpos++;\n    }\n    // @ts-ignore\n    abap.builtin.sy.get().fdpos.set(fdpos);\n    return false;\n}\nexports.ca = ca;\n//# sourceMappingURL=ca.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/ca.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/cn.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/cn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cn = void 0;\nconst co_1 = __webpack_require__(/*! ./co */ \"./node_modules/@abaplint/runtime/build/src/compare/co.js\");\nfunction cn(left, right) {\n    return (0, co_1.co)(left, right) === false;\n}\nexports.cn = cn;\n//# sourceMappingURL=cn.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/cn.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/co.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/co.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.co = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction co(left, right) {\n    let l = \"\";\n    if (typeof left === \"number\" || typeof left === \"string\") {\n        l = left.toString();\n    }\n    else {\n        l = left.get().toString();\n    }\n    let r = \"\";\n    if (typeof right === \"string\") {\n        r = right.toString();\n    }\n    else if (right instanceof types_1.Structure) {\n        r = Object.values(right.get()).map((a) => a.get()).join(\"\");\n    }\n    else {\n        r = right.get().toString();\n    }\n    const characters = r.split(\"\");\n    let fdpos = 0;\n    for (const c of l.split(\"\")) {\n        if (characters.includes(c) === false) {\n            // @ts-ignore\n            abap.builtin.sy.get().fdpos.set(fdpos);\n            return false;\n        }\n        fdpos++;\n    }\n    // @ts-ignore\n    abap.builtin.sy.get().fdpos.set(fdpos);\n    return true;\n}\nexports.co = co;\n//# sourceMappingURL=co.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/co.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/cp.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/cp.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cp = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction cp(left, right) {\n    let l = \"\";\n    if (typeof left === \"number\" || typeof left === \"string\") {\n        l = left.toString();\n    }\n    else if (left instanceof types_1.Structure) {\n        l = left.getCharacter();\n    }\n    else if (left instanceof types_1.FieldSymbol) {\n        if (left.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return cp(left.getPointer(), right);\n    }\n    else {\n        l = left.get().toString();\n    }\n    let r = \"\";\n    if (typeof right === \"string\") {\n        r = right.toString();\n    }\n    else {\n        r = right.get().toString();\n    }\n    r = r.replace(/\\\\/g, \"\\\\\\\\\");\n    r = r.replace(/\\[/g, \"\\\\[\");\n    r = r.replace(/\\]/g, \"\\\\]\");\n    r = r.replace(/\\}/g, \"\\\\}\");\n    r = r.replace(/\\{/g, \"\\\\{\");\n    r = r.replace(/\\?/g, \"\\\\?\");\n    r = r.replace(/\\(/g, \"\\\\(\");\n    r = r.replace(/\\)/g, \"\\\\)\");\n    r = r.replace(/\\./g, \"\\\\.\");\n    r = r.replace(/\\|/g, \"\\\\|\");\n    r = r.replace(/\\$/g, \"\\\\$\");\n    r = r.replace(/\\^/g, \"\\\\^\");\n    r = r.replace(/#\\*/g, \"\\\\u{002A}\");\n    r = r.replace(/#\\+/g, \"\\\\u{002B}\");\n    r = r.replace(/\\*/g, \"[\\\\s\\\\S]*\");\n    r = r.replace(/\\+/g, \"[\\\\s\\\\S]\");\n    const reg = new RegExp(\"^\" + r + \"$\", \"iu\");\n    return l.match(reg) !== null;\n}\nexports.cp = cp;\n//# sourceMappingURL=cp.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/cp.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/cs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/cs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cs = void 0;\nfunction cs(left, right) {\n    let l = \"\";\n    if (typeof left === \"number\" || typeof left === \"string\") {\n        l = left.toString();\n    }\n    else {\n        l = left.get().toString();\n    }\n    l = l.toUpperCase();\n    let r = \"\";\n    if (typeof right === \"string\") {\n        r = right.toString();\n    }\n    else {\n        r = right.get().toString();\n    }\n    r = r.toUpperCase();\n    const index = l.indexOf(r);\n    if (index < 0) {\n        // @ts-ignore\n        abap.builtin.sy.get().fdpos.set(l.length);\n        return false;\n    }\n    else {\n        // @ts-ignore\n        abap.builtin.sy.get().fdpos.set(index);\n        return true;\n    }\n}\nexports.cs = cs;\n//# sourceMappingURL=cs.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/cs.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/eq.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/eq.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.eq = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction compareTables(left, right) {\n    const leftArray = left.array();\n    const rightArray = right.array();\n    if (leftArray.length !== rightArray.length) {\n        return false;\n    }\n    for (let i = 0; i < leftArray.length; i++) {\n        const rowCompare = eq(leftArray[i], rightArray[i]);\n        if (rowCompare === false) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction eq(left, right) {\n    /*\n      console.dir(left);\n      console.dir(right);\n    */\n    if (right instanceof types_1.FieldSymbol) {\n        return eq(left, right.getPointer());\n    }\n    else if (left instanceof types_1.FieldSymbol) {\n        return eq(left.getPointer(), right);\n    }\n    // for performance, do the typicaly/easy cases first\n    if (right instanceof types_1.Character && left instanceof types_1.Character && right.getLength() === left.getLength()) {\n        return right.get() === left.get();\n    }\n    else if (right instanceof types_1.Numc && left instanceof types_1.Numc && right.getLength() === left.getLength()) {\n        return right.get() === left.get();\n    }\n    else if (right instanceof types_1.Integer && left instanceof types_1.Integer) {\n        return right.get() === left.get();\n    }\n    if (left instanceof types_1.Table || right instanceof types_1.Table || left instanceof types_1.HashedTable || right instanceof types_1.HashedTable) {\n        if ((left instanceof types_1.Table || left instanceof types_1.HashedTable)\n            && (right instanceof types_1.Table || right instanceof types_1.HashedTable)) {\n            return compareTables(left, right);\n        }\n        else {\n            // this happens in dynamic/ANY typed scenarios?\n            return false;\n        }\n    }\n    if (left instanceof types_1.Structure || right instanceof types_1.Structure) {\n        if (!(right instanceof types_1.Structure)) {\n            return eq(left.getCharacter(), right);\n        }\n        if (!(left instanceof types_1.Structure)) {\n            return eq(left, right.getCharacter());\n        }\n        const l = left.get();\n        const r = right.get();\n        const leftKeys = Object.keys(l);\n        const rightKeys = Object.keys(r);\n        if (leftKeys.length !== rightKeys.length) {\n            return false;\n        }\n        for (const k of leftKeys) {\n            const e = eq(l[k], r[k]);\n            if (e === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let l = undefined;\n    if (left instanceof types_1.Character) {\n        l = left.getTrimEnd();\n    }\n    else if (left instanceof types_1.Date) {\n        l = left.get().trimEnd();\n    }\n    else if (typeof left === \"object\") {\n        l = left.get();\n    }\n    else {\n        l = left;\n    }\n    let r = undefined;\n    if (right instanceof types_1.Character) {\n        r = right.getTrimEnd();\n    }\n    else if (right instanceof types_1.Date) {\n        l = right.get().trimEnd();\n    }\n    else if (typeof right === \"object\") {\n        r = right.get();\n    }\n    else {\n        r = right;\n    }\n    if (right instanceof types_1.Hex && typeof l === \"number\") {\n        r = parseInt(right.get(), 16);\n    }\n    else if (left instanceof types_1.Hex && typeof r === \"number\") {\n        l = parseInt(left.get(), 16);\n    }\n    if (right instanceof types_1.Float && left instanceof types_1.Float) {\n        r = right.getRaw();\n        l = left.getRaw();\n    }\n    else if (right instanceof types_1.Float && typeof l === \"number\") {\n        r = right.getRaw();\n    }\n    else if (left instanceof types_1.Float) {\n        if (typeof r === \"number\") {\n            l = left.getRaw();\n        }\n        else if (typeof r === \"string\") {\n            l = left.getRaw();\n            r = Number(r);\n        }\n    }\n    if (right instanceof types_1.Numc && left instanceof types_1.Integer) {\n        l = left.get();\n        r = parseInt(right.get(), 10);\n    }\n    else if (right instanceof types_1.Integer && left instanceof types_1.Numc) {\n        r = right.get();\n        l = parseInt(left.get(), 10);\n    }\n    // assumption: typically no casts are required, so start checking if the types doesnt match\n    if (typeof l !== typeof r) {\n        if (typeof l === \"string\" && typeof r === \"number\") {\n            r = r.toString();\n        }\n        else if (typeof l === \"number\" && typeof r === \"string\") {\n            if (r === \"\") {\n                r = 0;\n            }\n            else if (r.includes(\".\")) {\n                r = parseFloat(r);\n            }\n            else {\n                r = parseInt(r, 10);\n            }\n        }\n    }\n    /*\n      console.dir(l);\n      console.dir(r);\n    */\n    return l === r;\n}\nexports.eq = eq;\n//# sourceMappingURL=eq.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/eq.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/ge.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/ge.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ge = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nfunction ge(left, right) {\n    return (0, _1.gt)(left, right) || (0, _1.eq)(left, right);\n}\nexports.ge = ge;\n//# sourceMappingURL=ge.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/ge.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/gt.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/gt.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.gt = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst integer_1 = __webpack_require__(/*! ../types/integer */ \"./node_modules/@abaplint/runtime/build/src/types/integer.js\");\nfunction gt(left, right) {\n    if (left instanceof types_1.FieldSymbol) {\n        if (left.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return gt(left.getPointer(), right);\n    }\n    else if (right instanceof types_1.FieldSymbol) {\n        if (right.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return gt(left, right.getPointer());\n    }\n    if (left instanceof types_1.Table || right instanceof types_1.Table || left instanceof types_1.HashedTable || right instanceof types_1.HashedTable) {\n        throw new Error(\"runtime_todo, gt TABLE\");\n    }\n    if (left instanceof types_1.Hex || right instanceof types_1.Hex) {\n        return gt_with_hex(left, right);\n    }\n    let l = undefined;\n    if (typeof left === \"number\" || typeof left === \"string\") {\n        l = left;\n    }\n    else if (left instanceof types_1.Float || left instanceof types_1.DecFloat34) {\n        l = left.getRaw();\n    }\n    else {\n        l = left.get();\n    }\n    let r = undefined;\n    if (typeof right === \"number\" || typeof right === \"string\") {\n        r = right;\n    }\n    else if (right instanceof types_1.Float || right instanceof types_1.DecFloat34) {\n        r = right.getRaw();\n    }\n    else {\n        r = right.get();\n    }\n    if (typeof l === \"string\" && typeof r === \"number\") {\n        if (l === \"\") {\n            l = 0;\n        }\n        else {\n            l = parseInt(l, 10);\n        }\n    }\n    else if (typeof l === \"number\" && typeof r === \"string\") {\n        if (r === \"\") {\n            r = 0;\n        }\n        else {\n            r = parseInt(r, 10);\n        }\n    }\n    if (l === undefined) {\n        return true; // todo, not sure this is correct\n    }\n    if (r === undefined) {\n        return true; // todo, not sure this is correct\n    }\n    return l > r;\n}\nexports.gt = gt;\nfunction gt_with_hex(left, right) {\n    const left_hex = get_hex_from_parameter(left);\n    const right_hex = get_hex_from_parameter(right);\n    return left_hex > right_hex;\n}\nfunction get_hex_from_parameter(comparison_part) {\n    let hex_from_parameter = \"\";\n    switch (typeof comparison_part) {\n        case \"number\":\n            hex_from_parameter = comparison_part.toString(16);\n            break;\n        case \"string\":\n            hex_from_parameter = comparison_part.split(\"\")\n                .map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\"))\n                .join(\"\");\n            break;\n        case \"object\":\n            if (comparison_part instanceof types_1.Hex) {\n                hex_from_parameter = comparison_part.get();\n            }\n            else if (comparison_part instanceof integer_1.Integer) {\n                hex_from_parameter = comparison_part.get().toString(16).toUpperCase();\n                if (hex_from_parameter.length % 2 === 1) {\n                    hex_from_parameter = \"0\" + hex_from_parameter;\n                }\n            }\n            else if (comparison_part instanceof types_1.Character) {\n                hex_from_parameter = comparison_part.get();\n            }\n            else if (comparison_part instanceof types_1.XString) {\n                hex_from_parameter = comparison_part.get();\n            }\n            else {\n                throw new Error(\"runtime_todo, gt hex1\");\n            }\n            break;\n        default:\n            throw new Error(\"runtime_todo, gt hex2\");\n    }\n    return hex_from_parameter;\n}\n//# sourceMappingURL=gt.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/gt.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/in.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/in.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compareIn = void 0;\nconst cp_1 = __webpack_require__(/*! ./cp */ \"./node_modules/@abaplint/runtime/build/src/compare/cp.js\");\nconst eq_1 = __webpack_require__(/*! ./eq */ \"./node_modules/@abaplint/runtime/build/src/compare/eq.js\");\nconst ne_1 = __webpack_require__(/*! ./ne */ \"./node_modules/@abaplint/runtime/build/src/compare/ne.js\");\nfunction compareIn(left, right) {\n    if (right.array().length === 0) {\n        return true;\n    }\n    for (const row of right.array()) {\n        if ((0, eq_1.eq)(row.get()[\"sign\"], \"I\") && (0, eq_1.eq)(row.get()[\"option\"], \"EQ\")) {\n            if ((0, eq_1.eq)(row.get()[\"low\"], left)) {\n                return true;\n            }\n        }\n        else if ((0, eq_1.eq)(row.get()[\"sign\"], \"E\") && (0, eq_1.eq)(row.get()[\"option\"], \"EQ\")) {\n            if ((0, ne_1.ne)(row.get()[\"low\"], left)) {\n                return true;\n            }\n        }\n        else if ((0, eq_1.eq)(row.get()[\"sign\"], \"I\") && (0, eq_1.eq)(row.get()[\"option\"], \"CP\")) {\n            if ((0, cp_1.cp)(left, row.get()[\"low\"])) {\n                return true;\n            }\n        }\n        else {\n            console.dir(row);\n            throw new Error(\"compareIn todo\");\n        }\n    }\n    return false;\n}\nexports.compareIn = compareIn;\n//# sourceMappingURL=in.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/in.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"in\"] = void 0;\n__exportStar(__webpack_require__(/*! ./assigned */ \"./node_modules/@abaplint/runtime/build/src/compare/assigned.js\"), exports);\n__exportStar(__webpack_require__(/*! ./between */ \"./node_modules/@abaplint/runtime/build/src/compare/between.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ca */ \"./node_modules/@abaplint/runtime/build/src/compare/ca.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cn */ \"./node_modules/@abaplint/runtime/build/src/compare/cn.js\"), exports);\n__exportStar(__webpack_require__(/*! ./co */ \"./node_modules/@abaplint/runtime/build/src/compare/co.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cp */ \"./node_modules/@abaplint/runtime/build/src/compare/cp.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cs */ \"./node_modules/@abaplint/runtime/build/src/compare/cs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./eq */ \"./node_modules/@abaplint/runtime/build/src/compare/eq.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ge */ \"./node_modules/@abaplint/runtime/build/src/compare/ge.js\"), exports);\n__exportStar(__webpack_require__(/*! ./gt */ \"./node_modules/@abaplint/runtime/build/src/compare/gt.js\"), exports);\n__exportStar(__webpack_require__(/*! ./initial */ \"./node_modules/@abaplint/runtime/build/src/compare/initial.js\"), exports);\n__exportStar(__webpack_require__(/*! ./instance_of */ \"./node_modules/@abaplint/runtime/build/src/compare/instance_of.js\"), exports);\n__exportStar(__webpack_require__(/*! ./le */ \"./node_modules/@abaplint/runtime/build/src/compare/le.js\"), exports);\n__exportStar(__webpack_require__(/*! ./lt */ \"./node_modules/@abaplint/runtime/build/src/compare/lt.js\"), exports);\n__exportStar(__webpack_require__(/*! ./m */ \"./node_modules/@abaplint/runtime/build/src/compare/m.js\"), exports);\n__exportStar(__webpack_require__(/*! ./na */ \"./node_modules/@abaplint/runtime/build/src/compare/na.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ne */ \"./node_modules/@abaplint/runtime/build/src/compare/ne.js\"), exports);\n__exportStar(__webpack_require__(/*! ./np */ \"./node_modules/@abaplint/runtime/build/src/compare/np.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ns */ \"./node_modules/@abaplint/runtime/build/src/compare/ns.js\"), exports);\n__exportStar(__webpack_require__(/*! ./o */ \"./node_modules/@abaplint/runtime/build/src/compare/o.js\"), exports);\n__exportStar(__webpack_require__(/*! ./z */ \"./node_modules/@abaplint/runtime/build/src/compare/z.js\"), exports);\nvar in_1 = __webpack_require__(/*! ./in */ \"./node_modules/@abaplint/runtime/build/src/compare/in.js\");\nObject.defineProperty(exports, \"in\", ({ enumerable: true, get: function () { return in_1.compareIn; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/initial.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/initial.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initial = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction initial(val) {\n    // todo, refactor? add as method in each type instead?\n    if (val instanceof types_1.Table || val instanceof types_1.HashedTable) {\n        return val.array().length === 0;\n    }\n    else if (val instanceof types_1.DataReference) {\n        return val.getPointer() === undefined;\n    }\n    else if (val instanceof types_1.Date) {\n        return val.get() === \"00000000\";\n    }\n    else if (val instanceof types_1.Numc) {\n        return val.get().match(/^0+$/) !== null;\n    }\n    else if (val instanceof types_1.Hex) {\n        return val.get().match(/^0+$/) !== null;\n    }\n    else if (val instanceof types_1.Time) {\n        return val.get() === \"000000\";\n    }\n    else if (val instanceof types_1.Character) {\n        return val.get().match(/^ *$/) !== null;\n    }\n    else if (val instanceof types_1.FieldSymbol && val.getPointer() === undefined) {\n        throw \"FS not assigned\";\n    }\n    else if (val instanceof types_1.FieldSymbol) {\n        const res = initial(val.getPointer());\n        return res;\n    }\n    if (typeof val === \"string\") {\n        return val === \"\";\n    }\n    else if (typeof val === \"number\") {\n        return val === 0;\n    }\n    const value = val.get();\n    if (typeof value === \"string\") {\n        return value === \"\";\n    }\n    else if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (val instanceof types_1.ABAPObject) {\n        return value === undefined;\n    }\n    else if (typeof value === \"object\") {\n        for (const f of Object.keys(value)) {\n            if (initial(value[f]) === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        throw new Error(\"runtime, initial, missing implementation\");\n    }\n}\nexports.initial = initial;\n//# sourceMappingURL=initial.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/initial.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/instance_of.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/instance_of.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.instance_of = void 0;\nfunction instance_of(val, cname) {\n    return val.get() instanceof cname;\n}\nexports.instance_of = instance_of;\n//# sourceMappingURL=instance_of.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/instance_of.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/le.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/le.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.le = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nfunction le(left, right) {\n    return (0, _1.lt)(left, right) || (0, _1.eq)(left, right);\n}\nexports.le = le;\n//# sourceMappingURL=le.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/le.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/lt.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/lt.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lt = void 0;\nconst gt_1 = __webpack_require__(/*! ./gt */ \"./node_modules/@abaplint/runtime/build/src/compare/gt.js\");\nfunction lt(left, right) {\n    return (0, gt_1.gt)(right, left);\n}\nexports.lt = lt;\n//# sourceMappingURL=lt.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/lt.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/m.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/m.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.m = exports.hexToBinary = void 0;\nfunction hexToBinary(input) {\n    let ret = \"\";\n    const hex = input.get();\n    for (let index = 0; index < hex.length / 2; index++) {\n        const byte = hex.substring(index * 2, index * 2 + 2);\n        ret += parseInt(byte, 16).toString(2).padStart(8, \"0\");\n    }\n    return ret;\n}\nexports.hexToBinary = hexToBinary;\n// bitwise compare\nfunction m(operand1, operand2) {\n    let operand1Bits = hexToBinary(operand1);\n    const operand2Bits = hexToBinary(operand2);\n    if (operand1Bits.length < operand2Bits.length) {\n        operand1Bits = operand1Bits.padEnd(operand2Bits.length, \"0\");\n    }\n    let oneFound = false;\n    let zeroFound = false;\n    for (let index = 0; index < operand2Bits.length; index++) {\n        const o1bit = operand1Bits.substring(index, index + 1);\n        const o2bit = operand2Bits.substring(index, index + 1);\n        if (o2bit === \"1\") {\n            if (o1bit === \"1\") {\n                oneFound = true;\n            }\n            else {\n                zeroFound = true;\n            }\n        }\n    }\n    return oneFound && zeroFound;\n}\nexports.m = m;\n//# sourceMappingURL=m.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/m.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/na.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/na.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.na = void 0;\nconst ca_1 = __webpack_require__(/*! ./ca */ \"./node_modules/@abaplint/runtime/build/src/compare/ca.js\");\nfunction na(left, right) {\n    return !(0, ca_1.ca)(left, right);\n}\nexports.na = na;\n//# sourceMappingURL=na.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/na.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/ne.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/ne.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ne = void 0;\nconst eq_1 = __webpack_require__(/*! ./eq */ \"./node_modules/@abaplint/runtime/build/src/compare/eq.js\");\nfunction ne(left, right) {\n    return !(0, eq_1.eq)(left, right);\n}\nexports.ne = ne;\n//# sourceMappingURL=ne.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/ne.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/np.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/np.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.np = void 0;\nconst cp_1 = __webpack_require__(/*! ./cp */ \"./node_modules/@abaplint/runtime/build/src/compare/cp.js\");\nfunction np(left, right) {\n    return !(0, cp_1.cp)(left, right);\n}\nexports.np = np;\n//# sourceMappingURL=np.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/np.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/ns.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/ns.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ns = void 0;\nconst cs_1 = __webpack_require__(/*! ./cs */ \"./node_modules/@abaplint/runtime/build/src/compare/cs.js\");\nfunction ns(left, right) {\n    return !(0, cs_1.cs)(left, right);\n}\nexports.ns = ns;\n//# sourceMappingURL=ns.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/ns.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/o.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/o.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.o = void 0;\nconst m_1 = __webpack_require__(/*! ./m */ \"./node_modules/@abaplint/runtime/build/src/compare/m.js\");\n// bitwise compare\nfunction o(operand1, operand2) {\n    let operand1Bits = (0, m_1.hexToBinary)(operand1);\n    const operand2Bits = (0, m_1.hexToBinary)(operand2);\n    if (operand1Bits.length < operand2Bits.length) {\n        operand1Bits = operand1Bits.padEnd(operand2Bits.length, \"0\");\n    }\n    //  let oneFound = false;\n    let zeroFound = false;\n    for (let index = 0; index < operand2Bits.length; index++) {\n        const o1bit = operand1Bits.substring(index, index + 1);\n        const o2bit = operand2Bits.substring(index, index + 1);\n        if (o2bit === \"1\") {\n            if (o1bit === \"1\") {\n                //        oneFound = true;\n            }\n            else {\n                zeroFound = true;\n            }\n        }\n    }\n    return zeroFound === false;\n}\nexports.o = o;\n//# sourceMappingURL=o.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/o.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/compare/z.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/compare/z.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.z = void 0;\nconst m_1 = __webpack_require__(/*! ./m */ \"./node_modules/@abaplint/runtime/build/src/compare/m.js\");\n// bitwise compare\nfunction z(operand1, operand2) {\n    let operand1Bits = (0, m_1.hexToBinary)(operand1);\n    const operand2Bits = (0, m_1.hexToBinary)(operand2);\n    if (operand1Bits.length < operand2Bits.length) {\n        operand1Bits = operand1Bits.padEnd(operand2Bits.length, \"0\");\n    }\n    let oneFound = false;\n    //  let zeroFound = false;\n    for (let index = 0; index < operand2Bits.length; index++) {\n        const o1bit = operand1Bits.substring(index, index + 1);\n        const o2bit = operand2Bits.substring(index, index + 1);\n        if (o2bit === \"1\") {\n            if (o1bit === \"1\") {\n                oneFound = true;\n            }\n            else {\n                //        zeroFound = true;\n            }\n        }\n    }\n    return oneFound === false;\n}\nexports.z = z;\n//# sourceMappingURL=z.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/compare/z.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/console.js":
/*!*************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/console.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Console = void 0;\nclass Console {\n    constructor() {\n        this.data = \"\";\n    }\n    clear() {\n        this.data = \"\";\n    }\n    add(data) {\n        this.data = this.data + data;\n    }\n    get() {\n        return this.data;\n    }\n    getTrimmed() {\n        return this.data.split(\"\\n\").map(a => a.trimEnd()).join(\"\\n\");\n    }\n}\nexports.Console = Console;\n//# sourceMappingURL=console.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/console.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/context.js":
/*!*************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/context.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Context = void 0;\nclass Context {\n    constructor() {\n        // DEFAULT and secondary database connections\n        this.databaseConnections = {};\n        this.RFCDestinations = {};\n    }\n    defaultDB() {\n        if (this.databaseConnections[\"DEFAULT\"] === undefined) {\n            throw new Error(\"Runtime, database not initialized\");\n        }\n        return this.databaseConnections[\"DEFAULT\"];\n    }\n}\nexports.Context = Context;\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/context.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/db/db.js":
/*!***********************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/db/db.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=db.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/db/db.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/expand_dynamic.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/expand_dynamic.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.expandDynamic = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction expandDynamic(code, ev) {\n    if (code === \"\") {\n        return \"1 = 1\";\n    }\n    else {\n        // todo more here, this is just one simple case,\n        const match = code.match(/ <(\\w+)>/);\n        if (match && match[1]) {\n            const name = \"fs_\" + match[1] + \"_\";\n            const found = ev(name);\n            if (found instanceof types_1.FieldSymbol) {\n                code = code.replace(/ <(\\w+)>/, \"'\" + found.get() + \"'\");\n            }\n        }\n        return code;\n    }\n}\nexports.expandDynamic = expandDynamic;\n//# sourceMappingURL=expand_dynamic.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/expand_dynamic.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/expand_in.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/expand_in.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.expandIN = void 0;\n// note: must always return an expression, never return empty string\nfunction expandIN(fieldName, table) {\n    var _a, _b, _c;\n    let ret = \"\";\n    if (table.array().length === 0) {\n        ret = fieldName + \" NOT IN ()\";\n    }\n    else {\n        ret = fieldName + \" IN (\";\n        const values = [];\n        for (const row of table.array()) {\n            if (((_a = row.get().sign) === null || _a === void 0 ? void 0 : _a.get()) !== \"I\" || ((_b = row.get().option) === null || _b === void 0 ? void 0 : _b.get()) !== \"EQ\") {\n                throw \"Error: IN, only I EQ supported for now\";\n            }\n            values.push(\"'\" + ((_c = row.get().low) === null || _c === void 0 ? void 0 : _c.get().replace(/'/g, \"''\")) + \"'\");\n        }\n        ret += values.join(\",\") + \")\";\n    }\n    return ret;\n}\nexports.expandIN = expandIN;\n//# sourceMappingURL=expand_in.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/expand_in.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABAP = exports.DB = exports.types = exports.RFC = exports.UnitTestResult = void 0;\nconst console_1 = __webpack_require__(/*! ./console */ \"./node_modules/@abaplint/runtime/build/src/console.js\");\nconst context_1 = __webpack_require__(/*! ./context */ \"./node_modules/@abaplint/runtime/build/src/context.js\");\nconst offset_length_1 = __webpack_require__(/*! ./offset_length */ \"./node_modules/@abaplint/runtime/build/src/offset_length.js\");\nconst statements_1 = __webpack_require__(/*! ./statements */ \"./node_modules/@abaplint/runtime/build/src/statements/index.js\");\nconst template_formatting_1 = __webpack_require__(/*! ./template_formatting */ \"./node_modules/@abaplint/runtime/build/src/template_formatting.js\");\nconst unit_test_1 = __webpack_require__(/*! ./unit_test */ \"./node_modules/@abaplint/runtime/build/src/unit_test.js\");\nObject.defineProperty(exports, \"UnitTestResult\", ({ enumerable: true, get: function () { return unit_test_1.UnitTestResult; } }));\nconst builtin = __webpack_require__(/*! ./builtin */ \"./node_modules/@abaplint/runtime/build/src/builtin/index.js\");\nconst compare = __webpack_require__(/*! ./compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst DB = __webpack_require__(/*! ./db/db */ \"./node_modules/@abaplint/runtime/build/src/db/db.js\");\nexports.DB = DB;\nconst operators = __webpack_require__(/*! ./operators */ \"./node_modules/@abaplint/runtime/build/src/operators/index.js\");\nconst RFC = __webpack_require__(/*! ./rfc */ \"./node_modules/@abaplint/runtime/build/src/rfc.js\");\nexports.RFC = RFC;\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nexports.types = types;\nconst expand_in_1 = __webpack_require__(/*! ./expand_in */ \"./node_modules/@abaplint/runtime/build/src/expand_in.js\");\nconst expand_dynamic_1 = __webpack_require__(/*! ./expand_dynamic */ \"./node_modules/@abaplint/runtime/build/src/expand_dynamic.js\");\nconst classic_error_1 = __webpack_require__(/*! ./classic_error */ \"./node_modules/@abaplint/runtime/build/src/classic_error.js\");\nclass ABAP {\n    constructor() {\n        // global objects\n        this.FunctionModules = {};\n        this.Classes = {};\n        this.Interfaces = {};\n        this.DDIC = {};\n        this.TypePools = {};\n        this.SMIM = {};\n        this.W3MI = {};\n        this.types = types;\n        this.builtin = builtin;\n        this.operators = operators;\n        this.compare = compare;\n        this.OffsetLength = offset_length_1.OffsetLength;\n        this.templateFormatting = template_formatting_1.templateFormatting;\n        this.expandIN = expand_in_1.expandIN;\n        this.expandDynamic = expand_dynamic_1.expandDynamic;\n        this.ClassicError = classic_error_1.ClassicError;\n        this.context = new context_1.Context();\n        this.console = new console_1.Console();\n        this.context.console = this.console;\n        this.statements = new statements_1.Statements(this.context);\n        // todo, this should not be a singleton, it should be part of this instance\n        // todo, move to context\n        builtin.sy.get().subrc.set(0);\n        builtin.sy.get().tabix.set(0);\n        builtin.sy.get().index.set(0);\n        this.statements.getTime({ sy: builtin.sy });\n    }\n}\nexports.ABAP = ABAP;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/offset_length.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/offset_length.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OffsetLength = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nclass OffsetLength {\n    constructor(obj, options) {\n        this.obj = obj;\n        this.isHex = obj instanceof types_1.Hex || obj instanceof types_1.XString;\n        if (options.offset) {\n            if (typeof options.offset === \"number\") {\n                this.offset = options.offset;\n            }\n            else {\n                this.offset = options.offset.get();\n            }\n            if (this.isHex) {\n                this.offset *= 2;\n            }\n        }\n        if (options.length) {\n            if (typeof options.length === \"number\") {\n                this.length = options.length;\n            }\n            else {\n                this.length = options.length.get();\n            }\n            if (this.isHex) {\n                this.length *= 2;\n            }\n        }\n    }\n    get() {\n        return this.obj.getOffset({ offset: this.offset, length: this.length }).get();\n    }\n    set(value) {\n        let val = \"\";\n        if (typeof value === \"string\") {\n            val = value;\n        }\n        else if (typeof value === \"number\") {\n            val = value + \"\";\n        }\n        else if (value instanceof types_1.Integer) {\n            val = value.get() + \"\";\n            if (this.isHex) {\n                val = Number(val).toString(16);\n            }\n        }\n        else {\n            val = value.get() + \"\";\n        }\n        let old = this.obj instanceof types_1.Structure ? this.obj.getCharacter() : this.obj.get();\n        if (this.obj instanceof types_1.Character) {\n            old = old.padEnd(this.obj.getLength(), \" \");\n        }\n        if (this.length) {\n            val = val.substr(0, this.length);\n            if (this.isHex || this.obj instanceof types_1.Time) {\n                val = val.padStart(this.length, \"0\");\n            }\n            else if (val.length < this.length) {\n                val = val.padEnd(this.length, \" \");\n            }\n        }\n        if (this.length && this.offset) {\n            old = old.substr(0, this.offset) + val + old.substr(this.offset + this.length);\n        }\n        else if (this.length) {\n            old = val + old.substr(this.length);\n        }\n        else if (this.offset) {\n            old = old.substr(0, this.offset) + val;\n        }\n        old = old.trimEnd();\n        if (this.obj instanceof types_1.Character) {\n            old = old.padEnd(this.obj.getLength(), \" \");\n        }\n        this.obj.set(old);\n    }\n}\nexports.OffsetLength = OffsetLength;\n//# sourceMappingURL=offset_length.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/offset_length.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.get_bit_operation_chunks = void 0;\nfunction get_bit_operation_chunks(left, right) {\n    const ret = [];\n    let leftFull = left.get();\n    const leftLen = leftFull.length;\n    leftFull = leftFull.padEnd(Math.ceil(leftLen / 2) * 2, \"0\");\n    let rightFull = right.get();\n    const rightLen = rightFull.length;\n    rightFull = rightFull.padEnd(Math.ceil(rightLen / 2) * 2, \"0\");\n    const maxLen = leftFull.length > rightFull.length ? leftFull.length : rightFull.length;\n    // Using 3-byte chunkgs (6 hex positions) to avoid JavaScript negative values for extreme cases\n    const chunks = maxLen / 6;\n    for (let pass = chunks; pass > 0; pass--) {\n        const chunkStart = maxLen - pass * 6;\n        const chunkEnd = maxLen - (pass - 1) * 6;\n        let leftSlice = leftFull.slice(chunkStart, chunkEnd);\n        let rightSlice = rightFull.slice(chunkStart, chunkEnd);\n        const chunkLen = leftSlice.length > rightSlice.length ? leftSlice.length : rightSlice.length;\n        leftSlice = leftSlice.padEnd(chunkLen, \"0\");\n        rightSlice = rightSlice.padEnd(chunkLen, \"0\");\n        const leftChunk = parseInt(leftSlice, 16);\n        const rightChunk = parseInt(rightSlice, 16);\n        ret.push({ leftChunk: leftChunk, rightChunk: rightChunk, chunkLen: chunkLen });\n    }\n    return ret;\n}\nexports.get_bit_operation_chunks = get_bit_operation_chunks;\n//# sourceMappingURL=_bit_operations.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/_parse.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/_parse.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parse = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst xstring_1 = __webpack_require__(/*! ../types/xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\");\nfunction parse(val) {\n    if (typeof val === \"number\") {\n        return val;\n    }\n    else if (typeof val === \"string\") {\n        if (val.includes(\".\")) {\n            return parseFloat(val);\n        }\n        else {\n            return parseInt(val, 10);\n        }\n    }\n    else if (val instanceof types_1.Float) {\n        return val.getRaw();\n    }\n    else if (val instanceof xstring_1.XString || val instanceof types_1.Hex) {\n        if (val.get() === \"\") {\n            return 0;\n        }\n        let num = parseInt(val.get(), 16);\n        // handle two complement,\n        if (val instanceof types_1.Hex && val.getLength() >= 4) {\n            const maxVal = Math.pow(2, val.get().length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal;\n            }\n        }\n        return num;\n    }\n    else if (val instanceof types_1.Time || val instanceof types_1.Date) {\n        return val.getNumeric();\n    }\n    else if (val instanceof types_1.DecFloat34) {\n        return val.getRaw();\n    }\n    else {\n        return parse(val.get());\n    }\n}\nexports.parse = parse;\n//# sourceMappingURL=_parse.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/_parse.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/add.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/add.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.add = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nfunction add(left, right) {\n    if (left instanceof types_1.FieldSymbol) {\n        if (left.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return add(left.getPointer(), right);\n    }\n    if (right instanceof types_1.FieldSymbol) {\n        if (right.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return add(left, right.getPointer());\n    }\n    if (left instanceof types_1.Integer && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() + right.get());\n    }\n    else if (typeof left === \"number\" && typeof right === \"number\"\n        && Number.isInteger(left) && Number.isInteger(right)) {\n        return new types_1.Integer().set(left + right);\n    }\n    else if (typeof left === \"number\" && Number.isInteger(left) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left + right.get());\n    }\n    else if (typeof right === \"number\" && Number.isInteger(right) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() + right);\n    }\n    else if ((left instanceof string_1.String || left instanceof types_1.Character) && Number.isInteger(Number(left.get())) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(Number.parseInt(left.get(), 10) + right.get());\n    }\n    else if ((right instanceof string_1.String || right instanceof types_1.Character) && Number.isInteger(Number(right)) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() + Number.parseInt(right.get(), 10));\n    }\n    const ret = new types_1.Float().set((0, _parse_1.parse)(left) + (0, _parse_1.parse)(right));\n    return ret;\n}\nexports.add = add;\n//# sourceMappingURL=add.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/add.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/bit-and.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/bit-and.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bitand = void 0;\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"&\"] }] */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _bit_operations_1 = __webpack_require__(/*! ./_bit_operations */ \"./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js\");\nfunction bitand(left, right) {\n    let and = \"\";\n    const chunks = (0, _bit_operations_1.get_bit_operation_chunks)(left, right);\n    // eslint-disable-next-line no-cond-assign\n    for (let i = 0, chunk; chunk = chunks[i]; i++) {\n        and = and + (chunk.leftChunk & chunk.rightChunk).toString(16).toUpperCase().padStart(chunk.chunkLen, \"0\");\n    }\n    const ret = new types_1.XString();\n    ret.set(and);\n    return ret;\n}\nexports.bitand = bitand;\n//# sourceMappingURL=bit-and.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/bit-and.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/bit-not.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/bit-not.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bitnot = void 0;\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"~\"] }] */\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction bitnot(right) {\n    const right16 = parseInt(right.get(), 16);\n    const not = ~right16;\n    const ret = new types_1.Hex({ length: right.get().length / 2 });\n    ret.set(not);\n    return ret;\n}\nexports.bitnot = bitnot;\n//# sourceMappingURL=bit-not.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/bit-not.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/bit-or.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/bit-or.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bitor = void 0;\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"|\"] }] */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _bit_operations_1 = __webpack_require__(/*! ./_bit_operations */ \"./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js\");\nfunction bitor(left, right) {\n    let or = \"\";\n    const chunks = (0, _bit_operations_1.get_bit_operation_chunks)(left, right);\n    // eslint-disable-next-line no-cond-assign\n    for (let i = 0, chunk; chunk = chunks[i]; i++) {\n        or = or + (chunk.leftChunk | chunk.rightChunk).toString(16).toUpperCase().padStart(chunk.chunkLen, \"0\");\n    }\n    const ret = new types_1.XString();\n    ret.set(or);\n    return ret;\n}\nexports.bitor = bitor;\n//# sourceMappingURL=bit-or.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/bit-or.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/bit-xor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/bit-xor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bitxor = void 0;\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"^\"] }] */\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _bit_operations_1 = __webpack_require__(/*! ./_bit_operations */ \"./node_modules/@abaplint/runtime/build/src/operators/_bit_operations.js\");\nfunction bitxor(left, right) {\n    let xor = \"\";\n    const chunks = (0, _bit_operations_1.get_bit_operation_chunks)(left, right);\n    // eslint-disable-next-line no-cond-assign\n    for (let i = 0, chunk; chunk = chunks[i]; i++) {\n        xor = xor + (chunk.leftChunk ^ chunk.rightChunk).toString(16).toUpperCase().padStart(chunk.chunkLen, \"0\");\n    }\n    const ret = new types_1.XString();\n    ret.set(xor);\n    return ret;\n}\nexports.bitxor = bitxor;\n//# sourceMappingURL=bit-xor.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/bit-xor.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/concat.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/concat.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.concat = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction concat(left, right) {\n    if (Array.isArray(left)) {\n        // used in ampersand concatenation\n        let res = concat(left[0], left[1]);\n        for (let i = 2; i < left.length; i++) {\n            res = concat(res, left[i]);\n        }\n        return res;\n    }\n    let val = \"\";\n    if (typeof left === \"string\" || typeof left === \"number\") {\n        val += left;\n    }\n    else if (left instanceof types_1.Character) {\n        val += left.getTrimEnd();\n    }\n    else {\n        val += left.get();\n    }\n    if (typeof right === \"string\" || typeof right === \"number\") {\n        val += right;\n    }\n    else if (right instanceof types_1.Character) {\n        val += right.getTrimEnd();\n    }\n    else {\n        val += right.get();\n    }\n    return new types_1.String().set(val);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/concat.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/div.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/div.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.div = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nfunction div(left, right) {\n    const l = (0, _parse_1.parse)(left);\n    const r = (0, _parse_1.parse)(right);\n    const ret = new types_1.Integer().set(Math.floor(l / r));\n    return ret;\n}\nexports.div = div;\n//# sourceMappingURL=div.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/div.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/divide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/divide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.divide = void 0;\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\n// todo, this will only work when the target value is an integer?\nfunction divide(left, right) {\n    const r = (0, _parse_1.parse)(right);\n    if (r === 0) {\n        (0, throw_error_1.throwError)(\"CX_SY_ZERODIVIDE\");\n    }\n    const val = (0, _parse_1.parse)(left) / r;\n    return new types_1.Float().set(val);\n}\nexports.divide = divide;\n//# sourceMappingURL=divide.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/divide.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./add */ \"./node_modules/@abaplint/runtime/build/src/operators/add.js\"), exports);\n__exportStar(__webpack_require__(/*! ./div */ \"./node_modules/@abaplint/runtime/build/src/operators/div.js\"), exports);\n__exportStar(__webpack_require__(/*! ./divide */ \"./node_modules/@abaplint/runtime/build/src/operators/divide.js\"), exports);\n__exportStar(__webpack_require__(/*! ./minus */ \"./node_modules/@abaplint/runtime/build/src/operators/minus.js\"), exports);\n__exportStar(__webpack_require__(/*! ./mod */ \"./node_modules/@abaplint/runtime/build/src/operators/mod.js\"), exports);\n__exportStar(__webpack_require__(/*! ./multiply */ \"./node_modules/@abaplint/runtime/build/src/operators/multiply.js\"), exports);\n__exportStar(__webpack_require__(/*! ./power */ \"./node_modules/@abaplint/runtime/build/src/operators/power.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bit-and */ \"./node_modules/@abaplint/runtime/build/src/operators/bit-and.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bit-not */ \"./node_modules/@abaplint/runtime/build/src/operators/bit-not.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bit-or */ \"./node_modules/@abaplint/runtime/build/src/operators/bit-or.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bit-xor */ \"./node_modules/@abaplint/runtime/build/src/operators/bit-xor.js\"), exports);\n__exportStar(__webpack_require__(/*! ./concat */ \"./node_modules/@abaplint/runtime/build/src/operators/concat.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/minus.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/minus.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.minus = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction minus(left, right) {\n    if (left instanceof types_1.FieldSymbol) {\n        if (left.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return minus(left.getPointer(), right);\n    }\n    if (right instanceof types_1.FieldSymbol) {\n        if (right.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return minus(left, right.getPointer());\n    }\n    if (left instanceof types_1.Integer && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() - right.get());\n    }\n    else if (typeof left === \"number\" && typeof right === \"number\"\n        && Number.isInteger(left) && Number.isInteger(right)) {\n        return new types_1.Integer().set(left - right);\n    }\n    else if (typeof left === \"number\" && Number.isInteger(left) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left - right.get());\n    }\n    else if (typeof right === \"number\" && Number.isInteger(right) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() - right);\n    }\n    else if ((left instanceof string_1.String || left instanceof types_1.Character) && Number.isInteger(Number(left.get())) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(Number.parseInt(left.get(), 10) - right.get());\n    }\n    else if ((right instanceof string_1.String || right instanceof types_1.Character) && Number.isInteger(Number(right)) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() - Number.parseInt(right.get(), 10));\n    }\n    return new types_1.Float().set((0, _parse_1.parse)(left) - (0, _parse_1.parse)(right));\n}\nexports.minus = minus;\n//# sourceMappingURL=minus.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/minus.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/mod.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/mod.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mod = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nfunction mod(left, right) {\n    const l = (0, _parse_1.parse)(left);\n    const r = (0, _parse_1.parse)(right);\n    const ret = new types_1.Integer().set(((l % r) + r) % r);\n    return ret;\n}\nexports.mod = mod;\n//# sourceMappingURL=mod.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/mod.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/multiply.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/multiply.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.multiply = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst string_1 = __webpack_require__(/*! ../types/string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nfunction multiply(left, right) {\n    if (left instanceof types_1.Integer && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() * right.get());\n    }\n    else if (typeof left === \"number\" && typeof right === \"number\"\n        && Number.isInteger(left) && Number.isInteger(right)) {\n        return new types_1.Integer().set(left * right);\n    }\n    else if (typeof left === \"number\" && Number.isInteger(left) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(left * right.get());\n    }\n    else if (typeof right === \"number\" && Number.isInteger(right) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() * right);\n    }\n    else if ((left instanceof string_1.String || left instanceof types_1.Character) && Number.isInteger(Number(left.get())) && right instanceof types_1.Integer) {\n        return new types_1.Integer().set(Number.parseInt(left.get(), 10) * right.get());\n    }\n    else if ((right instanceof string_1.String || right instanceof types_1.Character) && Number.isInteger(Number(right)) && left instanceof types_1.Integer) {\n        return new types_1.Integer().set(left.get() * Number.parseInt(right.get(), 10));\n    }\n    return new types_1.Float().set((0, _parse_1.parse)(left) * (0, _parse_1.parse)(right));\n}\nexports.multiply = multiply;\n//# sourceMappingURL=multiply.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/multiply.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/operators/power.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/operators/power.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.power = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ./_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nfunction power(left, right) {\n    return new types_1.Float().set(Math.pow((0, _parse_1.parse)(left), (0, _parse_1.parse)(right)));\n}\nexports.power = power;\n//# sourceMappingURL=power.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/operators/power.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/rfc.js":
/*!*********************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/rfc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=rfc.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/rfc.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/append.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/append.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.append = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction append(input) {\n    if (input.target instanceof types_1.FieldSymbol) {\n        input.target = input.target.getPointer();\n        if (input.target === undefined) {\n            throw \"Field symbol not assigned\";\n        }\n    }\n    if (input.source instanceof types_1.FieldSymbol) {\n        input.source = input.source.getPointer();\n    }\n    if (input.target === undefined) {\n        // short APPEND, use header field\n        if (!(input.source instanceof types_1.Table)) {\n            throw \"APPEND, header, table\";\n        }\n        input.source.append(input.source.getHeader());\n        // @ts-ignore\n        abap.builtin.sy.get().tabix.set(input.source.array().length);\n        return;\n    }\n    else if (input.lines === true && input.source instanceof types_1.Table) {\n        let from = 1;\n        if (input.from) {\n            from = parseInt(input.from.get() + \"\", 10);\n        }\n        let to = input.source.array().length;\n        if (input.to) {\n            to = parseInt(input.to.get() + \"\", 10);\n        }\n        let index = 1;\n        for (const a of input.source.array()) {\n            if (index < from || index > to) {\n                index++;\n                continue;\n            }\n            input.target.append(a);\n            index++;\n        }\n    }\n    else {\n        const val = input.target.append(input.source);\n        if (input.assigning) {\n            if (val instanceof types_1.FieldSymbol) {\n                input.assigning.assign(val.getPointer());\n            }\n            else {\n                input.assigning.assign(val);\n            }\n        }\n        else if (input.referenceInto) {\n            if (val instanceof types_1.FieldSymbol) {\n                input.referenceInto.assign(val.getPointer());\n            }\n            else {\n                input.referenceInto.assign(val);\n            }\n        }\n    }\n    // @ts-ignore\n    abap.builtin.sy.get().tabix.set(input.target.array().length);\n}\nexports.append = append;\n//# sourceMappingURL=append.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/append.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/assert.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/assert.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assert = void 0;\nfunction assert(input) {\n    if (input === false) {\n        throw new Error(\"ASSERT failed\");\n    }\n}\nexports.assert = assert;\n//# sourceMappingURL=assert.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/assert.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/assign.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/assign.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assign = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction assign(input) {\n    var _a;\n    //  console.dir(input);\n    if (input.dynamicName) {\n        if (input.dynamicSource instanceof types_1.FieldSymbol) {\n            input.dynamicSource = input.dynamicSource.getPointer();\n        }\n        if (input.dynamicName.includes(\"->\")) {\n            if (input.dynamicSource instanceof types_1.ABAPObject) {\n                const split = input.dynamicName.split(\"->\");\n                // @ts-ignore\n                input.dynamicSource = input.dynamicSource.get()[split[1].toLowerCase()];\n            }\n            else if (input.dynamicSource instanceof types_1.DataReference) {\n                const [_before, after] = input.dynamicName.split(\"->\");\n                // @ts-ignore\n                input.dynamicSource = input.dynamicSource.get()[after.toLowerCase()];\n            }\n            else {\n                // @ts-ignore\n                abap.builtin.sy.get().subrc.set(4);\n                return;\n            }\n        }\n        else if (input.dynamicName.includes(\"=>\")) {\n            const split = input.dynamicName.split(\"=>\");\n            // @ts-ignore\n            const clas = abap.Classes[split[0].toUpperCase()];\n            if (clas === undefined) {\n                // @ts-ignore\n                abap.builtin.sy.get().subrc.set(4);\n                return;\n            }\n            if (clas[split[1].toLowerCase()] !== undefined) {\n                input.target.assign(clas[split[1].toLowerCase()]);\n                // @ts-ignore\n                abap.builtin.sy.get().subrc.set(0);\n                return;\n            }\n            else if (clas[split[0].toLowerCase() + \"$\" + split[1].toLowerCase()] !== undefined) {\n                input.target.assign(clas[split[0].toLowerCase() + \"$\" + split[1].toLowerCase()]);\n                // @ts-ignore\n                abap.builtin.sy.get().subrc.set(0);\n                return;\n            }\n        }\n        if (input.dynamicSource) {\n            input.target.assign(input.dynamicSource);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n        }\n        else {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n        }\n    }\n    else if (input.component) {\n        if (input.source instanceof types_1.FieldSymbol || input.source instanceof types_1.DataReference) {\n            input.source = input.source.getPointer();\n            assign(input);\n            return;\n        }\n        else if (!(input.source instanceof types_1.Structure)\n            && !(input.source instanceof types_1.Table)) {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n            return;\n        }\n        let component = input.component;\n        if (typeof component !== \"string\") {\n            component = component.get();\n        }\n        if (input.source instanceof types_1.Table) {\n            if (((_a = input.source.getOptions()) === null || _a === void 0 ? void 0 : _a.withHeader) === true) {\n                input.source = input.source.getHeader();\n            }\n            else {\n                // result is the table itself, no change of input.source\n            }\n        }\n        let result = undefined;\n        if (typeof component === \"number\") {\n            if (component === 0) {\n                result = input.source;\n            }\n            else if (input.source instanceof types_1.Structure) {\n                const structure_as_object = input.source.get();\n                const keys = Object.keys(structure_as_object);\n                const component_name = keys[component - 1];\n                result = structure_as_object[component_name];\n            }\n        }\n        else if (!(input.source instanceof types_1.Table)) {\n            result = input.source.get()[component.toLowerCase().trimEnd()];\n        }\n        if (result === undefined) {\n            // not a field in the structure\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n        }\n        else {\n            input.target.assign(result);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n        }\n    }\n    else {\n        //    console.dir(input);\n        if (input.source instanceof types_1.FieldSymbol) {\n            const pnt = input.source.getPointer();\n            if (pnt === undefined) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            input.target.assign(pnt);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n        }\n        else if (input.source === undefined) {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n        }\n        else {\n            if (input.casting) {\n                input.target.setCasting();\n            }\n            input.target.assign(input.source);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n        }\n    }\n}\nexports.assign = assign;\n//# sourceMappingURL=assign.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/assign.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/call_function.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/call_function.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallFunction = void 0;\nclass CallFunction {\n    constructor(context) {\n        this.context = context;\n    }\n    // note: this is only called if DESTINIATION is supplied\n    async callFunction(options) {\n        if (options.destination.trim() === \"\") {\n            const param = {\n                exporting: options.exporting,\n                importing: options.importing,\n                tables: options.tables,\n                changing: options.changing,\n                exceptions: options.exceptions,\n            };\n            // @ts-ignore\n            await abap.FunctionModules[options.name](param);\n            return;\n        }\n        const dest = this.context.RFCDestinations[options.destination];\n        if (dest === undefined) {\n            throw new Error(`RFC destination ${options.destination} does not exist`);\n        }\n        await dest.call(options.name, {\n            exporting: options.exporting,\n            importing: options.importing,\n            tables: options.tables,\n            changing: options.changing,\n            exceptions: options.exceptions,\n        });\n    }\n}\nexports.CallFunction = CallFunction;\n//# sourceMappingURL=call_function.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/call_function.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/cast.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/cast.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cast = void 0;\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\n// todo, field symbols as input?\n// todo, local classes?\n// check with javascript instanceof?\n// handling interfaces?\nasync function cast(target, source) {\n    var _a;\n    if ((0, compare_1.initial)(source)) {\n        target.clear();\n        return;\n    }\n    // eslint-disable-next-line prefer-const\n    let checkIntf = true;\n    if (source instanceof types_1.FieldSymbol) {\n        if (source.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        await cast(target, source.getPointer());\n        return;\n    }\n    else if (target instanceof types_1.FieldSymbol && target.getPointer() === undefined) {\n        throw new Error(\"GETWA_NOT_ASSIGNED\");\n    }\n    let targetName = undefined;\n    if (target.getQualifiedName) {\n        targetName = (_a = target.getQualifiedName()) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n    }\n    // @ts-ignore\n    let targetClass = abap.Classes[targetName];\n    if (targetClass === undefined) {\n        // todo, for unit testing,\n        // @ts-ignore\n        targetClass = abap.Classes[\"PROG-ZFOOBAR-\" + targetName];\n    }\n    if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.INTERNAL_TYPE) === \"CLAS\") {\n        // using \"instanceof\" is probably wrong in some cases,\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n        if (source.get() instanceof targetClass === false) {\n            (0, throw_error_1.throwError)(\"CX_SY_MOVE_CAST_ERROR\");\n        }\n    }\n    else if (checkIntf === true && (targetClass === null || targetClass === void 0 ? void 0 : targetClass.INTERNAL_TYPE) === \"INTF\") {\n        const list = source.get().constructor.IMPLEMENTED_INTERFACES;\n        const isImplemented = list.some(i => i === targetName);\n        if (isImplemented === false) {\n            (0, throw_error_1.throwError)(\"CX_SY_MOVE_CAST_ERROR\");\n        }\n    }\n    target.set(source);\n}\nexports.cast = cast;\n//# sourceMappingURL=cast.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/cast.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/clear.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/clear.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clear = void 0;\nfunction clear(value) {\n    value.clear();\n}\nexports.clear = clear;\n//# sourceMappingURL=clear.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/clear.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/collect.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/collect.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.collect = void 0;\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst insert_internal_1 = __webpack_require__(/*! ./insert_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js\");\nconst read_table_1 = __webpack_require__(/*! ./read_table */ \"./node_modules/@abaplint/runtime/build/src/statements/read_table.js\");\nfunction collect(source, target) {\n    const read = (0, read_table_1.readTable)(target, { withKey: (i) => { return (0, compare_1.eq)(i.table_line, source); } });\n    if (read.subrc === 4) {\n        (0, insert_internal_1.insertInternal)({ table: target, data: source });\n    }\n}\nexports.collect = collect;\n//# sourceMappingURL=collect.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/collect.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/commit.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/commit.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.commit = void 0;\nfunction commit() {\n    // todo\n}\nexports.commit = commit;\n//# sourceMappingURL=commit.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/commit.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/concatenate.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/concatenate.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.concatenate = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction concatenate(input) {\n    const list = [];\n    if (input.lines === true) {\n        const tab = input.source[0];\n        if (tab instanceof types_1.Table) {\n            for (const l of tab.array()) {\n                list.push(l.get().trimEnd());\n            }\n        }\n    }\n    else {\n        for (const source of input.source) {\n            let val = \"\";\n            if (source instanceof types_1.Table) {\n                throw new Error(\"concatenate, error input is table\");\n            }\n            else if (typeof source === \"string\" || typeof source === \"number\") {\n                val = source.toString();\n            }\n            else if (source instanceof types_1.Character) {\n                val = source.get().toString();\n                if (input.respectingBlanks !== true) {\n                    val = val.replace(/ +$/, \"\");\n                }\n            }\n            else {\n                val = source.get().toString();\n            }\n            list.push(val);\n        }\n    }\n    let sep = \"\";\n    if (input.separatedBy) {\n        if (typeof input.separatedBy === \"string\" || typeof input.separatedBy === \"number\") {\n            sep = input.separatedBy.toString();\n        }\n        else {\n            sep = input.separatedBy.get().toString();\n        }\n    }\n    input.target.set(list.join(sep));\n}\nexports.concatenate = concatenate;\n//# sourceMappingURL=concatenate.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/concatenate.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/condense.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/condense.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.condense = void 0;\nfunction condense(input, options) {\n    let trimmed = input.get().replace(/ +$/, \"\");\n    trimmed = trimmed.replace(/^ +/, \"\");\n    if (options.nogaps) {\n        trimmed = trimmed.replace(/ */g, \"\");\n    }\n    else {\n        trimmed = trimmed.replace(/ {2,}/g, \" \");\n    }\n    input.set(trimmed);\n}\nexports.condense = condense;\n//# sourceMappingURL=condense.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/condense.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/convert.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/convert.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convert = void 0;\nconst temporal_polyfill_1 = __webpack_require__(/*! temporal-polyfill */ \"./node_modules/temporal-polyfill/dist/index.cjs\");\nfunction convert(source, target) {\n    var _a, _b, _c;\n    let date = \"\";\n    if (source.date) {\n        if (typeof source.date === \"string\") {\n            date = source.date;\n        }\n        else {\n            date = source.date.get();\n        }\n    }\n    let time = \"\";\n    if (source.time) {\n        if (typeof source.time === \"string\") {\n            time = source.time;\n        }\n        else {\n            time = source.time.get();\n        }\n    }\n    let stamp = \"\";\n    if (source.stamp) {\n        if (typeof source.stamp === \"string\") {\n            stamp = source.stamp;\n        }\n        else {\n            stamp = source.stamp.get() + \"\";\n        }\n    }\n    let zone = \"\";\n    if (source.zone) {\n        if (typeof source.zone === \"string\") {\n            zone = source.zone;\n        }\n        else {\n            zone = source.zone.get() + \"\";\n        }\n        zone = zone.trimEnd();\n    }\n    if (zone.trim() === \"\") {\n        zone = \"UTC\";\n    }\n    ////////////////////////\n    let zoned = undefined;\n    if (date !== \"\" && time !== \"\") {\n        if (date === \"00000000\" && time === \"000000\") {\n            (_a = target.stamp) === null || _a === void 0 ? void 0 : _a.clear();\n            return;\n        }\n        const pt = temporal_polyfill_1.Temporal.PlainTime.from(time.substring(0, 2) + \":\" + time.substring(2, 4) + \":\" + time.substring(4, 6));\n        zoned = temporal_polyfill_1.Temporal.PlainDate.from(date).toZonedDateTime({ timeZone: zone, plainTime: pt });\n        zoned = zoned.withTimeZone(\"UTC\");\n    }\n    else {\n        if (stamp === \"0\") {\n            (_b = target.date) === null || _b === void 0 ? void 0 : _b.clear();\n            (_c = target.time) === null || _c === void 0 ? void 0 : _c.clear();\n            return;\n        }\n        const pt = temporal_polyfill_1.Temporal.PlainTime.from(stamp.substring(8, 10) + \":\" + stamp.substring(10, 12) + \":\" + stamp.substring(12, 14));\n        zoned = temporal_polyfill_1.Temporal.PlainDate.from(stamp.substring(0, 8)).toZonedDateTime({ timeZone: \"UTC\", plainTime: pt });\n    }\n    const d = zoned.toPlainDate().toString().replace(/-/g, \"\");\n    const t = zoned.toPlainTime().toString().replace(/:/g, \"\");\n    if (target.stamp) {\n        target.stamp.set(d + t);\n    }\n    if (target.date) {\n        target.date.set(d);\n    }\n    if (target.time) {\n        target.time.set(t);\n    }\n}\nexports.convert = convert;\n//# sourceMappingURL=convert.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/convert.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/create_data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/create_data.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createData = void 0;\nconst clone_1 = __webpack_require__(/*! ../clone */ \"./node_modules/@abaplint/runtime/build/src/clone.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction createData(target, options) {\n    if (target instanceof types_1.FieldSymbol) {\n        createData(target.getPointer(), options);\n        return;\n    }\n    else if (!(target instanceof types_1.DataReference)) {\n        throw new Error(\"CREATE_DATA_REFERENCE_EXPECTED\");\n    }\n    if ((options === null || options === void 0 ? void 0 : options.name) && (options === null || options === void 0 ? void 0 : options.table)) {\n        // @ts-ignore\n        if (abap.DDIC[options.name] === undefined) {\n            (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n        }\n        // @ts-ignore\n        target.assign(new abap.types.Table(abap.DDIC[options.name].type));\n    }\n    else if (options === null || options === void 0 ? void 0 : options.name) {\n        // @ts-ignore\n        if (abap.DDIC[options.name.trimEnd()]) {\n            // @ts-ignore\n            target.assign((0, clone_1.clone)(abap.DDIC[options.name.trimEnd()].type));\n        }\n        else if (options.name.includes(\"=>\")) {\n            const [className, typeName] = options.name.toUpperCase().split(\"=>\");\n            // @ts-ignore\n            if (abap.Classes[className] === undefined) {\n                (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n            }\n            // @ts-ignore\n            if (abap.Classes[className][typeName.toLowerCase()] === undefined) {\n                (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n            }\n            // @ts-ignore\n            target.assign((0, clone_1.clone)(abap.Classes[className][typeName.toLowerCase()]));\n        }\n        else if (options.name.startsWith(\"\\\\TYPE=%\")) {\n            // currently, only the runtime knows the references to the anonymous types\n            // @ts-ignore\n            const clas = abap.Classes[\"KERNEL_CREATE_DATA_HANDLE\"];\n            if (clas === undefined) {\n                throw new Error(\"CreateData, kernel class missing\");\n            }\n            clas.anonymous({ name: options.name, dref: target });\n        }\n        else {\n            (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.typeName) {\n        switch (options.typeName) {\n            case \"C\":\n                {\n                    let length = 1;\n                    if (options.length) {\n                        length = options.length.get();\n                    }\n                    target.assign(new types_1.Character(length));\n                }\n                break;\n            case \"N\":\n                {\n                    let length = 1;\n                    if (options.length) {\n                        length = options.length.get();\n                    }\n                    target.assign(new types_1.Numc({ length: length }));\n                }\n                break;\n            case \"X\":\n                {\n                    let length = 1;\n                    if (options.length) {\n                        length = options.length.get();\n                    }\n                    target.assign(new types_1.Hex({ length: length }));\n                }\n                break;\n            case \"P\":\n                {\n                    let length = 1;\n                    if (options.length) {\n                        length = options.length.get();\n                    }\n                    let decimals = 0;\n                    if (options.decimals) {\n                        decimals = options.decimals.get();\n                    }\n                    target.assign(new types_1.Packed({ length: length, decimals: decimals }));\n                }\n                break;\n            case \"F\":\n                target.assign(new types_1.Float());\n                break;\n            case \"D\":\n                target.assign(new types_1.Date());\n                break;\n            case \"T\":\n                target.assign(new types_1.Time());\n                break;\n            case \"I\":\n                target.assign(new types_1.Integer());\n                break;\n            case \"STRING\":\n                target.assign(new types_1.String());\n                break;\n            case \"XSTRING\":\n                target.assign(new types_1.XString());\n                break;\n            default:\n                // @ts-ignore\n                if (abap.DDIC[options.typeName.trimEnd()]) {\n                    // @ts-ignore\n                    target.assign((0, clone_1.clone)(abap.DDIC[options.typeName.trimEnd()].type));\n                }\n                else if (options.typeName.includes(\"=>\")) {\n                    const [className, typeName] = options.typeName.toUpperCase().split(\"=>\");\n                    // @ts-ignore\n                    if (abap.Classes[className] === undefined) {\n                        (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n                    }\n                    // @ts-ignore\n                    if (abap.Classes[className][typeName.toLowerCase().trimEnd()] === undefined) {\n                        (0, throw_error_1.throwError)(\"CX_SY_CREATE_DATA_ERROR\");\n                    }\n                    // @ts-ignore\n                    target.assign((0, clone_1.clone)(abap.Classes[className][typeName.toLowerCase().trimEnd()]));\n                }\n                else {\n                    throw \"CREATE DATA, unknown type \" + options.typeName;\n                }\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.type) {\n        target.assign((0, clone_1.clone)(options.type));\n    }\n    else if (options === null || options === void 0 ? void 0 : options.likeLineOf) {\n        if (options.likeLineOf instanceof types_1.FieldSymbol) {\n            options.likeLineOf = options.likeLineOf.getPointer();\n        }\n        target.assign((0, clone_1.clone)(options.likeLineOf.getRowType()));\n    }\n    else if (options === null || options === void 0 ? void 0 : options.like) {\n        if (options.like instanceof types_1.FieldSymbol) {\n            options.like = options.like.getPointer();\n        }\n        target.assign((0, clone_1.clone)(options.like));\n    }\n    else {\n        target.assign((0, clone_1.clone)(target.getType()));\n    }\n}\nexports.createData = createData;\n//# sourceMappingURL=create_data.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/create_data.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/delete_database.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/delete_database.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteDatabase = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nclass DeleteDatabase {\n    constructor(context) {\n        this.context = context;\n    }\n    async deleteDatabase(table, options) {\n        if (options.table instanceof types_1.FieldSymbol) {\n            options.table = options.table.getPointer();\n        }\n        if (options.from instanceof types_1.FieldSymbol) {\n            options.from = options.from.getPointer();\n        }\n        if (typeof table !== \"string\") {\n            table = table.get();\n        }\n        if (options.table) {\n            for (const row of options.table.array()) {\n                this.deleteDatabase(table, { from: row });\n            }\n        }\n        else if (options.from) {\n            let where = [];\n            const structure = options.from.get();\n            for (const k of Object.keys(structure)) {\n                // todo, integers should not be surrounded by '\"'?\n                const str = k + ' = \"' + structure[k].get() + '\"';\n                where.push(str);\n            }\n            where = where.join(\" AND \");\n            const { subrc, dbcnt } = await this.context.defaultDB().delete({ table, where });\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(subrc);\n            // @ts-ignore\n            abap.builtin.sy.get().dbcnt.set(dbcnt);\n        }\n        else if (options.where) {\n            const { subrc, dbcnt } = await this.context.defaultDB().delete({ table, where: options.where });\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(subrc);\n            // @ts-ignore\n            abap.builtin.sy.get().dbcnt.set(dbcnt);\n        }\n        else {\n            throw \"deleteDatabase todo\";\n        }\n    }\n}\nexports.DeleteDatabase = DeleteDatabase;\n//# sourceMappingURL=delete_database.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/delete_database.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/delete_internal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/delete_internal.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deleteInternal = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst loop_1 = __webpack_require__(/*! ./loop */ \"./node_modules/@abaplint/runtime/build/src/statements/loop.js\");\nasync function deleteInternal(target, options) {\n    var _a, e_1, _b, _c;\n    let index = 0;\n    if (target instanceof types_1.FieldSymbol) {\n        target = target.getPointer();\n        if (target === undefined) {\n            throw new Error(\"deleteInternal, FS not assigned\");\n        }\n    }\n    if ((options === null || options === void 0 ? void 0 : options.index)\n        && (options === null || options === void 0 ? void 0 : options.where) === undefined\n        && (options === null || options === void 0 ? void 0 : options.adjacent) === undefined\n        && (options === null || options === void 0 ? void 0 : options.fromValue) === undefined\n        && (options === null || options === void 0 ? void 0 : options.from) === undefined\n        && (options === null || options === void 0 ? void 0 : options.to) === undefined) {\n        if (target.array()[options.index.get() - 1] === undefined) {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n            return;\n        }\n        else {\n            target.deleteIndex(options.index.get() - 1);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n            return;\n        }\n    }\n    if (options === null || options === void 0 ? void 0 : options.to) {\n        if ((options === null || options === void 0 ? void 0 : options.from) !== undefined || (options === null || options === void 0 ? void 0 : options.where) !== undefined) {\n            throw \"DeleteInternalTodo\";\n        }\n        for (let i = 0; i < options.to.get(); i++) {\n            target.deleteIndex(0);\n        }\n        return;\n    }\n    if ((options === null || options === void 0 ? void 0 : options.adjacent) === true) {\n        if (target instanceof types_1.HashedTable) {\n            throw new Error(\"delete adjacent, hashed table\");\n        }\n        const array = target.array();\n        for (let index = array.length - 1; index > 0; index--) {\n            const prev = array[index - 1];\n            const i = array[index];\n            if (options === null || options === void 0 ? void 0 : options.comparing) {\n                let match = false;\n                for (const compareField of options.comparing) {\n                    match = (0, compare_1.eq)(prev.get()[compareField], i.get()[compareField]);\n                    if (!match) {\n                        break;\n                    }\n                }\n                if (match) {\n                    target.deleteIndex(index);\n                }\n            }\n            else if ((0, compare_1.eq)(prev, i) === true) {\n                target.deleteIndex(index);\n            }\n        }\n        return;\n    }\n    try {\n        for (var _d = true, _e = __asyncValues((0, loop_1.loop)(target)), _f; _f = await _e.next(), _a = _f.done, !_a;) {\n            _c = _f.value;\n            _d = false;\n            try {\n                const i = _c;\n                // @ts-ignore\n                index = abap.builtin.sy.get().tabix.get() - 1;\n                if (options === null || options === void 0 ? void 0 : options.where) {\n                    const row = i instanceof types_1.Structure ? i.get() : { table_line: i };\n                    if (options.where(row) === true) {\n                        if (target instanceof types_1.HashedTable) {\n                            target.deleteFrom(i);\n                        }\n                        else {\n                            target.deleteIndex(index);\n                        }\n                    }\n                }\n                else if ((options === null || options === void 0 ? void 0 : options.index) && options.index.get() === index) {\n                    target.deleteIndex(options.index.get() - 1);\n                }\n                else if ((options === null || options === void 0 ? void 0 : options.fromValue) && (0, compare_1.eq)(options.fromValue, i)) {\n                    target.deleteIndex(index);\n                }\n                else if ((options === null || options === void 0 ? void 0 : options.from) && options.from.get() <= index + 1) {\n                    target.deleteIndex(index);\n                }\n            }\n            finally {\n                _d = true;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (!_d && !_a && (_b = _e.return)) await _b.call(_e);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n}\nexports.deleteInternal = deleteInternal;\n//# sourceMappingURL=delete_internal.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/delete_internal.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/describe.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/describe.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.describe = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction describe(input) {\n    var _a;\n    //  console.dir(input);\n    if (input.type) {\n        if (input.field instanceof types_1.FieldSymbol) {\n            describe({ field: input.field.getPointer(), type: input.type, length: input.length, mode: input.mode });\n            return;\n        }\n        if (input.field instanceof types_1.Table || input.field instanceof types_1.HashedTable) {\n            input.type.set(\"h\");\n        }\n        else if (input.field instanceof types_1.Character || typeof input.field === \"string\") {\n            input.type.set(\"C\");\n        }\n        else if (input.field instanceof types_1.Integer) {\n            input.type.set(\"I\");\n        }\n        else if (input.field instanceof types_1.Date) {\n            input.type.set(\"D\");\n        }\n        else if (input.field instanceof types_1.Time) {\n            input.type.set(\"T\");\n        }\n        else if (input.field instanceof types_1.Float) {\n            input.type.set(\"F\");\n        }\n        else if (input.field instanceof types_1.Numc) {\n            input.type.set(\"N\");\n        }\n        else if (input.field instanceof types_1.Hex) {\n            input.type.set(\"X\");\n        }\n        else if (input.field instanceof types_1.Packed) {\n            input.type.set(\"P\");\n        }\n        else if (input.field instanceof types_1.String) {\n            input.type.set(\"g\");\n        }\n        else if (input.field instanceof types_1.XString) {\n            input.type.set(\"y\");\n        }\n        else if (input.field instanceof types_1.DecFloat34) {\n            input.type.set(\"e\");\n        }\n        else if (input.field instanceof types_1.Structure) {\n            input.type.set(\"u\");\n        }\n        else if (input.field instanceof types_1.ABAPObject) {\n            input.type.set(\"r\");\n        }\n        else if (input.field instanceof types_1.DataReference) {\n            input.type.set(\"l\");\n        }\n        else {\n            throw new Error(\"DESCRIBE, todo, transpiler, \" + input.field.constructor.name);\n        }\n    }\n    if (input.field instanceof types_1.FieldSymbol) {\n        input.field = input.field.getPointer();\n    }\n    if (input.length) {\n        if (input.field instanceof types_1.Character\n            || input.field instanceof types_1.Packed\n            || input.field instanceof types_1.Hex) {\n            input.length.set(input.field.getLength());\n        }\n        else {\n            throw \"DESCRIBE length, unsupported or todo\";\n        }\n    }\n    if (input.decimals) {\n        if (input.field instanceof types_1.Packed) {\n            input.decimals.set(input.field.getDecimals());\n        }\n        else {\n            throw \"DESCRIBE decimals, unsupported or todo\";\n        }\n    }\n    if (input.table) {\n        // @ts-ignore\n        abap.builtin.sy.get().tfill.set(input.table.getArrayLength());\n        (_a = input.lines) === null || _a === void 0 ? void 0 : _a.set(input.table.getArrayLength());\n    }\n}\nexports.describe = describe;\n//# sourceMappingURL=describe.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/describe.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/find.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/find.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.find = void 0;\nconst abap_regex_1 = __webpack_require__(/*! ../abap_regex */ \"./node_modules/@abaplint/runtime/build/src/abap_regex.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction find(input, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    let sectionOffset = (_a = options.sectionOffset) === null || _a === void 0 ? void 0 : _a.get();\n    if (sectionOffset && options.byteMode) {\n        sectionOffset = sectionOffset * 2;\n    }\n    let s = \"\";\n    if (options.find) {\n        s = options.find;\n        if (typeof s !== \"string\") {\n            s = s.get();\n        }\n        if (s === \"\") {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(0);\n            return;\n        }\n        s = s.replace(/\\[/g, \"\\\\[\");\n        s = s.replace(/\\]/g, \"\\\\]\");\n        s = s.replace(/\\?/g, \"\\\\?\");\n        s = s.replace(/\\(/g, \"\\\\(\");\n        s = s.replace(/\\)/g, \"\\\\)\");\n        s = s.replace(/\\./g, \"\\\\.\");\n        s = s.replace(/\\|/g, \"\\\\|\");\n        s = s.replace(/\\*/g, \"\\\\*\");\n        s = s.replace(/\\+/g, \"\\\\+\");\n        s = new RegExp(s, \"g\");\n    }\n    else if (options.regex) {\n        if (options.regex === \"\") {\n            throw \"FIND, runtime, no input, regex empty\";\n        }\n        let r = options.regex;\n        if (typeof r !== \"string\") {\n            r = r.get();\n        }\n        if (typeof r === \"string\") {\n            r = abap_regex_1.ABAPRegExp.convert(r);\n        }\n        else if (r.constructor.name === \"cl_abap_regex\") {\n            const obj = r;\n            // @ts-ignore\n            r = obj.mv_pattern.get();\n            // @ts-ignore\n            if (obj.mv_ignore_case.get() === \"X\") {\n                options.ignoringCase = true;\n            }\n        }\n        else {\n            throw \"find(), unexpected input\";\n        }\n        s = new RegExp(r, \"gm\" + (options.ignoringCase === true ? \"i\" : \"\"));\n    }\n    else {\n        throw \"FIND, runtime, no input\";\n    }\n    const matches = [];\n    if (input instanceof types_1.Table) {\n        let line = 1;\n        for (const blah of input.array()) {\n            let temp;\n            // eslint-disable-next-line no-cond-assign\n            while (temp = s.exec(blah.get())) {\n                matches.push(Object.assign(Object.assign({}, temp), { line }));\n                if (options.first === true) {\n                    break;\n                }\n            }\n            line++;\n        }\n    }\n    else {\n        let blah = input.get();\n        if (sectionOffset) {\n            blah = blah.substr(sectionOffset);\n        }\n        let temp;\n        // eslint-disable-next-line no-cond-assign\n        while (temp = s.exec(blah)) {\n            matches.push(temp);\n            if (options.first === true) {\n                break;\n            }\n        }\n    }\n    if (options.submatches) {\n        for (let index = 0; index < options.submatches.length; index++) {\n            // @ts-ignore\n            if (matches[0] && matches[0][index + 1]) {\n                // @ts-ignore\n                options.submatches[index].set(matches[0][index + 1]);\n            }\n            else if (matches.length > 0) {\n                options.submatches[index].clear();\n            }\n        }\n    }\n    if (options.results) {\n        // assumption, results is a table with the correct type\n        options.results.clear();\n        for (const m of matches) {\n            const match = new types_1.Structure({\n                line: new types_1.Integer(),\n                offset: new types_1.Integer(),\n                length: new types_1.Integer(),\n                submatches: types_1.TableFactory.construct(new types_1.Structure({ offset: new types_1.Integer(), length: new types_1.Integer() })),\n            });\n            match.get().line.set(m.line || 0);\n            match.get().offset.set(m.index);\n            match.get().length.set(m[0].length);\n            const submatch = new types_1.Structure({ offset: new types_1.Integer(), length: new types_1.Integer() });\n            for (let i = 1; i < m.length; i++) {\n                // @ts-ignore\n                if (m[i] === undefined) {\n                    submatch.get().offset.set(-1);\n                    submatch.get().length.set(0);\n                }\n                else {\n                    // @ts-ignore\n                    submatch.get().offset.set(m.index + m[0].indexOf(m[i]));\n                    // @ts-ignore\n                    submatch.get().length.set(m[i].length);\n                }\n                match.get().submatches.append(submatch);\n            }\n            if (options.results instanceof types_1.Table) {\n                options.results.append(match);\n            }\n            else {\n                options.results.set(match);\n            }\n            if (options.first === undefined || options.first === true) {\n                break;\n            }\n        }\n    }\n    if (matches.length === 0) {\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(4);\n    }\n    else {\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(0);\n    }\n    if (((_b = matches[0]) === null || _b === void 0 ? void 0 : _b.index) !== undefined) {\n        let val = matches[0].index;\n        if (sectionOffset) {\n            val += sectionOffset;\n        }\n        if (options.byteMode) {\n            val = val / 2;\n        }\n        (_c = options.offset) === null || _c === void 0 ? void 0 : _c.set(val);\n    }\n    if (options === null || options === void 0 ? void 0 : options.count) {\n        (_d = options.count) === null || _d === void 0 ? void 0 : _d.set(matches.length);\n    }\n    else {\n        (_e = options.count) === null || _e === void 0 ? void 0 : _e.clear();\n    }\n    if ((options === null || options === void 0 ? void 0 : options.length) && matches && matches[0]) {\n        (_f = options.length) === null || _f === void 0 ? void 0 : _f.set(matches[0][0].length);\n    }\n    else {\n        (_g = options.length) === null || _g === void 0 ? void 0 : _g.clear();\n    }\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/find.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/get_bit.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/get_bit.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBit = void 0;\nfunction getBit(number, hex, output) {\n    const charIndex = Math.floor((number.get() - 1) / 8);\n    const bitIndex = (number.get() - 1) % 8;\n    const h = hex.get().substr(charIndex * 2, 2);\n    const parsed = parseInt(h, 16).toString(2);\n    const bits = parsed.padStart(8, \"0\");\n    output.set(bits.substr(bitIndex, 1));\n}\nexports.getBit = getBit;\n//# sourceMappingURL=get_bit.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/get_bit.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/get_locale.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/get_locale.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getLocale = void 0;\nfunction getLocale(target) {\n    // todo\n    target.set(\"E\");\n}\nexports.getLocale = getLocale;\n//# sourceMappingURL=get_locale.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/get_locale.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/get_parameter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/get_parameter.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getParameter = void 0;\nfunction getParameter(_source, _target) {\n    // todo, additional logic? call ABAP kernel class?\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(4);\n}\nexports.getParameter = getParameter;\n//# sourceMappingURL=get_parameter.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/get_parameter.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/get_run_time.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/get_run_time.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRunTime = void 0;\nlet prev = undefined;\nfunction getRunTime(value) {\n    if (prev === undefined) {\n        value.set(0);\n        prev = new Date().getTime();\n    }\n    else {\n        const now = new Date().getTime();\n        value.set(now - prev);\n        prev = now;\n    }\n}\nexports.getRunTime = getRunTime;\n//# sourceMappingURL=get_run_time.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/get_run_time.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/get_time.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/get_time.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTime = void 0;\nfunction getTime(options) {\n    const d = new Date();\n    const date = d.getUTCFullYear() +\n        (d.getUTCMonth() + 1 + \"\").padStart(2, \"0\") +\n        (d.getUTCDate() + \"\").padStart(2, \"0\");\n    const time = (d.getUTCHours() + \"\").padStart(2, \"0\") +\n        (d.getUTCMinutes() + \"\").padStart(2, \"0\") +\n        (d.getUTCSeconds() + \"\").padStart(2, \"0\");\n    if (options === undefined) {\n        options = {};\n    }\n    if ((options === null || options === void 0 ? void 0 : options.sy) === undefined) {\n        // @ts-ignore\n        options.sy = abap.builtin.sy;\n    }\n    options.sy.get().datlo.set(date);\n    options.sy.get().datum.set(date);\n    options.sy.get().timlo.set(time);\n    options.sy.get().uzeit.set(time);\n    if (options === null || options === void 0 ? void 0 : options.field) {\n        options.field.set(time);\n    }\n    if (options === null || options === void 0 ? void 0 : options.stamp) {\n        options.stamp.set(date + time);\n    }\n}\nexports.getTime = getTime;\n//# sourceMappingURL=get_time.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/get_time.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Statements = void 0;\nconst append_1 = __webpack_require__(/*! ./append */ \"./node_modules/@abaplint/runtime/build/src/statements/append.js\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"./node_modules/@abaplint/runtime/build/src/statements/assert.js\");\nconst assign_1 = __webpack_require__(/*! ./assign */ \"./node_modules/@abaplint/runtime/build/src/statements/assign.js\");\nconst clear_1 = __webpack_require__(/*! ./clear */ \"./node_modules/@abaplint/runtime/build/src/statements/clear.js\");\nconst commit_1 = __webpack_require__(/*! ./commit */ \"./node_modules/@abaplint/runtime/build/src/statements/commit.js\");\nconst concatenate_1 = __webpack_require__(/*! ./concatenate */ \"./node_modules/@abaplint/runtime/build/src/statements/concatenate.js\");\nconst condense_1 = __webpack_require__(/*! ./condense */ \"./node_modules/@abaplint/runtime/build/src/statements/condense.js\");\nconst convert_1 = __webpack_require__(/*! ./convert */ \"./node_modules/@abaplint/runtime/build/src/statements/convert.js\");\nconst create_data_1 = __webpack_require__(/*! ./create_data */ \"./node_modules/@abaplint/runtime/build/src/statements/create_data.js\");\nconst delete_internal_1 = __webpack_require__(/*! ./delete_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/delete_internal.js\");\nconst describe_1 = __webpack_require__(/*! ./describe */ \"./node_modules/@abaplint/runtime/build/src/statements/describe.js\");\nconst find_1 = __webpack_require__(/*! ./find */ \"./node_modules/@abaplint/runtime/build/src/statements/find.js\");\nconst collect_1 = __webpack_require__(/*! ./collect */ \"./node_modules/@abaplint/runtime/build/src/statements/collect.js\");\nconst overlay_1 = __webpack_require__(/*! ./overlay */ \"./node_modules/@abaplint/runtime/build/src/statements/overlay.js\");\nconst cast_1 = __webpack_require__(/*! ./cast */ \"./node_modules/@abaplint/runtime/build/src/statements/cast.js\");\nconst get_bit_1 = __webpack_require__(/*! ./get_bit */ \"./node_modules/@abaplint/runtime/build/src/statements/get_bit.js\");\nconst read_report_1 = __webpack_require__(/*! ./read_report */ \"./node_modules/@abaplint/runtime/build/src/statements/read_report.js\");\nconst raise_event_1 = __webpack_require__(/*! ./raise_event */ \"./node_modules/@abaplint/runtime/build/src/statements/raise_event.js\");\nconst get_locale_1 = __webpack_require__(/*! ./get_locale */ \"./node_modules/@abaplint/runtime/build/src/statements/get_locale.js\");\nconst get_parameter_1 = __webpack_require__(/*! ./get_parameter */ \"./node_modules/@abaplint/runtime/build/src/statements/get_parameter.js\");\nconst set_locale_1 = __webpack_require__(/*! ./set_locale */ \"./node_modules/@abaplint/runtime/build/src/statements/set_locale.js\");\nconst get_run_time_1 = __webpack_require__(/*! ./get_run_time */ \"./node_modules/@abaplint/runtime/build/src/statements/get_run_time.js\");\nconst get_time_1 = __webpack_require__(/*! ./get_time */ \"./node_modules/@abaplint/runtime/build/src/statements/get_time.js\");\nconst insert_database_1 = __webpack_require__(/*! ./insert_database */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_database.js\");\nconst insert_internal_1 = __webpack_require__(/*! ./insert_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js\");\nconst delete_database_1 = __webpack_require__(/*! ./delete_database */ \"./node_modules/@abaplint/runtime/build/src/statements/delete_database.js\");\nconst loop_1 = __webpack_require__(/*! ./loop */ \"./node_modules/@abaplint/runtime/build/src/statements/loop.js\");\nconst message_1 = __webpack_require__(/*! ./message */ \"./node_modules/@abaplint/runtime/build/src/statements/message.js\");\nconst modify_database_1 = __webpack_require__(/*! ./modify_database */ \"./node_modules/@abaplint/runtime/build/src/statements/modify_database.js\");\nconst modify_internal_1 = __webpack_require__(/*! ./modify_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/modify_internal.js\");\nconst move_corresponding_1 = __webpack_require__(/*! ./move_corresponding */ \"./node_modules/@abaplint/runtime/build/src/statements/move_corresponding.js\");\nconst read_table_1 = __webpack_require__(/*! ./read_table */ \"./node_modules/@abaplint/runtime/build/src/statements/read_table.js\");\nconst replace_1 = __webpack_require__(/*! ./replace */ \"./node_modules/@abaplint/runtime/build/src/statements/replace.js\");\nconst rollback_1 = __webpack_require__(/*! ./rollback */ \"./node_modules/@abaplint/runtime/build/src/statements/rollback.js\");\nconst select_1 = __webpack_require__(/*! ./select */ \"./node_modules/@abaplint/runtime/build/src/statements/select.js\");\nconst set_bit_1 = __webpack_require__(/*! ./set_bit */ \"./node_modules/@abaplint/runtime/build/src/statements/set_bit.js\");\nconst shift_1 = __webpack_require__(/*! ./shift */ \"./node_modules/@abaplint/runtime/build/src/statements/shift.js\");\nconst sort_1 = __webpack_require__(/*! ./sort */ \"./node_modules/@abaplint/runtime/build/src/statements/sort.js\");\nconst set_handler_1 = __webpack_require__(/*! ./set_handler */ \"./node_modules/@abaplint/runtime/build/src/statements/set_handler.js\");\nconst split_1 = __webpack_require__(/*! ./split */ \"./node_modules/@abaplint/runtime/build/src/statements/split.js\");\nconst translate_1 = __webpack_require__(/*! ./translate */ \"./node_modules/@abaplint/runtime/build/src/statements/translate.js\");\nconst update_database_1 = __webpack_require__(/*! ./update_database */ \"./node_modules/@abaplint/runtime/build/src/statements/update_database.js\");\nconst write_1 = __webpack_require__(/*! ./write */ \"./node_modules/@abaplint/runtime/build/src/statements/write.js\");\nconst call_function_1 = __webpack_require__(/*! ./call_function */ \"./node_modules/@abaplint/runtime/build/src/statements/call_function.js\");\nconst types_1 = __webpack_require__(/*! util/types */ \"?2460\");\n// this is a class, as statements like SELECT needs access to the database object instance\n// and WRITE will access the Console\nclass Statements {\n    constructor(context) {\n        this.append = append_1.append;\n        this.assert = assert_1.assert;\n        this.assign = assign_1.assign;\n        this.cast = cast_1.cast;\n        this.clear = clear_1.clear;\n        this.collect = collect_1.collect;\n        this.commit = commit_1.commit;\n        this.concatenate = concatenate_1.concatenate;\n        this.condense = condense_1.condense;\n        this.convert = convert_1.convert;\n        this.createData = create_data_1.createData;\n        this.deleteInternal = delete_internal_1.deleteInternal;\n        this.describe = describe_1.describe;\n        this.find = find_1.find;\n        this.getBit = get_bit_1.getBit;\n        this.readReport = read_report_1.readReport;\n        this.getLocale = get_locale_1.getLocale;\n        this.getParameter = get_parameter_1.getParameter;\n        this.getRunTime = get_run_time_1.getRunTime;\n        this.getTime = get_time_1.getTime;\n        this.insertInternal = insert_internal_1.insertInternal;\n        this.loop = loop_1.loop;\n        this.modifyInternal = modify_internal_1.modifyInternal;\n        this.moveCorresponding = move_corresponding_1.moveCorresponding;\n        this.overlay = overlay_1.overlay;\n        this.raiseEvent = raise_event_1.raiseEvent;\n        this.readTable = read_table_1.readTable;\n        this.replace = replace_1.replace;\n        this.rollback = rollback_1.rollback;\n        this.setBit = set_bit_1.setBit;\n        this.setHandler = set_handler_1.setHandler;\n        this.setLocale = set_locale_1.setLocale;\n        this.shift = shift_1.shift;\n        this.sort = sort_1.sort;\n        this.split = split_1.split;\n        this.translate = translate_1.translate;\n        this.context = context;\n        this.traceTotals = {};\n    }\n    _trace(func, name, min, totals) {\n        const tt = this.traceTotals;\n        const exec = (...options) => {\n            const start = Date.now();\n            const result = func.bind(this)(...options);\n            const runtime = Date.now() - start;\n            if (totals === true) {\n                if (tt[name] === undefined) {\n                    tt[name] = 0;\n                }\n                tt[name] += runtime;\n            }\n            if (runtime >= min) {\n                console.log(`STATEMENT: ${name}, ${runtime} ms`);\n                if (totals === true) {\n                    console.log(JSON.stringify(tt));\n                }\n            }\n            return result;\n        };\n        return exec;\n    }\n    _traceAsync(func, name, min, totals) {\n        const tt = this.traceTotals;\n        const exec = async (...options) => {\n            const start = Date.now();\n            const result = await func.bind(this)(...options);\n            const runtime = Date.now() - start;\n            if (totals === true) {\n                if (tt[name] === undefined) {\n                    tt[name] = 0;\n                }\n                tt[name] += runtime;\n            }\n            if (runtime >= min) {\n                console.log(`STATEMENT: ${name}, ${runtime} ms`);\n                if (totals === true) {\n                    console.log(JSON.stringify(tt));\n                }\n            }\n            return result;\n        };\n        return exec;\n    }\n    _setTrace(min = 10, totals = false) {\n        const candidates = [...Object.keys(this), ...Object.getOwnPropertyNames(Statements.prototype)];\n        for (const c of candidates) {\n            if (c === \"context\" || c === \"constructor\" || c.startsWith(\"_\") || c === \"loop\") {\n                continue;\n            }\n            const func = this[c];\n            if ((0, types_1.isAsyncFunction)(func)) {\n                this[c] = this._traceAsync(func, c, min, totals);\n            }\n            else {\n                this[c] = this._trace(func, c, min, totals);\n            }\n        }\n    }\n    async deleteDatabase(table, options) {\n        return new delete_database_1.DeleteDatabase(this.context).deleteDatabase(table, options);\n    }\n    async insertDatabase(table, options) {\n        return new insert_database_1.InsertDatabase(this.context).insertDatabase(table, options);\n    }\n    async message(options) {\n        return new message_1.MessageStatement(this.context).message(options);\n    }\n    async modifyDatabase(table, options) {\n        return new modify_database_1.ModifyDatabase(this.context).modifyDatabase(table, options);\n    }\n    async select(target, select, runtimeOptions) {\n        return new select_1.SelectDatabase(this.context).select(target, select, runtimeOptions);\n    }\n    async updateDatabase(table, options) {\n        return new update_database_1.UpdateDatabase(this.context).updateDatabase(table, options);\n    }\n    async callFunction(options) {\n        return new call_function_1.CallFunction(this.context).callFunction(options);\n    }\n    write(source, options) {\n        return new write_1.WriteStatement(this.context).write(source, options);\n    }\n}\nexports.Statements = Statements;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/insert_database.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/insert_database.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertDatabase = exports.toValue = void 0;\nfunction toValue(value) {\n    if (typeof value === \"string\") {\n        return '\"' + value.replace(/\"/g, \"\\\"\\\"\") + '\"';\n    }\n    else {\n        return value;\n    }\n}\nexports.toValue = toValue;\nclass InsertDatabase {\n    constructor(context) {\n        this.context = context;\n    }\n    async insertDatabase(table, options) {\n        const columns = [];\n        const values = [];\n        if (options.values === undefined && options.table === undefined) {\n            throw \"insertDatabase, wrong input\";\n        }\n        if (options.table !== undefined) {\n            let subrc = 0;\n            let dbcnt = 0;\n            for (const row of options.table.array()) {\n                await this.insertDatabase(table, { values: row });\n                // @ts-ignore\n                subrc = Math.max(subrc, abap.builtin.sy.get().subrc.get());\n                // @ts-ignore\n                dbcnt += abap.builtin.sy.get().dbcnt.get();\n            }\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(subrc);\n            // @ts-ignore\n            abap.builtin.sy.get().dbcnt.set(dbcnt);\n            return;\n        }\n        const structure = options.values.get();\n        for (const k of Object.keys(structure)) {\n            columns.push(k);\n            const value = structure[k].get();\n            values.push(toValue(value));\n        }\n        if (typeof table !== \"string\") {\n            table = table.get();\n        }\n        const { subrc, dbcnt } = await this.context.defaultDB().insert({ table, columns, values });\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(subrc);\n        // @ts-ignore\n        abap.builtin.sy.get().dbcnt.set(dbcnt);\n        return subrc;\n    }\n}\nexports.InsertDatabase = InsertDatabase;\n//# sourceMappingURL=insert_database.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/insert_database.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.insertInternal = void 0;\nconst clone_1 = __webpack_require__(/*! ../clone */ \"./node_modules/@abaplint/runtime/build/src/clone.js\");\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst read_table_1 = __webpack_require__(/*! ./read_table */ \"./node_modules/@abaplint/runtime/build/src/statements/read_table.js\");\nconst sort_1 = __webpack_require__(/*! ./sort */ \"./node_modules/@abaplint/runtime/build/src/statements/sort.js\");\nfunction insertInternal(options) {\n    var _a, _b, _c, _d, _e;\n    if (options.table instanceof types_1.FieldSymbol) {\n        if (options.table.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        options.table = options.table.getPointer();\n    }\n    else if (options.data instanceof types_1.FieldSymbol) {\n        if (options.data.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        options.data = options.data.getPointer();\n    }\n    const tableOptions = options.table.getOptions();\n    let isSorted = ((_a = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.primaryKey) === null || _a === void 0 ? void 0 : _a.type) === types_1.TableAccessType.sorted\n        || ((_b = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.primaryKey) === null || _b === void 0 ? void 0 : _b.type) === types_1.TableAccessType.hashed;\n    if (options.table instanceof types_1.HashedTable) {\n        isSorted = false;\n    }\n    else if (isSorted) {\n        const insert = options.data instanceof types_1.Structure ? options.data.get() : { table_line: options.data };\n        const compare = (row) => {\n            var _a;\n            for (const key of ((_a = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.primaryKey) === null || _a === void 0 ? void 0 : _a.keyFields) || []) {\n                if (key.includes(\"-\")) {\n                    const [first, second] = key.split(\"-\");\n                    if ((0, compare_1.ne)(row[first.toLowerCase()].get()[second.toLowerCase()], insert[first.toLowerCase()].get()[second.toLowerCase()])) {\n                        return false;\n                    }\n                }\n                else {\n                    if ((0, compare_1.ne)(row[key.toLowerCase()], insert[key.toLowerCase()])) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        if (((_c = tableOptions.primaryKey) === null || _c === void 0 ? void 0 : _c.isUnique) === true) {\n            const withKeyValue = [];\n            let binary = false;\n            const data = options === null || options === void 0 ? void 0 : options.data;\n            if (data instanceof types_1.Structure) {\n                const fieldName = tableOptions.primaryKey.keyFields[0].toLowerCase();\n                if (fieldName !== \"table_line\" && fieldName.includes(\"-\") === false) {\n                    withKeyValue.push({ key: (i) => { return i[fieldName]; }, value: data.get()[fieldName] });\n                    binary = true;\n                }\n            }\n            (0, read_table_1.readTable)(options.table, { withKey: compare, withKeyValue: withKeyValue, binarySearch: binary });\n            // @ts-ignore\n            if (abap.builtin.sy.get().subrc.get() === 0) {\n                // @ts-ignore\n                abap.builtin.sy.get().subrc.set(4);\n                return;\n            }\n        }\n    }\n    let data = options.data;\n    if (typeof data === \"string\") {\n        const tmp = (0, clone_1.clone)(options.table.getRowType());\n        tmp.set(data);\n        data = tmp;\n    }\n    if (data && options.index) {\n        const index = options.index.get() - 1;\n        const val = options.table.insertIndex(data, index);\n        if (options.assigning) {\n            options.assigning.assign(val);\n        }\n    }\n    else if (options.lines\n        && (options.data instanceof types_1.Table\n            || options.data instanceof types_1.HashedTable)) {\n        if (options.table instanceof types_1.HashedTable) {\n            for (const source of options.data.array()) {\n                const result = options.table.insert(source);\n                if (result.subrc !== 0) {\n                    throw new Error(\"ITAB_DUPLICATE_KEY\");\n                }\n            }\n        }\n        else {\n            for (const i of options.data.array()) {\n                options.table.append(i);\n            }\n        }\n    }\n    else if (options.initial === true) {\n        let index = options.table.getArrayLength();\n        if (options.index) {\n            index = options.index.get() - 1;\n        }\n        const val = options.table.insertIndex(options.table.getRowType(), index);\n        if (options.assigning) {\n            options.assigning.assign(val);\n        }\n        if (options.referenceInto) {\n            options.referenceInto.assign(val);\n        }\n    }\n    else if (options.table instanceof types_1.HashedTable && data) {\n        const { value: val, subrc: subrc } = options.table.insert(data);\n        if (options.assigning) {\n            options.assigning.assign(val);\n        }\n        if (options.referenceInto) {\n            options.referenceInto.assign(val);\n        }\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(subrc);\n        return;\n    }\n    else if (data) {\n        // todo, for now it just appends, this is not correct, but currently the table type is not known\n        const val = options.table.insertIndex(data, options.table.getArrayLength());\n        if (options.assigning) {\n            options.assigning.assign(val);\n        }\n        if (options.referenceInto) {\n            options.referenceInto.assign(val);\n        }\n    }\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(0);\n    if (isSorted && !(options.table instanceof types_1.HashedTable)) {\n        // slow, but works for now\n        let by = (_e = (_d = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.primaryKey) === null || _d === void 0 ? void 0 : _d.keyFields) === null || _e === void 0 ? void 0 : _e.map(f => {\n            return { component: f.toLowerCase() };\n        });\n        if ((by === null || by === void 0 ? void 0 : by.length) === 1 && by[0].component === \"table_line\") {\n            by = [];\n        }\n        if (by && by.length > 0) {\n            (0, sort_1.sort)(options.table, { by: by });\n        }\n        else {\n            (0, sort_1.sort)(options.table);\n        }\n    }\n}\nexports.insertInternal = insertInternal;\n//# sourceMappingURL=insert_internal.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/loop.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/loop.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loop = void 0;\nconst binary_search_1 = __webpack_require__(/*! ../binary_search */ \"./node_modules/@abaplint/runtime/build/src/binary_search.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction determineFromTo(array, topEquals, key) {\n    if (topEquals === undefined) {\n        // if there is no WHERE supplied, its using the sorting of the secondary key\n        return { from: 1, to: array.length };\n    }\n    let from = 0;\n    let to = array.length;\n    // todo: multi field\n    const keyField = key.keyFields[0].toLowerCase();\n    const keyValue = topEquals[keyField];\n    if (keyField && keyValue) {\n        from = (0, binary_search_1.binarySearchFrom)(array, from, to, keyField, keyValue);\n        to = (0, binary_search_1.binarySearchTo)(array, from, to, keyField, keyValue);\n        //    console.dir(\"from: \" + from + \", to: \" + to);\n    }\n    return {\n        from: from,\n        to: to,\n    };\n}\nfunction loop(table, options) {\n    return __asyncGenerator(this, arguments, function* loop_1() {\n        if (table === undefined) {\n            throw new Error(\"LOOP at undefined\");\n        }\n        else if (table instanceof types_1.FieldSymbol) {\n            const pnt = table.getPointer();\n            if (pnt === undefined) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            yield __await(yield* __asyncDelegator(__asyncValues(loop(pnt, options))));\n            return yield __await(void 0);\n        }\n        const length = table.getArrayLength();\n        if (length === 0) {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n            return yield __await(void 0);\n        }\n        let loopFrom = (options === null || options === void 0 ? void 0 : options.from) && (options === null || options === void 0 ? void 0 : options.from.get()) > 0 ? options.from.get() - 1 : 0;\n        let loopTo = (options === null || options === void 0 ? void 0 : options.to) && options.to.get() < length ? options.to.get() : length;\n        let array = [];\n        if ((options === null || options === void 0 ? void 0 : options.usingKey) && options.usingKey !== undefined && options.usingKey !== \"primary_key\") {\n            array = table.getSecondaryIndex(options.usingKey);\n            const { from, to } = determineFromTo(array, options.topEquals, table.getKeyByName(options.usingKey));\n            loopFrom = Math.max(loopFrom, from) - 1;\n            loopTo = Math.min(loopTo, to);\n        }\n        else {\n            array = table.array();\n        }\n        const loopController = table.startLoop(loopFrom, loopTo, array);\n        let entered = false;\n        try {\n            const isStructured = array[0] instanceof types_1.Structure;\n            while (loopController.index < loopController.loopTo) {\n                if (loopController.index > array.length) {\n                    break;\n                }\n                const current = array[loopController.index];\n                if (options === null || options === void 0 ? void 0 : options.where) {\n                    const row = isStructured ? current.get() : { table_line: current };\n                    if ((yield __await(options.where(row))) === false) {\n                        loopController.index++;\n                        continue;\n                    }\n                }\n                // @ts-ignore\n                abap.builtin.sy.get().tabix.set(loopController.index + 1);\n                entered = true;\n                yield yield __await(current);\n                loopController.index++;\n                if ((options === null || options === void 0 ? void 0 : options.to) === undefined && (options === null || options === void 0 ? void 0 : options.usingKey) === undefined) {\n                    // extra rows might have been inserted inside the loop\n                    loopController.loopTo = array.length;\n                }\n            }\n        }\n        finally {\n            table.unregisterLoop(loopController);\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(entered ? 0 : 4);\n        }\n    });\n}\nexports.loop = loop;\n//# sourceMappingURL=loop.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/loop.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/message.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/message.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MessageStatement = void 0;\nfunction replace(text, w) {\n    for (let i = 0; i < 6; i++) {\n        const search = \"&\" + (i + 1);\n        let replace = \"\";\n        if (w && w[i]) {\n            const j = w[i];\n            if (typeof j === \"string\") {\n                replace = j;\n            }\n            else {\n                replace = j.get();\n            }\n        }\n        const field = \"msgv\" + (i + 1);\n        if (i <= 3) {\n            // @ts-ignore\n            abap.builtin.sy.get()[field].set(replace);\n        }\n        text = text.replace(search, replace);\n    }\n    return text.trim();\n}\nasync function findText(context, arbgb, msgnr, msgty) {\n    let text = undefined;\n    if (arbgb && msgnr) {\n        try {\n            // todo, sql injection?\n            const select = `SELECT * FROM t100 WHERE sprsl='E' AND arbgb='${arbgb}' AND msgnr='${msgnr}' LIMIT 1`;\n            const { rows: result } = await context.defaultDB().select({ select });\n            if (result[0]) {\n                text = result[0][\"text\"];\n            }\n        }\n        catch (_a) {\n            // use fallback text\n        }\n    }\n    if (text === undefined) {\n        // fallback\n        text = msgty + \":\" + (arbgb === null || arbgb === void 0 ? void 0 : arbgb.trim()) + \":\" + msgnr + \" &1 &2 &3 &4\";\n    }\n    return text;\n}\nclass MessageStatement {\n    constructor(context) {\n        this.context = context;\n    }\n    async message(options) {\n        let arbgb = options.id;\n        if (arbgb !== undefined && typeof arbgb !== \"string\") {\n            arbgb = arbgb.get();\n        }\n        arbgb = arbgb === null || arbgb === void 0 ? void 0 : arbgb.toUpperCase();\n        let msgty = options.type;\n        if (msgty !== undefined && typeof msgty !== \"string\") {\n            msgty = msgty.get();\n        }\n        msgty = msgty === null || msgty === void 0 ? void 0 : msgty.toUpperCase();\n        // @ts-ignore\n        abap.builtin.sy.get().msgid.set(arbgb || \"\");\n        let msgnr = options.number;\n        if (msgnr !== undefined && typeof msgnr !== \"string\") {\n            msgnr = msgnr.get();\n        }\n        // @ts-ignore\n        abap.builtin.sy.get().msgno.set(msgnr || \"\");\n        // @ts-ignore\n        abap.builtin.sy.get().msgty.set(msgty);\n        let replaced = \"\";\n        if (options.exception) {\n            replaced = await options.exception.get().if_message$get_text();\n        }\n        else {\n            const text = await findText(this.context, arbgb, msgnr, msgty);\n            replaced = replace(text, options.with);\n        }\n        if (options.into) {\n            options.into.set(replaced);\n        }\n        else {\n            // hmm, add option on how/if to write messages to console? or it should be the abap.console() ?\n            console.log(replaced);\n        }\n    }\n}\nexports.MessageStatement = MessageStatement;\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/message.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/modify_database.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/modify_database.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ModifyDatabase = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst insert_database_1 = __webpack_require__(/*! ./insert_database */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_database.js\");\nconst update_database_1 = __webpack_require__(/*! ./update_database */ \"./node_modules/@abaplint/runtime/build/src/statements/update_database.js\");\nclass ModifyDatabase {\n    constructor(context) {\n        this.context = context;\n    }\n    async modifyDatabase(table, options) {\n        if (options.table instanceof types_1.FieldSymbol) {\n            options.table = options.table.getPointer();\n        }\n        if (options.values instanceof types_1.FieldSymbol) {\n            options.values = options.values.getPointer();\n        }\n        const insert = new insert_database_1.InsertDatabase(this.context);\n        const update = new update_database_1.UpdateDatabase(this.context);\n        if (options.table) {\n            for (const row of options.table.array()) {\n                const subrc = await insert.insertDatabase(table, { values: row });\n                if (subrc !== 0) {\n                    await update.updateDatabase(table, { from: row });\n                }\n            }\n        }\n        else if (options.values) {\n            const subrc = await insert.insertDatabase(table, { values: options.values });\n            if (subrc !== 0) {\n                await update.updateDatabase(table, { from: options.values });\n            }\n        }\n        else {\n            throw \"modifyDatabase todo\";\n        }\n    }\n}\nexports.ModifyDatabase = ModifyDatabase;\n//# sourceMappingURL=modify_database.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/modify_database.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/modify_internal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/modify_internal.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.modifyInternal = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst delete_internal_1 = __webpack_require__(/*! ./delete_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/delete_internal.js\");\nconst insert_internal_1 = __webpack_require__(/*! ./insert_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js\");\nconst read_table_1 = __webpack_require__(/*! ./read_table */ \"./node_modules/@abaplint/runtime/build/src/statements/read_table.js\");\nfunction modifyInternal(table, options) {\n    let found = false;\n    if (options.index) {\n        const index = options.index.get() - 1;\n        found = table.array()[index] !== undefined;\n        if (found) {\n            table.deleteIndex(index);\n            table.insertIndex(options.from, index);\n        }\n    }\n    else if (options.from) {\n        const readResult = (0, read_table_1.readTable)(table, { from: options.from });\n        if (readResult.subrc === 0) {\n            (0, delete_internal_1.deleteInternal)(table, { index: new types_1.Integer().set(readResult.foundIndex) });\n        }\n        (0, insert_internal_1.insertInternal)({ table, data: options.from });\n    }\n    const subrc = found ? 0 : 4;\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(subrc);\n}\nexports.modifyInternal = modifyInternal;\n//# sourceMappingURL=modify_internal.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/modify_internal.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/move_corresponding.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/move_corresponding.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.moveCorresponding = void 0;\nfunction moveCorresponding(source, target) {\n    var _a;\n    for (const n in source.get()) {\n        (_a = target.get()[n]) === null || _a === void 0 ? void 0 : _a.set(source.get()[n]);\n    }\n}\nexports.moveCorresponding = moveCorresponding;\n//# sourceMappingURL=move_corresponding.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/move_corresponding.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/overlay.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/overlay.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.overlay = void 0;\nconst offset_length_1 = __webpack_require__(/*! ../offset_length */ \"./node_modules/@abaplint/runtime/build/src/offset_length.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction overlay(value, withh, _only) {\n    const set = value instanceof types_1.Structure ? value.getCharacter() : value.get();\n    const w = withh.get();\n    const len = set.length;\n    for (let i = 0; i < len; i++) {\n        if (set.substring(i, i + 1) === \" \") {\n            new offset_length_1.OffsetLength(value, { offset: i, length: 1 }).set(w.substring(i, i + 1));\n        }\n    }\n}\nexports.overlay = overlay;\n//# sourceMappingURL=overlay.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/overlay.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/raise_event.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/raise_event.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.raiseEvent = void 0;\nfunction raiseEvent() {\n    // todo\n    return;\n}\nexports.raiseEvent = raiseEvent;\n//# sourceMappingURL=raise_event.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/raise_event.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/read_report.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/read_report.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readReport = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction readReport(name, options) {\n    if (options.into) {\n        options.into.clear();\n        options.into.append(new types_1.String().set(\"ReadReportTodo-\" + name));\n    }\n    // TODO\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(0);\n}\nexports.readReport = readReport;\n//# sourceMappingURL=read_report.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/read_report.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/read_table.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/read_table.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readTable = void 0;\nconst binary_search_1 = __webpack_require__(/*! ../binary_search */ \"./node_modules/@abaplint/runtime/build/src/binary_search.js\");\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction searchWithKey(arr, withKey, startIndex = 0, usesTableLine) {\n    const isStructured = arr[0] instanceof types_1.Structure;\n    for (let index = startIndex; index < arr.length; index++) {\n        const a = arr[index];\n        let row = undefined;\n        if (usesTableLine === false && isStructured === true) {\n            row = a.get();\n        }\n        else {\n            row = isStructured ? Object.assign({ table_line: a }, a.get()) : { table_line: a };\n        }\n        if (withKey(row) === true) {\n            return {\n                found: a,\n                foundIndex: index + 1,\n            };\n        }\n    }\n    return {\n        found: undefined,\n        foundIndex: 0,\n    };\n}\n/////////////////\nfunction readTable(table, options) {\n    var _a, _b, _c, _d;\n    let found = undefined;\n    let foundIndex = 0;\n    if (table instanceof types_1.FieldSymbol) {\n        if (table.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return readTable(table.getPointer(), options);\n    }\n    // check if it is a primary index read specified with WITH KEY instead of WITH TABLE KEY\n    if ((options === null || options === void 0 ? void 0 : options.withTableKey) === undefined\n        && (options === null || options === void 0 ? void 0 : options.withKeySimple)\n        && (((_a = table.getOptions().primaryKey) === null || _a === void 0 ? void 0 : _a.keyFields) || []).length > 0) {\n        const fields = new Set(table.getOptions().primaryKey.keyFields);\n        for (const name in options.withKeySimple) {\n            fields.delete(name.toUpperCase());\n        }\n        if (fields.size === 0) {\n            options.withTableKey = true;\n        }\n    }\n    if (options === null || options === void 0 ? void 0 : options.index) {\n        if (table instanceof types_1.HashedTable) {\n            throw new Error(\"Hashed table, READ INDEX not possible\");\n        }\n        const arr = table.array();\n        let index = options.index;\n        if (typeof index !== \"number\") {\n            if (index instanceof types_1.FieldSymbol) {\n                if (index.getPointer() === undefined) {\n                    throw new Error(\"GETWA_NOT_ASSIGNED\");\n                }\n                index = index.getPointer();\n            }\n            if (index instanceof types_1.Float || index instanceof types_1.DecFloat34) {\n                index = index.getRaw();\n            }\n            else {\n                index = index.get();\n            }\n        }\n        found = arr[index - 1];\n        if (found) {\n            foundIndex = index;\n        }\n    }\n    else if (table instanceof types_1.HashedTable && (options === null || options === void 0 ? void 0 : options.withTableKey) === true && options.withKeySimple) {\n        const hash = table.buildHashFromSimple(options.withKeySimple);\n        found = table.read(hash);\n        foundIndex = 0;\n    }\n    else if (table instanceof types_1.HashedTable && (options === null || options === void 0 ? void 0 : options.withKey)) {\n        // this is slow..\n        const searchResult = searchWithKey(table.array(), options.withKey, 0, options === null || options === void 0 ? void 0 : options.usesTableLine);\n        found = searchResult.found;\n        foundIndex = 0;\n    }\n    else if (((options === null || options === void 0 ? void 0 : options.binarySearch) === true || (options === null || options === void 0 ? void 0 : options.withTableKey) === true)\n        && options.withKeyValue\n        && ((options === null || options === void 0 ? void 0 : options.binarySearch) === true || ((_b = table.getOptions().primaryKey) === null || _b === void 0 ? void 0 : _b.type) !== types_1.TableAccessType.standard)\n        && options.withKey) {\n        // note: it currently only uses the first key field for binary search, todo\n        const first = options.withKeyValue[0];\n        const arr = table.array();\n        const startIndex = (0, binary_search_1.binarySearchFromRow)(arr, 0, arr.length, first.key, first.value, options.usesTableLine) - 1;\n        const searchResult = searchWithKey(arr, options.withKey, startIndex, options.usesTableLine);\n        found = searchResult.found;\n        foundIndex = searchResult.foundIndex;\n    }\n    else if (options === null || options === void 0 ? void 0 : options.withKey) {\n        const arr = table.array();\n        const searchResult = searchWithKey(arr, options.withKey, 0, options.usesTableLine);\n        found = searchResult.found;\n        foundIndex = searchResult.foundIndex;\n    }\n    else if (options === null || options === void 0 ? void 0 : options.from) {\n        if (options.from instanceof types_1.FieldSymbol) {\n            options.from = options.from.getPointer();\n        }\n        if (table instanceof types_1.HashedTable) {\n            throw new Error(\"runtime, todo readTable Hashed FROM\");\n        }\n        if (table instanceof types_1.Table && options.from instanceof types_1.Structure) {\n            const arr = table.array();\n            const keys = (_d = (_c = table.getOptions()) === null || _c === void 0 ? void 0 : _c.primaryKey) === null || _d === void 0 ? void 0 : _d.keyFields;\n            const isStructured = arr[0] instanceof types_1.Structure;\n            if (keys !== undefined && isStructured === true) {\n                //        console.dir(keys);\n                //        console.dir(options.from.get()[keys[0].toLowerCase()]);\n                for (const a of arr) {\n                    foundIndex++;\n                    let matches = true;\n                    for (const k of keys) {\n                        if ((0, compare_1.eq)(a.get()[k.toLowerCase()], options.from.get()[k.toLowerCase()]) === false) {\n                            matches = false;\n                            break;\n                        }\n                    }\n                    if (matches === true) {\n                        found = a;\n                        break;\n                    }\n                }\n            }\n        }\n        if (found === undefined) {\n            foundIndex = 0;\n        }\n    }\n    else {\n        throw new Error(\"runtime, readTable, unexpected input\");\n    }\n    let subrc = found ? 0 : 4;\n    if (((options === null || options === void 0 ? void 0 : options.from) || (options === null || options === void 0 ? void 0 : options.binarySearch) === true || (options === null || options === void 0 ? void 0 : options.keyName) !== undefined)\n        && subrc === 4) {\n        subrc = 8;\n    }\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(subrc);\n    // @ts-ignore\n    abap.builtin.sy.get().tabix.set(foundIndex);\n    if (options.into && found) {\n        if (options.into instanceof types_1.DataReference && found instanceof types_1.DataReference) {\n            options.into.assign(found.getPointer());\n        }\n        else if (options.into instanceof types_1.DataReference) {\n            options.into.assign(found);\n        }\n        else {\n            options.into.set(found);\n        }\n    }\n    else if (options.referenceInto && found) {\n        options.referenceInto.assign(found);\n    }\n    else if (options.assigning && found) {\n        options.assigning.assign(found);\n    }\n    return { subrc, foundIndex };\n}\nexports.readTable = readTable;\n//# sourceMappingURL=read_table.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/read_table.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/replace.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/replace.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replace = void 0;\nconst abap_regex_1 = __webpack_require__(/*! ../abap_regex */ \"./node_modules/@abaplint/runtime/build/src/abap_regex.js\");\nconst offset_length_1 = __webpack_require__(/*! ../offset_length */ \"./node_modules/@abaplint/runtime/build/src/offset_length.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction replace(input) {\n    let temp = input.target.get();\n    const ignoreCase = input.ignoringCase === true ? \"i\" : \"\";\n    const allOccurrences = input.all === true ? \"g\" : \"\";\n    let search = undefined;\n    let found = false;\n    if (input.of) {\n        let inp = input.of.get();\n        if (inp.length === 0 && input.all === true) {\n            throw \"REPLACE, zero length input\";\n        }\n        found = temp.indexOf(inp) >= 0;\n        inp = abap_regex_1.ABAPRegExp.escapeRegExp(inp);\n        search = new RegExp(inp, ignoreCase + allOccurrences);\n    }\n    else if (input.regex) {\n        const regex = abap_regex_1.ABAPRegExp.convert(input.regex.get());\n        if (regex.length === 0 && input.all === true) {\n            throw \"REPLACE, zero length input\";\n        }\n        found = temp.match(regex) !== null;\n        search = new RegExp(regex, ignoreCase + allOccurrences);\n    }\n    else if (input.sectionLength && input.sectionOffset) {\n        new offset_length_1.OffsetLength(input.target, { length: input.sectionLength, offset: input.sectionOffset }).set(input.with);\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(0);\n        return;\n    }\n    else {\n        throw \"REPLACE, unexpected input\";\n    }\n    let replace = \"\";\n    if (typeof input.with === \"string\") {\n        replace = input.with;\n    }\n    else {\n        if (input.with instanceof types_1.Character) {\n            replace = input.with.getTrimEnd();\n        }\n        else {\n            replace = input.with.get();\n        }\n        replace = replace.replace(/\\\\\\$/g, \"$\");\n        replace = replace.replace(/\\\\\\{/g, \"{\");\n        replace = replace.replace(/\\\\\\}/g, \"}\");\n    }\n    temp = temp.replace(search, replace);\n    const subrc = found ? 0 : 4;\n    // @ts-ignore\n    abap.builtin.sy.get().subrc.set(subrc);\n    input.target.set(temp);\n}\nexports.replace = replace;\n//# sourceMappingURL=replace.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/replace.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/rollback.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/rollback.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.rollback = void 0;\nfunction rollback() {\n    // todo\n}\nexports.rollback = rollback;\n//# sourceMappingURL=rollback.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/rollback.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/select.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/select.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SelectDatabase = void 0;\nconst clone_1 = __webpack_require__(/*! ../clone */ \"./node_modules/@abaplint/runtime/build/src/clone.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nclass SelectDatabase {\n    constructor(context) {\n        this.context = context;\n    }\n    async select(target, input, runtimeOptions) {\n        var _a, _b;\n        const { rows: rows } = await this.context.defaultDB().select(input);\n        if (target instanceof types_1.FieldSymbol) {\n            if (target.isAssigned() === false) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            // @ts-ignore\n            target = target.getPointer();\n        }\n        if ((runtimeOptions === null || runtimeOptions === void 0 ? void 0 : runtimeOptions.appending) !== true) {\n            if (Array.isArray(target)) {\n                target.forEach(f => f.clear());\n            }\n            else {\n                target === null || target === void 0 ? void 0 : target.clear();\n            }\n        }\n        if (rows.length === 0) {\n            // @ts-ignore\n            abap.builtin.sy.get().subrc.set(4);\n            return;\n        }\n        if (target instanceof types_1.Structure) {\n            const result = {};\n            for (const column in rows[0]) {\n                if (rows[0][column] === null) {\n                    continue;\n                }\n                result[column] = (0, clone_1.clone)(target.get()[column]).set(rows[0][column]);\n            }\n            // @ts-ignore\n            abap.statements.moveCorresponding(new types_1.Structure(result), target);\n        }\n        else if (target instanceof types_1.Table || target instanceof types_1.HashedTable) {\n            for (const row of rows) {\n                const targetRow = (0, clone_1.clone)(target.getRowType());\n                if (targetRow instanceof types_1.Structure) {\n                    for (let columnName in row) {\n                        columnName = columnName.toLowerCase();\n                        if (row[columnName] === null) {\n                            (_a = targetRow.get()[columnName]) === null || _a === void 0 ? void 0 : _a.clear();\n                            continue;\n                        }\n                        // @ts-ignore\n                        (_b = targetRow.get()[columnName]) === null || _b === void 0 ? void 0 : _b.set(row[columnName]);\n                    }\n                }\n                else {\n                    const columnName = Object.keys(row)[0];\n                    targetRow.set(row[columnName]);\n                }\n                // @ts-ignore\n                abap.statements.insertInternal({ table: target, data: targetRow });\n            }\n        }\n        else if (Array.isArray(target)) {\n            for (let index = 0; index < target.length; index++) {\n                const element = target[index];\n                element.set(rows[0][Object.keys(rows[0])[index]]);\n            }\n        }\n        else if (target !== undefined) {\n            // its a simple type\n            target.set(rows[0][Object.keys(rows[0])[0]]);\n        }\n        if (target === undefined && rows.length === 1) {\n            // @ts-ignore\n            abap.builtin.sy.get().dbcnt.set(Object.values(rows[0])[0]);\n        }\n        else {\n            // @ts-ignore\n            abap.builtin.sy.get().dbcnt.set(rows.length);\n        }\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(0);\n    }\n}\nexports.SelectDatabase = SelectDatabase;\n//# sourceMappingURL=select.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/select.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/set_bit.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/set_bit.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setBit = void 0;\nfunction setBit(number, hex, val) {\n    let hexFull = hex.get();\n    if (hexFull === \"\") {\n        hexFull = \"00\";\n    }\n    const fullByteLength = Math.ceil(hexFull.length / 2);\n    hexFull = hexFull.padEnd(fullByteLength * 2, \"0\");\n    const byteNum = Math.ceil(number.get() / 8);\n    if (byteNum > fullByteLength) {\n        return;\n    }\n    let pre = \"\";\n    let byte = \"\";\n    let post = \"\";\n    if (hexFull.length > 2) {\n        if (byteNum > 1) {\n            pre = hexFull.substr(0, (byteNum - 1) * 2);\n        }\n        byte = hexFull.substr((byteNum - 1) * 2, 2);\n        if (fullByteLength > byteNum) {\n            post = hexFull.substr(byteNum * 2, (fullByteLength - byteNum) * 2);\n        }\n    }\n    else {\n        byte = hexFull;\n    }\n    let bits = parseInt(byte, 16);\n    const bitMask = 1 << 8 - (number.get() - (byteNum - 1) * 8);\n    if ((val === null || val === void 0 ? void 0 : val.get()) === 0 || (val === null || val === void 0 ? void 0 : val.get()) === \"0\") {\n        bits = bits &= ~bitMask;\n    }\n    else {\n        bits = bits |= bitMask;\n    }\n    const reconstructed = pre + bits.toString(16).toUpperCase().padStart(2, \"0\") + post;\n    hex.set(reconstructed);\n}\nexports.setBit = setBit;\n//# sourceMappingURL=set_bit.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/set_bit.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/set_handler.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/set_handler.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setHandler = void 0;\nfunction setHandler(_methods, _f, _activation) {\n    // todo\n    return;\n}\nexports.setHandler = setHandler;\n//# sourceMappingURL=set_handler.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/set_handler.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/set_locale.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/set_locale.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setLocale = void 0;\nfunction setLocale(_source) {\n    // todo\n}\nexports.setLocale = setLocale;\n//# sourceMappingURL=set_locale.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/set_locale.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/shift.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/shift.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shift = void 0;\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nfunction shift(target, options) {\n    if ((options === null || options === void 0 ? void 0 : options.mode) === \"BYTE\") {\n        shift_byte_mode(target, options);\n    }\n    else {\n        shift_character_mode(target, options);\n    }\n}\nexports.shift = shift;\nfunction shift_character_mode(target, options) {\n    let value = target.get();\n    if (options === null || options === void 0 ? void 0 : options.deletingLeading) {\n        let leading = options.deletingLeading;\n        if (typeof leading !== \"string\") {\n            leading = leading.get();\n        }\n        const split = leading.split(\"\");\n        while (split.some(s => value.substr(0, 1) === s)) {\n            value = value.substr(1);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.deletingTrailing) {\n        let trailing = options.deletingTrailing;\n        if (typeof trailing !== \"string\") {\n            trailing = trailing.get();\n        }\n        if ((0, compare_1.co)(value, \" \") === false) {\n            while (value.endsWith(trailing)) {\n                value = \" \".repeat(trailing.length) + value.substring(0, value.length - trailing.length);\n            }\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.places) {\n        const p = options.places.get();\n        if (options.circular) {\n            value = value.substr(p) + value.substr(0, p);\n        }\n        else {\n            value = value.substr(p);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.to) {\n        let to = \"\";\n        if (typeof options.to === \"string\") {\n            to = options.to;\n        }\n        else {\n            to = options.to.get();\n        }\n        const index = value.search(to);\n        if (index > 0) {\n            value = value.substr(index);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.circular) {\n        if (options.direction === \"RIGHT\") {\n            value = value.substring(value.length - 1, value.length) + value.substring(0, value.length - 1);\n        }\n        else {\n            value = value.substr(1) + value.substr(0, 1);\n        }\n    }\n    else {\n        value = value.substr(1);\n    }\n    target.set(value);\n}\nfunction shift_byte_mode(target, options) {\n    let value = target.get();\n    if (options === null || options === void 0 ? void 0 : options.deletingLeading) {\n        let leading = options.deletingLeading;\n        if (typeof leading !== \"string\") {\n            leading = leading.get();\n        }\n        const split = leading.split(\"\");\n        while (split.some(s => value.substr(0, 2) === s)) {\n            value = value.substr(2);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.places) {\n        const p = options.places.get() * 2;\n        if (options.circular) {\n            value = value.substr(p) + value.substr(0, p);\n        }\n        else {\n            value = value.substr(p);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.to) {\n        let to = \"\";\n        if (typeof options.to === \"string\") {\n            to = options.to;\n        }\n        else {\n            to = options.to.get();\n        }\n        const index = value.search(to);\n        if (index > 0) {\n            value = value.substr(index);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.circular) {\n        value = value.substr(2) + value.substr(0, 2);\n    }\n    else {\n        value = value.substr(2);\n    }\n    target.set(value);\n}\n//# sourceMappingURL=shift.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/shift.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/sort.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/sort.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sort = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst compare_1 = __webpack_require__(/*! ../compare */ \"./node_modules/@abaplint/runtime/build/src/compare/index.js\");\nfunction compare(a, b, input) {\n    const componentName = input.component;\n    const descending = input.descending;\n    let vala = undefined;\n    let valb = undefined;\n    if (componentName === \"table_line\") {\n        vala = a.get();\n        valb = b.get();\n    }\n    else if (componentName.includes(\"-\")) {\n        const sub = componentName.split(\"-\");\n        vala = a;\n        valb = b;\n        for (const s of sub) {\n            vala = vala.get()[s];\n            valb = valb.get()[s];\n        }\n    }\n    else {\n        vala = a.get()[componentName];\n        valb = b.get()[componentName];\n    }\n    if (vala === undefined || valb === undefined) {\n        throw new Error(\"sort compare, wrong component name, \" + componentName);\n    }\n    if (descending && (0, compare_1.gt)(vala, valb)) {\n        return -1;\n    }\n    else if (!descending && (0, compare_1.lt)(vala, valb)) {\n        return -1;\n    }\n    else if ((0, compare_1.eq)(vala, valb)) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nfunction sort(input, options) {\n    //  console.dir(options);\n    if (input instanceof types_1.FieldSymbol) {\n        const pnt = input.getPointer();\n        if (pnt === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        sort(pnt, options);\n        return;\n    }\n    if (input instanceof types_1.HashedTable) {\n        throw new Error(\"Sort hashed table, ugh?\");\n    }\n    if (options === null || options === void 0 ? void 0 : options.by) {\n        if (options.by.length === 0) {\n            throw \"SortByLengthZero\";\n        }\n        input.sort((a, b) => {\n            for (const c of options.by || []) {\n                const res = compare(a, b, c);\n                if (res !== 0) {\n                    return res;\n                }\n            }\n            return 0;\n        });\n    }\n    else {\n        const descending = (options === null || options === void 0 ? void 0 : options.descending) === true;\n        input.sort((a, b) => {\n            if ((0, compare_1.eq)(a, b)) {\n                return 0;\n            }\n            else if (descending && (0, compare_1.gt)(a, b)) {\n                return -1;\n            }\n            else if (!descending && (0, compare_1.lt)(a, b)) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        });\n    }\n}\nexports.sort = sort;\n//# sourceMappingURL=sort.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/sort.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/split.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/split.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.split = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction split(param) {\n    const source = typeof param.source === \"string\" ? param.source : param.source.get();\n    const at = typeof param.at === \"string\" ? param.at : param.at.get();\n    const split = source.includes(at) ? source.split(at) : [];\n    if (param.table) {\n        if (source.endsWith(at)) {\n            split.pop();\n        }\n        param.table.clear();\n        for (const s of split) {\n            param.table.append(new types_1.String().set(s));\n        }\n        if (source !== \"\" && split.length === 0) {\n            param.table.append(new types_1.String().set(source));\n        }\n    }\n    if (param.targets) {\n        if (split.length === 0) {\n            split.push(source);\n        }\n        for (const t of param.targets) {\n            t.clear();\n            if (split.length > 0) {\n                t.set(split.shift().replace(/ +$/, \"\"));\n            }\n        }\n        if (split.length > 0) {\n            const concat = split.join(at);\n            const last = param.targets[param.targets.length - 1];\n            last.set(last.get() + at + concat);\n        }\n    }\n}\nexports.split = split;\n//# sourceMappingURL=split.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/split.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/translate.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/translate.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.translate = void 0;\nfunction translate(input, i) {\n    let c = i;\n    if (typeof c !== \"string\") {\n        c = c.get();\n    }\n    if (c === \"LOWER\") {\n        input.set(input.get().toLowerCase());\n    }\n    else if (c === \"UPPER\") {\n        input.set(input.get().toUpperCase());\n    }\n    else {\n        const chunks = c.match(/.{1,2}/g);\n        for (const chunk of chunks || []) {\n            let search = chunk.substr(0, 1);\n            const replace = chunk.substr(1, 1);\n            // regexp escaping\n            if (search === \"+\"\n                || search === \"*\"\n                || search === \"?\"\n                || search === \".\"\n                || search === \"^\"\n                || search === \"$\"\n                || search === \"|\"\n                || search === \"[\"\n                || search === \"]\"\n                || search === \"\\\\\"\n                || search === \"(\"\n                || search === \")\") {\n                search = \"\\\\\" + search;\n            }\n            input.set(input.get().replace(new RegExp(search, \"g\"), replace));\n        }\n    }\n}\nexports.translate = translate;\n//# sourceMappingURL=translate.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/translate.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/update_database.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/update_database.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateDatabase = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst insert_database_1 = __webpack_require__(/*! ./insert_database */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_database.js\");\nclass UpdateDatabase {\n    constructor(context) {\n        this.context = context;\n    }\n    async updateDatabase(table, options) {\n        if (options.table instanceof types_1.FieldSymbol) {\n            options.table = options.table.getPointer();\n        }\n        if (options.from instanceof types_1.FieldSymbol) {\n            options.from = options.from.getPointer();\n        }\n        if (typeof table !== \"string\") {\n            table = table.get();\n        }\n        // @ts-ignore\n        const keys = abap.DDIC[table.toUpperCase()].keyFields;\n        const where = [];\n        const set = [];\n        if (options.from) {\n            const structure = options.from.get();\n            for (const k of Object.keys(structure)) {\n                const str = k + \" = \" + (0, insert_database_1.toValue)(structure[k].get());\n                if (keys.includes(k.toUpperCase())) {\n                    where.push(str);\n                }\n                else {\n                    set.push(str);\n                }\n            }\n        }\n        else if (options.set) {\n            if (options.where) {\n                where.push(options.where);\n            }\n            set.push(...options.set);\n        }\n        else {\n            throw \"updateDatabase, todo\";\n        }\n        const { subrc, dbcnt } = await this.context.defaultDB().update({ table, where: where.join(\" AND \"), set });\n        // @ts-ignore\n        abap.builtin.sy.get().subrc.set(subrc);\n        // @ts-ignore\n        abap.builtin.sy.get().dbcnt.set(dbcnt);\n        return subrc;\n    }\n}\nexports.UpdateDatabase = UpdateDatabase;\n//# sourceMappingURL=update_database.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/update_database.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/statements/write.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/statements/write.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteStatement = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nclass WriteStatement {\n    constructor(context) {\n        this.context = context;\n    }\n    write(source, options) {\n        var _a;\n        if ((options === null || options === void 0 ? void 0 : options.skipLine) === true) {\n            this.context.console.add(\"\\n\");\n        }\n        else {\n            if ((options === null || options === void 0 ? void 0 : options.newLine) === true && this.context.console.get().length > 0) {\n                this.context.console.add(\"\\n\");\n            }\n            let result = \"\";\n            if (typeof source === \"string\" || typeof source === \"number\") {\n                result = source.toString();\n            }\n            else if (source instanceof types_1.Structure) {\n                const obj = source.getCharacter();\n                this.write(obj, Object.assign({}, options));\n            }\n            else if (source instanceof types_1.Float) {\n                if (((_a = options === null || options === void 0 ? void 0 : options.exponent) === null || _a === void 0 ? void 0 : _a.get()) === 0) {\n                    const tens = source.getRaw().toFixed(0).length - 1;\n                    if (options.noSign === true && source.getRaw() < 0) {\n                        result = source.getRaw().toFixed(17 - tens).replace(\".\", \",\");\n                        result = result.replace(\"-\", \"\");\n                    }\n                    else {\n                        result = source.getRaw().toFixed(16 - tens).replace(\".\", \",\");\n                    }\n                }\n                else {\n                    result = source.get().toString();\n                }\n            }\n            else if (source instanceof types_1.Packed) {\n                result = source.get().toFixed(source.getDecimals());\n            }\n            else {\n                result = source.get().toString();\n            }\n            if (options === null || options === void 0 ? void 0 : options.target) {\n                options.target.set(result);\n            }\n            else {\n                this.context.console.add(result);\n            }\n        }\n    }\n}\nexports.WriteStatement = WriteStatement;\n//# sourceMappingURL=write.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/statements/write.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/template_formatting.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/template_formatting.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.templateFormatting = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nfunction templateFormatting(source, options) {\n    let text = \"\";\n    if (source instanceof types_1.FieldSymbol) {\n        if (source.getPointer() === undefined) {\n            throw new Error(\"GETWA_NOT_ASSIGNED\");\n        }\n        return templateFormatting(source.getPointer(), options);\n    }\n    else if (source instanceof types_1.Table || source instanceof types_1.HashedTable) {\n        throw new Error(\"STRG_ILLEGAL_DATA_TYPE\");\n    }\n    else if (source instanceof types_1.Character) {\n        text = source.getTrimEnd();\n    }\n    else {\n        text = source.get() + \"\";\n    }\n    if ((options === null || options === void 0 ? void 0 : options.currency) !== undefined) {\n        throw \"template formatting with currency not supported\";\n    }\n    if ((options === null || options === void 0 ? void 0 : options.date) === \"iso\") {\n        text = text.substr(0, 4) + \"-\" + text.substr(4, 2) + \"-\" + text.substr(6, 2);\n    }\n    if ((options === null || options === void 0 ? void 0 : options.time) === \"iso\") {\n        text = text.substr(0, 2) + \":\" + text.substr(2, 2) + \":\" + text.substr(4, 2);\n    }\n    if ((options === null || options === void 0 ? void 0 : options.timestamp) === \"iso\") {\n        // make sure to get decimals from packed number,\n        text = templateFormatting(source).replace(\".\", \",\");\n        text = text.substr(0, 4) + \"-\" + text.substr(4, 2) + \"-\" + text.substr(6, 2) + \"T\" + text.substr(8, 2) + \":\" + text.substr(10, 2) + \":\" + text.substr(12, 2) + text.substr(14);\n        if (text === \"0--T::\") {\n            text = \"0000-00-00T00:00:00\";\n        }\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.width) && options.pad) {\n        if (options.align === \"right\") {\n            text = text.trimEnd().padStart(options.width, options.pad);\n        }\n        else {\n            text = text.trimEnd().padEnd(options.width, options.pad);\n        }\n    }\n    else if (options === null || options === void 0 ? void 0 : options.width) {\n        text = text.trimEnd().padEnd(options.width, \" \");\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.decimals) && source instanceof types_1.Integer) {\n        text = source.get().toFixed(options.decimals);\n    }\n    else if (source instanceof types_1.Packed) {\n        if (options === null || options === void 0 ? void 0 : options.decimals) {\n            text = source.get().toFixed(options.decimals);\n        }\n        else {\n            text = source.get().toFixed(source.getDecimals());\n        }\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.decimals) && source instanceof types_1.Float) {\n        text = source.getRaw().toFixed(options.decimals);\n    }\n    else if (source instanceof types_1.DecFloat34) {\n        const raw = source.getRaw();\n        if (Number.isInteger(raw)) {\n            text = raw.toFixed(0);\n        }\n        else {\n            text = raw + \"\";\n        }\n    }\n    else if (source instanceof types_1.Float) {\n        const raw = source.getRaw();\n        if (Number.isInteger(raw)) {\n            text = raw.toFixed(0);\n        }\n        else {\n            text = raw.toFixed(16);\n        }\n    }\n    return text;\n}\nexports.templateFormatting = templateFormatting;\n//# sourceMappingURL=template_formatting.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/template_formatting.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/throw_error.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/throw_error.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.throwError = void 0;\nfunction throwError(name) {\n    // @ts-ignore\n    if (abap.Classes[name] !== undefined) {\n        // @ts-ignore\n        throw new abap.Classes[name]();\n    }\n    else {\n        throw `Global class ${name} not found`;\n    }\n}\nexports.throwError = throwError;\n//# sourceMappingURL=throw_error.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/throw_error.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/_date_helper.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/_date_helper.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getNumberFromDate = exports.getDateFromNumber = void 0;\nfunction getDateFromNumber(value) {\n    const msInOneDay = 24 * 60 * 60 * 1000;\n    const date = new Date(-62135596800000 + value * msInOneDay);\n    let removeJulianLeaps = 2;\n    if (value <= 577736) {\n        let beforeGregorian = date.getFullYear() <= 1582 ? date.getFullYear() : 1582;\n        if (date.getMonth() < 1 || (date.getMonth() === 1 && date.getDay() < 29)) {\n            beforeGregorian -= 1;\n        }\n        removeJulianLeaps = Math.floor(beforeGregorian / 100) - Math.floor(beforeGregorian / 400);\n    }\n    date.setTime(date.getTime() - removeJulianLeaps * msInOneDay);\n    let ret = date.getFullYear().toString().padStart(4, \"0\");\n    ret += (date.getMonth() + 1).toString().padStart(2, \"0\");\n    ret += date.getDate().toString().padStart(2, \"0\");\n    return ret;\n}\nexports.getDateFromNumber = getDateFromNumber;\nfunction getNumberFromDate(value) {\n    const msInOneDay = 24 * 60 * 60 * 1000;\n    const date = new Date(-62135596800000);\n    date.setUTCFullYear(parseInt(value.substr(0, 4), 10));\n    date.setUTCMonth(parseInt(value.substr(4, 2), 10) - 1);\n    date.setUTCDate(parseInt(value.substr(6, 2), 10));\n    let days = Math.floor((date.getTime() + 62135596800000) / msInOneDay);\n    let addJulianLeaps = 2;\n    if (days <= 577736) {\n        let beforeGregorian = date.getFullYear() <= 1582 ? date.getFullYear() : 1582;\n        if (date.getMonth() < 1 || (date.getMonth() === 1 && date.getDay() < 29)) {\n            beforeGregorian -= 1;\n        }\n        addJulianLeaps = Math.floor(beforeGregorian / 100) - Math.floor(beforeGregorian / 400);\n    }\n    days = days + addJulianLeaps;\n    return days;\n}\nexports.getNumberFromDate = getNumberFromDate;\n//# sourceMappingURL=_date_helper.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/_date_helper.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/abap_object.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/abap_object.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABAPObject = void 0;\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nclass ABAPObject {\n    constructor(input) {\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n        this.clear();\n    }\n    get() {\n        return this.value;\n    }\n    clear() {\n        this.value = undefined;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (value instanceof ABAPObject) {\n            this.value = value.get();\n        }\n        else if (value instanceof field_symbol_1.FieldSymbol) {\n            this.value = value.getPointer().get();\n        }\n        else {\n            this.value = value;\n        }\n        return this;\n    }\n}\nexports.ABAPObject = ABAPObject;\n//# sourceMappingURL=abap_object.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/abap_object.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/character.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/character.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Character = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nconst structure_1 = __webpack_require__(/*! ./structure */ \"./node_modules/@abaplint/runtime/build/src/types/structure.js\");\nconst TRIMREGEX = / *$/;\nclass Character {\n    constructor(length, extra) {\n        this.constant = false;\n        this.length = length || 1;\n        if (typeof this.length === \"object\") {\n            throw \"Character, invalid length, object: \" + JSON.stringify(this.length);\n        }\n        else if (this.length <= 0) {\n            throw \"Character, invalid length, less than zero\";\n        }\n        this.extra = extra;\n        this.clear();\n    }\n    setConstant() {\n        this.constant = true;\n        return this;\n    }\n    set(value) {\n        if (this.constant === true) {\n            throw new Error(\"Changing constant\");\n        }\n        if (typeof value === \"string\" || typeof value === \"number\") {\n            this.value = value;\n        }\n        else if (value instanceof field_symbol_1.FieldSymbol) {\n            if (value.getPointer() === undefined) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            this.set(value.getPointer());\n            return this;\n        }\n        else if (value instanceof structure_1.Structure) {\n            this.set(value.getCharacter());\n            return this;\n        }\n        else {\n            this.value = value.get() + \"\";\n        }\n        if (this.value.length > this.length) {\n            this.value = this.value.substr(0, this.length);\n        }\n        else if (this.value.length < this.length) {\n            this.value = this.value.padEnd(this.length, \" \");\n        }\n        return this;\n    }\n    getQualifiedName() {\n        var _a;\n        return (_a = this.extra) === null || _a === void 0 ? void 0 : _a.qualifiedName;\n    }\n    getConversionExit() {\n        var _a;\n        return (_a = this.extra) === null || _a === void 0 ? void 0 : _a.conversionExit;\n    }\n    getDDICName() {\n        var _a;\n        return (_a = this.extra) === null || _a === void 0 ? void 0 : _a.ddicName;\n    }\n    getLength() {\n        return this.length;\n    }\n    clear() {\n        this.value = \" \".repeat(this.length);\n    }\n    get() {\n        return this.value;\n    }\n    getTrimEnd() {\n        if (this.value.endsWith(\" \") === true) {\n            return this.value.replace(TRIMREGEX, \"\");\n        }\n        else {\n            return this.value;\n        }\n    }\n    getOffset(input) {\n        let offset = input === null || input === void 0 ? void 0 : input.offset;\n        if (offset) {\n            offset = (0, _parse_1.parse)(offset);\n        }\n        let length = input === null || input === void 0 ? void 0 : input.length;\n        if (length) {\n            length = (0, _parse_1.parse)(length);\n        }\n        if ((offset && offset >= this.length)\n            || (offset && offset < 0)\n            || (length && length < 0)) {\n            (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n        }\n        let ret = this.value;\n        if (offset) {\n            ret = ret.substr(offset);\n        }\n        if (length !== undefined) {\n            ret = ret.substr(0, length);\n        }\n        const r = new Character(ret.length);\n        r.set(ret);\n        return r;\n    }\n}\nexports.Character = Character;\n//# sourceMappingURL=character.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/character.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/data_reference.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/data_reference.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataReference = void 0;\nconst string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nclass DataReference {\n    constructor(type) {\n        this.pointer = undefined;\n        this.type = type;\n    }\n    getType() {\n        return this.type;\n    }\n    assign(pointer) {\n        this.pointer = pointer;\n    }\n    unassign() {\n        this.pointer = undefined;\n    }\n    getPointer() {\n        return this.pointer;\n    }\n    dereference() {\n        return this.pointer;\n    }\n    ///////////////\n    clear() {\n        this.unassign();\n        //    return this.pointer?.clear();\n    }\n    get() {\n        var _a;\n        if (this.pointer === this) {\n            throw \"Cyclic data reference\";\n        }\n        // @ts-ignore\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.get();\n    }\n    array() {\n        var _a;\n        // @ts-ignore\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.array();\n    }\n    getArrayLength() {\n        var _a;\n        // @ts-ignore\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.getArrayLength();\n    }\n    set(value) {\n        var _a;\n        if (value instanceof DataReference) {\n            this.pointer = value.getPointer();\n            return this;\n        }\n        else if (value instanceof field_symbol_1.FieldSymbol) {\n            if (value.getPointer() === undefined) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            else if (value.getPointer() instanceof DataReference) {\n                this.pointer = value.getPointer().getPointer();\n                return this;\n            }\n            else {\n                throw new Error(\"OBJECTS_MOVE_NOT_SUPPORTED\");\n            }\n        }\n        else {\n            return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.set(value);\n        }\n        return this;\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        // Assuming we're interested in Strings here, for now...\n        let ret = this.get();\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            ret = ret.substr(input.offset);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            ret = ret.substr(0, input.length);\n        }\n        const r = new string_1.String();\n        r.set(ret);\n        return r;\n    }\n}\nexports.DataReference = DataReference;\n//# sourceMappingURL=data_reference.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/data_reference.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/date.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/date.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Date = void 0;\nconst string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst _date_helper_1 = __webpack_require__(/*! ./_date_helper */ \"./node_modules/@abaplint/runtime/build/src/types/_date_helper.js\");\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nclass Date {\n    constructor(input) {\n        this.clear();\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            if (value <= 0 || value > 3652060) {\n                this.value = \"00000000\";\n            }\n            else {\n                this.value = (0, _date_helper_1.getDateFromNumber)(value);\n            }\n        }\n        else if (value instanceof float_1.Float) {\n            this.set(Math.round(value.getRaw()));\n        }\n        else if (typeof value === \"string\") {\n            this.value = value;\n        }\n        else {\n            this.set(value.get());\n        }\n        if (this.value.length > 8) {\n            this.value = this.value.substr(0, 8);\n        }\n        else if (this.value.length < 8) {\n            this.value = this.value.padEnd(8, \" \");\n        }\n        return this;\n    }\n    clear() {\n        this.value = \"00000000\";\n    }\n    get() {\n        return this.value;\n    }\n    getNumeric() {\n        return (0, _date_helper_1.getNumberFromDate)(this.value);\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        let ret = this.value;\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            // @ts-ignore\n            ret = ret.substr(input.offset);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            // @ts-ignore\n            ret = ret.substr(0, input.length);\n        }\n        const r = new string_1.String();\n        r.set(ret);\n        return r;\n    }\n}\nexports.Date = Date;\n//# sourceMappingURL=date.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/date.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/decfloat34.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/decfloat34.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DecFloat34 = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"./node_modules/@abaplint/runtime/build/src/types/hex.js\");\nconst xstring_1 = __webpack_require__(/*! ./xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\");\nclass DecFloat34 {\n    constructor() {\n        this.value = 0;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            this.value = value;\n        }\n        else if (typeof value === \"string\" && value.trim().length === 0) {\n            this.value = 0;\n        }\n        else if (typeof value === \"string\") {\n            this.value = parseFloat(value);\n        }\n        else if (value instanceof _1.Float) {\n            this.value = value.getRaw();\n        }\n        else if (value instanceof hex_1.Hex || value instanceof xstring_1.XString) {\n            // todo, how/if should this work?\n            this.set(parseInt(value.get(), 16));\n        }\n        else {\n            this.set(value.get());\n        }\n        return this;\n    }\n    clear() {\n        this.value = 0;\n    }\n    getRaw() {\n        return this.value;\n    }\n    get() {\n        let text = new Number(this.value).toString();\n        text = text.replace(\".\", \",\");\n        return text;\n    }\n}\nexports.DecFloat34 = DecFloat34;\n//# sourceMappingURL=decfloat34.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/decfloat34.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/field_symbol.js":
/*!************************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/field_symbol.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FieldSymbol = void 0;\nconst table_1 = __webpack_require__(/*! ./table */ \"./node_modules/@abaplint/runtime/build/src/types/table.js\");\nconst string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"./node_modules/@abaplint/runtime/build/src/types/hex.js\");\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nconst data_reference_1 = __webpack_require__(/*! ./data_reference */ \"./node_modules/@abaplint/runtime/build/src/types/data_reference.js\");\nclass FieldSymbol {\n    constructor(type) {\n        this.pointer = undefined;\n        this.casting = false;\n        this.type = type;\n    }\n    getQualifiedName() {\n        // @ts-ignore\n        return this.type.getQualifiedName();\n    }\n    assign(pointer) {\n        this.pointer = pointer;\n    }\n    setCasting() {\n        this.casting = true;\n    }\n    unassign() {\n        this.pointer = undefined;\n    }\n    isAssigned() {\n        return this.pointer !== undefined;\n    }\n    getPointer() {\n        if (this.casting) {\n            // todo, this wont work for everything, eg changing CASTING'ed values\n            return this.get();\n        }\n        return this.pointer;\n    }\n    dereference() {\n        if (this.pointer instanceof data_reference_1.DataReference) {\n            return this.pointer.getPointer();\n        }\n        else {\n            return this.pointer;\n        }\n    }\n    ///////////////\n    clear() {\n        var _a;\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    get() {\n        var _a, _b, _c;\n        if (this.casting) {\n            if (this.type instanceof hex_1.Hex) {\n                const pt = this.pointer;\n                if (pt instanceof float_1.Float) {\n                    const buf = Buffer.allocUnsafe(8);\n                    buf.writeDoubleLE(pt.getRaw());\n                    return buf.toString(\"hex\").toUpperCase();\n                }\n                else {\n                    // @ts-ignore\n                    const ret = new string_1.String().set(Buffer.from((_a = this.pointer) === null || _a === void 0 ? void 0 : _a.get(), \"utf16le\").toString(\"hex\"));\n                    return ret.get();\n                }\n            }\n            else {\n                // @ts-ignore\n                const ret = new string_1.String().set(Buffer.from((_b = this.pointer) === null || _b === void 0 ? void 0 : _b.get(), \"hex\").toString(\"utf16le\"));\n                return ret.get();\n            }\n        }\n        else {\n            // @ts-ignore\n            return (_c = this.pointer) === null || _c === void 0 ? void 0 : _c.get();\n        }\n    }\n    appendInitial() {\n        if (this.pointer instanceof table_1.Table) {\n            return this.pointer.appendInitial();\n        }\n        return undefined;\n    }\n    array() {\n        var _a;\n        // @ts-ignore\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.array();\n    }\n    getArrayLength() {\n        var _a;\n        // @ts-ignore\n        return (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.getArrayLength();\n    }\n    set(value) {\n        var _a;\n        (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.set(value);\n        return this;\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        // Assuming we're interested in Strings here, for now...\n        let ret = this.get();\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            ret = ret.substr(input.offset);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            ret = ret.substr(0, input.length);\n        }\n        const r = new string_1.String();\n        r.set(ret);\n        return r;\n    }\n}\nexports.FieldSymbol = FieldSymbol;\n//# sourceMappingURL=field_symbol.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/field_symbol.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/float.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/float.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Float = void 0;\nconst hex_1 = __webpack_require__(/*! ./hex */ \"./node_modules/@abaplint/runtime/build/src/types/hex.js\");\nconst xstring_1 = __webpack_require__(/*! ./xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\");\n/*\nfunction getNumberParts(x: number) {\n  if(isNaN(x)) {\n    throw \"Float NaN\";\n  }\n  const sig = x > 0 ? 1 : -1;\n  if (!isFinite(x)) {\n    throw \"Float not finite\";\n  }\n  x = Math.abs(x);\n  const exp = Math.floor(Math.log(x) * Math.LOG2E) - 52;\n  const man = x / Math.pow(2, exp);\n  return {mantissa: sig * man, exponent: exp};\n}\n*/\nclass Float {\n    constructor(input) {\n        this.value = 0;\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            this.value = value;\n        }\n        else if (typeof value === \"string\" && value.trim().length === 0) {\n            this.value = 0;\n        }\n        else if (typeof value === \"string\") {\n            this.value = parseFloat(value);\n        }\n        else if (value instanceof Float) {\n            this.value = value.getRaw();\n        }\n        else if (value instanceof hex_1.Hex || value instanceof xstring_1.XString) {\n            // todo, how/if should this work?\n            this.set(parseInt(value.get(), 16));\n        }\n        else {\n            this.set(value.get());\n        }\n        return this;\n    }\n    clear() {\n        this.value = 0;\n    }\n    getRaw() {\n        return this.value;\n    }\n    get() {\n        let text = new Number(this.value).toExponential(16);\n        text = text.replace(\".\", \",\");\n        if (text.includes(\"e+\")) {\n            const split = text.split(\"e+\");\n            const mantissa = split[0];\n            const exponent = split[1].padStart(2, \"0\");\n            return mantissa + \"E+\" + exponent;\n        }\n        else {\n            const split = text.split(\"e-\");\n            const mantissa = split[0];\n            const exponent = split[1].padStart(2, \"0\");\n            return mantissa + \"E-\" + exponent;\n        }\n    }\n}\nexports.Float = Float;\n//# sourceMappingURL=float.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/float.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/hex.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/hex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Hex = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nconst xstring_1 = __webpack_require__(/*! ./xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\");\nclass Hex {\n    constructor(input) {\n        this.length = (input === null || input === void 0 ? void 0 : input.length) ? input === null || input === void 0 ? void 0 : input.length : 1;\n        this.value = \"0\".repeat(this.length * 2);\n    }\n    set(value) {\n        if (typeof value === \"string\") {\n            this.value = value;\n        }\n        else if (typeof value === \"number\") {\n            if (value < 0) {\n                const maxVal = Math.pow(2, this.length * 8);\n                this.value = Math.round(value + maxVal).toString(16);\n            }\n            else {\n                this.value = Math.round(value).toString(16);\n            }\n            this.value = this.value.padStart(this.length * 2, \"0\");\n        }\n        else {\n            let v = value.get();\n            if (value instanceof float_1.Float) {\n                v = value.getRaw();\n                this.set(v);\n            }\n            else if (typeof v === \"number\") {\n                this.set(v);\n            }\n            else {\n                this.value = v;\n                if (this.value.match(/^(?![A-F0-9])/)) {\n                    this.value = \"\";\n                }\n            }\n        }\n        if (this.value.length > this.length * 2) {\n            this.value = this.value.substr(0, this.length * 2);\n        }\n        if (this.value.length < this.length * 2) {\n            this.value = this.value.padEnd(this.length * 2, \"0\");\n        }\n        this.value = this.value.toUpperCase();\n        return this;\n    }\n    getLength() {\n        return this.length;\n    }\n    clear() {\n        this.value = \"\";\n    }\n    get() {\n        return this.value;\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        let ret = this.value;\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            // @ts-ignore\n            ret = ret.substr(input.offset * 2);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            // @ts-ignore\n            ret = ret.substr(0, input.length * 2);\n        }\n        const r = new xstring_1.XString();\n        r.set(ret);\n        return r;\n    }\n}\nexports.Hex = Hex;\n//# sourceMappingURL=hex.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/hex.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./abap_object */ \"./node_modules/@abaplint/runtime/build/src/types/abap_object.js\"), exports);\n__exportStar(__webpack_require__(/*! ./character */ \"./node_modules/@abaplint/runtime/build/src/types/character.js\"), exports);\n__exportStar(__webpack_require__(/*! ./data_reference */ \"./node_modules/@abaplint/runtime/build/src/types/data_reference.js\"), exports);\n__exportStar(__webpack_require__(/*! ./date */ \"./node_modules/@abaplint/runtime/build/src/types/date.js\"), exports);\n__exportStar(__webpack_require__(/*! ./decfloat34 */ \"./node_modules/@abaplint/runtime/build/src/types/decfloat34.js\"), exports);\n__exportStar(__webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\"), exports);\n__exportStar(__webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\"), exports);\n__exportStar(__webpack_require__(/*! ./hex */ \"./node_modules/@abaplint/runtime/build/src/types/hex.js\"), exports);\n__exportStar(__webpack_require__(/*! ./integer */ \"./node_modules/@abaplint/runtime/build/src/types/integer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./numc */ \"./node_modules/@abaplint/runtime/build/src/types/numc.js\"), exports);\n__exportStar(__webpack_require__(/*! ./packed */ \"./node_modules/@abaplint/runtime/build/src/types/packed.js\"), exports);\n__exportStar(__webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\"), exports);\n__exportStar(__webpack_require__(/*! ./structure */ \"./node_modules/@abaplint/runtime/build/src/types/structure.js\"), exports);\n__exportStar(__webpack_require__(/*! ./table */ \"./node_modules/@abaplint/runtime/build/src/types/table.js\"), exports);\n__exportStar(__webpack_require__(/*! ./time */ \"./node_modules/@abaplint/runtime/build/src/types/time.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utc_long */ \"./node_modules/@abaplint/runtime/build/src/types/utc_long.js\"), exports);\n__exportStar(__webpack_require__(/*! ./xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/index.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/integer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/integer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Integer = void 0;\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"./node_modules/@abaplint/runtime/build/src/types/hex.js\");\nconst xstring_1 = __webpack_require__(/*! ./xstring */ \"./node_modules/@abaplint/runtime/build/src/types/xstring.js\");\nconst digits = new RegExp(/^\\s*-?\\+?\\d+\\.?\\d*$/i);\nclass Integer {\n    constructor(input) {\n        this.value = 0;\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            this.value = Math.round(value);\n        }\n        else if (typeof value === \"string\") {\n            if (value.trim().length === 0) {\n                value = \"0\";\n            }\n            else if (digits.test(value) === false) {\n                (0, throw_error_1.throwError)(\"CX_SY_CONVERSION_NO_NUMBER\");\n            }\n            this.value = parseInt(value, 10);\n        }\n        else if (value instanceof float_1.Float) {\n            this.set(Math.round(value.getRaw()));\n        }\n        else if (value instanceof hex_1.Hex || value instanceof xstring_1.XString) {\n            let num = parseInt(value.get(), 16);\n            // handle two complement,\n            if (value instanceof hex_1.Hex && value.getLength() >= 4) {\n                const maxVal = Math.pow(2, value.get().length / 2 * 8);\n                if (num > maxVal / 2 - 1) {\n                    num = num - maxVal;\n                }\n            }\n            this.set(num);\n        }\n        else {\n            this.set(value.get());\n        }\n        return this;\n    }\n    clear() {\n        this.value = 0;\n    }\n    get() {\n        return this.value;\n    }\n}\nexports.Integer = Integer;\n//# sourceMappingURL=integer.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/integer.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/numc.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/numc.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Numc = void 0;\nclass Numc {\n    constructor(input) {\n        this.length = (input === null || input === void 0 ? void 0 : input.length) ? input === null || input === void 0 ? void 0 : input.length : 1;\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n        this.clear();\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            this.value = value.toString();\n        }\n        else if (typeof value === \"string\") {\n            this.value = parseInt(value, 10) + \"\";\n        }\n        else {\n            this.set(value.get());\n            return;\n        }\n        if (this.value.length > this.length) {\n            this.value = this.value.substr(this.value.length - this.length, this.length);\n        }\n        else {\n            const pad = this.length - this.value.length;\n            if (pad > 0) {\n                this.value = \"0\".repeat(pad) + this.value;\n            }\n        }\n        return this;\n    }\n    getLength() {\n        return this.length;\n    }\n    clear() {\n        this.value = \"0\".repeat(this.length);\n    }\n    get() {\n        return this.value;\n    }\n    getOffset(_input) {\n        throw \"todo, runtime, numc getOffset()\";\n    }\n}\nexports.Numc = Numc;\n//# sourceMappingURL=numc.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/numc.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/packed.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/packed.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Packed = void 0;\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nclass Packed {\n    constructor(input) {\n        this.value = 0;\n        this.length = 666;\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            this.length = input.length;\n        }\n        this.decimals = 0;\n        if (input === null || input === void 0 ? void 0 : input.decimals) {\n            this.decimals = input.decimals;\n        }\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    round(value, places) {\n        // @ts-ignore\n        return +(Math.round(value + \"e+\" + places) + \"e-\" + places);\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            this.value = value;\n        }\n        else if (typeof value === \"string\") {\n            this.value = this.round(parseFloat(value), this.decimals);\n        }\n        else if (value instanceof float_1.Float) {\n            this.value = this.round(value.getRaw(), this.decimals);\n        }\n        else {\n            this.set(value.get());\n        }\n        return this;\n    }\n    getLength() {\n        return this.length;\n    }\n    getDecimals() {\n        return this.decimals;\n    }\n    clear() {\n        this.value = 0;\n    }\n    get() {\n        return this.value;\n    }\n}\nexports.Packed = Packed;\n//# sourceMappingURL=packed.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/packed.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/string.js":
/*!******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/string.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.String = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nconst character_1 = __webpack_require__(/*! ./character */ \"./node_modules/@abaplint/runtime/build/src/types/character.js\");\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nconst integer_1 = __webpack_require__(/*! ./integer */ \"./node_modules/@abaplint/runtime/build/src/types/integer.js\");\nconst packed_1 = __webpack_require__(/*! ./packed */ \"./node_modules/@abaplint/runtime/build/src/types/packed.js\");\nconst structure_1 = __webpack_require__(/*! ./structure */ \"./node_modules/@abaplint/runtime/build/src/types/structure.js\");\nclass String {\n    constructor(input) {\n        this.value = \"\";\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (value instanceof field_symbol_1.FieldSymbol) {\n            if (value.getPointer() === undefined) {\n                throw new Error(\"GETWA_NOT_ASSIGNED\");\n            }\n            return this.set(value.getPointer());\n        }\n        else if (typeof value === \"string\") {\n            this.value = value;\n        }\n        else if (typeof value === \"number\") {\n            this.value = value.toString();\n        }\n        else if (value instanceof character_1.Character) {\n            // replace trailing blanks if the source is a Character string\n            this.value = value.getTrimEnd();\n        }\n        else if (value instanceof structure_1.Structure) {\n            this.value = value.getCharacter();\n        }\n        else if (value instanceof packed_1.Packed) {\n            const lv_sign = value.get() >= 0 ? \" \" : \"-\";\n            this.value = Math.abs(value.get()).toFixed(value.getDecimals());\n            this.value += lv_sign;\n        }\n        else if (value instanceof integer_1.Integer) {\n            const lv_sign = value.get() >= 0 ? \" \" : \"-\";\n            this.value = Math.abs(value.get()) + \"\";\n            this.value += lv_sign;\n        }\n        else {\n            this.value = value.get() + \"\";\n        }\n        return this;\n    }\n    clear() {\n        this.value = \"\";\n    }\n    get() {\n        return this.value;\n    }\n    getOffset(input) {\n        let offset = input === null || input === void 0 ? void 0 : input.offset;\n        if (offset) {\n            offset = (0, _parse_1.parse)(offset);\n        }\n        let length = input === null || input === void 0 ? void 0 : input.length;\n        if (length) {\n            length = (0, _parse_1.parse)(length);\n        }\n        if ((offset && offset > this.value.length)\n            || (offset && offset < 0)\n            || (length && length < 0)) {\n            (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n        }\n        let ret = this.value;\n        if (offset) {\n            ret = ret.substr(offset);\n        }\n        if (length !== undefined) {\n            ret = ret.substr(0, length);\n        }\n        const r = new String();\n        r.set(ret);\n        return r;\n    }\n}\nexports.String = String;\n//# sourceMappingURL=string.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/string.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/structure.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/structure.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Structure = void 0;\nconst clone_1 = __webpack_require__(/*! ../clone */ \"./node_modules/@abaplint/runtime/build/src/clone.js\");\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nconst table_1 = __webpack_require__(/*! ./table */ \"./node_modules/@abaplint/runtime/build/src/types/table.js\");\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst character_1 = __webpack_require__(/*! ./character */ \"./node_modules/@abaplint/runtime/build/src/types/character.js\");\nconst throw_error_1 = __webpack_require__(/*! ../throw_error */ \"./node_modules/@abaplint/runtime/build/src/throw_error.js\");\nclass Structure {\n    constructor(fields, qualifiedName, ddicName) {\n        this.value = fields;\n        this.qualifiedName = qualifiedName === null || qualifiedName === void 0 ? void 0 : qualifiedName.toUpperCase();\n        this.ddicName = ddicName === null || ddicName === void 0 ? void 0 : ddicName.toUpperCase();\n    }\n    clear() {\n        for (const f in this.value) {\n            // @ts-ignore\n            this.value[f].clear();\n        }\n        return this;\n    }\n    getDDICName() {\n        return this.ddicName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(input) {\n        if (input === undefined) {\n            return;\n        }\n        if (input instanceof field_symbol_1.FieldSymbol) {\n            this.set(input.getPointer());\n        }\n        else if (input instanceof table_1.Table) {\n            throw \"Structure, input is a table\";\n        }\n        else if (input instanceof Structure) {\n            const obj = input.get();\n            const keys1 = Object.keys(obj);\n            const keys2 = Object.keys(this.value);\n            /*\n            console.dir(keys1);\n            console.dir(keys2);\n      */\n            for (let i = 0; i < keys1.length; i++) {\n                const key1 = keys1[i];\n                const key2 = keys2[i];\n                this.value[key2].set((0, clone_1.clone)(obj[key1]));\n            }\n            /*\n                  for (const f in obj) {\n                    // @ts-ignore\n                    this.value[f].set(clone(obj[f]));\n                  }\n                  */\n        }\n        else {\n            this.setCharacter(input);\n        }\n        return this;\n    }\n    setCharacter(input) {\n        this.clear();\n        let val = input;\n        if (typeof val !== \"string\") {\n            val = val.get() + \"\";\n        }\n        for (const key of Object.keys(this.value)) {\n            const targetLength = this.value[key].getLength();\n            this.value[key].set(val.substr(0, targetLength));\n            val = val.substr(targetLength);\n        }\n    }\n    get() {\n        return this.value;\n    }\n    getCharacter() {\n        let val = \"\";\n        for (const v in this.value) {\n            val += this.value[v].get();\n        }\n        return val;\n    }\n    getOffset(input) {\n        let offset = input === null || input === void 0 ? void 0 : input.offset;\n        if (offset) {\n            offset = (0, _parse_1.parse)(offset);\n        }\n        let length = input === null || input === void 0 ? void 0 : input.length;\n        if (length) {\n            length = (0, _parse_1.parse)(length);\n        }\n        const val = this.getCharacter();\n        if ((offset && offset >= val.length)\n            || (offset && offset < 0)\n            || (length && length < 0)) {\n            (0, throw_error_1.throwError)(\"CX_SY_RANGE_OUT_OF_BOUNDS\");\n        }\n        let ret = val;\n        if (offset) {\n            ret = ret.substr(offset);\n        }\n        if (length !== undefined) {\n            ret = ret.substr(0, length);\n        }\n        const r = new character_1.Character(ret.length);\n        r.set(ret);\n        return r;\n    }\n}\nexports.Structure = Structure;\n//# sourceMappingURL=structure.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/structure.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/table.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/table.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Table = exports.HashedTable = exports.SortedTable = exports.TableFactory = exports.featureHashedTables = exports.LoopController = exports.TableKeyType = exports.TableAccessType = void 0;\nconst integer_1 = __webpack_require__(/*! ./integer */ \"./node_modules/@abaplint/runtime/build/src/types/integer.js\");\nconst string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst clone_1 = __webpack_require__(/*! ../clone */ \"./node_modules/@abaplint/runtime/build/src/clone.js\");\nconst structure_1 = __webpack_require__(/*! ./structure */ \"./node_modules/@abaplint/runtime/build/src/types/structure.js\");\nconst field_symbol_1 = __webpack_require__(/*! ./field_symbol */ \"./node_modules/@abaplint/runtime/build/src/types/field_symbol.js\");\nconst data_reference_1 = __webpack_require__(/*! ./data_reference */ \"./node_modules/@abaplint/runtime/build/src/types/data_reference.js\");\nconst insert_internal_1 = __webpack_require__(/*! ../statements/insert_internal */ \"./node_modules/@abaplint/runtime/build/src/statements/insert_internal.js\");\nconst sort_1 = __webpack_require__(/*! ../statements/sort */ \"./node_modules/@abaplint/runtime/build/src/statements/sort.js\");\nvar TableAccessType;\n(function (TableAccessType) {\n    TableAccessType[\"standard\"] = \"STANDARD\";\n    TableAccessType[\"sorted\"] = \"SORTED\";\n    TableAccessType[\"hashed\"] = \"HASHED\";\n    TableAccessType[\"index\"] = \"INDEX\";\n    TableAccessType[\"any\"] = \"ANY\";\n})(TableAccessType = exports.TableAccessType || (exports.TableAccessType = {}));\nvar TableKeyType;\n(function (TableKeyType) {\n    TableKeyType[\"default\"] = \"DEFAULT\";\n    TableKeyType[\"user\"] = \"USER\";\n    TableKeyType[\"empty\"] = \"EMPTY\";\n})(TableKeyType = exports.TableKeyType || (exports.TableKeyType = {}));\nclass LoopController {\n    constructor(from, loopTo, array) {\n        this.index = from;\n        this.loopTo = loopTo;\n        this.array = array;\n    }\n}\nexports.LoopController = LoopController;\n// eslint-disable-next-line prefer-const\nexports.featureHashedTables = true;\nclass TableFactory {\n    static construct(rowType, options, qualifiedName) {\n        var _a;\n        if (options === undefined) {\n            options = {\n                primaryKey: {\n                    name: \"primary_key\",\n                    type: TableAccessType.standard,\n                    keyFields: [],\n                    isUnique: false,\n                },\n                keyType: TableKeyType.default,\n                withHeader: false,\n            };\n        }\n        if (exports.featureHashedTables === true && ((_a = options.primaryKey) === null || _a === void 0 ? void 0 : _a.type) === TableAccessType.hashed) {\n            return new HashedTable(rowType, options, qualifiedName);\n        }\n        else {\n            return new Table(rowType, options, qualifiedName);\n        }\n    }\n}\nexports.TableFactory = TableFactory;\nclass SortedTable {\n}\nexports.SortedTable = SortedTable;\nclass HashedTable {\n    constructor(rowType, options, qualifiedName) {\n        this.value = {};\n        this.secondaryIndexes = {};\n        this.loops = new Set();\n        this.rowType = rowType;\n        this.options = options;\n        this.options = options;\n        if ((options === null || options === void 0 ? void 0 : options.withHeader) === true) {\n            this.header = (0, clone_1.clone)(this.rowType);\n        }\n        this.qualifiedName = qualifiedName === null || qualifiedName === void 0 ? void 0 : qualifiedName.toUpperCase();\n    }\n    getArrayLength() {\n        return Object.keys(this.value).length;\n    }\n    getKeyByName(name) {\n        var _a, _b;\n        return (_b = (_a = this.getOptions()) === null || _a === void 0 ? void 0 : _a.secondary) === null || _b === void 0 ? void 0 : _b.find(s => s.name.toUpperCase() === name.toUpperCase());\n    }\n    getSecondaryIndex(name) {\n        if (this.secondaryIndexes[name.toUpperCase()]) {\n            return this.secondaryIndexes[name.toUpperCase()];\n        }\n        const secondary = this.getKeyByName(name);\n        if (secondary === undefined) {\n            throw `Table, secondary key \"${name}\" not found`;\n        }\n        // note, array() already is a copy, so it acn be used,\n        const copy = this.array();\n        (0, sort_1.sort)(copy, { by: secondary.keyFields.map(k => { return { component: k.toLowerCase() }; }) });\n        this.secondaryIndexes[name.toUpperCase()] = copy;\n        return copy;\n    }\n    buildHashFromData(data) {\n        let hash = \"\";\n        for (const k of this.options.primaryKey.keyFields) {\n            if (k === \"TABLE_LINE\") {\n                if (data instanceof structure_1.Structure) {\n                    hash += k + \":\" + data.getCharacter() + \"|\";\n                }\n                else {\n                    // @ts-ignore\n                    hash += k + \":\" + data.get() + \"|\";\n                }\n            }\n            else {\n                // @ts-ignore\n                let val = data.get()[k.toLowerCase()];\n                if (val instanceof structure_1.Structure) {\n                    val = val.getCharacter();\n                }\n                else {\n                    val = val.get();\n                }\n                hash += k + \":\" + val + \"|\";\n            }\n        }\n        return hash;\n    }\n    deleteIndex(_index) {\n        throw new Error(\"HashedTable, deleteIndex\");\n    }\n    deleteFrom(row) {\n        const hash = this.buildHashFromData(row);\n        delete this.value[hash];\n    }\n    buildHashFromSimple(data) {\n        let hash = \"\";\n        for (const k of this.options.primaryKey.keyFields) {\n            let val = data[k.toLowerCase()];\n            if (val instanceof structure_1.Structure) {\n                val = val.getCharacter();\n            }\n            else {\n                val = val.get();\n            }\n            hash += k + \":\" + val + \"|\";\n        }\n        return hash;\n    }\n    read(hash) {\n        return this.value[hash];\n    }\n    insert(data) {\n        const hash = this.buildHashFromData(data);\n        if (this.value[hash] !== undefined) {\n            return { value: undefined, subrc: 4 };\n        }\n        else {\n            const val = this.getValue(data);\n            for (const loopController of this.loops.values()) {\n                loopController.array.push(val);\n            }\n            this.value[hash] = val;\n            return { value: val, subrc: 0 };\n        }\n    }\n    array() {\n        // used for LOOP\n        const ret = [];\n        for (const hash in this.value) {\n            ret.push(this.value[hash]);\n        }\n        return ret;\n    }\n    startLoop(from, to, array) {\n        const l = new LoopController(from, to, array);\n        this.loops.add(l);\n        return l;\n    }\n    unregisterLoop(loop) {\n        this.loops.delete(loop);\n    }\n    insertIndex(_item, _index) {\n        throw new Error(\"Hash table insert index\");\n    }\n    append(_item) {\n        throw new Error(\"Hash table append\");\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    getOptions() {\n        return this.options;\n    }\n    getRowType() {\n        return this.rowType;\n    }\n    clear() {\n        this.value = {};\n        this.secondaryIndexes = {};\n    }\n    set(tab) {\n        this.clear();\n        if (tab instanceof Table || tab instanceof HashedTable) {\n            for (const a of tab.array()) {\n                this.insert(a);\n            }\n            return this;\n        }\n        else {\n            throw new Error(\"Method not implemented, set hashed table\");\n        }\n    }\n    getHeader() {\n        if (this.header === undefined) {\n            throw \"table, getHeader\";\n        }\n        return this.header;\n    }\n    ///////////////////////////\n    getValue(item) {\n        // make sure to do conversion if needed\n        if (typeof item === \"number\") {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(new integer_1.Integer().set(item));\n            return tmp;\n        }\n        else if (typeof item === \"string\") {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(new string_1.String().set(item));\n            return tmp;\n            // @ts-ignore\n            // eslint-disable-next-line max-len\n        }\n        else if (this.isStructured === true && item.getQualifiedName && this.rowType.getQualifiedName && item.getQualifiedName() !== \"\" && item.getQualifiedName() === this.rowType.getQualifiedName()) {\n            // types match, so no need to do conversions, just clone the item\n            const val = (0, clone_1.clone)(item);\n            return val;\n        }\n        else {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(item);\n            return tmp;\n        }\n    }\n}\nexports.HashedTable = HashedTable;\nclass Table {\n    constructor(rowType, options, qualifiedName) {\n        this.value = [];\n        this.secondaryIndexes = {};\n        this.loops = new Set();\n        this.rowType = rowType;\n        this.options = options;\n        this.isStructured = rowType instanceof structure_1.Structure;\n        if ((options === null || options === void 0 ? void 0 : options.withHeader) === true) {\n            this.header = (0, clone_1.clone)(this.rowType);\n        }\n        this.qualifiedName = qualifiedName === null || qualifiedName === void 0 ? void 0 : qualifiedName.toUpperCase();\n    }\n    getArrayLength() {\n        return this.value.length;\n    }\n    getKeyByName(name) {\n        var _a, _b;\n        return (_b = (_a = this.getOptions()) === null || _a === void 0 ? void 0 : _a.secondary) === null || _b === void 0 ? void 0 : _b.find(s => s.name.toUpperCase() === name.toUpperCase());\n    }\n    getSecondaryIndex(name) {\n        if (this.secondaryIndexes[name.toUpperCase()]) {\n            return this.secondaryIndexes[name.toUpperCase()];\n        }\n        const secondary = this.getKeyByName(name);\n        if (secondary === undefined) {\n            throw `Table, secondary key \"${name}\" not found`;\n        }\n        const copy = [...this.value];\n        (0, sort_1.sort)(copy, { by: secondary.keyFields.map(k => { return { component: k.toLowerCase() }; }) });\n        this.secondaryIndexes[name.toUpperCase()] = copy;\n        return copy;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    getOptions() {\n        return this.options;\n    }\n    startLoop(from, to, array) {\n        const l = new LoopController(from, to, array);\n        this.loops.add(l);\n        return l;\n    }\n    unregisterLoop(loop) {\n        this.loops.delete(loop);\n    }\n    getRowType() {\n        return this.rowType;\n    }\n    // Modifications to the array must be done inside this class, in order to keep track of LOOP indexes\n    array() {\n        return this.value;\n    }\n    clear() {\n        this.value = [];\n        this.secondaryIndexes = {};\n    }\n    set(tab) {\n        var _a, _b;\n        this.secondaryIndexes = {};\n        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.withHeader) === true) {\n            (_b = this.header) === null || _b === void 0 ? void 0 : _b.set(tab);\n        }\n        else {\n            if (!(tab instanceof Table) && !(tab instanceof field_symbol_1.FieldSymbol)) {\n                throw \"Table, set error\";\n            }\n            this.clear();\n            if (tab instanceof field_symbol_1.FieldSymbol) {\n                tab = tab.getPointer();\n            }\n            // this clones the values, and add sorting if required\n            (0, insert_internal_1.insertInternal)({ table: this, data: tab, lines: true });\n        }\n        return this;\n    }\n    getHeader() {\n        if (this.header === undefined) {\n            throw \"table, getHeader\";\n        }\n        return this.header;\n    }\n    insertIndex(item, index) {\n        this.secondaryIndexes = {};\n        if (item instanceof field_symbol_1.FieldSymbol) {\n            const p = item.getPointer();\n            if (p === undefined) {\n                throw new Error(\"insertIndex, fs not assigned\");\n            }\n            this.insertIndex(p, index);\n            return p;\n        }\n        const val = this.getValue(item);\n        if (index === 0) {\n            this.value.unshift(val);\n        }\n        else if (index === this.value.length) {\n            this.value.push(val);\n        }\n        else {\n            this.value.splice(index, 0, val);\n        }\n        for (const loopController of this.loops.values()) {\n            if (index <= loopController.index) {\n                loopController.index++;\n            }\n        }\n        return val;\n    }\n    deleteIndex(index) {\n        this.secondaryIndexes = {};\n        if (index > this.value.length) {\n            return;\n        }\n        if (index === this.value.length - 1) {\n            this.value.pop(); // pop'ing is faster than splice\n        }\n        else if (index === 0) {\n            this.value.shift();\n        }\n        else {\n            this.value.splice(index, 1);\n        }\n        for (const l of this.loops.values()) {\n            if (l.index >= index) {\n                l.index--;\n            }\n        }\n    }\n    append(item) {\n        this.secondaryIndexes = {};\n        if (item instanceof field_symbol_1.FieldSymbol) {\n            const p = item.getPointer();\n            if (p === undefined) {\n                throw new Error(\"APPEND, fs not assigned\");\n            }\n            this.append(p);\n            return p;\n        }\n        else if (item instanceof data_reference_1.DataReference) {\n            const ref = new data_reference_1.DataReference(item.getType());\n            ref.assign(item.getPointer());\n            this.value.push(ref);\n            return ref;\n        }\n        else {\n            const val = this.getValue(item);\n            this.value.push(val);\n            return val;\n        }\n    }\n    appendInitial() {\n        this.secondaryIndexes = {};\n        // note that this will clone the object\n        this.append(this.rowType);\n        // @ts-ignore\n        abap.builtin.sy.get().tabix.set(this.value.length);\n        return this.value[this.value.length - 1];\n    }\n    sort(compareFn) {\n        this.value.sort(compareFn);\n    }\n    ///////////////////////////\n    getValue(item) {\n        // make sure to do conversion if needed\n        if (typeof item === \"number\") {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(new integer_1.Integer().set(item));\n            return tmp;\n        }\n        else if (typeof item === \"string\") {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(new string_1.String().set(item));\n            return tmp;\n            // @ts-ignore\n            // eslint-disable-next-line max-len\n        }\n        else if (this.isStructured === true && item.getQualifiedName && this.rowType.getQualifiedName && item.getQualifiedName() !== \"\" && item.getQualifiedName() === this.rowType.getQualifiedName()) {\n            // types match, so no need to do conversions, just clone the item\n            const val = (0, clone_1.clone)(item);\n            return val;\n        }\n        else {\n            const tmp = (0, clone_1.clone)(this.getRowType());\n            tmp.set(item);\n            return tmp;\n        }\n    }\n}\nexports.Table = Table;\n//# sourceMappingURL=table.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/table.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/time.js":
/*!****************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/time.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Time = void 0;\nconst string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@abaplint/runtime/build/src/types/string.js\");\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@abaplint/runtime/build/src/types/index.js\");\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nclass Time {\n    constructor(input) {\n        this.clear();\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"number\") {\n            const date = new Date();\n            date.setTime(value * 1000);\n            this.value = date.getUTCHours().toString().padStart(2, \"0\") +\n                date.getUTCMinutes().toString().padStart(2, \"0\") +\n                date.getUTCSeconds().toString().padStart(2, \"0\");\n        }\n        else if (typeof value === \"string\") {\n            this.value = value;\n        }\n        else if (value instanceof _1.Float) {\n            this.set(Math.round(value.getRaw()));\n        }\n        else {\n            this.set(value.get());\n        }\n        return this;\n    }\n    clear() {\n        this.value = \"000000\";\n    }\n    get() {\n        return this.value;\n    }\n    getNumeric() {\n        const hours = parseInt(this.value.substr(0, 2), 10);\n        const minutes = parseInt(this.value.substr(2, 2), 10);\n        const seconds = parseInt(this.value.substr(4, 2), 10);\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        let ret = this.value;\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            // @ts-ignore\n            ret = ret.substr(input.offset);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            // @ts-ignore\n            ret = ret.substr(0, input.length);\n        }\n        const r = new string_1.String();\n        r.set(ret);\n        return r;\n    }\n}\nexports.Time = Time;\n//# sourceMappingURL=time.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/time.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/utc_long.js":
/*!********************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/utc_long.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UTCLong = void 0;\nclass UTCLong {\n    constructor(input) {\n        this.clear();\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    getOffset(_input) {\n        throw new Error(\"Method not implemented, getOffset(), utcLong\");\n    }\n    set(_value) {\n        // todo\n        return this;\n    }\n    clear() {\n        this.value = \"\";\n    }\n    get() {\n        return this.value;\n    }\n}\nexports.UTCLong = UTCLong;\n//# sourceMappingURL=utc_long.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/utc_long.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/types/xstring.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/types/xstring.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.XString = void 0;\nconst _parse_1 = __webpack_require__(/*! ../operators/_parse */ \"./node_modules/@abaplint/runtime/build/src/operators/_parse.js\");\nconst float_1 = __webpack_require__(/*! ./float */ \"./node_modules/@abaplint/runtime/build/src/types/float.js\");\nclass XString {\n    constructor(input) {\n        this.value = \"\";\n        this.qualifiedName = input === null || input === void 0 ? void 0 : input.qualifiedName;\n    }\n    getQualifiedName() {\n        return this.qualifiedName;\n    }\n    set(value) {\n        if (typeof value === \"string\") {\n            this.value = value;\n            const finalLength = Math.ceil(this.value.length / 2) * 2;\n            this.value = this.value.padEnd(finalLength, \"0\");\n        }\n        else if (typeof value === \"number\") {\n            this.value = Math.round(value).toString(16);\n            if (this.value.length % 2 === 1) {\n                this.value = \"0\" + this.value;\n            }\n        }\n        else {\n            let v = value.get();\n            if (value instanceof float_1.Float) {\n                v = value.getRaw();\n                this.set(v);\n            }\n            else if (typeof v === \"number\") {\n                this.value = v.toString(16);\n                const finalLength = Math.ceil(this.value.length / 2) * 2;\n                this.value = this.value.padStart(finalLength, \"0\");\n            }\n            else {\n                this.set(v);\n            }\n        }\n        return this;\n    }\n    clear() {\n        this.value = \"\";\n    }\n    get() {\n        return this.value;\n    }\n    getOffset(input) {\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            input.offset = (0, _parse_1.parse)(input.offset);\n        }\n        if (input === null || input === void 0 ? void 0 : input.length) {\n            input.length = (0, _parse_1.parse)(input.length);\n        }\n        let ret = this.value;\n        if (input === null || input === void 0 ? void 0 : input.offset) {\n            // @ts-ignore\n            ret = ret.substr(input.offset * 2);\n        }\n        if ((input === null || input === void 0 ? void 0 : input.length) !== undefined) {\n            // @ts-ignore\n            ret = ret.substr(0, input.length * 2);\n        }\n        const r = new XString();\n        r.set(ret);\n        return r;\n    }\n}\nexports.XString = XString;\n//# sourceMappingURL=xstring.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/types/xstring.js?");

/***/ }),

/***/ "./node_modules/@abaplint/runtime/build/src/unit_test.js":
/*!***************************************************************!*\
  !*** ./node_modules/@abaplint/runtime/build/src/unit_test.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnitTestResult = void 0;\n/* eslint-disable max-len */\nclass UnitTestMethodResult {\n    constructor(name) {\n        this.name = name;\n        this.result = undefined;\n        this.result = undefined;\n    }\n    pass() {\n        this.result = \"Pass\";\n    }\n    fail() {\n        this.result = \"Fail\";\n    }\n    skip() {\n        this.result = \"Skip\";\n    }\n}\nclass UnitTestClassResult {\n    constructor(name) {\n        this.name = name;\n        this.methods = [];\n    }\n    addMethod(name) {\n        const ret = new UnitTestMethodResult(name);\n        this.methods.push(ret);\n        return ret;\n    }\n}\nclass UnitTestObjectResult {\n    constructor(name) {\n        this.name = name;\n        this.classes = [];\n    }\n    addTestClass(name) {\n        const ret = new UnitTestClassResult(name);\n        this.classes.push(ret);\n        return ret;\n    }\n}\nclass UnitTestResult {\n    constructor() {\n        this.objects = [];\n    }\n    addObject(name) {\n        const ret = new UnitTestObjectResult(name);\n        this.objects.push(ret);\n        return ret;\n    }\n    xUnitXML() {\n        // https://xunit.net/docs/format-xml-v2\n        // <assemblies> = project\n        // <assembly> = global object/global class\n        // <collection> = local class\n        // <test> = method\n        let ret = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<assemblies>\\n`;\n        for (const obj of this.objects) {\n            ret += `  <assembly name=\"${obj.name}\" test-framework=\"abap-framework\" environment=\"abap-environment\">\\n`;\n            for (const clas of obj.classes) {\n                ret += `    <collection name=\"${clas.name}\">\\n`;\n                for (const meth of clas.methods) {\n                    ret += `      ` +\n                        `<test name=\"${obj.name}.${clas.name}.${meth.name}\" type=\"${obj.name}.${clas.name}\" method=\"${obj.name}.${clas.name}.${meth.name}\" time=\"0\" result=\"${meth.result}\"></test>\\n`;\n                }\n                ret += `    </collection>\\n`;\n            }\n            ret += `  </assembly>\\n`;\n        }\n        ret += `</assemblies>`;\n        return ret;\n    }\n}\nexports.UnitTestResult = UnitTestResult;\n//# sourceMappingURL=unit_test.js.map\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/@abaplint/runtime/build/src/unit_test.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "?2460":
/*!****************************!*\
  !*** util/types (ignored) ***!
  \****************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://open-table-maintenance/util/types_(ignored)?");

/***/ }),

/***/ "?d19c":
/*!*********************************************!*\
  !*** ./%23ui2%23cl_json.clas.mjs (ignored) ***!
  \*********************************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://open-table-maintenance/./%2523ui2%2523cl_json.clas.mjs_(ignored)?");

/***/ }),

/***/ "./node_modules/temporal-polyfill/dist/common-c41a489f.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/temporal-polyfill/dist/common-c41a489f.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const n=36e11,t=864e11,e=[1,1e3,1e6,1e9,6e10,n,t],o=[9,6,3];function r(n){return n<=6}function i(n){return n>=6}const s=a(\"overflow\",{constrain:0,reject:1},0);function a(n,t,e){const o=function(n,t,e){return(o,r)=>{if(void 0===o){const t=null!=r?r:e;if(void 0===t)throw new RangeError(`Must specify a ${n}`);return t}if(void 0===t[o])throw new RangeError(`Invalid ${n}: ${o}`);return t[o]}}(n,t,e);return(t,e)=>{const r=d(t);return o(r[n],e)}}function c(n,t,e,o){if(void 0===n)return t;if(!Number.isFinite(n))throw new RangeError(\"Number must be finite\");n=Math.trunc(n);const r=Math.min(Math.max(n,t),e);if(r!==n&&1===o)throw new RangeError(\"Invalid overflowed value \"+n);return r}function u(n,t){const e={};for(const o in t)void 0!==n[o]&&(e[o]=t[o](n[o]));return e}function d(n,t){if(void 0===n&&!t)return{};if(!h(n))throw TypeError(\"options must be an object or undefined\");return n}const l=/object|function/;function h(n){return null!==n&&l.test(typeof n)}const f=a(\"roundingMode\",{halfExpand:Math.round,ceil:Math.ceil,trunc:Math.trunc,floor:Math.floor});function m(){const n=new WeakMap;return[n.get.bind(n),n.set.bind(n)]}function g(n,t){Object.defineProperties(n.prototype,y(t,(n=>({get:n}))))}function y(n,t){const e={};for(const o in n)e[o]=t(n[o],o);return e}function w(n,t,e){const o={};for(const r of t)o[r]=e(n[r]);return o}function p(n,t){const e={};return n.forEach(((n,o)=>{e[n]=t(n,o)})),e}const v=[\"nanosecond\",\"microsecond\",\"millisecond\",\"second\",\"minute\",\"hour\"],M=[...v,\"day\",\"week\",\"month\",\"year\"],b=M.map((n=>n+\"s\")),S=p(M,((n,t)=>t)),I=p(b,((n,t)=>t));function F(n,t,e,o){var r;let i;if(void 0===n){if(void 0===t)throw new RangeError(\"Unit is required\");i=t}else if(i=null!=(r=S[n])?r:I[n],void 0===i||i<e||i>o)throw new RangeError(\"Invalid unit \"+n);return i}function T(n,t,o,r,i,s){var a;const c=d(n),u=null!=(a=c.roundingIncrement)?a:1,l=F(c.smallestUnit,o,r,i),h=f(c,s?Math.round:Math.trunc);let m=c.largestUnit;\"auto\"===m&&(m=void 0);const g=F(m,t=Math.max(t,l),r,i);if(l>g)throw new RangeError(\"Bad smallestUnit/largestUnit\");if(l<6){const n=e[l+1],t=e[l]*u;if(n===t)throw new RangeError(\"Must not equal larger unit\");if(n%t)throw new RangeError(\"Must divide into larger unit\")}return{smallestUnit:l,largestUnit:g,roundingFunc:h,roundingIncrement:u}}function O(n,o,r,i){var s;const a=d(\"string\"==typeof n?{smallestUnit:n}:n,!0),c=null!=(s=a.roundingIncrement)?s:1,u=F(a.smallestUnit,void 0,o,r),l=f(a,Math.round),h=e[u]*c;if(6===u){if(1!==c)throw new RangeError(\"When smallestUnit is days, roundingIncrement must be 1\")}else{const n=i?t:e[u+1];if(!i&&n===h)throw new RangeError(\"Must not equal larger unit\");if(n%h)throw new RangeError(\"Must divide into larger unit\")}return{smallestUnit:u,roundingFunc:l,incNano:h}}const D=Symbol();function N(n,t,...e){return t instanceof n?t:n.from(t,...e)}class Y{toJSON(){return this.toString()}}class E extends Y{valueOf(){throw new Error(\"Cannot convert object using valueOf\")}}const[Z,C]=m();class U extends E{constructor(n){super(),C(this,Object.freeze(n))}getISOFields(){return Z(this)}}function P(n,t){return n<t?-1:n>t?1:0}function R(n){return P(n,0)}function k(n,t,e){return e(n/t)*t}function x(n){return k(n,6e10,j)}function j(n){return Math.round(Math.abs(n))*R(n)}function q(n,t,e){const o=n.div(t).mult(t),r=n.sub(o).toNumber();return o.add(e(r/t)*t)}function H(n,t){return(n%t+t)%t}function L(n,t){return $(e=String(n),t,\"0\")+e;var e}function B(n,t,e){return n+$(n,t,e)}function $(n,t,e){return new Array(Math.max(0,t-n.length+1)).join(e)}function A(n){return n<0?\"-\":\"+\"}const z=Math.pow(10,8);class W{constructor(n,t){this.high=n,this.low=t}sign(){return R(this.high)||R(this.low)}neg(){return new W(-this.high||0,-this.low||0)}abs(){return this.sign()<0?this.neg():this}add(n){const[t,e]=J(n);return Q(this.high+t,this.low+e)}sub(n){const[t,e]=J(n);return Q(this.high-t,this.low-e)}mult(n){return Q(this.high*n,this.low*n)}div(n){const t=this.high/n;let e=String(t);-1!==e.indexOf(\"e-\")&&(e=t.toFixed(20));const o=e.indexOf(\".\");let r=0;if(-1!==o){let n=e.substr(o+1);n=B(n,8,\"0\"),n=n.substr(0,8),r=parseInt(n)*(R(t)||1)}return Q(Math.trunc(t)||0,Math.trunc(this.low/n)+r)}toNumber(){return this.high*z+this.low}toBigInt(){return BigInt(this.high)*BigInt(z)+BigInt(this.low)}}function K(n,t){let e,o;if(n instanceof W)e=n.high,o=n.low;else if(\"number\"==typeof n){if(t)throw new TypeError(\"Must supply bigint, not number\");e=Math.trunc(n/z),o=n%z||0}else if(\"bigint\"==typeof n){const t=BigInt(z);e=Number(n/t),o=Number(n%t||0)}else{if(\"string\"!=typeof n)throw new Error(\"Invalid type of BigNano\");{if((n=n.trim()).match(/\\D/))throw new SyntaxError(`Cannot parse ${n} to a BigInt`);const t=n.length-8;e=Number(n.substr(t)),o=Number(n.substr(0,t))}}return new W(e,o)}function G(n,t){return P(n.high,t.high)||P(n.low,t.low)}function J(n){return\"number\"==typeof n?[0,n]:[n.high,n.low]}function Q(n,t){let e=t%z||0,o=n+Math.trunc(t/z);const r=R(o),i=R(e);return i&&r&&i!==r&&(o+=i,e-=z*i),new W(o,e)}const V=b.concat(\"sign\");function X(n){return w(n,V,(n=>-n||0))}function _(n,t){var e,o,r,i,s,a,c,u,d,l;return nn({years:null!=(e=t.years)?e:n.years,months:null!=(o=t.months)?o:n.months,weeks:null!=(r=t.weeks)?r:n.weeks,days:null!=(i=t.days)?i:n.days,hours:null!=(s=t.hours)?s:n.hours,minutes:null!=(a=t.minutes)?a:n.minutes,seconds:null!=(c=t.seconds)?c:n.seconds,milliseconds:null!=(u=t.milliseconds)?u:n.milliseconds,microseconds:null!=(d=t.microseconds)?d:n.microseconds,nanoseconds:null!=(l=t.nanoseconds)?l:n.nanoseconds})}function nn(n){return{...n,sign:tn(n)}}function tn(n){let t=0;for(const e of b){if(n[e]){t=R(n[e]);break}}return t}function en(n){let t=9;for(;t>0&&!n[b[t]];)t--;return t}const on={isoHour:0,isoMinute:0,isoSecond:0,isoMillisecond:0,isoMicrosecond:0,isoNanosecond:0},rn={hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0};function sn(n){return{isoHour:n.hour||0,isoMinute:n.minute||0,isoSecond:n.second||0,isoMillisecond:n.millisecond||0,isoMicrosecond:n.microsecond||0,isoNanosecond:n.nanosecond||0}}function an(n){return K(t).mult(n.days).add(cn(n))}function cn(t){return K(t.nanoseconds).add(K(t.microseconds).mult(1e3)).add(K(t.milliseconds).mult(1e6)).add(K(t.seconds).mult(1e9)).add(K(t.minutes).mult(6e10)).add(K(t.hours).mult(n))}function un(t){return t.isoHour*n+6e10*t.isoMinute+1e9*t.isoSecond+1e6*t.isoMillisecond+1e3*t.isoMicrosecond+t.isoNanosecond}function dn(e,o){let r,i=0,s=0,a=0,c=0,u=0,d=0;switch(o){case 6:r=e.div(t),i=r.toNumber(),e=e.sub(r.mult(t));case 5:r=e.div(n),s=r.toNumber(),e=e.sub(r.mult(n));case 4:r=e.div(6e10),a=r.toNumber(),e=e.sub(r.mult(6e10));case 3:r=e.div(1e9),c=r.toNumber(),e=e.sub(r.mult(1e9));case 2:r=e.div(1e6),u=r.toNumber(),e=e.sub(r.mult(1e6));case 1:r=e.div(1e3),d=r.toNumber(),e=e.sub(r.mult(1e3))}return nn({years:0,months:0,weeks:0,days:i,hours:s,minutes:a,seconds:c,milliseconds:u,microseconds:d,nanoseconds:e.toNumber()})}function ln(e){const o=Math.floor(e/t);e-=o*t;const r=Math.floor(e/n);e-=r*n;const i=Math.floor(e/6e10);e-=6e10*i;const s=Math.floor(e/1e9);e-=1e9*s;const a=Math.floor(e/1e6);e-=1e6*a;const c=Math.floor(e/1e3);return[{isoHour:r,isoMinute:i,isoSecond:s,isoMillisecond:a,isoMicrosecond:c,isoNanosecond:e-=1e3*c},o]}const hn={gregory:{bce:-1,ce:0},ethioaa:{era0:0},ethiopic:{era0:0,era1:5500},coptic:{era0:-1,era1:0},roc:{beforeroc:-1,minguo:0},buddhist:{be:0},islamic:{ah:0},indian:{saka:0},persian:{ap:0},japanese:{bce:-1,ce:0,meiji:1867,taisho:1911,showa:1925,heisei:1988,reiwa:2018}};class fn{constructor(n){this.id=n}monthCode(n,t){return\"M\"+L(n,2)}convertMonthCode(n,t){const e=/L$/.test(n),o=parseInt(n.substr(1));if(e)throw new RangeError(\"Calendar system doesnt support leap months\");return[o,!1]}}function mn(n,t,e,o){var r;let i=null==(r=hn[gn(n)])?void 0:r[e];if(void 0===i){if(!o)throw new Error(\"Unkown era \"+e);i=0}return(i+t)*(R(i)||1)}function gn(n){return n.split(\"-\")[0]}class yn extends fn{computeFields(n){const t=Fn(n);return{era:void 0,eraYear:void 0,year:t.isoYear,month:t.isoMonth,day:t.isoDay}}epochMilliseconds(n,t,e){return Sn(n,t,e)}daysInMonth(n,t){return 2===t?this.inLeapYear(n)?29:28:4===t||6===t||9===t||11===t?30:31}monthsInYear(){return 12}inLeapYear(n){return n%4==0&&(n%100!=0||n%400==0)}guessYearForMonthDay(){return pn}normalizeISOYearForMonthDay(){return pn}}const wn=new yn(\"iso8601\"),pn=1972,vn=Symbol();function Mn(n){return bn(n.isoYear,n.isoMonth,n.isoDay,n.isoHour,n.isoMinute,n.isoSecond,n.isoMillisecond,n.isoMicrosecond,n.isoNanosecond)}function bn(n,t,e,o,r,i,s,a,c){return K(Sn(n,t,e,o,r,i,s)).mult(1e6).add(1e3*(null!=a?a:0)+(null!=c?c:0))}function Sn(n,t,e,o,r,i,s){const a=R(n);let c,u,d=0;const l=n>=0&&n<1e3,h=l?n+1200:n;for(;d<31;d++){c=e-a*d;const n=Date.UTC(h,t-1,c,null!=o?o:0,null!=r?r:0,null!=i?i:0,null!=s?s:0);if(!En(n)){u=n+a*d*864e5;break}}return(void 0===u||c<1||c>wn.daysInMonth(n,t))&&Zn(),l&&(u=new Date(u).setUTCFullYear(n)),u}function In(n){let t=n.div(1e6),e=n.sub(t.mult(1e6)).toNumber();e<0&&(e+=1e6,t=t.sub(1));const o=Math.floor(e/1e3);return e-=1e3*o,{...Fn(t.toNumber()),isoMicrosecond:o,isoNanosecond:e}}function Fn(n){const[t,e]=Yn(n);return{isoYear:t.getUTCFullYear(),isoMonth:t.getUTCMonth()+1,isoDay:t.getUTCDate()+e,isoHour:t.getUTCHours(),isoMinute:t.getUTCMinutes(),isoSecond:t.getUTCSeconds(),isoMillisecond:t.getUTCMilliseconds()}}function Tn(n){var t;return null!=(t=n[vn])?t:Mn(n.getISOFields())}function On(n){return Math.floor(Sn(n,1,1)/1e3)}function Dn(n){return Yn(n.div(1e6).toNumber())[0].getUTCFullYear()}function Nn(n,t,e){const[o,r]=Yn(Sn(n,t,e));return H(o.getUTCDay()+r,7)||7}function Yn(n){const t=R(n);let e,o=0;for(;o<31;o++){const r=new Date(n-t*o*864e5);if(!En(r)){e=r;break}}return void 0===e&&Zn(),[e,t*o]}function En(n){return isNaN(n.valueOf())}function Zn(){throw new RangeError(\"Date outside of supported range\")}function Cn(n,t){return Math.round((t-n)/864e5)}function Un(n,t){return n+864e5*t}function Pn(n,t){return!Rn(n,t)&&n.calendar.toString()===t.calendar.toString()}function Rn(n,t){return G(Mn(n.getISOFields()),Mn(t.getISOFields()))}function kn(n,t){return P(un(n.getISOFields()),un(t.getISOFields()))}function xn(n,t){return P(n.year,t.year)||P(n.month,t.month)||P(n.day,t.day)}function jn(n,t){return G(n[vn],t[vn])}function qn(n,t,e,o,r){return[n=Number(n),t=c(t,1,o.monthsInYear(n),r),e=c(e,1,o.daysInMonth(n,t),r)]}function Hn(n,t){const[e,o,r]=qn(n.isoYear,n.isoMonth,n.isoDay,wn,t);return{isoYear:e,isoMonth:o,isoDay:r}}function Ln(n,t){return{...Hn(n,t),...Bn(n,t)}}function Bn({isoHour:n,isoMinute:t,isoSecond:e,isoMillisecond:o,isoMicrosecond:r,isoNanosecond:i},s){return{isoHour:n=c(n,0,23,s),isoMinute:t=c(t,0,59,s),isoSecond:e=c(e,0,59,s),isoMillisecond:o=c(o,0,999,s),isoMicrosecond:r=c(r,0,999,s),isoNanosecond:i=c(i,0,999,s)}}const $n={era:String,eraYear:Number,year:Number,month:Number,monthCode:String},An={...$n,day:Number},zn={hour:Number,minute:Number,second:Number,millisecond:Number,microsecond:Number,nanosecond:Number},Wn={era:String,eraYear:Number,year:Number,month:Number,monthCode:String,day:Number},Kn=p(b,(()=>Number));class Gn extends yn{computeFields(n){const t=super.computeFields(n),{year:e}=t;return{...t,era:e<1?\"bce\":\"ce\",eraYear:e<1?-(e-1):e}}}const Jn=a(\"calendarName\",{auto:0,never:1,always:2},0),Qn=a(\"disambiguation\",{compatible:0,earlier:1,later:2,reject:3},0);function Vn(n,t=4){const r=d(n),i=r.smallestUnit,s=r.fractionalSecondDigits;let a,u=0,l=1;return void 0!==i?(u=F(i,void 0,0,t),l=e[u],a=o[u]||0):void 0!==s&&\"auto\"!==s&&(a=c(s,0,9,1),l=Math.pow(10,9-a)),{smallestUnit:u,fractionalSecondDigits:a,roundingFunc:f(n,Math.trunc),incNano:l}}const Xn=a(\"timeZoneName\",{auto:0,never:1},0);function _n(n,t){return nt(n)+\"T\"+et(n,t)}function nt(n){return tt(n)+\"-\"+L(n.isoDay,2)}function tt(n){const{isoYear:t}=n;return(t<1e3||t>9999?A(t)+L(Math.abs(t),6):L(t,4))+\"-\"+L(n.isoMonth,2)}function et(n,t){const e=[L(n.isoHour,2)];return t.smallestUnit<=4&&(e.push(L(n.isoMinute,2)),t.smallestUnit<=3&&e.push(L(n.isoSecond,2)+st(n.isoMillisecond,n.isoMicrosecond,n.isoNanosecond,t.fractionalSecondDigits)[0])),e.join(\":\")}function ot(n){const[t,e]=ln(Math.abs(n)),o=st(t.isoMillisecond,t.isoMicrosecond,t.isoNanosecond,void 0)[0];return A(n)+L(t.isoHour+24*e,2)+\":\"+L(t.isoMinute,2)+(t.isoSecond||o?\":\"+L(t.isoSecond,2)+o:\"\")}function rt(n,t){return n&&(2===t||1!==t&&\"iso8601\"!==n)?`[u-ca=${n}]`:\"\"}function it(n){return n.map((([n,t,e])=>{if(e||n){return Math.abs(n).toLocaleString(\"fullwide\",{useGrouping:!1})+t}return\"\"})).join(\"\")}function st(n,t,o,r,i,s){let a=K(n).mult(1e6).add(K(t).mult(1e3)).add(o);i&&(a=q(a,void 0===r?e[s]:Math.pow(10,9-r),i));const c=a.abs(),u=c.div(1e9);let d=L(c.sub(u.mult(1e9)).toNumber(),9);return d=void 0===r?d.replace(/0+$/,\"\"):d.substr(0,r),[d?\".\"+d:\"\",u.toNumber()*(a.sign()||1)]}function at(n){g(n,{epochNanoseconds(){return this[vn].toBigInt()},epochMicroseconds(){return this[vn].div(1e3).toBigInt()},epochMilliseconds(){return this[vn].div(1e6).toNumber()},epochSeconds(){return this[vn].div(1e9).toNumber()}})}const ct={calendar:\"calendar\"};for(const n of M)ct[n]=\"iso\"+((ut=n).charAt(0).toUpperCase()+ut.slice(1));var ut;function dt(n,t=[]){g(n,p(t.concat(\"calendar\"),(n=>function(){return this.getISOFields()[ct[n]]})))}const lt=[\"era\",\"eraYear\",\"year\",\"month\",\"monthCode\",\"daysInMonth\",\"daysInYear\",\"monthsInYear\",\"inLeapYear\"],ht=[...lt,\"day\",\"dayOfWeek\",\"dayOfYear\",\"weekOfYear\",\"daysInWeek\"];function ft(n,t){g(n,p(t,(n=>function(){const t=this.calendar[n](this);return Object.defineProperty(this,n,{value:t}),t})))}function mt(n,t){(n.prototype||n)[Symbol.toStringTag]=\"Temporal.\"+t}const gt=a(\"offset\",{prefer:0,use:1,ignore:2,reject:3});function yt(n,e,o=0){const r=n.getPossibleInstantsFor(e);if(1===r.length)return r[0];if(3===o)throw new RangeError(\"Ambiguous offset\");if(r.length)return r[2===o?1:0];{const r=function(n,e){const o=Tn(e),r=n.getOffsetNanosecondsFor(new Yr(o.sub(t)));return n.getOffsetNanosecondsFor(new Yr(o.add(t)))-r}(n,e),i=n.getPossibleInstantsFor(e.add({nanoseconds:r*(1===o?-1:1)}));return i[1===o?0:i.length-1]}}function wt({year:n,month:t,day:e},o,r,i){n+=o;const s=c(t,1,r.monthsInYear(n),i);let a=t===s?e:1;return a=c(a,1,r.daysInMonth(n,s),i),{year:n,month:s,day:a}}function pt({year:n,month:t,day:e},o,r,i){if(o){if(t+=o,o<0)for(;t<1;)t+=r.monthsInYear(--n);else{let e;for(;t>(e=r.monthsInYear(n));)t-=e,n++}e=c(e,1,r.daysInMonth(n,t),i)}return{year:n,month:t,day:e}}function vt({isoYear:n,isoMonth:t,isoDay:e},o){if(o){let r=Sn(n,t,e);r=Un(r,o),({isoYear:n,isoMonth:t,isoDay:e}=Fn(r))}return{isoYear:n,isoMonth:t,isoDay:e}}function Mt(n,t){if(en(t)>=6)throw new RangeError(\"Duration cant have units >= days\");return n.add(cn(t))}function bt(n,t,e=3,o){const{offsetNanoseconds:r,timeZone:i,Z:s}=n;if(void 0!==r&&2!==e){if(1===e||s)return Mn(n).sub(r);{const o=St(n,r,i,t);if(void 0!==o)return o;if(3===e)throw new RangeError(\"Mismatching offset/timezone\")}}return yt(i,Ho(n),Qn(o))[vn]}function St(n,t,e,o){const r=e.getPossibleInstantsFor(Ho(n)),i=Mn(n),s=o?x(t):t;for(const n of r){const t=n[vn],e=i.sub(t).toNumber();if((o?x(e):e)===s)return t}}function It(n){const{timeZone:t}=n,e={...n,...on,calendar:new mr(\"iso8601\")},o={...vt(e,1),...on,calendar:new mr(\"iso8601\")},r=yt(t,Ho(e))[vn];return yt(t,Ho(o))[vn].sub(r).toNumber()}const Ft=\"(\\\\d{2})(:?(\\\\d{2})(:?(\\\\d{2})([.,](\\\\d{1,9}))?)?)?\",Tt=\"([+-])\"+Ft,Ot=\"(Z|\"+Tt+\")?(\\\\[([^=\\\\]]+)\\\\])?(\\\\[u-ca=([^\\\\]]+)\\\\])?\",Dt=Pt(\"([+-]\\\\d{6}|\\\\d{4})-?(\\\\d{2})\"+Ot),Nt=Pt(\"(--)?(\\\\d{2})-?(\\\\d{2})\"+Ot),Yt=Pt(\"([+-]\\\\d{6}|\\\\d{4})-?(\\\\d{2})-?(\\\\d{2})([T ](\\\\d{2})(:?(\\\\d{2})(:?(\\\\d{2})([.,](\\\\d{1,9}))?)?)?)?\"+Ot),Et=Pt(\"T?\"+Ft+Ot),Zt=Pt(Tt),Ct=/^([-+])?P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T((\\d+)([.,](\\d{1,9}))?H)?((\\d+)([.,](\\d{1,9}))?M)?((\\d+)([.,](\\d{1,9}))?S)?)?$/i,Ut=/\\u2212/g;function Pt(n){return new RegExp(`^${n}$`,\"i\")}function Rt(n){return n.replace(Ut,\"-\")}function kt(n){const t=Lt(n);if(!t)throw _t(\"dateTime\",n);return t}function xt(n){const t=Bt(n);if(!t)throw _t(\"dateTime\",n);return t}function jt(n){const t=zt(n);if(void 0===t)throw _t(\"timeZone\",n);return t}function qt(n){let t=function(n){const t=Et.exec(Rt(n));if(t)return Kt(t.slice(1))}(n);if(void 0!==t){if(\"T\"!==n.charAt(0)){const e=$t(n)||At(n);e&&function(n){try{return Hn(n,1),!0}catch(n){return!1}}(e)&&(t=void 0)}}else t=Bt(n,!0);if(void 0===t)throw _t(\"time\",n);return t}const Ht=/^Z$/i;function Lt(n){const t=Yt.exec(Rt(n));if(t)return function(n){const t=n[11];let e,o=!1;t&&(o=Ht.test(t),e=o?0:Gt(n.slice(12)));return{...Wt(n),timeZone:n[21],offsetNanoseconds:e,Z:o}}(t.slice(1))}function Bt(n,t,e){const o=Yt.exec(Rt(n));if(o&&(e||!Ht.test(o[12]))&&(!t||o[4]))return Wt(o.slice(1))}function $t(n){const t=Dt.exec(Rt(n));if(t)return{calendar:(e=t.slice(1))[14],isoYear:Vt(e[0]),isoMonth:Vt(e[1]),isoDay:1};var e}function At(n){const t=Nt.exec(Rt(n));if(t)return{calendar:(e=t.slice(1))[15],isoYear:pn,isoMonth:Vt(e[1]),isoDay:Vt(e[2])};var e}function zt(n){const t=Zt.exec(Rt(n));if(t)return Gt(t.slice(1))}function Wt(n){return{calendar:n[23],isoYear:Vt(n[0]),isoMonth:Vt(n[1]),isoDay:Vt(n[2]),...Kt(n.slice(4))}}function Kt(n){const t=Qt(n[4]);return{...ln(Jt(n[6]||\"\"))[0],isoHour:Qt(n[0]),isoMinute:Qt(n[2]),isoSecond:60===t?59:t}}function Gt(t){return(\"+\"===t[0]?1:-1)*function(t){return Qt(t[0])*n+6e10*Qt(t[2])+1e9*Qt(t[4])+Jt(t[6]||\"\")}(t.slice(1))}function Jt(n){return parseInt(B(n,9,\"0\"))}function Qt(n){return parseInt(n||\"0\")}function Vt(n){return parseInt(n||\"1\")}function Xt(n){return void 0===n?void 0:parseInt(n)}function _t(n,t){throw new RangeError(`Cannot parse ${n} '${t}'`)}function ne(n){return{...n,calendar:void 0===n.calendar?gr():new mr(n.calendar)}}function te(n){return{...ne(n),timeZone:new we(n.timeZone)}}class ee{constructor(n){this.id=n}}class oe extends ee{constructor(n,t){super(n),this.offsetNano=t}getPossibleOffsets(){return[this.offsetNano]}getOffset(){return this.offsetNano}getTransition(){}}function re(n,t){const e={},o=n.formatToParts(t);for(const n of o)e[n.type]=n.value;return e}const ie={bc:\"bce\",ad:\"ce\"};function se(n){return n=n.toLowerCase().normalize(\"NFD\").replace(/[^a-z0-9]/g,\"\"),ie[n]||n}const ae=Intl.DateTimeFormat;function ce(n){return[].concat(n||[])}const ue={\"Pacific/Apia\":{2011:[[de(13017528e5),-36e12,-396e11],[de(13168728e5),-396e11,-36e12],[de(13252392e5),-36e12,504e11]]}};function de(n){return K(n).mult(1e6)}const le=(new Date).getUTCFullYear()+10,he=[182,91,273];class fe extends ee{constructor(n){const t=new ae(\"en-GB\",{era:\"short\",year:\"numeric\",month:\"numeric\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZone:n});super(t.resolvedOptions().timeZone),this.format=t,this.yearEndOffsets={},this.transitionsInYear=ue[n]||{}}getPossibleOffsets(n){let t;const e=[this.getTransition(n,-1),this.getTransition(n.sub(1),1)].filter(Boolean);for(const o of e){const[e,r,i]=o,s=n.sub(r),a=n.sub(i);if(G(e,s)>0&&G(e,a)>0)return[r];if(!(G(e,s)<=0&&G(e,a)<=0))return r<i?[]:[r,i];t=i}return void 0!==t?[t]:[1e9*this.getYearEndOffsetSec(Dn(n))]}getOffset(n){return 1e9*this.getOffsetForEpochSecs(n.div(1e9).toNumber())}getOffsetForEpochSecs(n){const t=re(this.format,1e3*n);let e=parseInt(t.year);\"bce\"===se(t.era)&&(e=-(e-1));const o=Sn(e,parseInt(t.month),parseInt(t.day),parseInt(t.hour),parseInt(t.minute),parseInt(t.second));return Math.floor(o/1e3)-n}getTransition(n,t){let e=Dn(n);if(e>le){const o=this.getTransitionFrom(e,e+t,t,n);if(o||t>0)return o;e=le}return this.getTransitionFrom(Math.max(e,1847),t<0?1846:le,t,n)}getTransitionFrom(n,t,e,o){for(;n!==t;n+=e){let t=this.getTransitionsInYear(n);e<0&&(t=t.slice().reverse());for(const n of t)if(G(n[0],o)===e)return n}}getYearEndOffsetSec(n){const{yearEndOffsets:t}=this;return t[n]||(t[n]=this.getOffsetForEpochSecs(On(n+1)-1))}getTransitionsInYear(n){const{transitionsInYear:t}=this;return t[n]||(t[n]=this.computeTransitionsInYear(n))}computeTransitionsInYear(n){const t=this.getYearEndOffsetSec(n-1),e=this.getYearEndOffsetSec(n),o=On(n)-1,r=On(n+1)-1;if(t!==e)return[this.searchTransition(o,r,t,e)];const i=this.searchIsland(t,o);return void 0!==i?[this.searchTransition(o,i[0],t,i[1]),this.searchTransition(i[0],r,i[1],e)]:[]}searchTransition(n,t,e,o){for(;t-n>1;){const o=Math.floor(n+(t-n)/2);this.getOffsetForEpochSecs(o)===e?n=o:t=o}return[K(t).mult(1e9),1e9*e,1e9*o]}searchIsland(n,t){for(const e of he){const o=t+86400*e,r=this.getOffsetForEpochSecs(o);if(r!==n)return[o,r]}}}const me={UTC:new oe(\"UTC\",0)};const[ge,ye]=m();class we extends Y{constructor(n){if(!n)throw new RangeError(\"Invalid timezone ID\");super(),ye(this,function(n){const e=(n=String(n)).toLocaleUpperCase();if(me[e])return me[e];const o=zt(n);if(void 0!==o){if(Math.abs(o)>t)throw new RangeError(\"Offset out of bounds\");return new oe(ot(o),o)}return me[e]=new fe(n)}(n))}static from(n){if(h(n))return function(n){const t=n.timeZone;if(void 0===t)return n;if(h(t)&&void 0===t.timeZone)return t;return new we(t)}(n);const t=Lt(String(n));if(t){if(t.timeZone){const n=te(t);return function(n){const{offsetNanoseconds:t,timeZone:e,Z:o}=n;if(void 0!==t&&!o&&void 0===St(n,t,e,!0))throw new RangeError(\"Mismatching offset/timezone\")}(n),n.timeZone}if(t.Z)return new we(\"UTC\");if(void 0!==t.offsetNanoseconds)return new we(ot(t.offsetNanoseconds))}return new we(String(n))}get id(){return this.toString()}getOffsetStringFor(n){return ot(this.getOffsetNanosecondsFor(n))}getOffsetNanosecondsFor(n){const t=N(Yr,n);return ge(this).getOffset(t[vn])}getPlainDateTimeFor(n,t=gr()){const e=N(Yr,n);return Ho({...In(e[vn].add(this.getOffsetNanosecondsFor(e))),calendar:N(mr,t)})}getInstantFor(n,t){return yt(this,N(qo,n),Qn(t))}getPossibleInstantsFor(n){const t=Mn(N(qo,n).getISOFields());return ge(this).getPossibleOffsets(t).map((n=>new Yr(t.sub(n))))}getPreviousTransition(n){const t=N(Yr,n),e=ge(this).getTransition(t[vn],-1);return e?new Yr(e[0]):null}getNextTransition(n){const t=N(Yr,n),e=ge(this).getTransition(t[vn],1);return e?new Yr(e[0]):null}toString(){return ge(this).id}}function pe(n){if(void 0===n.timeZone)throw new TypeError(\"Must specify timeZone\");return N(we,n.timeZone)}mt(we,\"TimeZone\");const ve=Le((function(n,t,e){const o=Ce(n,t,e);if(o)return{...o,timeZone:pe(n),offsetNanoseconds:void 0!==n.offset?jt(String(n.offset)):void 0}})),Me=Le(Ce),be=Le(Ue),Se=Le((function(n,t){const e=pr(n),o=je(n,$n,e);if(Be(o))return e.yearMonthFromFields(o,t)})),Ie=Le((function(n,t){const e=pr(n),o=je(n,Wn,e);if(Be(o))return void 0===n.year&&void 0===n.calendar&&(o.year=pn),e.monthDayFromFields(o,t)})),Fe=Le(Pe),Te=Le((function(n,t,e,o){const r=Re(n,t,e,o),i=void 0!==t.offset;if(r||i)return{...r||n.getISOFields(),timeZone:n.timeZone,offsetNanoseconds:i?jt(String(t.offset)):n.offsetNanoseconds}}),!0),Oe=Le(Re,!0),De=Le(ke,!0),Ne=Le((function(n,t,e){const o=n.calendar;if(Be(je(t,$n,o))){const r=He(n,t,$n,o);return o.yearMonthFromFields(r,e)}}),!0),Ye=Le((function(n,t,e){const o=n.calendar;if(Be(je(t,Wn,o))){const r=He(n,t,Wn,o);return o.monthDayFromFields(r,e)}}),!0),Ee=Le(xe,!0),Ze=Le((function(n){const t=u(n,Kn);if(Be(t))return t}));function Ce(n,t,e){const o=Ue(n,e),r=Pe(n,t);if(o)return{...o.getISOFields(),...r||on}}function Ue(n,t){const e=pr(n),o=je(n,An,e);if(Be(o))return e.dateFromFields(o,t)}function Pe(n,t){const e=u(n,zn);if(Be(e))return Bn(sn(e),t)}function Re(n,t,e,o){const r=ke(n,t,o),i=xe(n,t,e);if(r||i)return{...n.getISOFields(),...r?r.getISOFields():{},...i}}function ke(n,t,e){const o=n.calendar,r=je(t,An,o);if(Be(r)){const t=He(n,r,An,o);return o.dateFromFields(t,e)}}function xe(n,t,e){const o=u(t,zn);if(Be(o)){return Bn(sn((r=n,i=o,y(zn,((n,t)=>{var e;return null!=(e=i[t])?e:r[t]})))),e)}var r,i}function je(n,t,e){let o=Object.keys(t);return o=e.fields?Array.prototype.slice.call(e.fields(o)):Object.keys(qe(e,o)),qe(n,o)}function qe(n,t){const e={};for(const o of t)void 0!==n[o]&&(e[o]=n[o]);return e}function He(n,t,e,o){const r=je(n,e,o);return o.mergeFields?o.mergeFields(r,t):yr(r,t)}function Le(n,t){return(...e)=>{if(t){const n=e[1];if(!h(n))throw new TypeError(\"must be object-like\");if(void 0!==n.calendar)throw new TypeError(\"calendar not allowed\");if(void 0!==n.timeZone)throw new TypeError(\"timeZone not allowed\")}const o=n(...e);if(!o)throw new TypeError(\"No valid fields\");return o}}function Be(n){return Object.keys(n).length>0}const $e=K(t).mult(1e8),Ae=$e.mult(-1),ze=$e.add(86399999999999),We=Ae.sub(86399999999999);function Ke(n,t){const e=Mn(n);Ge(e),cr(e,t)}function Ge(n){-1!==G(n,We)&&1!==G(n,ze)||Zn()}function Je(n,t){const e=Xe(un(n),t),[o,r]=ln(e);return{...vt(n,r),...o}}function Qe(n,t){const e=Xe(un(n),t),[o]=ln(e);return o}function Ve(n,t){const[e,o]=function(n){const t=In(n);return[bn(t.isoYear,t.isoMonth,t.isoDay),un(t)]}(n),r=Xe(o,t);return e.add(r)}function Xe(n,t){return k(n,t.incNano,t.roundingFunc)}function _e(n,t,e){return(o,r)=>{const i=io(n,r)?{}:{...n,...t};return{buildKey:ro(o,r,!1),buildFormat:function(n,t){return new ae(o,{calendar:n,timeZone:t||void 0,...i,...r,...e})},buildEpochMilli:no}}}function no(n){return n.epochMilliseconds}function to(n,t,e){return(o,r)=>{const i=io(n,r)?{}:n;return{buildKey:ro(o,r,e),buildFormat:function(n,e){return new ae(o,{calendar:n,...i,...r,...t,timeZone:e,timeZoneName:void 0})},buildEpochMilli:void 0!==r.timeZone?eo.bind(null,new we(r.timeZone)):oo}}}function eo(n,t){const e=Ho({...on,...t.getISOFields()});return n.getInstantFor(e).epochMilliseconds}function oo(n){return Sn((t=n.getISOFields()).isoYear,t.isoMonth,t.isoDay,t.isoHour,t.isoMinute,t.isoSecond,t.isoMillisecond);var t}function ro(n,t,e){var o;const r=null!=(o=t.calendar)?o:function(n){for(const t of n){const n=t.match(/-u-ca-(.*)$/);if(n)return n[1]}return}(n),i=t.timeZone;return function(n,t){var o,s,a,c;const u=null==(o=n.calendar)?void 0:o.id,d=null==(s=n.timeZone)?void 0:s.id;if(t){if((null==(a=t.calendar)?void 0:a.id)!==u)throw new RangeError(\"Mismatching calendar\");if((null==(c=t.timeZone)?void 0:c.id)!==d)throw new RangeError(\"Mismatching timeZone\")}if((e||\"iso8601\"!==u)&&void 0!==u&&void 0!==r&&r!==u)throw new RangeError(\"Non-iso calendar mismatch\");if(void 0!==d&&void 0!==i&&i!==d)throw new RangeError(\"Given timeZone must agree\");return[r||u||\"iso8601\",i||d||\"UTC\"]}}function io(n,t){for(const e in n)if(void 0!==t[e])return!0;return!1}function so(n,t){n.prototype.toLocaleString=function(n,e){const o=t(ce(n),e||{});return o.buildFormat(...o.buildKey(this)).format(o.buildEpochMilli(this))},n.prototype[D]=t}function ao(n){return null==n?void 0:n[D]}function co(n){const t=function(n){const t=Ct.exec(Rt(n));if(t){let n,e,o,r;[n,r]=uo(t[8],t[10],5,void 0),[e,r]=uo(t[12],t[14],4,r),[o,r]=uo(t[16],t[18],3,r);const i=function(n){const t={};for(const e in n)void 0!==n[e]&&(t[e]=n[e]);return t}({years:Xt(t[2]),months:Xt(t[3]),weeks:Xt(t[4]),days:Xt(t[5]),hours:n,minutes:e,seconds:o});if(!Object.keys(i).length)throw new RangeError(\"Duration string must have at least one field\");const s=dn(K(r||0),2);i.milliseconds=s.milliseconds,i.microseconds=s.microseconds,i.nanoseconds=s.nanoseconds;let a=nn(i);return\"-\"===t[1]&&(a=X(a)),a}}(n);if(void 0===t)throw _t(\"duration\",n);return t}function uo(n,t,o,r){if(void 0!==n){if(void 0!==r)throw new RangeError(\"Partial units must be last unit\");return[parseInt(n),void 0!==t?Jt(t)*(e[o]/1e9):void 0]}if(void 0!==r){const n=Math.trunc(r/e[o]);return[n,r-n*e[o]]}return[void 0,void 0]}const lo=a(\"offset\",{auto:0,never:1},0);class ho extends U{constructor(n=0,t=0,e=0,o=0,r=0,i=0){super({...Bn({isoHour:n,isoMinute:t,isoSecond:e,isoMillisecond:o,isoMicrosecond:r,isoNanosecond:i},1),calendar:gr()})}static from(n,t){const e=s(t);return fo(n instanceof ho?n.getISOFields():\"object\"==typeof n?Fe(n,e):qt(String(n)))}static compare(n,t){return kn(N(ho,n),N(ho,t))}with(n,t){return fo(Ee(this,n,s(t)))}add(n){return go(this,N(ko,n))}subtract(n){return go(this,X(N(ko,n)))}until(n,t){return yo(this,N(ho,n),t)}since(n,t){return yo(N(ho,n),this,t)}round(n){const t=O(n,0,5);return fo(Qe(this.getISOFields(),t))}equals(n){return!kn(this,N(ho,n))}toString(n){const t=Vn(n);return et(Qe(this.getISOFields(),t),t)}toZonedDateTime(n){const t=N(Sr,n.plainDate),e=N(we,n.timeZone);return Fo({...t.getISOFields(),...this.getISOFields(),timeZone:e})}toPlainDateTime(n){return N(Sr,n).toPlainDateTime(this)}}function fo(n){return new ho(n.isoHour,n.isoMinute,n.isoSecond,n.isoMillisecond,n.isoMicrosecond,n.isoNanosecond)}function mo(n){return N(ho,null!=n?n:{hour:0})}function go(n,t){return fo(function(n,t){const e=un(n)+cn(t).toNumber(),[o]=ln(e);return o}(n.getISOFields(),t))}function yo(n,t,o){const r=T(o,5,0,0,5);return xo(function(n,t,o){return dn(K(k(un(t)-un(n),e[o.smallestUnit]*o.roundingIncrement,o.roundingFunc)),o.largestUnit)}(n.getISOFields(),t.getISOFields(),r))}mt(ho,\"PlainTime\"),dt(ho,v),so(ho,(function(n,t){return{buildKey:()=>[\"\",\"\"],buildFormat:()=>new ae(n,{hour:\"numeric\",minute:\"2-digit\",second:\"2-digit\",...t,timeZone:\"UTC\",timeZoneName:void 0,year:void 0,month:void 0,day:void 0,weekday:void 0}),buildEpochMilli:n=>Math.trunc(un(n.getISOFields())/1e6)}}));const wo={day:1};class po extends U{constructor(n,t,e=gr(),o=1){const r=Hn({isoYear:n,isoMonth:t,isoDay:o},1),i=N(mr,e);var s,a;s=r,a=i.toString(),cr(Mn(s),a),super({...r,calendar:i})}static from(n,t){if(s(t),n instanceof po)return vo(n.getISOFields());if(\"object\"==typeof n)return Se(n,t);const e=function(n){const t=$t(n)||Bt(n);if(!t)throw _t(\"yearMonth\",n);return t}(String(n));return void 0===e.calendar&&(e.isoDay=1),vo(ne(e))}static compare(n,t){return Rn(N(po,n),N(po,t))}with(n,t){return Ne(this,n,t)}add(n,t){return Mo(this,N(ko,n),t)}subtract(n,t){return Mo(this,X(N(ko,n)),t)}until(n,t){return bo(this,N(po,n),!1,t)}since(n,t){return bo(this,N(po,n),!0,t)}equals(n){return!Rn(this,N(po,n))}toString(n){const t=this.getISOFields(),e=t.calendar.toString(),o=Jn(n);return(\"iso8601\"===e?tt(t):nt(t))+rt(e,o)}toPlainDate(n){return this.calendar.dateFromFields({year:this.year,month:this.month,day:n.day})}}function vo(n){return new po(n.isoYear,n.isoMonth,n.calendar,n.isoDay)}function Mo(n,t,e){return n.toPlainDate({day:t.sign<0?n.daysInMonth:1}).add(t,e).toPlainYearMonth()}function bo(n,t,e,o){return xo(Or(n.toPlainDate(wo),t.toPlainDate(wo),vr(n,t),e,T(o,9,8,8,9)))}mt(po,\"PlainYearMonth\"),dt(po),ft(po,lt),so(po,to({year:\"numeric\",month:\"numeric\"},{weekday:void 0,day:void 0,hour:void 0,minute:void 0,second:void 0},!0));const So=Symbol();class Io extends U{constructor(n,t,e=gr()){const o=N(we,t),r=N(mr,e),i=K(n),[s,a]=To(i,o);Ke(s,r.toString()),super({...s,calendar:r,timeZone:o,offset:ot(a)}),this[vn]=i,this[So]=a}static from(n,t){const e=gt(t,3),o=s(t);if(n instanceof Io)return new Io(n.epochNanoseconds,n.timeZone,n.calendar);const r=\"object\"==typeof n;return Fo(r?ve(n,o,t):te(kt(String(n))),!r,e,t)}static compare(n,t){return jn(N(Io,n),N(Io,t))}get timeZone(){return this.getISOFields().timeZone}get offsetNanoseconds(){return this[So]}get offset(){return this.getISOFields().offset}with(n,t){Qn(t);const e=s(t),o=gt(t,0);return Fo(Te(this,n,e,t),!1,o,t)}withPlainDate(n){const t=N(Sr,n),e=t.toPlainDateTime(this),{timeZone:o}=this,r=yt(o,e);return new Io(r.epochNanoseconds,o,Mr(this,t))}withPlainTime(n){return Fo({...this.getISOFields(),...void 0===n?on:N(ho,n).getISOFields()})}withCalendar(n){return new Io(this.epochNanoseconds,this.timeZone,n)}withTimeZone(n){return new Io(this.epochNanoseconds,n,this.calendar)}add(n,t){return Oo(this,N(ko,n),t)}subtract(n,t){return Oo(this,X(N(ko,n)),t)}until(n,t){return No(this,N(Io,n),!1,t)}since(n,t){return No(this,N(Io,n),!0,t)}round(n){return Do(this,O(n,0,6))}equals(n){return t=this,e=N(Io,n),Pn(t,e)&&t.timeZone.toString()===e.timeZone.toString();var t,e}startOfDay(){return Fo({...this.getISOFields(),...on,offsetNanoseconds:this.offsetNanoseconds},!1,0)}get hoursInDay(){return It(this.getISOFields())/n}toString(n){const t=Vn(n),e=lo(n),o=Xn(n),r=Jn(n),i=Do(this,t);return _n(i.getISOFields(),t)+(0===e?ot(x(i.offsetNanoseconds)):\"\")+(s=this.timeZone.toString(),1!==o?`[${s}]`:\"\")+rt(this.calendar.toString(),r);var s}toPlainYearMonth(){return vo(this.getISOFields())}toPlainMonthDay(){return this.calendar.monthDayFromFields(this)}toPlainDateTime(){return Ho(this.getISOFields())}toPlainDate(){return Ir(this.getISOFields())}toPlainTime(){return fo(this.getISOFields())}toInstant(){return new Yr(this.epochNanoseconds)}}function Fo(n,t,e,o){const r=bt(n,t,e,o);return new Io(r,n.timeZone,n.calendar)}function To(n,t){const e=new Yr(n),o=t.getOffsetNanosecondsFor(e);return[In(n.add(o)),o]}function Oo(n,t,e){const o=n.getISOFields(),r=function(n,t,e){const{calendar:o,timeZone:r}=n,i=o.dateAdd(Ir(n),_(t,rn),e);return yt(r,Ho({...n,...i.getISOFields()}))[vn].add(cn(t))}(o,t,e);return new Io(r,o.timeZone,o.calendar)}function Do(n,t){const e=n.getISOFields(),o=function(n,t,e){const{calendar:o,timeZone:r}=n;let i,s,a=un(n);return 6===e.smallestUnit?(i=on,s=e.roundingFunc(a/It(n))):(a=Xe(a,e),[i,s]=ln(a)),bt({...vt(n,s),...i,offsetNanoseconds:t,calendar:o,timeZone:r},!1,0)}(e,n.offsetNanoseconds,t);return new Io(o,e.timeZone,e.calendar)}function No(n,t,e,o){const r=T(o,5,0,0,9),{largestUnit:i}=r;if(i>=6&&n.timeZone.id!==t.timeZone.id)throw new Error(\"Must be same timeZone\");return xo(Tr(n,t,vr(n,t),e,r))}function Yo(n){if(void 0===n)return;if(h(n))return n instanceof Io||n instanceof qo?n:N(void 0!==n.timeZone?Io:qo,n);if(\"symbol\"==typeof n)throw new TypeError(\"Incorrect relativeTo type\");const t=Lt(String(n));if(t)return void 0!==t.timeZone?Fo(te(t),!0):Ho(ne(t));throw new RangeError(\"Invalid value of relativeTo\")}function Eo(n,t,e,o){return(e instanceof Sr?function(n,t,e,o){const r=e.add(n);return[o.dateUntil(e,r,{largestUnit:M[t]}),r]}(n,Math.max(6,t),e,o):Zo(n,t,e,o))[0]}function Zo(n,t,e,o,r){const i=!0!==r&&t>7&&n.weeks;i&&(n=_(n,{weeks:0}));let s=e.add(n),a=Dr(e,s,o,t);return i&&(a=_(a,{weeks:i}),s=s.add({weeks:i})),[a,s]}function Co(n,t,e,o){const r=b[t],{sign:i}=n;if(!i)return n;const s={};for(let e=9;e>=t;e--){const t=b[e];s[t]=n[t]}const a={[r]:i},c=e.add(s),u=c.add(a),d=Tn(c),l=Tn(u),h=Tn(o).sub(d).toNumber()/l.sub(d).toNumber()*i;return s[r]+=h,s}function Uo(n,t,o,r,s,a){const{largestUnit:c,smallestUnit:u,roundingIncrement:d,roundingFunc:l}=a;if(!i(c)){return dn(q(Tn(o).sub(Tn(t)).mult(s?-1:1),e[u]*d,l),c)}let h=Co(n,u,t,o);const f=b[u];function m(){const n=h[f];h[f]=k(n,d,l)}return l===Math.round&&m(),s&&(h=X(h)),l!==Math.round&&m(),u>0&&(h=s?X(Eo(X(h),c,t,r)):Eo(h,c,t,r)),h}mt(Io,\"ZonedDateTime\"),dt(Io,v),ft(Io,ht),at(Io),so(Io,_e({year:\"numeric\",month:\"numeric\",day:\"numeric\",weekday:void 0,hour:\"numeric\",minute:\"2-digit\",second:\"2-digit\"},{timeZoneName:\"short\"},{}));const[Po,Ro]=m();class ko extends E{constructor(n=0,t=0,e=0,o=0,r=0,i=0,s=0,a=0,c=0,u=0){super();const d=Ze({years:n,months:t,weeks:e,days:o,hours:r,minutes:i,seconds:s,milliseconds:a,microseconds:c,nanoseconds:u});Ro(this,function(n){const t=nn(n),{sign:e}=t;for(const n of b){const o=t[n],r=R(t[n]);if(r&&r!==e)throw new RangeError(\"All fields must be same sign\");if(!Number.isInteger(o))throw new RangeError(\"Duration fields must be integers\")}return t}(d))}static from(n){return xo(\"object\"==typeof n?Ze(n):co(n))}static compare(n,t,e){return function(n,t,e){if(void 0===e&&en(n)<=6&&en(t)<=6)return G(an(n),an(t));if(!e)throw new RangeError(\"Need relativeTo\");const o=e.add(n),r=e.add(t);return void 0!==e[vn]?jn(o,r):Rn(o,r)}(N(ko,n),N(ko,t),Yo(d(e).relativeTo))}get years(){return Po(this).years}get months(){return Po(this).months}get weeks(){return Po(this).weeks}get days(){return Po(this).days}get hours(){return Po(this).hours}get minutes(){return Po(this).minutes}get seconds(){return Po(this).seconds}get milliseconds(){return Po(this).milliseconds}get microseconds(){return Po(this).microseconds}get nanoseconds(){return Po(this).nanoseconds}get sign(){return Po(this).sign}get blank(){return!this.sign}with(n){return xo({...Po(this),...Ze(n)})}negated(){return xo(X(Po(this)))}abs(){return xo(w(Po(this),V,(n=>Math.abs(n))))}add(n,t){return jo(this,N(ko,n),t)}subtract(n,t){return jo(this,X(N(ko,n)),t)}round(n){const t=\"string\"==typeof n?{smallestUnit:n}:n;if(!h(t))throw new TypeError(\"Must specify options\");if(void 0===t.largestUnit&&void 0===t.smallestUnit)throw new RangeError(\"Must specify either largestUnit or smallestUnit\");const o=T(t,en(this),0,0,9,!0),i=Yo(t.relativeTo);return xo(function(n,t,o,i){const{largestUnit:s,smallestUnit:a,roundingIncrement:c,roundingFunc:u}=t;if(void 0===o&&en(n)<=6&&r(s)&&r(a))return dn(q(an(n),e[a]*c,u),s);if(!o)throw new RangeError(\"Need relativeTo\");const[d,l]=Zo(n,s,o,i);return Uo(d,o,l,i,!1,t)}(this,o,i,i?i.calendar:void 0))}total(n){const t=function(n){let t,e;return\"string\"==typeof n?e=n:(e=d(n).unit,t=n.relativeTo),{unit:F(e,void 0,0,9),relativeTo:t}}(n),o=Yo(t.relativeTo);return function(n,t,o,i){if(void 0===o&&en(n)<=6&&r(t))return an(n).toNumber()/e[t];if(!o)throw new RangeError(\"Need relativeTo\");const[s,a]=Zo(n,t,o,i,!0);return Co(s,t,o,a)[b[t]]}(this,t.unit,o,o?o.calendar:void 0)}toString(n){const t=Vn(n,3);return function(n,t){const{smallestUnit:e,fractionalSecondDigits:o,roundingFunc:r}=t,{sign:i}=n,s=n.hours,a=n.minutes;let c=n.seconds,u=\"\";if(e<=3){const t=st(n.milliseconds,n.microseconds,n.nanoseconds,o,r,e);u=t[0],c+=t[1]}const d=void 0!==o||u||!i;return(i<0?\"-\":\"\")+\"P\"+it([[n.years,\"Y\"],[n.months,\"M\"],[n.weeks,\"W\"],[n.days,\"D\"]])+(s||a||c||d?\"T\"+it([[s,\"H\"],[a,\"M\"],[e<=3?c:0,u+\"S\",d]]):\"\")}(Po(this),t)}toLocaleString(n,t){return this.toString()}}function xo(n){return new ko(n.years,n.months,n.weeks,n.days,n.hours,n.minutes,n.seconds,n.milliseconds,n.microseconds,n.nanoseconds)}function jo(n,t,e){const o=Yo(d(e).relativeTo);return xo(function(n,t,e,o){const r=Math.max(en(n),en(t));if(void 0===e&&r<=6)return dn(an(n).add(an(t)),r);if(!e)throw new RangeError(\"Need relativeTo\");const i=e.add(n).add(t);return Dr(e,i,o,r)}(n,t,o,o?o.calendar:void 0))}mt(ko,\"Duration\");class qo extends U{constructor(n,t,e,o=0,r=0,i=0,s=0,a=0,c=0,u=gr()){const d=Ln({isoYear:n,isoMonth:t,isoDay:e,isoHour:o,isoMinute:r,isoSecond:i,isoMillisecond:s,isoMicrosecond:a,isoNanosecond:c},1),l=N(mr,u);Ke(d,l.toString()),super({...d,calendar:l})}static from(n,t){const e=s(t);return Ho(n instanceof qo?n.getISOFields():\"object\"==typeof n?Me(n,e,t):ne(xt(String(n))))}static compare(n,t){return Rn(N(qo,n),N(qo,t))}with(n,t){const e=s(t);return Ho(Oe(this,n,e,t))}withPlainDate(n){const t=N(Sr,n);return Ho({...this.getISOFields(),...t.getISOFields(),calendar:Mr(this,t)})}withPlainTime(n){return Ho({...this.getISOFields(),...mo(n).getISOFields()})}withCalendar(n){return Ho({...this.getISOFields(),calendar:N(mr,n)})}add(n,t){return Lo(this,N(ko,n),t)}subtract(n,t){return Lo(this,X(N(ko,n)),t)}until(n,t){return Bo(this,N(qo,n),!1,t)}since(n,t){return Bo(this,N(qo,n),!0,t)}round(n){const t=O(n,0,6);return Ho({...Je(this.getISOFields(),t),calendar:this.calendar})}equals(n){return Pn(this,N(qo,n))}toString(n){const t=Vn(n),e=Jn(n);return _n(Je(this.getISOFields(),t),t)+rt(this.calendar.toString(),e)}toZonedDateTime(n,t){const e=N(we,n),o=yt(e,this,Qn(t));return new Io(o.epochNanoseconds,e,this.calendar)}toPlainYearMonth(){return vo(this.getISOFields())}toPlainMonthDay(){return this.calendar.monthDayFromFields(this)}toPlainDate(){return Ir(this.getISOFields())}toPlainTime(){return fo(this.getISOFields())}}function Ho(n){return new qo(n.isoYear,n.isoMonth,n.isoDay,n.isoHour,n.isoMinute,n.isoSecond,n.isoMillisecond,n.isoMicrosecond,n.isoNanosecond,n.calendar)}function Lo(n,t,e){const o=function(n,t,e){const{calendar:o}=n;return In(Mn(o.dateAdd(Ir(n),_(t,rn),e).getISOFields()).add(un(n)).add(cn(t)))}(n.getISOFields(),t,e);return Ho({...o,calendar:n.calendar})}function Bo(n,t,e,o){const r=T(o,6,0,0,9);return xo(Tr(n,t,vr(n,t),e,r))}mt(qo,\"PlainDateTime\"),dt(qo,v),ft(qo,ht),so(qo,to({year:\"numeric\",month:\"numeric\",day:\"numeric\",weekday:void 0,hour:\"numeric\",minute:\"2-digit\",second:\"2-digit\"},{}));class $o extends U{constructor(n,t,e=gr(),o=pn){super({...Hn({isoYear:o,isoMonth:n,isoDay:t},1),calendar:N(mr,e)})}static from(n,t){if(s(t),n instanceof $o)return Ao(n.getISOFields());if(\"object\"==typeof n)return Ie(n,t);const e=function(n){const t=At(n)||Bt(n);if(!t)throw _t(\"monthDay\",n);return t}(String(n));return void 0===e.calendar&&(e.isoYear=pn),Ao(ne(e))}with(n,t){return Ye(this,n,t)}equals(n){return!Rn(this,N($o,n))}toString(n){const t=this.getISOFields(),e=t.calendar.toString(),o=Jn(n);return(\"iso8601\"===e?function(n){return L(n.isoMonth,2)+\"-\"+L(n.isoDay,2)}(t):nt(t))+rt(e,o)}toPlainDate(n){return this.calendar.dateFromFields({year:n.year,monthCode:this.monthCode,day:this.day},{overflow:\"reject\"})}}function Ao(n){return new $o(n.isoMonth,n.isoDay,n.calendar,n.isoYear)}function zo(n){return n instanceof Sr||n instanceof qo||n instanceof Io||n instanceof po||n instanceof $o}function Wo(n,t,e){let o;if(n instanceof Sr)o=n;else if(zo(n)){if(e&&n instanceof $o)throw new TypeError(\"PlainMonthDay not allowed\");o=Ir(n.getISOFields())}else o=Sr.from(n);return br(o.calendar,t),o}function Ko(n,t,e){if(zo(n))return n.getISOFields();let{era:o,eraYear:r,year:i,month:a,monthCode:c,day:u}=n;const d=void 0!==r&&void 0!==o?mn(t.id,r,o):void 0;if(void 0===i){if(void 0===d)throw new TypeError(\"Must specify either a year or an era & eraYear\");i=d}else if(void 0!==d&&d!==i)throw new RangeError(\"year and era/eraYear must match\");if(void 0===u)throw new TypeError(\"Must specify day\");const l=s(e);if(void 0!==c){const[n,e]=t.convertMonthCode(c,i);if(void 0!==a&&a!==n)throw new RangeError(\"Month doesnt match with monthCode\");if(a=n,e){if(1===l)throw new RangeError(\"Month code out of range\");u=t.daysInMonth(i,a)}}else if(void 0===a)throw new TypeError(\"Must specify either a month or monthCode\");return[i,a,u]=qn(i,a,u,t,l),Fn(t.epochMilliseconds(i,a,u))}function Go(n,t){if(zo(n)){if(t&&n instanceof $o)throw new TypeError(\"PlainMonthDay not allowed\");return n.getISOFields()}return Sr.from(n).getISOFields()}function Jo(n,t){return Cn(n.epochMilliseconds(t,1,1),n.epochMilliseconds(t+1,1,1))}function Qo(n,t,e,o){return Cn(n.epochMilliseconds(t,1,1),n.epochMilliseconds(t,e,o))+1}mt($o,\"PlainMonthDay\"),dt($o),ft($o,[\"monthCode\",\"day\"]),so($o,to({month:\"numeric\",day:\"numeric\"},{weekday:void 0,year:void 0,hour:void 0,minute:void 0,second:void 0},!0));const Vo={hebrew:6,chinese:0,dangi:0};class Xo extends fn{constructor(n){const t=_o(n);if(e=n,o=t.resolvedOptions().calendar,gn(e)!==gn(o))throw new RangeError(\"Invalid calendar: \"+n);var e,o;super(n),this.format=t,this.yearCorrection=this.computeFieldsDumb(0).year-1970,this.monthCacheByYear={}}epochMilliseconds(n,t,e){return Un(this.queryMonthCache(n)[0][t-1],e-1)}daysInMonth(n,t){const e=this.queryMonthCache(n)[0],o=e[t-1];t>=e.length&&(n++,t=0);return Cn(o,this.queryMonthCache(n)[0][t])}monthsInYear(n){return this.queryMonthCache(n)[0].length}monthCode(n,t){const e=this.queryLeapMonthByYear(t);return!e||n<e?super.monthCode(n,t):super.monthCode(n-1,t)+(n===e?\"L\":\"\")}convertMonthCode(n,t){const e=this.queryLeapMonthByYear(t);let o=/L$/.test(n),r=parseInt(n.substr(1)),i=!1;if(o){const n=Vo[this.id];if(void 0===n)throw new RangeError(\"Calendar system doesnt support leap months\");if(n){if(r!==n-1)throw new RangeError(\"Invalid leap-month month code\")}else if(r<=1||r>=12)throw new RangeError(\"Invalid leap-month month code\")}return!o||e&&r===e-1||(i=!0,o=!1),(o||e&&r>=e)&&r++,[r,i]}inLeapYear(n){const t=Jo(this,n);return t>Jo(this,n-1)&&t>Jo(this,n+1)}guessYearForMonthDay(n,t){let e=1970+this.yearCorrection;const o=e+100;for(;e<o;e++){const[o,r]=this.convertMonthCode(n,e);if(!r&&o<=this.monthsInYear(e)&&t<=this.daysInMonth(e,o))return e}throw new Error(\"Could not guess year\")}normalizeISOYearForMonthDay(n){return n}computeFields(n){const t=this.computeFieldsDumb(n),e=this.queryMonthCache(t.year)[2];return{...t,month:e[t.month]}}computeFieldsDumb(n){const t=re(this.format,n);let e,o,r=parseInt(t.relatedYear||t.year);var i;return t.era&&(i=this.id,void 0!==hn[gn(i)])&&(e=se(t.era),o=r,r=mn(this.id,o,e,!0)),{era:e,eraYear:o,year:r,month:t.month,day:parseInt(t.day)}}queryLeapMonthByYear(n){const t=this.queryMonthCache(n),e=this.queryMonthCache(n-1),o=this.queryMonthCache(n+1);if(t[0].length>e[0].length&&t[0].length>o[0].length){const n=t[1],o=e[1];for(let t=0;t<o.length;t++)if(o[t]!==n[t])return t+1}}queryMonthCache(n){const{monthCacheByYear:t}=this;return t[n]||(t[n]=this.buildMonthCache(n))}buildMonthCache(n){const t=[],e=[],o={};let r=Sn(this.guessISOYear(n),1,1);for(r=Un(r,400);;){const o=this.computeFieldsDumb(r);if(o.year<n)break;r=Un(r,1-o.day),o.year===n&&(t.unshift(r),e.unshift(o.month)),r=Un(r,-1)}for(let n=0;n<e.length;n++)o[e[n]]=n+1;return[t,e,o]}guessISOYear(n){return n-this.yearCorrection}}function _o(n){return new ae(\"en-US\",{calendar:n,era:\"short\",year:\"numeric\",month:\"short\",day:\"numeric\",timeZone:\"UTC\"})}const nr=Sn(1868,9,8);const tr={gregory:Gn,japanese:class extends Gn{constructor(){super(...arguments),this.format=_o(\"japanese\")}computeFields(n){const t=super.computeFields(n);if(n>=nr){const e=re(this.format,n);t.era=se(e.era),t.eraYear=parseInt(e.relatedYear||e.year)}return t}},islamic:class extends Xo{guessISOYear(n){return Math.ceil(32*n/33+622)}}},er={iso8601:wn};function or(n){const t=(n=String(n)).toLocaleLowerCase();return er[t]||(er[t]=new(tr[gn(t)]||Xo)(n))}const rr=Sn(1582,10,15),ir=Sn(622,7,18),sr={buddhist:rr,japanese:rr,roc:rr,islamic:ir,\"islamic-rgsa\":ir,indian:0},ar={};function cr(n,t){return ur(n.div(1e6).toNumber(),t)}function ur(n,t){if(function(n,t){return function(n){let t=ar[n];if(void 0===t){const e=sr[n];if(void 0===e)t=!1;else{let o=or(n);o instanceof Xo||(o=new Xo(n));const r=e-864e5,i=o.computeFields(r);t=r!==o.epochMilliseconds(i.year,i.month,i.day)}ar[n]=t}return t}(t)&&n<sr[t]}(n,t))throw new RangeError(\"Invalid timestamp for calendar\")}function dr(n,t,e){const o=7+t-e;return-H(Nn(n,1,o)-t,7)+o-1}function lr(n,t,e){const o=dr(n,t,e),r=dr(n+1,t,e);return(Jo(wn,n)-o+r)/7}const[hr,fr]=m();class mr extends Y{constructor(n){super(),\"islamicc\"===n&&(n=\"islamic-civil\"),fr(this,or(n))}static from(n){if(h(n))return function(n){const t=n.calendar;if(void 0===t)return n;if(h(t)&&void 0===t.calendar)return t;return new mr(t)}(n);const t=Bt(String(n),!1,!0);return new mr(t?t.calendar||\"iso8601\":String(n))}get id(){return this.toString()}era(n){const t=Go(n,!0);return wr(hr(this),t.isoYear,t.isoMonth,t.isoDay).era}eraYear(n){const t=Go(n,!0);return wr(hr(this),t.isoYear,t.isoMonth,t.isoDay).eraYear}year(n){const t=Go(n,!0);return wr(hr(this),t.isoYear,t.isoMonth,t.isoDay).year}month(n){const t=Go(n,!0);return wr(hr(this),t.isoYear,t.isoMonth,t.isoDay).month}monthCode(n){const t=Wo(n,this);return hr(this).monthCode(t.month,t.year)}day(n){const t=Go(n);return wr(hr(this),t.isoYear,t.isoMonth,t.isoDay).day}dayOfWeek(n){const t=Go(n,!0);return Nn(t.isoYear,t.isoMonth,t.isoDay)}dayOfYear(n){const t=Wo(n,this,!0);return Qo(hr(this),t.year,t.month,t.day)}weekOfYear(n){const t=Go(n,!0);return function(n,t,e,o,r){const i=dr(n,o,r),s=Math.floor((Qo(wn,n,t,e)-i-1)/7)+1;if(s<1)return s+lr(n-1,o,r);const a=lr(n,o,r);return s>a?s-a:s}(t.isoYear,t.isoMonth,t.isoDay,1,4)}daysInWeek(n){return Go(n,!0),7}daysInMonth(n){const t=Wo(n,this,!0);return hr(this).daysInMonth(t.year,t.month)}daysInYear(n){const t=Wo(n,this,!0);return Jo(hr(this),t.year)}monthsInYear(n){const t=Wo(n,this,!0);return hr(this).monthsInYear(t.year)}inLeapYear(n){return hr(this).inLeapYear(this.year(n))}dateFromFields(n,t){const e=Ko(u(n,An),hr(this),t);return new Sr(e.isoYear,e.isoMonth,e.isoDay,this)}yearMonthFromFields(n,t){const e=Ko({...u(n,$n),day:1},hr(this),t);return new po(e.isoYear,e.isoMonth,this,e.isoDay)}monthDayFromFields(n,t){const e=hr(this);let{era:o,eraYear:r,year:i,month:s,monthCode:a,day:c}=u(n,Wn);if(void 0===c)throw new TypeError(\"required property 'day' missing or undefined\");if(void 0!==a?i=pn:void 0!==o&&void 0!==r&&(i=mn(e.id,r,o)),void 0===i){if(void 0===a)throw new TypeError(\"either year or monthCode required with month\");i=e.guessYearForMonthDay(a,c)}const d=Ko({year:i,month:s,monthCode:a,day:c},e,t);return new $o(d.isoMonth,d.isoDay,this,e.normalizeISOYearForMonthDay(d.isoYear))}dateAdd(n,e,o){const r=hr(this),i=function(n,e,o,r){n=pt(n=wt(n,e.years,o,r),e.months,o,r);let i=o.epochMilliseconds(n.year,n.month,n.day);const s=Math.trunc(cn(e).div(t).toNumber());return i=Un(i,7*e.weeks+e.days+s),Fn(i)}(N(Sr,n,o),N(ko,e),r,s(o));return new Sr(i.isoYear,i.isoMonth,i.isoDay,this)}dateUntil(n,t,e){const o=hr(this),r=N(Sr,n),i=N(Sr,t),s=d(e).largestUnit,a=\"auto\"===s?6:F(s,6,6,9);return br(this,vr(r,i)),xo(function(n,t,e,o){let r=0,i=0,s=0,a=0;switch(o){case 9:r=function(n,t,e){const[,o,r]=qn(t.year,n.month,n.day,e,0),i=xn(t,n),s=P(t.month,o)||P(t.day,r);return t.year-n.year-(s&&i&&s!==i?i:0)}(n,t,e),n=wt(n,r,e,0);case 8:i=function(n,t,e){let o=0;const r=xn(t,n);if(r){let{year:i}=n;for(;i!==t.year;)o+=e.monthsInYear(i)*r,i+=r;const[,s,a]=qn(t.year,n.month,n.day,e,0);o+=t.month-s;const c=P(t.day,a);c&&r&&c!==r&&(o-=r)}return o}(n,t,e),n=pt(n,i,e,0)}a=Cn(e.epochMilliseconds(n.year,n.month,n.day),e.epochMilliseconds(t.year,t.month,t.day)),7===o&&(s=Math.trunc(a/7),a%=7);return nn({years:r,months:i,weeks:s,days:a,hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0})}(r,i,o,a))}fields(n){return n.slice()}mergeFields(n,t){return yr(n,t)}toString(){return hr(this).id}}function gr(){return new mr(\"iso8601\")}function yr(n,t){var e;const o={...n,...t};if(void 0!==n.year){delete o.era,delete o.eraYear,delete o.year;let e=!1;void 0===t.era&&void 0===t.eraYear||(o.era=t.era,o.eraYear=t.eraYear,e=!0),void 0!==t.year&&(o.year=t.year,e=!0),e||(o.year=n.year)}if(void 0!==n.monthCode){delete o.monthCode,delete o.month;let e=!1;void 0!==t.month&&(o.month=t.month,e=!0),void 0!==t.monthCode&&(o.monthCode=t.monthCode,e=!0),e||(o.monthCode=n.monthCode)}return void 0!==n.day&&(o.day=null!=(e=t.day)?e:n.day),o}function wr(n,t,e,o){const r=Sn(t,e,o);return ur(r,n.id),n.computeFields(r)}function pr(n){return void 0===n.calendar?gr():N(mr,n.calendar)}function vr(n,t){const{calendar:e}=n;return br(e,t.calendar),e}function Mr(n,t){const e=n.calendar,o=t.calendar;if(\"iso8601\"===e.id)return o;if(\"iso8601\"===o.id)return e;if(e.id!==o.id)throw new RangeError(\"Non-ISO calendars incompatible\");return e}function br(n,t){if(n.toString()!==t.toString())throw new RangeError(\"Calendars must match\")}mt(mr,\"Calendar\");class Sr extends U{constructor(n,t,e,o=gr()){const r=Hn({isoYear:n,isoMonth:t,isoDay:e},1),i=N(mr,o);!function(n,t){const e=Mn(n);Ge(e.add(e.sign()<0?86399999999999:0)),cr(e,t)}(r,i.toString()),super({...r,calendar:i})}static from(n,t){return s(t),n instanceof Sr?Ir(n.getISOFields()):\"object\"==typeof n?be(n,t):Ir(ne(xt(String(n))))}static compare(n,t){return Rn(N(Sr,n),N(Sr,t))}with(n,t){return De(this,n,t)}withCalendar(n){const t=this.getISOFields();return new Sr(t.isoYear,t.isoMonth,t.isoDay,n)}add(n,t){return this.calendar.dateAdd(this,n,t)}subtract(n,t){return this.calendar.dateAdd(this,N(ko,n).negated(),t)}until(n,t){return Fr(this,N(Sr,n),!1,t)}since(n,t){return Fr(this,N(Sr,n),!0,t)}equals(n){return!Rn(this,N(Sr,n))}toString(n){const t=Jn(n),e=this.getISOFields();return nt(e)+rt(e.calendar.toString(),t)}toZonedDateTime(n){const t=function(n){let t,e;if(\"string\"==typeof n)e=n;else{if(\"object\"!=typeof n)throw new TypeError(\"Invalid options/timeZone argument\");if(void 0!==n.id?e=n:(e=n.timeZone,t=n.plainTime),void 0===e)throw new TypeError(\"Invalid timeZone argument\")}return{plainTime:t,timeZone:e}}(n),e=N(we,t.timeZone),o=void 0===t.plainTime?void 0:N(ho,t.plainTime);return Fo({...this.getISOFields(),...o?o.getISOFields():on,timeZone:e})}toPlainDateTime(n){return Ho({...this.getISOFields(),...mo(n).getISOFields()})}toPlainYearMonth(){return vo(this.getISOFields())}toPlainMonthDay(){return this.calendar.monthDayFromFields(this)}}function Ir(n){return new Sr(n.isoYear,n.isoMonth,n.isoDay,n.calendar)}function Fr(n,t,e,o){return xo(Or(n,t,vr(n,t),e,T(o,6,6,6,9)))}function Tr(n,t,e,o,r){return Uo(Dr(n,t,e,r.largestUnit),n,t,e,o,r)}function Or(n,t,e,o,r){return Uo(e.dateUntil(n,t,{largestUnit:M[r.largestUnit]}),n,t,e,o,r)}function Dr(n,t,e,o){if(!i(o))return Nr(n,t,o);const r=Ir({...n.getISOFields(),calendar:e});let s,a,c,u,d,l=Ir({...t.getISOFields(),calendar:e});do{a=e.dateUntil(r,l,{largestUnit:M[o]}),s=n.add(a),c=Nr(s,t,5),u=a.sign,d=c.sign}while(u&&d&&u!==d&&(l=l.add({days:d})));return f=c,{sign:(h=a).sign||f.sign,years:h.years+f.years,months:h.months+f.months,weeks:h.weeks+f.weeks,days:h.days+f.days,hours:h.hours+f.hours,minutes:h.minutes+f.minutes,seconds:h.seconds+f.seconds,milliseconds:h.milliseconds+f.milliseconds,microseconds:h.microseconds+f.microseconds,nanoseconds:h.nanoseconds+f.nanoseconds};var h,f}function Nr(n,t,e){return dn(Tn(t).sub(Tn(n)),e)}mt(Sr,\"PlainDate\"),dt(Sr),ft(Sr,ht),so(Sr,to({year:\"numeric\",month:\"numeric\",day:\"numeric\",weekday:void 0},{hour:void 0,minute:void 0,second:void 0}));class Yr extends E{constructor(n){super();const t=K(n,!0);!function(n){-1!==G(n,Ae)&&1!==G(n,$e)||Zn()}(t),this[vn]=t}static from(n){if(n instanceof Yr)return new Yr(n.epochNanoseconds);const t=kt(String(n)),e=t.offsetNanoseconds;if(void 0===e)throw new RangeError(\"Must specify an offset\");return new Yr(Mn(Ln(t,1)).sub(e))}static fromEpochSeconds(n){return new Yr(K(n).mult(1e9))}static fromEpochMilliseconds(n){return new Yr(K(n).mult(1e6))}static fromEpochMicroseconds(n){return new Yr(n*BigInt(1e3))}static fromEpochNanoseconds(n){return new Yr(n)}static compare(n,t){return jn(N(Yr,n),N(Yr,t))}add(n){return new Yr(Mt(this[vn],N(ko,n)))}subtract(n){return new Yr(Mt(this[vn],X(N(ko,n))))}until(n,t){return Er(this,N(Yr,n),t)}since(n,t){return Er(N(Yr,n),this,t)}round(n){const t=O(n,0,5,!0);return new Yr(Ve(this[vn],t))}equals(n){return!jn(this,N(Yr,n))}toString(n){const t=d(n).timeZone;return this.toZonedDateTimeISO(null!=t?t:\"UTC\").toString({...n,offset:void 0===t?\"never\":\"auto\",timeZoneName:\"never\"})+(void 0===t?\"Z\":\"\")}toZonedDateTimeISO(n){return new Io(this.epochNanoseconds,n)}toZonedDateTime(n){if(!h(n))throw new TypeError(\"Must specify options\");if(void 0===n.calendar)throw new TypeError(\"Must specify a calendar\");if(void 0===n.timeZone)throw new TypeError(\"Must specify a timeZone\");return new Io(this.epochNanoseconds,n.timeZone,n.calendar)}}function Er(n,t,o){const r=T(o,3,0,0,5);return xo(function(n,t,o){return dn(q(t.sub(n),e[o.smallestUnit]*o.roundingIncrement,o.roundingFunc),o.largestUnit)}(n[vn],t[vn],r))}mt(Yr,\"Instant\"),at(Yr),so(Yr,_e({year:\"numeric\",month:\"numeric\",day:\"numeric\",weekday:void 0,hour:\"numeric\",minute:\"2-digit\",second:\"2-digit\"},{timeZoneName:void 0},{}));const Zr=Symbol(),Cr=Symbol(),Ur=Symbol();class Pr extends Intl.DateTimeFormat{constructor(n,t){const e=ce(n),o=function(n){const t={};for(const e in n){let o=n[e];h(o)&&(o=o.toString()),t[e]=o}return t}(t||{});super(e,o),this[Zr]=e,this[Cr]=o,this[Ur]=new Map}format(n){const t=kr(this,n);return t[0]===this?super.format(t[1]):t[0].format(t[1])}formatToParts(n){return super.formatToParts.call(...kr(this,n))}formatRange(n,t){return super.formatRange.call(...xr(this,n,t))}formatRangeToParts(n,t){return super.formatRangeToParts.call(...xr(this,n,t))}}const Rr=Pr;function kr(n,t){const e=ao(t);if(e){const o=jr(n,e);return[o.buildFormat(t),o.buildEpochMilli(t)]}return[n,t]}function xr(n,t,e){const o=ao(t);if(o!==ao(e))throw new TypeError(\"Mismatch of types\");if(o){const r=jr(n,o);return[r.buildFormat(t,e),new Date(r.buildEpochMilli(t)),new Date(r.buildEpochMilli(e))]}return[n,t,e]}function jr(n,t){const e=n[Ur];let o=e.get(t);return o||(o=function(n){const t={};return{buildFormat:function(e,o){const r=n.buildKey(e,o),i=r.join(\"|\");return t[i]||(t[i]=n.buildFormat(...r))},buildEpochMilli:n.buildEpochMilli}}(t(n[Zr],n[Cr])),e.set(t,o)),o}const qr={zonedDateTimeISO:function(n){return Fo(Lr(\"iso8601\",n))},zonedDateTime:function(n,t){return Fo(Lr(n,t))},plainDateTimeISO:function(n){return Ho(Lr(\"iso8601\",n))},plainDateTime:function(n,t){return Ho(Lr(n,t))},plainDateISO:function(n){return Ir(Lr(\"iso8601\",n))},plainDate:function(n,t){return Ir(Lr(n,t))},plainTimeISO:function(n){return fo(Lr(\"iso8601\",n))},instant:function(){return new Yr(Br())},timeZone:Hr};mt(qr,\"Now\");function Hr(){return new we((new ae).resolvedOptions().timeZone)}function Lr(n,t=Hr()){const e=N(we,t);return{...To(Br(),e)[0],timeZone:e,calendar:N(mr,n)}}function Br(){return K(Date.now()).mult(1e6)}const $r={PlainYearMonth:po,PlainMonthDay:$o,PlainDate:Sr,PlainTime:ho,PlainDateTime:qo,ZonedDateTime:Io,Instant:Yr,Calendar:mr,TimeZone:we,Duration:ko,Now:qr,[Symbol.toStringTag]:\"Temporal\"};exports.DateTimeFormat=Rr,exports.Temporal=$r,exports.getGlobalThis=function(){return\"undefined\"!=typeof globalThis?globalThis:window},exports.toTemporalInstant=function(){return Yr.fromEpochMilliseconds(this.valueOf())};\n//# sourceMappingURL=common-c41a489f.cjs.map\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/temporal-polyfill/dist/common-c41a489f.cjs?");

/***/ }),

/***/ "./node_modules/temporal-polyfill/dist/impl.cjs":
/*!******************************************************!*\
  !*** ./node_modules/temporal-polyfill/dist/impl.cjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({value:!0}));var e=__webpack_require__(/*! ./common-c41a489f.cjs */ \"./node_modules/temporal-polyfill/dist/common-c41a489f.cjs\");const t=e.Temporal,o={...e.getGlobalThis().Intl,DateTimeFormat:e.DateTimeFormat},r=e.toTemporalInstant;exports.Intl=o,exports.Temporal=t,exports.toTemporalInstant=r;\n//# sourceMappingURL=impl.cjs.map\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/temporal-polyfill/dist/impl.cjs?");

/***/ }),

/***/ "./node_modules/temporal-polyfill/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/temporal-polyfill/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({value:!0}));var e=__webpack_require__(/*! ./impl.cjs */ \"./node_modules/temporal-polyfill/dist/impl.cjs\");__webpack_require__(/*! ./common-c41a489f.cjs */ \"./node_modules/temporal-polyfill/dist/common-c41a489f.cjs\"),exports.Intl=e.Intl,exports.Temporal=e.Temporal,exports.toTemporalInstant=e.toTemporalInstant;\n//# sourceMappingURL=index.cjs.map\n\n\n//# sourceURL=webpack://open-table-maintenance/./node_modules/temporal-polyfill/dist/index.cjs?");

/***/ }),

/***/ "./output/_init.mjs":
/*!**************************!*\
  !*** ./output/_init.mjs ***!
  \**************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initializeABAP\": () => (/* binding */ initializeABAP)\n/* harmony export */ });\n/* harmony import */ var _top_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_top.mjs */ \"./output/_top.mjs\");\n/* harmony import */ var _23ui2_23cl_json_clas_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./%23ui2%23cl_json.clas.mjs */ \"?d19c\");\n/* harmony import */ var _abap_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abap.type.mjs */ \"./output/abap.type.mjs\");\n/* harmony import */ var _abap_boolean_dtel_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abap_boolean.dtel.mjs */ \"./output/abap_boolean.dtel.mjs\");\n/* harmony import */ var _abap_callstack_ttyp_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abap_callstack.ttyp.mjs */ \"./output/abap_callstack.ttyp.mjs\");\n/* harmony import */ var _abap_callstack_line_tabl_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abap_callstack_line.tabl.mjs */ \"./output/abap_callstack_line.tabl.mjs\");\n/* harmony import */ var _abap_encod_dtel_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abap_encod.dtel.mjs */ \"./output/abap_encod.dtel.mjs\");\n/* harmony import */ var _abap_sortorder_tabl_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./abap_sortorder.tabl.mjs */ \"./output/abap_sortorder.tabl.mjs\");\n/* harmony import */ var _abap_sortorder_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./abap_sortorder_tab.ttyp.mjs */ \"./output/abap_sortorder_tab.ttyp.mjs\");\n/* harmony import */ var _balmnr_dtel_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./balmnr.dtel.mjs */ \"./output/balmnr.dtel.mjs\");\n/* harmony import */ var _balognr_dtel_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./balognr.dtel.mjs */ \"./output/balognr.dtel.mjs\");\n/* harmony import */ var _bapi_fld_dtel_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./bapi_fld.dtel.mjs */ \"./output/bapi_fld.dtel.mjs\");\n/* harmony import */ var _bapi_line_dtel_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bapi_line.dtel.mjs */ \"./output/bapi_line.dtel.mjs\");\n/* harmony import */ var _bapi_msg_dtel_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./bapi_msg.dtel.mjs */ \"./output/bapi_msg.dtel.mjs\");\n/* harmony import */ var _bapi_mtype_dtel_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./bapi_mtype.dtel.mjs */ \"./output/bapi_mtype.dtel.mjs\");\n/* harmony import */ var _bapi_param_dtel_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./bapi_param.dtel.mjs */ \"./output/bapi_param.dtel.mjs\");\n/* harmony import */ var _bapi_rcode_dtel_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./bapi_rcode.dtel.mjs */ \"./output/bapi_rcode.dtel.mjs\");\n/* harmony import */ var _bapilogsys_dtel_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./bapilogsys.dtel.mjs */ \"./output/bapilogsys.dtel.mjs\");\n/* harmony import */ var _bapioption_dtel_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./bapioption.dtel.mjs */ \"./output/bapioption.dtel.mjs\");\n/* harmony import */ var _bapiret2_tabl_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./bapiret2.tabl.mjs */ \"./output/bapiret2.tabl.mjs\");\n/* harmony import */ var _bapireturn_tabl_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./bapireturn.tabl.mjs */ \"./output/bapireturn.tabl.mjs\");\n/* harmony import */ var _bapisign_dtel_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./bapisign.dtel.mjs */ \"./output/bapisign.dtel.mjs\");\n/* harmony import */ var _boolean_dtel_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./boolean.dtel.mjs */ \"./output/boolean.dtel.mjs\");\n/* harmony import */ var _char1_dtel_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./char1.dtel.mjs */ \"./output/char1.dtel.mjs\");\n/* harmony import */ var _char10_dtel_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./char10.dtel.mjs */ \"./output/char10.dtel.mjs\");\n/* harmony import */ var _char120_dtel_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./char120.dtel.mjs */ \"./output/char120.dtel.mjs\");\n/* harmony import */ var _char15_dtel_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./char15.dtel.mjs */ \"./output/char15.dtel.mjs\");\n/* harmony import */ var _char20_dtel_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./char20.dtel.mjs */ \"./output/char20.dtel.mjs\");\n/* harmony import */ var _char25_dtel_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./char25.dtel.mjs */ \"./output/char25.dtel.mjs\");\n/* harmony import */ var _char3_dtel_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./char3.dtel.mjs */ \"./output/char3.dtel.mjs\");\n/* harmony import */ var _char30_dtel_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./char30.dtel.mjs */ \"./output/char30.dtel.mjs\");\n/* harmony import */ var _char32_dtel_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./char32.dtel.mjs */ \"./output/char32.dtel.mjs\");\n/* harmony import */ var _char4_dtel_mjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./char4.dtel.mjs */ \"./output/char4.dtel.mjs\");\n/* harmony import */ var _char6_dtel_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./char6.dtel.mjs */ \"./output/char6.dtel.mjs\");\n/* harmony import */ var _char80_dtel_mjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./char80.dtel.mjs */ \"./output/char80.dtel.mjs\");\n/* harmony import */ var _cl_abap_char_utilities_clas_mjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./cl_abap_char_utilities.clas.mjs */ \"./output/cl_abap_char_utilities.clas.mjs\");\n/* harmony import */ var _cl_abap_classdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./cl_abap_classdescr.clas.mjs */ \"./output/cl_abap_classdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./cl_abap_codepage.clas.mjs */ \"./output/cl_abap_codepage.clas.mjs\");\n/* harmony import */ var _cl_abap_complexdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./cl_abap_complexdescr.clas.mjs */ \"./output/cl_abap_complexdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_conv_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./cl_abap_conv_codepage.clas.mjs */ \"./output/cl_abap_conv_codepage.clas.mjs\");\n/* harmony import */ var _cl_abap_conv_in_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./cl_abap_conv_in_ce.clas.mjs */ \"./output/cl_abap_conv_in_ce.clas.mjs\");\n/* harmony import */ var _cl_abap_conv_out_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./cl_abap_conv_out_ce.clas.mjs */ \"./output/cl_abap_conv_out_ce.clas.mjs\");\n/* harmony import */ var _cl_abap_datadescr_clas_mjs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./cl_abap_datadescr.clas.mjs */ \"./output/cl_abap_datadescr.clas.mjs\");\n/* harmony import */ var _cl_abap_dyn_prg_clas_mjs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./cl_abap_dyn_prg.clas.mjs */ \"./output/cl_abap_dyn_prg.clas.mjs\");\n/* harmony import */ var _cl_abap_elemdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./cl_abap_elemdescr.clas.mjs */ \"./output/cl_abap_elemdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_enumdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./cl_abap_enumdescr.clas.mjs */ \"./output/cl_abap_enumdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_exceptional_values_clas_mjs__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./cl_abap_exceptional_values.clas.mjs */ \"./output/cl_abap_exceptional_values.clas.mjs\");\n/* harmony import */ var _cl_abap_format_clas_mjs__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./cl_abap_format.clas.mjs */ \"./output/cl_abap_format.clas.mjs\");\n/* harmony import */ var _cl_abap_gzip_clas_mjs__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./cl_abap_gzip.clas.mjs */ \"./output/cl_abap_gzip.clas.mjs\");\n/* harmony import */ var _cl_abap_hmac_clas_mjs__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./cl_abap_hmac.clas.mjs */ \"./output/cl_abap_hmac.clas.mjs\");\n/* harmony import */ var _cl_abap_intfdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./cl_abap_intfdescr.clas.mjs */ \"./output/cl_abap_intfdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_matcher_clas_mjs__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./cl_abap_matcher.clas.mjs */ \"./output/cl_abap_matcher.clas.mjs\");\n/* harmony import */ var _cl_abap_math_clas_mjs__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./cl_abap_math.clas.mjs */ \"./output/cl_abap_math.clas.mjs\");\n/* harmony import */ var _cl_abap_objectdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./cl_abap_objectdescr.clas.mjs */ \"./output/cl_abap_objectdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./cl_abap_random.clas.mjs */ \"./output/cl_abap_random.clas.mjs\");\n/* harmony import */ var _cl_abap_random_int_clas_mjs__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./cl_abap_random_int.clas.mjs */ \"./output/cl_abap_random_int.clas.mjs\");\n/* harmony import */ var _cl_abap_refdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./cl_abap_refdescr.clas.mjs */ \"./output/cl_abap_refdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_regex_clas_mjs__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./cl_abap_regex.clas.mjs */ \"./output/cl_abap_regex.clas.mjs\");\n/* harmony import */ var _cl_abap_structdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./cl_abap_structdescr.clas.mjs */ \"./output/cl_abap_structdescr.clas.mjs\");\n/* harmony import */ var _cl_abap_tabledescr_clas_mjs__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./cl_abap_tabledescr.clas.mjs */ \"./output/cl_abap_tabledescr.clas.mjs\");\n/* harmony import */ var _cl_abap_tstmp_clas_mjs__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./cl_abap_tstmp.clas.mjs */ \"./output/cl_abap_tstmp.clas.mjs\");\n/* harmony import */ var _cl_abap_typedescr_clas_mjs__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./cl_abap_typedescr.clas.mjs */ \"./output/cl_abap_typedescr.clas.mjs\");\n/* harmony import */ var _cl_abap_unit_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./cl_abap_unit_assert.clas.mjs */ \"./output/cl_abap_unit_assert.clas.mjs\");\n/* harmony import */ var _cl_abap_zip_clas_mjs__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./cl_abap_zip.clas.mjs */ \"./output/cl_abap_zip.clas.mjs\");\n/* harmony import */ var _cl_apc_tcp_client_manager_clas_mjs__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./cl_apc_tcp_client_manager.clas.mjs */ \"./output/cl_apc_tcp_client_manager.clas.mjs\");\n/* harmony import */ var _cl_apc_wsp_ext_stateless_base_clas_mjs__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./cl_apc_wsp_ext_stateless_base.clas.mjs */ \"./output/cl_apc_wsp_ext_stateless_base.clas.mjs\");\n/* harmony import */ var _cl_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./cl_bcs.clas.mjs */ \"./output/cl_bcs.clas.mjs\");\n/* harmony import */ var _cl_bcs_convert_clas_mjs__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./cl_bcs_convert.clas.mjs */ \"./output/cl_bcs_convert.clas.mjs\");\n/* harmony import */ var _cl_cam_address_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./cl_cam_address_bcs.clas.mjs */ \"./output/cl_cam_address_bcs.clas.mjs\");\n/* harmony import */ var _cl_demo_output_clas_mjs__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./cl_demo_output.clas.mjs */ \"./output/cl_demo_output.clas.mjs\");\n/* harmony import */ var _cl_document_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./cl_document_bcs.clas.mjs */ \"./output/cl_document_bcs.clas.mjs\");\n/* harmony import */ var _cl_express_icf_shim_clas_mjs__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./cl_express_icf_shim.clas.mjs */ \"./output/cl_express_icf_shim.clas.mjs\");\n/* harmony import */ var _cl_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./cl_gdt_conversion.clas.mjs */ \"./output/cl_gdt_conversion.clas.mjs\");\n/* harmony import */ var _cl_gui_cfw_clas_mjs__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./cl_gui_cfw.clas.mjs */ \"./output/cl_gui_cfw.clas.mjs\");\n/* harmony import */ var _cl_gui_container_clas_mjs__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./cl_gui_container.clas.mjs */ \"./output/cl_gui_container.clas.mjs\");\n/* harmony import */ var _cl_gui_frontend_services_clas_mjs__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./cl_gui_frontend_services.clas.mjs */ \"./output/cl_gui_frontend_services.clas.mjs\");\n/* harmony import */ var _cl_http_client_clas_mjs__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./cl_http_client.clas.mjs */ \"./output/cl_http_client.clas.mjs\");\n/* harmony import */ var _cl_http_entity_clas_mjs__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./cl_http_entity.clas.mjs */ \"./output/cl_http_entity.clas.mjs\");\n/* harmony import */ var _cl_http_server_clas_mjs__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./cl_http_server.clas.mjs */ \"./output/cl_http_server.clas.mjs\");\n/* harmony import */ var _cl_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./cl_http_utility.clas.mjs */ \"./output/cl_http_utility.clas.mjs\");\n/* harmony import */ var _cl_i18n_languages_clas_mjs__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./cl_i18n_languages.clas.mjs */ \"./output/cl_i18n_languages.clas.mjs\");\n/* harmony import */ var _cl_icf_tree_clas_mjs__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./cl_icf_tree.clas.mjs */ \"./output/cl_icf_tree.clas.mjs\");\n/* harmony import */ var _cl_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./cl_ixml.clas.mjs */ \"./output/cl_ixml.clas.mjs\");\n/* harmony import */ var _cl_message_helper_clas_mjs__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./cl_message_helper.clas.mjs */ \"./output/cl_message_helper.clas.mjs\");\n/* harmony import */ var _cl_mime_repository_api_clas_mjs__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./cl_mime_repository_api.clas.mjs */ \"./output/cl_mime_repository_api.clas.mjs\");\n/* harmony import */ var _cl_numberrange_runtime_clas_mjs__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./cl_numberrange_runtime.clas.mjs */ \"./output/cl_numberrange_runtime.clas.mjs\");\n/* harmony import */ var _cl_oo_factory_clas_mjs__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./cl_oo_factory.clas.mjs */ \"./output/cl_oo_factory.clas.mjs\");\n/* harmony import */ var _cl_progress_indicator_clas_mjs__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./cl_progress_indicator.clas.mjs */ \"./output/cl_progress_indicator.clas.mjs\");\n/* harmony import */ var _cl_salv_aggregations_clas_mjs__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./cl_salv_aggregations.clas.mjs */ \"./output/cl_salv_aggregations.clas.mjs\");\n/* harmony import */ var _cl_salv_column_clas_mjs__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./cl_salv_column.clas.mjs */ \"./output/cl_salv_column.clas.mjs\");\n/* harmony import */ var _cl_salv_columns_table_clas_mjs__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./cl_salv_columns_table.clas.mjs */ \"./output/cl_salv_columns_table.clas.mjs\");\n/* harmony import */ var _cl_salv_events_table_clas_mjs__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./cl_salv_events_table.clas.mjs */ \"./output/cl_salv_events_table.clas.mjs\");\n/* harmony import */ var _cl_salv_filters_clas_mjs__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./cl_salv_filters.clas.mjs */ \"./output/cl_salv_filters.clas.mjs\");\n/* harmony import */ var _cl_salv_functions_list_clas_mjs__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./cl_salv_functions_list.clas.mjs */ \"./output/cl_salv_functions_list.clas.mjs\");\n/* harmony import */ var _cl_salv_table_clas_mjs__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./cl_salv_table.clas.mjs */ \"./output/cl_salv_table.clas.mjs\");\n/* harmony import */ var _cl_shm_area_clas_mjs__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./cl_shm_area.clas.mjs */ \"./output/cl_shm_area.clas.mjs\");\n/* harmony import */ var _cl_shm_service_clas_mjs__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./cl_shm_service.clas.mjs */ \"./output/cl_shm_service.clas.mjs\");\n/* harmony import */ var _cl_sxml_string_reader_clas_mjs__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./cl_sxml_string_reader.clas.mjs */ \"./output/cl_sxml_string_reader.clas.mjs\");\n/* harmony import */ var _cl_sxml_string_writer_clas_mjs__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./cl_sxml_string_writer.clas.mjs */ \"./output/cl_sxml_string_writer.clas.mjs\");\n/* harmony import */ var _cl_system_uuid_clas_mjs__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./cl_system_uuid.clas.mjs */ \"./output/cl_system_uuid.clas.mjs\");\n/* harmony import */ var _cl_web_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./cl_web_http_utility.clas.mjs */ \"./output/cl_web_http_utility.clas.mjs\");\n/* harmony import */ var _cx_abap_message_digest_clas_mjs__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./cx_abap_message_digest.clas.mjs */ \"./output/cx_abap_message_digest.clas.mjs\");\n/* harmony import */ var _cx_abap_not_a_table_clas_mjs__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./cx_abap_not_a_table.clas.mjs */ \"./output/cx_abap_not_a_table.clas.mjs\");\n/* harmony import */ var _cx_abap_not_in_package_clas_mjs__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./cx_abap_not_in_package.clas.mjs */ \"./output/cx_abap_not_in_package.clas.mjs\");\n/* harmony import */ var _cx_abap_not_in_whitelist_clas_mjs__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./cx_abap_not_in_whitelist.clas.mjs */ \"./output/cx_abap_not_in_whitelist.clas.mjs\");\n/* harmony import */ var _cx_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./cx_abap_random.clas.mjs */ \"./output/cx_abap_random.clas.mjs\");\n/* harmony import */ var _cx_apc_error_clas_mjs__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./cx_apc_error.clas.mjs */ \"./output/cx_apc_error.clas.mjs\");\n/* harmony import */ var _cx_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./cx_bcs.clas.mjs */ \"./output/cx_bcs.clas.mjs\");\n/* harmony import */ var _cx_dynamic_check_clas_mjs__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\");\n/* harmony import */ var _cx_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./cx_gdt_conversion.clas.mjs */ \"./output/cx_gdt_conversion.clas.mjs\");\n/* harmony import */ var _cx_no_check_clas_mjs__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./cx_no_check.clas.mjs */ \"./output/cx_no_check.clas.mjs\");\n/* harmony import */ var _cx_oo_clif_not_exists_clas_mjs__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./cx_oo_clif_not_exists.clas.mjs */ \"./output/cx_oo_clif_not_exists.clas.mjs\");\n/* harmony import */ var _cx_parameter_invalid_clas_mjs__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./cx_parameter_invalid.clas.mjs */ \"./output/cx_parameter_invalid.clas.mjs\");\n/* harmony import */ var _cx_parameter_invalid_range_clas_mjs__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./cx_parameter_invalid_range.clas.mjs */ \"./output/cx_parameter_invalid_range.clas.mjs\");\n/* harmony import */ var _cx_parameter_invalid_type_clas_mjs__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./cx_parameter_invalid_type.clas.mjs */ \"./output/cx_parameter_invalid_type.clas.mjs\");\n/* harmony import */ var _cx_root_clas_mjs__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\");\n/* harmony import */ var _cx_salv_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./cx_salv_access_error.clas.mjs */ \"./output/cx_salv_access_error.clas.mjs\");\n/* harmony import */ var _cx_salv_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./cx_salv_data_error.clas.mjs */ \"./output/cx_salv_data_error.clas.mjs\");\n/* harmony import */ var _cx_salv_error_clas_mjs__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./cx_salv_error.clas.mjs */ \"./output/cx_salv_error.clas.mjs\");\n/* harmony import */ var _cx_salv_msg_clas_mjs__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./cx_salv_msg.clas.mjs */ \"./output/cx_salv_msg.clas.mjs\");\n/* harmony import */ var _cx_salv_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./cx_salv_not_found.clas.mjs */ \"./output/cx_salv_not_found.clas.mjs\");\n/* harmony import */ var _cx_salv_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./cx_salv_static_check.clas.mjs */ \"./output/cx_salv_static_check.clas.mjs\");\n/* harmony import */ var _cx_shm_already_detached_clas_mjs__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./cx_shm_already_detached.clas.mjs */ \"./output/cx_shm_already_detached.clas.mjs\");\n/* harmony import */ var _cx_shm_attach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\");\n/* harmony import */ var _cx_shm_build_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./cx_shm_build_failed.clas.mjs */ \"./output/cx_shm_build_failed.clas.mjs\");\n/* harmony import */ var _cx_shm_change_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./cx_shm_change_lock_active.clas.mjs */ \"./output/cx_shm_change_lock_active.clas.mjs\");\n/* harmony import */ var _cx_shm_completion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./cx_shm_completion_error.clas.mjs */ \"./output/cx_shm_completion_error.clas.mjs\");\n/* harmony import */ var _cx_shm_detach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./cx_shm_detach_error.clas.mjs */ \"./output/cx_shm_detach_error.clas.mjs\");\n/* harmony import */ var _cx_shm_error_clas_mjs__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./cx_shm_error.clas.mjs */ \"./output/cx_shm_error.clas.mjs\");\n/* harmony import */ var _cx_shm_event_execution_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./cx_shm_event_execution_failed.clas.mjs */ \"./output/cx_shm_event_execution_failed.clas.mjs\");\n/* harmony import */ var _cx_shm_exclusive_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./cx_shm_exclusive_lock_active.clas.mjs */ \"./output/cx_shm_exclusive_lock_active.clas.mjs\");\n/* harmony import */ var _cx_shm_general_error_clas_mjs__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\");\n/* harmony import */ var _cx_shm_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./cx_shm_inconsistent.clas.mjs */ \"./output/cx_shm_inconsistent.clas.mjs\");\n/* harmony import */ var _cx_shm_initial_reference_clas_mjs__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./cx_shm_initial_reference.clas.mjs */ \"./output/cx_shm_initial_reference.clas.mjs\");\n/* harmony import */ var _cx_shm_no_active_version_clas_mjs__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./cx_shm_no_active_version.clas.mjs */ \"./output/cx_shm_no_active_version.clas.mjs\");\n/* harmony import */ var _cx_shm_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./cx_shm_parameter_error.clas.mjs */ \"./output/cx_shm_parameter_error.clas.mjs\");\n/* harmony import */ var _cx_shm_pending_lock_removed_clas_mjs__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./cx_shm_pending_lock_removed.clas.mjs */ \"./output/cx_shm_pending_lock_removed.clas.mjs\");\n/* harmony import */ var _cx_shm_read_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./cx_shm_read_lock_active.clas.mjs */ \"./output/cx_shm_read_lock_active.clas.mjs\");\n/* harmony import */ var _cx_shm_secondary_commit_clas_mjs__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./cx_shm_secondary_commit.clas.mjs */ \"./output/cx_shm_secondary_commit.clas.mjs\");\n/* harmony import */ var _cx_shm_version_limit_exceeded_clas_mjs__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./cx_shm_version_limit_exceeded.clas.mjs */ \"./output/cx_shm_version_limit_exceeded.clas.mjs\");\n/* harmony import */ var _cx_shm_wrong_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./cx_shm_wrong_handle.clas.mjs */ \"./output/cx_shm_wrong_handle.clas.mjs\");\n/* harmony import */ var _cx_shma_dynamic_clas_mjs__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./cx_shma_dynamic.clas.mjs */ \"./output/cx_shma_dynamic.clas.mjs\");\n/* harmony import */ var _cx_shma_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./cx_shma_inconsistent.clas.mjs */ \"./output/cx_shma_inconsistent.clas.mjs\");\n/* harmony import */ var _cx_shma_not_configured_clas_mjs__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./cx_shma_not_configured.clas.mjs */ \"./output/cx_shma_not_configured.clas.mjs\");\n/* harmony import */ var _cx_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\");\n/* harmony import */ var _cx_sxml_error_clas_mjs__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./cx_sxml_error.clas.mjs */ \"./output/cx_sxml_error.clas.mjs\");\n/* harmony import */ var _cx_sxml_illegal_argument_error_clas_mjs__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./cx_sxml_illegal_argument_error.clas.mjs */ \"./output/cx_sxml_illegal_argument_error.clas.mjs\");\n/* harmony import */ var _cx_sxml_name_error_clas_mjs__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./cx_sxml_name_error.clas.mjs */ \"./output/cx_sxml_name_error.clas.mjs\");\n/* harmony import */ var _cx_sxml_parse_error_clas_mjs__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./cx_sxml_parse_error.clas.mjs */ \"./output/cx_sxml_parse_error.clas.mjs\");\n/* harmony import */ var _cx_sxml_state_error_clas_mjs__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./cx_sxml_state_error.clas.mjs */ \"./output/cx_sxml_state_error.clas.mjs\");\n/* harmony import */ var _cx_sy_arithmetic_error_clas_mjs__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./cx_sy_arithmetic_error.clas.mjs */ \"./output/cx_sy_arithmetic_error.clas.mjs\");\n/* harmony import */ var _cx_sy_buffer_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./cx_sy_buffer_overflow.clas.mjs */ \"./output/cx_sy_buffer_overflow.clas.mjs\");\n/* harmony import */ var _cx_sy_codepage_converter_init_clas_mjs__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./cx_sy_codepage_converter_init.clas.mjs */ \"./output/cx_sy_codepage_converter_init.clas.mjs\");\n/* harmony import */ var _cx_sy_compression_error_clas_mjs__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./cx_sy_compression_error.clas.mjs */ \"./output/cx_sy_compression_error.clas.mjs\");\n/* harmony import */ var _cx_sy_conversion_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./cx_sy_conversion_codepage.clas.mjs */ \"./output/cx_sy_conversion_codepage.clas.mjs\");\n/* harmony import */ var _cx_sy_conversion_data_loss_clas_mjs__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./cx_sy_conversion_data_loss.clas.mjs */ \"./output/cx_sy_conversion_data_loss.clas.mjs\");\n/* harmony import */ var _cx_sy_conversion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./cx_sy_conversion_error.clas.mjs */ \"./output/cx_sy_conversion_error.clas.mjs\");\n/* harmony import */ var _cx_sy_conversion_no_number_clas_mjs__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./cx_sy_conversion_no_number.clas.mjs */ \"./output/cx_sy_conversion_no_number.clas.mjs\");\n/* harmony import */ var _cx_sy_conversion_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./cx_sy_conversion_overflow.clas.mjs */ \"./output/cx_sy_conversion_overflow.clas.mjs\");\n/* harmony import */ var _cx_sy_create_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./cx_sy_create_data_error.clas.mjs */ \"./output/cx_sy_create_data_error.clas.mjs\");\n/* harmony import */ var _cx_sy_create_object_error_clas_mjs__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./cx_sy_create_object_error.clas.mjs */ \"./output/cx_sy_create_object_error.clas.mjs\");\n/* harmony import */ var _cx_sy_data_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./cx_sy_data_access_error.clas.mjs */ \"./output/cx_sy_data_access_error.clas.mjs\");\n/* harmony import */ var _cx_sy_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./cx_sy_duplicate_key.clas.mjs */ \"./output/cx_sy_duplicate_key.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_error_clas_mjs__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_illegal_class_clas_mjs__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./cx_sy_dyn_call_illegal_class.clas.mjs */ \"./output/cx_sy_dyn_call_illegal_class.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_illegal_form_clas_mjs__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./cx_sy_dyn_call_illegal_form.clas.mjs */ \"./output/cx_sy_dyn_call_illegal_form.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_illegal_func_clas_mjs__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./cx_sy_dyn_call_illegal_func.clas.mjs */ \"./output/cx_sy_dyn_call_illegal_func.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_illegal_method_clas_mjs__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./cx_sy_dyn_call_illegal_method.clas.mjs */ \"./output/cx_sy_dyn_call_illegal_method.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_param_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./cx_sy_dyn_call_param_not_found.clas.mjs */ \"./output/cx_sy_dyn_call_param_not_found.clas.mjs\");\n/* harmony import */ var _cx_sy_dyn_call_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./cx_sy_dyn_call_parameter_error.clas.mjs */ \"./output/cx_sy_dyn_call_parameter_error.clas.mjs\");\n/* harmony import */ var _cx_sy_dynamic_osql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./cx_sy_dynamic_osql_error.clas.mjs */ \"./output/cx_sy_dynamic_osql_error.clas.mjs\");\n/* harmony import */ var _cx_sy_dynamic_osql_semantics_clas_mjs__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./cx_sy_dynamic_osql_semantics.clas.mjs */ \"./output/cx_sy_dynamic_osql_semantics.clas.mjs\");\n/* harmony import */ var _cx_sy_itab_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./cx_sy_itab_duplicate_key.clas.mjs */ \"./output/cx_sy_itab_duplicate_key.clas.mjs\");\n/* harmony import */ var _cx_sy_itab_error_clas_mjs__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./cx_sy_itab_error.clas.mjs */ \"./output/cx_sy_itab_error.clas.mjs\");\n/* harmony import */ var _cx_sy_itab_line_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./cx_sy_itab_line_not_found.clas.mjs */ \"./output/cx_sy_itab_line_not_found.clas.mjs\");\n/* harmony import */ var _cx_sy_message_illegal_text_clas_mjs__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./cx_sy_message_illegal_text.clas.mjs */ \"./output/cx_sy_message_illegal_text.clas.mjs\");\n/* harmony import */ var _cx_sy_move_cast_error_clas_mjs__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./cx_sy_move_cast_error.clas.mjs */ \"./output/cx_sy_move_cast_error.clas.mjs\");\n/* harmony import */ var _cx_sy_open_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./cx_sy_open_sql_error.clas.mjs */ \"./output/cx_sy_open_sql_error.clas.mjs\");\n/* harmony import */ var _cx_sy_range_out_of_bounds_clas_mjs__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./cx_sy_range_out_of_bounds.clas.mjs */ \"./output/cx_sy_range_out_of_bounds.clas.mjs\");\n/* harmony import */ var _cx_sy_ref_is_initial_clas_mjs__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./cx_sy_ref_is_initial.clas.mjs */ \"./output/cx_sy_ref_is_initial.clas.mjs\");\n/* harmony import */ var _cx_sy_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./cx_sy_sql_error.clas.mjs */ \"./output/cx_sy_sql_error.clas.mjs\");\n/* harmony import */ var _cx_sy_strg_par_val_clas_mjs__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./cx_sy_strg_par_val.clas.mjs */ \"./output/cx_sy_strg_par_val.clas.mjs\");\n/* harmony import */ var _cx_sy_struct_attributes_clas_mjs__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./cx_sy_struct_attributes.clas.mjs */ \"./output/cx_sy_struct_attributes.clas.mjs\");\n/* harmony import */ var _cx_sy_struct_comp_name_clas_mjs__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./cx_sy_struct_comp_name.clas.mjs */ \"./output/cx_sy_struct_comp_name.clas.mjs\");\n/* harmony import */ var _cx_sy_struct_comp_type_clas_mjs__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./cx_sy_struct_comp_type.clas.mjs */ \"./output/cx_sy_struct_comp_type.clas.mjs\");\n/* harmony import */ var _cx_sy_struct_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./cx_sy_struct_creation.clas.mjs */ \"./output/cx_sy_struct_creation.clas.mjs\");\n/* harmony import */ var _cx_sy_type_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./cx_sy_type_creation.clas.mjs */ \"./output/cx_sy_type_creation.clas.mjs\");\n/* harmony import */ var _cx_sy_zerodivide_clas_mjs__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./cx_sy_zerodivide.clas.mjs */ \"./output/cx_sy_zerodivide.clas.mjs\");\n/* harmony import */ var _cx_transformation_error_clas_mjs__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./cx_transformation_error.clas.mjs */ \"./output/cx_transformation_error.clas.mjs\");\n/* harmony import */ var _cx_uuid_error_clas_mjs__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./cx_uuid_error.clas.mjs */ \"./output/cx_uuid_error.clas.mjs\");\n/* harmony import */ var _cx_xslt_exception_clas_mjs__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./cx_xslt_exception.clas.mjs */ \"./output/cx_xslt_exception.clas.mjs\");\n/* harmony import */ var _cx_xslt_format_error_clas_mjs__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./cx_xslt_format_error.clas.mjs */ \"./output/cx_xslt_format_error.clas.mjs\");\n/* harmony import */ var _cx_xslt_runtime_error_clas_mjs__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./cx_xslt_runtime_error.clas.mjs */ \"./output/cx_xslt_runtime_error.clas.mjs\");\n/* harmony import */ var _cx_xslt_system_error_clas_mjs__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./cx_xslt_system_error.clas.mjs */ \"./output/cx_xslt_system_error.clas.mjs\");\n/* harmony import */ var _dats_dtel_mjs__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./dats.dtel.mjs */ \"./output/dats.dtel.mjs\");\n/* harmony import */ var _ddfields_ttyp_mjs__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./ddfields.ttyp.mjs */ \"./output/ddfields.ttyp.mjs\");\n/* harmony import */ var _ddoption_dtel_mjs__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./ddoption.dtel.mjs */ \"./output/ddoption.dtel.mjs\");\n/* harmony import */ var _ddsign_dtel_mjs__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./ddsign.dtel.mjs */ \"./output/ddsign.dtel.mjs\");\n/* harmony import */ var _devclass_dtel_mjs__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./devclass.dtel.mjs */ \"./output/devclass.dtel.mjs\");\n/* harmony import */ var _dfies_tabl_mjs__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./dfies.tabl.mjs */ \"./output/dfies.tabl.mjs\");\n/* harmony import */ var _doku_obj_dtel_mjs__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./doku_obj.dtel.mjs */ \"./output/doku_obj.dtel.mjs\");\n/* harmony import */ var _dynprofld_dtel_mjs__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./dynprofld.dtel.mjs */ \"./output/dynprofld.dtel.mjs\");\n/* harmony import */ var _file_table_tabl_mjs__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ./file_table.tabl.mjs */ \"./output/file_table.tabl.mjs\");\n/* harmony import */ var _filetable_ttyp_mjs__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ./filetable.ttyp.mjs */ \"./output/filetable.ttyp.mjs\");\n/* harmony import */ var _flag_dtel_mjs__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ./flag.dtel.mjs */ \"./output/flag.dtel.mjs\");\n/* harmony import */ var _funcname_dtel_mjs__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ./funcname.dtel.mjs */ \"./output/funcname.dtel.mjs\");\n/* harmony import */ var _guid_dtel_mjs__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ./guid.dtel.mjs */ \"./output/guid.dtel.mjs\");\n/* harmony import */ var _icon_type_mjs__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ./icon.type.mjs */ \"./output/icon.type.mjs\");\n/* harmony import */ var _icon_d_dtel_mjs__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ./icon_d.dtel.mjs */ \"./output/icon_d.dtel.mjs\");\n/* harmony import */ var _if_abap_channel_types_intf_mjs__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ./if_abap_channel_types.intf.mjs */ \"./output/if_abap_channel_types.intf.mjs\");\n/* harmony import */ var _if_abap_conv_in_intf_mjs__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ./if_abap_conv_in.intf.mjs */ \"./output/if_abap_conv_in.intf.mjs\");\n/* harmony import */ var _if_abap_conv_out_intf_mjs__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ./if_abap_conv_out.intf.mjs */ \"./output/if_abap_conv_out.intf.mjs\");\n/* harmony import */ var _if_abap_unit_constant_intf_mjs__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ./if_abap_unit_constant.intf.mjs */ \"./output/if_abap_unit_constant.intf.mjs\");\n/* harmony import */ var _if_apc_tcp_frame_types_intf_mjs__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ./if_apc_tcp_frame_types.intf.mjs */ \"./output/if_apc_tcp_frame_types.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_binding_manager_intf_mjs__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ./if_apc_wsp_binding_manager.intf.mjs */ \"./output/if_apc_wsp_binding_manager.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_client_intf_mjs__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ./if_apc_wsp_client.intf.mjs */ \"./output/if_apc_wsp_client.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_event_handler_intf_mjs__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ./if_apc_wsp_event_handler.intf.mjs */ \"./output/if_apc_wsp_event_handler.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_extension_intf_mjs__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ./if_apc_wsp_extension.intf.mjs */ \"./output/if_apc_wsp_extension.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_initial_request_intf_mjs__WEBPACK_IMPORTED_MODULE_218__ = __webpack_require__(/*! ./if_apc_wsp_initial_request.intf.mjs */ \"./output/if_apc_wsp_initial_request.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_message_intf_mjs__WEBPACK_IMPORTED_MODULE_219__ = __webpack_require__(/*! ./if_apc_wsp_message.intf.mjs */ \"./output/if_apc_wsp_message.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_message_manager_intf_mjs__WEBPACK_IMPORTED_MODULE_220__ = __webpack_require__(/*! ./if_apc_wsp_message_manager.intf.mjs */ \"./output/if_apc_wsp_message_manager.intf.mjs\");\n/* harmony import */ var _if_apc_wsp_server_context_intf_mjs__WEBPACK_IMPORTED_MODULE_221__ = __webpack_require__(/*! ./if_apc_wsp_server_context.intf.mjs */ \"./output/if_apc_wsp_server_context.intf.mjs\");\n/* harmony import */ var _if_aunit_constants_intf_mjs__WEBPACK_IMPORTED_MODULE_222__ = __webpack_require__(/*! ./if_aunit_constants.intf.mjs */ \"./output/if_aunit_constants.intf.mjs\");\n/* harmony import */ var _if_document_bcs_intf_mjs__WEBPACK_IMPORTED_MODULE_223__ = __webpack_require__(/*! ./if_document_bcs.intf.mjs */ \"./output/if_document_bcs.intf.mjs\");\n/* harmony import */ var _if_http_client_intf_mjs__WEBPACK_IMPORTED_MODULE_224__ = __webpack_require__(/*! ./if_http_client.intf.mjs */ \"./output/if_http_client.intf.mjs\");\n/* harmony import */ var _if_http_entity_intf_mjs__WEBPACK_IMPORTED_MODULE_225__ = __webpack_require__(/*! ./if_http_entity.intf.mjs */ \"./output/if_http_entity.intf.mjs\");\n/* harmony import */ var _if_http_extension_intf_mjs__WEBPACK_IMPORTED_MODULE_226__ = __webpack_require__(/*! ./if_http_extension.intf.mjs */ \"./output/if_http_extension.intf.mjs\");\n/* harmony import */ var _if_http_request_intf_mjs__WEBPACK_IMPORTED_MODULE_227__ = __webpack_require__(/*! ./if_http_request.intf.mjs */ \"./output/if_http_request.intf.mjs\");\n/* harmony import */ var _if_http_response_intf_mjs__WEBPACK_IMPORTED_MODULE_228__ = __webpack_require__(/*! ./if_http_response.intf.mjs */ \"./output/if_http_response.intf.mjs\");\n/* harmony import */ var _if_http_server_intf_mjs__WEBPACK_IMPORTED_MODULE_229__ = __webpack_require__(/*! ./if_http_server.intf.mjs */ \"./output/if_http_server.intf.mjs\");\n/* harmony import */ var _if_http_utility_intf_mjs__WEBPACK_IMPORTED_MODULE_230__ = __webpack_require__(/*! ./if_http_utility.intf.mjs */ \"./output/if_http_utility.intf.mjs\");\n/* harmony import */ var _if_icf_tree_intf_mjs__WEBPACK_IMPORTED_MODULE_231__ = __webpack_require__(/*! ./if_icf_tree.intf.mjs */ \"./output/if_icf_tree.intf.mjs\");\n/* harmony import */ var _if_ixml_intf_mjs__WEBPACK_IMPORTED_MODULE_232__ = __webpack_require__(/*! ./if_ixml.intf.mjs */ \"./output/if_ixml.intf.mjs\");\n/* harmony import */ var _if_ixml_attribute_intf_mjs__WEBPACK_IMPORTED_MODULE_233__ = __webpack_require__(/*! ./if_ixml_attribute.intf.mjs */ \"./output/if_ixml_attribute.intf.mjs\");\n/* harmony import */ var _if_ixml_document_intf_mjs__WEBPACK_IMPORTED_MODULE_234__ = __webpack_require__(/*! ./if_ixml_document.intf.mjs */ \"./output/if_ixml_document.intf.mjs\");\n/* harmony import */ var _if_ixml_element_intf_mjs__WEBPACK_IMPORTED_MODULE_235__ = __webpack_require__(/*! ./if_ixml_element.intf.mjs */ \"./output/if_ixml_element.intf.mjs\");\n/* harmony import */ var _if_ixml_encoding_intf_mjs__WEBPACK_IMPORTED_MODULE_236__ = __webpack_require__(/*! ./if_ixml_encoding.intf.mjs */ \"./output/if_ixml_encoding.intf.mjs\");\n/* harmony import */ var _if_ixml_istream_intf_mjs__WEBPACK_IMPORTED_MODULE_237__ = __webpack_require__(/*! ./if_ixml_istream.intf.mjs */ \"./output/if_ixml_istream.intf.mjs\");\n/* harmony import */ var _if_ixml_named_node_map_intf_mjs__WEBPACK_IMPORTED_MODULE_238__ = __webpack_require__(/*! ./if_ixml_named_node_map.intf.mjs */ \"./output/if_ixml_named_node_map.intf.mjs\");\n/* harmony import */ var _if_ixml_node_intf_mjs__WEBPACK_IMPORTED_MODULE_239__ = __webpack_require__(/*! ./if_ixml_node.intf.mjs */ \"./output/if_ixml_node.intf.mjs\");\n/* harmony import */ var _if_ixml_node_collection_intf_mjs__WEBPACK_IMPORTED_MODULE_240__ = __webpack_require__(/*! ./if_ixml_node_collection.intf.mjs */ \"./output/if_ixml_node_collection.intf.mjs\");\n/* harmony import */ var _if_ixml_node_filter_intf_mjs__WEBPACK_IMPORTED_MODULE_241__ = __webpack_require__(/*! ./if_ixml_node_filter.intf.mjs */ \"./output/if_ixml_node_filter.intf.mjs\");\n/* harmony import */ var _if_ixml_node_iterator_intf_mjs__WEBPACK_IMPORTED_MODULE_242__ = __webpack_require__(/*! ./if_ixml_node_iterator.intf.mjs */ \"./output/if_ixml_node_iterator.intf.mjs\");\n/* harmony import */ var _if_ixml_node_list_intf_mjs__WEBPACK_IMPORTED_MODULE_243__ = __webpack_require__(/*! ./if_ixml_node_list.intf.mjs */ \"./output/if_ixml_node_list.intf.mjs\");\n/* harmony import */ var _if_ixml_ostream_intf_mjs__WEBPACK_IMPORTED_MODULE_244__ = __webpack_require__(/*! ./if_ixml_ostream.intf.mjs */ \"./output/if_ixml_ostream.intf.mjs\");\n/* harmony import */ var _if_ixml_parse_error_intf_mjs__WEBPACK_IMPORTED_MODULE_245__ = __webpack_require__(/*! ./if_ixml_parse_error.intf.mjs */ \"./output/if_ixml_parse_error.intf.mjs\");\n/* harmony import */ var _if_ixml_parser_intf_mjs__WEBPACK_IMPORTED_MODULE_246__ = __webpack_require__(/*! ./if_ixml_parser.intf.mjs */ \"./output/if_ixml_parser.intf.mjs\");\n/* harmony import */ var _if_ixml_renderer_intf_mjs__WEBPACK_IMPORTED_MODULE_247__ = __webpack_require__(/*! ./if_ixml_renderer.intf.mjs */ \"./output/if_ixml_renderer.intf.mjs\");\n/* harmony import */ var _if_ixml_stream_factory_intf_mjs__WEBPACK_IMPORTED_MODULE_248__ = __webpack_require__(/*! ./if_ixml_stream_factory.intf.mjs */ \"./output/if_ixml_stream_factory.intf.mjs\");\n/* harmony import */ var _if_ixml_unknown_intf_mjs__WEBPACK_IMPORTED_MODULE_249__ = __webpack_require__(/*! ./if_ixml_unknown.intf.mjs */ \"./output/if_ixml_unknown.intf.mjs\");\n/* harmony import */ var _if_message_intf_mjs__WEBPACK_IMPORTED_MODULE_250__ = __webpack_require__(/*! ./if_message.intf.mjs */ \"./output/if_message.intf.mjs\");\n/* harmony import */ var _if_mr_api_intf_mjs__WEBPACK_IMPORTED_MODULE_251__ = __webpack_require__(/*! ./if_mr_api.intf.mjs */ \"./output/if_mr_api.intf.mjs\");\n/* harmony import */ var _if_oo_adt_classrun_intf_mjs__WEBPACK_IMPORTED_MODULE_252__ = __webpack_require__(/*! ./if_oo_adt_classrun.intf.mjs */ \"./output/if_oo_adt_classrun.intf.mjs\");\n/* harmony import */ var _if_oo_adt_classrun_out_intf_mjs__WEBPACK_IMPORTED_MODULE_253__ = __webpack_require__(/*! ./if_oo_adt_classrun_out.intf.mjs */ \"./output/if_oo_adt_classrun_out.intf.mjs\");\n/* harmony import */ var _if_oo_clif_source_intf_mjs__WEBPACK_IMPORTED_MODULE_254__ = __webpack_require__(/*! ./if_oo_clif_source.intf.mjs */ \"./output/if_oo_clif_source.intf.mjs\");\n/* harmony import */ var _if_recipient_bcs_intf_mjs__WEBPACK_IMPORTED_MODULE_255__ = __webpack_require__(/*! ./if_recipient_bcs.intf.mjs */ \"./output/if_recipient_bcs.intf.mjs\");\n/* harmony import */ var _if_salv_c_bool_sap_intf_mjs__WEBPACK_IMPORTED_MODULE_256__ = __webpack_require__(/*! ./if_salv_c_bool_sap.intf.mjs */ \"./output/if_salv_c_bool_sap.intf.mjs\");\n/* harmony import */ var _if_salv_c_selection_mode_intf_mjs__WEBPACK_IMPORTED_MODULE_257__ = __webpack_require__(/*! ./if_salv_c_selection_mode.intf.mjs */ \"./output/if_salv_c_selection_mode.intf.mjs\");\n/* harmony import */ var _if_sender_bcs_intf_mjs__WEBPACK_IMPORTED_MODULE_258__ = __webpack_require__(/*! ./if_sender_bcs.intf.mjs */ \"./output/if_sender_bcs.intf.mjs\");\n/* harmony import */ var _if_serializable_object_intf_mjs__WEBPACK_IMPORTED_MODULE_259__ = __webpack_require__(/*! ./if_serializable_object.intf.mjs */ \"./output/if_serializable_object.intf.mjs\");\n/* harmony import */ var _if_shm_build_instance_intf_mjs__WEBPACK_IMPORTED_MODULE_260__ = __webpack_require__(/*! ./if_shm_build_instance.intf.mjs */ \"./output/if_shm_build_instance.intf.mjs\");\n/* harmony import */ var _if_shm_trace_intf_mjs__WEBPACK_IMPORTED_MODULE_261__ = __webpack_require__(/*! ./if_shm_trace.intf.mjs */ \"./output/if_shm_trace.intf.mjs\");\n/* harmony import */ var _if_sxml_intf_mjs__WEBPACK_IMPORTED_MODULE_262__ = __webpack_require__(/*! ./if_sxml.intf.mjs */ \"./output/if_sxml.intf.mjs\");\n/* harmony import */ var _if_sxml_attribute_intf_mjs__WEBPACK_IMPORTED_MODULE_263__ = __webpack_require__(/*! ./if_sxml_attribute.intf.mjs */ \"./output/if_sxml_attribute.intf.mjs\");\n/* harmony import */ var _if_sxml_close_element_intf_mjs__WEBPACK_IMPORTED_MODULE_264__ = __webpack_require__(/*! ./if_sxml_close_element.intf.mjs */ \"./output/if_sxml_close_element.intf.mjs\");\n/* harmony import */ var _if_sxml_node_intf_mjs__WEBPACK_IMPORTED_MODULE_265__ = __webpack_require__(/*! ./if_sxml_node.intf.mjs */ \"./output/if_sxml_node.intf.mjs\");\n/* harmony import */ var _if_sxml_open_element_intf_mjs__WEBPACK_IMPORTED_MODULE_266__ = __webpack_require__(/*! ./if_sxml_open_element.intf.mjs */ \"./output/if_sxml_open_element.intf.mjs\");\n/* harmony import */ var _if_sxml_reader_intf_mjs__WEBPACK_IMPORTED_MODULE_267__ = __webpack_require__(/*! ./if_sxml_reader.intf.mjs */ \"./output/if_sxml_reader.intf.mjs\");\n/* harmony import */ var _if_sxml_value_intf_mjs__WEBPACK_IMPORTED_MODULE_268__ = __webpack_require__(/*! ./if_sxml_value.intf.mjs */ \"./output/if_sxml_value.intf.mjs\");\n/* harmony import */ var _if_sxml_value_node_intf_mjs__WEBPACK_IMPORTED_MODULE_269__ = __webpack_require__(/*! ./if_sxml_value_node.intf.mjs */ \"./output/if_sxml_value_node.intf.mjs\");\n/* harmony import */ var _if_sxml_writer_intf_mjs__WEBPACK_IMPORTED_MODULE_270__ = __webpack_require__(/*! ./if_sxml_writer.intf.mjs */ \"./output/if_sxml_writer.intf.mjs\");\n/* harmony import */ var _if_sxmlp_factory_intf_mjs__WEBPACK_IMPORTED_MODULE_271__ = __webpack_require__(/*! ./if_sxmlp_factory.intf.mjs */ \"./output/if_sxmlp_factory.intf.mjs\");\n/* harmony import */ var _if_sxmlp_list_intf_mjs__WEBPACK_IMPORTED_MODULE_272__ = __webpack_require__(/*! ./if_sxmlp_list.intf.mjs */ \"./output/if_sxmlp_list.intf.mjs\");\n/* harmony import */ var _if_sxmlp_part_intf_mjs__WEBPACK_IMPORTED_MODULE_273__ = __webpack_require__(/*! ./if_sxmlp_part.intf.mjs */ \"./output/if_sxmlp_part.intf.mjs\");\n/* harmony import */ var _if_sxmlp_simple_intf_mjs__WEBPACK_IMPORTED_MODULE_274__ = __webpack_require__(/*! ./if_sxmlp_simple.intf.mjs */ \"./output/if_sxmlp_simple.intf.mjs\");\n/* harmony import */ var _if_system_uuid_rfc4122_static_intf_mjs__WEBPACK_IMPORTED_MODULE_275__ = __webpack_require__(/*! ./if_system_uuid_rfc4122_static.intf.mjs */ \"./output/if_system_uuid_rfc4122_static.intf.mjs\");\n/* harmony import */ var _if_system_uuid_static_intf_mjs__WEBPACK_IMPORTED_MODULE_276__ = __webpack_require__(/*! ./if_system_uuid_static.intf.mjs */ \"./output/if_system_uuid_static.intf.mjs\");\n/* harmony import */ var _if_t100_dyn_msg_intf_mjs__WEBPACK_IMPORTED_MODULE_277__ = __webpack_require__(/*! ./if_t100_dyn_msg.intf.mjs */ \"./output/if_t100_dyn_msg.intf.mjs\");\n/* harmony import */ var _if_t100_message_intf_mjs__WEBPACK_IMPORTED_MODULE_278__ = __webpack_require__(/*! ./if_t100_message.intf.mjs */ \"./output/if_t100_message.intf.mjs\");\n/* harmony import */ var _ihttpnvp_tabl_mjs__WEBPACK_IMPORTED_MODULE_279__ = __webpack_require__(/*! ./ihttpnvp.tabl.mjs */ \"./output/ihttpnvp.tabl.mjs\");\n/* harmony import */ var _int1_dtel_mjs__WEBPACK_IMPORTED_MODULE_280__ = __webpack_require__(/*! ./int1.dtel.mjs */ \"./output/int1.dtel.mjs\");\n/* harmony import */ var _int2_dtel_mjs__WEBPACK_IMPORTED_MODULE_281__ = __webpack_require__(/*! ./int2.dtel.mjs */ \"./output/int2.dtel.mjs\");\n/* harmony import */ var _int4_dtel_mjs__WEBPACK_IMPORTED_MODULE_282__ = __webpack_require__(/*! ./int4.dtel.mjs */ \"./output/int4.dtel.mjs\");\n/* harmony import */ var _kernel_authority_check_clas_mjs__WEBPACK_IMPORTED_MODULE_283__ = __webpack_require__(/*! ./kernel_authority_check.clas.mjs */ \"./output/kernel_authority_check.clas.mjs\");\n/* harmony import */ var _kernel_call_clas_mjs__WEBPACK_IMPORTED_MODULE_284__ = __webpack_require__(/*! ./kernel_call.clas.mjs */ \"./output/kernel_call.clas.mjs\");\n/* harmony import */ var _kernel_call_transformation_clas_mjs__WEBPACK_IMPORTED_MODULE_285__ = __webpack_require__(/*! ./kernel_call_transformation.clas.mjs */ \"./output/kernel_call_transformation.clas.mjs\");\n/* harmony import */ var _kernel_create_data_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_286__ = __webpack_require__(/*! ./kernel_create_data_handle.clas.mjs */ \"./output/kernel_create_data_handle.clas.mjs\");\n/* harmony import */ var _kernel_cx_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_287__ = __webpack_require__(/*! ./kernel_cx_assert.clas.mjs */ \"./output/kernel_cx_assert.clas.mjs\");\n/* harmony import */ var _kernel_fugr_test_clas_mjs__WEBPACK_IMPORTED_MODULE_288__ = __webpack_require__(/*! ./kernel_fugr_test.clas.mjs */ \"./output/kernel_fugr_test.clas.mjs\");\n/* harmony import */ var _kernel_ixml_json_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_289__ = __webpack_require__(/*! ./kernel_ixml_json_to_data.clas.mjs */ \"./output/kernel_ixml_json_to_data.clas.mjs\");\n/* harmony import */ var _kernel_ixml_xml_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_290__ = __webpack_require__(/*! ./kernel_ixml_xml_to_data.clas.mjs */ \"./output/kernel_ixml_xml_to_data.clas.mjs\");\n/* harmony import */ var _kernel_json_to_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_291__ = __webpack_require__(/*! ./kernel_json_to_ixml.clas.mjs */ \"./output/kernel_json_to_ixml.clas.mjs\");\n/* harmony import */ var _kernel_lock_clas_mjs__WEBPACK_IMPORTED_MODULE_292__ = __webpack_require__(/*! ./kernel_lock.clas.mjs */ \"./output/kernel_lock.clas.mjs\");\n/* harmony import */ var _kernel_numberrange_clas_mjs__WEBPACK_IMPORTED_MODULE_293__ = __webpack_require__(/*! ./kernel_numberrange.clas.mjs */ \"./output/kernel_numberrange.clas.mjs\");\n/* harmony import */ var _kernel_push_channels_clas_mjs__WEBPACK_IMPORTED_MODULE_294__ = __webpack_require__(/*! ./kernel_push_channels.clas.mjs */ \"./output/kernel_push_channels.clas.mjs\");\n/* harmony import */ var _kernel_scan_abap_source_clas_mjs__WEBPACK_IMPORTED_MODULE_295__ = __webpack_require__(/*! ./kernel_scan_abap_source.clas.mjs */ \"./output/kernel_scan_abap_source.clas.mjs\");\n/* harmony import */ var _kernel_unit_runner_clas_mjs__WEBPACK_IMPORTED_MODULE_296__ = __webpack_require__(/*! ./kernel_unit_runner.clas.mjs */ \"./output/kernel_unit_runner.clas.mjs\");\n/* harmony import */ var _laiso_dtel_mjs__WEBPACK_IMPORTED_MODULE_297__ = __webpack_require__(/*! ./laiso.dtel.mjs */ \"./output/laiso.dtel.mjs\");\n/* harmony import */ var _land1_dtel_mjs__WEBPACK_IMPORTED_MODULE_298__ = __webpack_require__(/*! ./land1.dtel.mjs */ \"./output/land1.dtel.mjs\");\n/* harmony import */ var _langu_dtel_mjs__WEBPACK_IMPORTED_MODULE_299__ = __webpack_require__(/*! ./langu.dtel.mjs */ \"./output/langu.dtel.mjs\");\n/* harmony import */ var _lvc_nokeyc_dtel_mjs__WEBPACK_IMPORTED_MODULE_300__ = __webpack_require__(/*! ./lvc_nokeyc.dtel.mjs */ \"./output/lvc_nokeyc.dtel.mjs\");\n/* harmony import */ var _mandt_dtel_mjs__WEBPACK_IMPORTED_MODULE_301__ = __webpack_require__(/*! ./mandt.dtel.mjs */ \"./output/mandt.dtel.mjs\");\n/* harmony import */ var _match_result_tabl_mjs__WEBPACK_IMPORTED_MODULE_302__ = __webpack_require__(/*! ./match_result.tabl.mjs */ \"./output/match_result.tabl.mjs\");\n/* harmony import */ var _match_result_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_303__ = __webpack_require__(/*! ./match_result_tab.ttyp.mjs */ \"./output/match_result_tab.ttyp.mjs\");\n/* harmony import */ var _msehi_dtel_mjs__WEBPACK_IMPORTED_MODULE_304__ = __webpack_require__(/*! ./msehi.dtel.mjs */ \"./output/msehi.dtel.mjs\");\n/* harmony import */ var _number_get_next_fugr_number_get_next_mjs__WEBPACK_IMPORTED_MODULE_305__ = __webpack_require__(/*! ./number_get_next.fugr.number_get_next.mjs */ \"./output/number_get_next.fugr.number_get_next.mjs\");\n/* harmony import */ var _numc4_dtel_mjs__WEBPACK_IMPORTED_MODULE_306__ = __webpack_require__(/*! ./numc4.dtel.mjs */ \"./output/numc4.dtel.mjs\");\n/* harmony import */ var _openabap_fugr_call_v1_ping_mjs__WEBPACK_IMPORTED_MODULE_307__ = __webpack_require__(/*! ./openabap.fugr.call_v1_ping.mjs */ \"./output/openabap.fugr.call_v1_ping.mjs\");\n/* harmony import */ var _openabap_fugr_conversion_exit_alpha_input_mjs__WEBPACK_IMPORTED_MODULE_308__ = __webpack_require__(/*! ./openabap.fugr.conversion_exit_alpha_input.mjs */ \"./output/openabap.fugr.conversion_exit_alpha_input.mjs\");\n/* harmony import */ var _openabap_fugr_conversion_exit_alpha_output_mjs__WEBPACK_IMPORTED_MODULE_309__ = __webpack_require__(/*! ./openabap.fugr.conversion_exit_alpha_output.mjs */ \"./output/openabap.fugr.conversion_exit_alpha_output.mjs\");\n/* harmony import */ var _openabap_fugr_conversion_exit_isola_input_mjs__WEBPACK_IMPORTED_MODULE_310__ = __webpack_require__(/*! ./openabap.fugr.conversion_exit_isola_input.mjs */ \"./output/openabap.fugr.conversion_exit_isola_input.mjs\");\n/* harmony import */ var _openabap_fugr_conversion_exit_isola_output_mjs__WEBPACK_IMPORTED_MODULE_311__ = __webpack_require__(/*! ./openabap.fugr.conversion_exit_isola_output.mjs */ \"./output/openabap.fugr.conversion_exit_isola_output.mjs\");\n/* harmony import */ var _openabap_fugr_convert_itf_to_stream_text_mjs__WEBPACK_IMPORTED_MODULE_312__ = __webpack_require__(/*! ./openabap.fugr.convert_itf_to_stream_text.mjs */ \"./output/openabap.fugr.convert_itf_to_stream_text.mjs\");\n/* harmony import */ var _openabap_fugr_docu_get_mjs__WEBPACK_IMPORTED_MODULE_313__ = __webpack_require__(/*! ./openabap.fugr.docu_get.mjs */ \"./output/openabap.fugr.docu_get.mjs\");\n/* harmony import */ var _openabap_fugr_function_exists_mjs__WEBPACK_IMPORTED_MODULE_314__ = __webpack_require__(/*! ./openabap.fugr.function_exists.mjs */ \"./output/openabap.fugr.function_exists.mjs\");\n/* harmony import */ var _openabap_fugr_generate_sec_random_mjs__WEBPACK_IMPORTED_MODULE_315__ = __webpack_require__(/*! ./openabap.fugr.generate_sec_random.mjs */ \"./output/openabap.fugr.generate_sec_random.mjs\");\n/* harmony import */ var _openabap_fugr_get_system_timezone_mjs__WEBPACK_IMPORTED_MODULE_316__ = __webpack_require__(/*! ./openabap.fugr.get_system_timezone.mjs */ \"./output/openabap.fugr.get_system_timezone.mjs\");\n/* harmony import */ var _openabap_fugr_system_callstack_mjs__WEBPACK_IMPORTED_MODULE_317__ = __webpack_require__(/*! ./openabap.fugr.system_callstack.mjs */ \"./output/openabap.fugr.system_callstack.mjs\");\n/* harmony import */ var _openabap_fugr_system_installed_languages_mjs__WEBPACK_IMPORTED_MODULE_318__ = __webpack_require__(/*! ./openabap.fugr.system_installed_languages.mjs */ \"./output/openabap.fugr.system_installed_languages.mjs\");\n/* harmony import */ var _openabap_fugr_text_split_mjs__WEBPACK_IMPORTED_MODULE_319__ = __webpack_require__(/*! ./openabap.fugr.text_split.mjs */ \"./output/openabap.fugr.text_split.mjs\");\n/* harmony import */ var _reposrc_tabl_mjs__WEBPACK_IMPORTED_MODULE_320__ = __webpack_require__(/*! ./reposrc.tabl.mjs */ \"./output/reposrc.tabl.mjs\");\n/* harmony import */ var _rfcdest_dtel_mjs__WEBPACK_IMPORTED_MODULE_321__ = __webpack_require__(/*! ./rfcdest.dtel.mjs */ \"./output/rfcdest.dtel.mjs\");\n/* harmony import */ var _scrtext_l_dtel_mjs__WEBPACK_IMPORTED_MODULE_322__ = __webpack_require__(/*! ./scrtext_l.dtel.mjs */ \"./output/scrtext_l.dtel.mjs\");\n/* harmony import */ var _scrtext_m_dtel_mjs__WEBPACK_IMPORTED_MODULE_323__ = __webpack_require__(/*! ./scrtext_m.dtel.mjs */ \"./output/scrtext_m.dtel.mjs\");\n/* harmony import */ var _scrtext_s_dtel_mjs__WEBPACK_IMPORTED_MODULE_324__ = __webpack_require__(/*! ./scrtext_s.dtel.mjs */ \"./output/scrtext_s.dtel.mjs\");\n/* harmony import */ var _scx_attrname_dtel_mjs__WEBPACK_IMPORTED_MODULE_325__ = __webpack_require__(/*! ./scx_attrname.dtel.mjs */ \"./output/scx_attrname.dtel.mjs\");\n/* harmony import */ var _scx_t100key_tabl_mjs__WEBPACK_IMPORTED_MODULE_326__ = __webpack_require__(/*! ./scx_t100key.tabl.mjs */ \"./output/scx_t100key.tabl.mjs\");\n/* harmony import */ var _sdok_class_dtel_mjs__WEBPACK_IMPORTED_MODULE_327__ = __webpack_require__(/*! ./sdok_class.dtel.mjs */ \"./output/sdok_class.dtel.mjs\");\n/* harmony import */ var _sdok_docid_dtel_mjs__WEBPACK_IMPORTED_MODULE_328__ = __webpack_require__(/*! ./sdok_docid.dtel.mjs */ \"./output/sdok_docid.dtel.mjs\");\n/* harmony import */ var _sdokobject_tabl_mjs__WEBPACK_IMPORTED_MODULE_329__ = __webpack_require__(/*! ./sdokobject.tabl.mjs */ \"./output/sdokobject.tabl.mjs\");\n/* harmony import */ var _seoclsname_dtel_mjs__WEBPACK_IMPORTED_MODULE_330__ = __webpack_require__(/*! ./seoclsname.dtel.mjs */ \"./output/seoclsname.dtel.mjs\");\n/* harmony import */ var _shm_affect_server_dtel_mjs__WEBPACK_IMPORTED_MODULE_331__ = __webpack_require__(/*! ./shm_affect_server.dtel.mjs */ \"./output/shm_affect_server.dtel.mjs\");\n/* harmony import */ var _shm_area_name_dtel_mjs__WEBPACK_IMPORTED_MODULE_332__ = __webpack_require__(/*! ./shm_area_name.dtel.mjs */ \"./output/shm_area_name.dtel.mjs\");\n/* harmony import */ var _shm_attach_mode_dtel_mjs__WEBPACK_IMPORTED_MODULE_333__ = __webpack_require__(/*! ./shm_attach_mode.dtel.mjs */ \"./output/shm_attach_mode.dtel.mjs\");\n/* harmony import */ var _shm_auto_build_class_name_dtel_mjs__WEBPACK_IMPORTED_MODULE_334__ = __webpack_require__(/*! ./shm_auto_build_class_name.dtel.mjs */ \"./output/shm_auto_build_class_name.dtel.mjs\");\n/* harmony import */ var _shm_client_dtel_mjs__WEBPACK_IMPORTED_MODULE_335__ = __webpack_require__(/*! ./shm_client.dtel.mjs */ \"./output/shm_client.dtel.mjs\");\n/* harmony import */ var _shm_constr_invocation_mode_dtel_mjs__WEBPACK_IMPORTED_MODULE_336__ = __webpack_require__(/*! ./shm_constr_invocation_mode.dtel.mjs */ \"./output/shm_constr_invocation_mode.dtel.mjs\");\n/* harmony import */ var _shm_inst_info_tabl_mjs__WEBPACK_IMPORTED_MODULE_337__ = __webpack_require__(/*! ./shm_inst_info.tabl.mjs */ \"./output/shm_inst_info.tabl.mjs\");\n/* harmony import */ var _shm_inst_infos_ttyp_mjs__WEBPACK_IMPORTED_MODULE_338__ = __webpack_require__(/*! ./shm_inst_infos.ttyp.mjs */ \"./output/shm_inst_infos.ttyp.mjs\");\n/* harmony import */ var _shm_inst_name_dtel_mjs__WEBPACK_IMPORTED_MODULE_339__ = __webpack_require__(/*! ./shm_inst_name.dtel.mjs */ \"./output/shm_inst_name.dtel.mjs\");\n/* harmony import */ var _shm_life_context_dtel_mjs__WEBPACK_IMPORTED_MODULE_340__ = __webpack_require__(/*! ./shm_life_context.dtel.mjs */ \"./output/shm_life_context.dtel.mjs\");\n/* harmony import */ var _shm_properties_tabl_mjs__WEBPACK_IMPORTED_MODULE_341__ = __webpack_require__(/*! ./shm_properties.tabl.mjs */ \"./output/shm_properties.tabl.mjs\");\n/* harmony import */ var _shm_rc_dtel_mjs__WEBPACK_IMPORTED_MODULE_342__ = __webpack_require__(/*! ./shm_rc.dtel.mjs */ \"./output/shm_rc.dtel.mjs\");\n/* harmony import */ var _shma_attributes_tabl_mjs__WEBPACK_IMPORTED_MODULE_343__ = __webpack_require__(/*! ./shma_attributes.tabl.mjs */ \"./output/shma_attributes.tabl.mjs\");\n/* harmony import */ var _shma_client_dtel_mjs__WEBPACK_IMPORTED_MODULE_344__ = __webpack_require__(/*! ./shma_client.dtel.mjs */ \"./output/shma_client.dtel.mjs\");\n/* harmony import */ var _shmm_trc_variant_name_dtel_mjs__WEBPACK_IMPORTED_MODULE_345__ = __webpack_require__(/*! ./shmm_trc_variant_name.dtel.mjs */ \"./output/shmm_trc_variant_name.dtel.mjs\");\n/* harmony import */ var _skwf_io_tabl_mjs__WEBPACK_IMPORTED_MODULE_346__ = __webpack_require__(/*! ./skwf_io.tabl.mjs */ \"./output/skwf_io.tabl.mjs\");\n/* harmony import */ var _skwf_ioty_dtel_mjs__WEBPACK_IMPORTED_MODULE_347__ = __webpack_require__(/*! ./skwf_ioty.dtel.mjs */ \"./output/skwf_ioty.dtel.mjs\");\n/* harmony import */ var _so_raw255_dtel_mjs__WEBPACK_IMPORTED_MODULE_348__ = __webpack_require__(/*! ./so_raw255.dtel.mjs */ \"./output/so_raw255.dtel.mjs\");\n/* harmony import */ var _so_text255_dtel_mjs__WEBPACK_IMPORTED_MODULE_349__ = __webpack_require__(/*! ./so_text255.dtel.mjs */ \"./output/so_text255.dtel.mjs\");\n/* harmony import */ var _soli_tabl_mjs__WEBPACK_IMPORTED_MODULE_350__ = __webpack_require__(/*! ./soli.tabl.mjs */ \"./output/soli.tabl.mjs\");\n/* harmony import */ var _soli_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_351__ = __webpack_require__(/*! ./soli_tab.ttyp.mjs */ \"./output/soli_tab.ttyp.mjs\");\n/* harmony import */ var _solix_tabl_mjs__WEBPACK_IMPORTED_MODULE_352__ = __webpack_require__(/*! ./solix.tabl.mjs */ \"./output/solix.tabl.mjs\");\n/* harmony import */ var _solix_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_353__ = __webpack_require__(/*! ./solix_tab.ttyp.mjs */ \"./output/solix_tab.ttyp.mjs\");\n/* harmony import */ var _sotr_conc_dtel_mjs__WEBPACK_IMPORTED_MODULE_354__ = __webpack_require__(/*! ./sotr_conc.dtel.mjs */ \"./output/sotr_conc.dtel.mjs\");\n/* harmony import */ var _spras_dtel_mjs__WEBPACK_IMPORTED_MODULE_355__ = __webpack_require__(/*! ./spras.dtel.mjs */ \"./output/spras.dtel.mjs\");\n/* harmony import */ var _ssfapplssl_dtel_mjs__WEBPACK_IMPORTED_MODULE_356__ = __webpack_require__(/*! ./ssfapplssl.dtel.mjs */ \"./output/ssfapplssl.dtel.mjs\");\n/* harmony import */ var _sstmnt_tabl_mjs__WEBPACK_IMPORTED_MODULE_357__ = __webpack_require__(/*! ./sstmnt.tabl.mjs */ \"./output/sstmnt.tabl.mjs\");\n/* harmony import */ var _sstmnt_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_358__ = __webpack_require__(/*! ./sstmnt_tab.ttyp.mjs */ \"./output/sstmnt_tab.ttyp.mjs\");\n/* harmony import */ var _sstruc_tabl_mjs__WEBPACK_IMPORTED_MODULE_359__ = __webpack_require__(/*! ./sstruc.tabl.mjs */ \"./output/sstruc.tabl.mjs\");\n/* harmony import */ var _sstruc_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_360__ = __webpack_require__(/*! ./sstruc_tab.ttyp.mjs */ \"./output/sstruc_tab.ttyp.mjs\");\n/* harmony import */ var _stokes_tabl_mjs__WEBPACK_IMPORTED_MODULE_361__ = __webpack_require__(/*! ./stokes.tabl.mjs */ \"./output/stokes.tabl.mjs\");\n/* harmony import */ var _stokes_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_362__ = __webpack_require__(/*! ./stokes_tab.ttyp.mjs */ \"./output/stokes_tab.ttyp.mjs\");\n/* harmony import */ var _stokesx_tabl_mjs__WEBPACK_IMPORTED_MODULE_363__ = __webpack_require__(/*! ./stokesx.tabl.mjs */ \"./output/stokesx.tabl.mjs\");\n/* harmony import */ var _string_table_ttyp_mjs__WEBPACK_IMPORTED_MODULE_364__ = __webpack_require__(/*! ./string_table.ttyp.mjs */ \"./output/string_table.ttyp.mjs\");\n/* harmony import */ var _submatch_result_tabl_mjs__WEBPACK_IMPORTED_MODULE_365__ = __webpack_require__(/*! ./submatch_result.tabl.mjs */ \"./output/submatch_result.tabl.mjs\");\n/* harmony import */ var _submatch_result_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_366__ = __webpack_require__(/*! ./submatch_result_tab.ttyp.mjs */ \"./output/submatch_result_tab.ttyp.mjs\");\n/* harmony import */ var _sxco_fm_name_dtel_mjs__WEBPACK_IMPORTED_MODULE_367__ = __webpack_require__(/*! ./sxco_fm_name.dtel.mjs */ \"./output/sxco_fm_name.dtel.mjs\");\n/* harmony import */ var _sxco_transport_dtel_mjs__WEBPACK_IMPORTED_MODULE_368__ = __webpack_require__(/*! ./sxco_transport.dtel.mjs */ \"./output/sxco_transport.dtel.mjs\");\n/* harmony import */ var _sydate_dtel_mjs__WEBPACK_IMPORTED_MODULE_369__ = __webpack_require__(/*! ./sydate.dtel.mjs */ \"./output/sydate.dtel.mjs\");\n/* harmony import */ var _symsg_tabl_mjs__WEBPACK_IMPORTED_MODULE_370__ = __webpack_require__(/*! ./symsg.tabl.mjs */ \"./output/symsg.tabl.mjs\");\n/* harmony import */ var _symsgid_dtel_mjs__WEBPACK_IMPORTED_MODULE_371__ = __webpack_require__(/*! ./symsgid.dtel.mjs */ \"./output/symsgid.dtel.mjs\");\n/* harmony import */ var _symsgno_dtel_mjs__WEBPACK_IMPORTED_MODULE_372__ = __webpack_require__(/*! ./symsgno.dtel.mjs */ \"./output/symsgno.dtel.mjs\");\n/* harmony import */ var _symsgty_dtel_mjs__WEBPACK_IMPORTED_MODULE_373__ = __webpack_require__(/*! ./symsgty.dtel.mjs */ \"./output/symsgty.dtel.mjs\");\n/* harmony import */ var _symsgv_dtel_mjs__WEBPACK_IMPORTED_MODULE_374__ = __webpack_require__(/*! ./symsgv.dtel.mjs */ \"./output/symsgv.dtel.mjs\");\n/* harmony import */ var _syst_host_dtel_mjs__WEBPACK_IMPORTED_MODULE_375__ = __webpack_require__(/*! ./syst_host.dtel.mjs */ \"./output/syst_host.dtel.mjs\");\n/* harmony import */ var _sysubrc_dtel_mjs__WEBPACK_IMPORTED_MODULE_376__ = __webpack_require__(/*! ./sysubrc.dtel.mjs */ \"./output/sysubrc.dtel.mjs\");\n/* harmony import */ var _sysuuid_c36_dtel_mjs__WEBPACK_IMPORTED_MODULE_377__ = __webpack_require__(/*! ./sysuuid_c36.dtel.mjs */ \"./output/sysuuid_c36.dtel.mjs\");\n/* harmony import */ var _sysuuid_x16_dtel_mjs__WEBPACK_IMPORTED_MODULE_378__ = __webpack_require__(/*! ./sysuuid_x16.dtel.mjs */ \"./output/sysuuid_x16.dtel.mjs\");\n/* harmony import */ var _syuname_dtel_mjs__WEBPACK_IMPORTED_MODULE_379__ = __webpack_require__(/*! ./syuname.dtel.mjs */ \"./output/syuname.dtel.mjs\");\n/* harmony import */ var _t000_tabl_mjs__WEBPACK_IMPORTED_MODULE_380__ = __webpack_require__(/*! ./t000.tabl.mjs */ \"./output/t000.tabl.mjs\");\n/* harmony import */ var _t100_tabl_mjs__WEBPACK_IMPORTED_MODULE_381__ = __webpack_require__(/*! ./t100.tabl.mjs */ \"./output/t100.tabl.mjs\");\n/* harmony import */ var _tabfdpos_dtel_mjs__WEBPACK_IMPORTED_MODULE_382__ = __webpack_require__(/*! ./tabfdpos.dtel.mjs */ \"./output/tabfdpos.dtel.mjs\");\n/* harmony import */ var _tabname_dtel_mjs__WEBPACK_IMPORTED_MODULE_383__ = __webpack_require__(/*! ./tabname.dtel.mjs */ \"./output/tabname.dtel.mjs\");\n/* harmony import */ var _tadir_tabl_mjs__WEBPACK_IMPORTED_MODULE_384__ = __webpack_require__(/*! ./tadir.tabl.mjs */ \"./output/tadir.tabl.mjs\");\n/* harmony import */ var _tdevc_tabl_mjs__WEBPACK_IMPORTED_MODULE_385__ = __webpack_require__(/*! ./tdevc.tabl.mjs */ \"./output/tdevc.tabl.mjs\");\n/* harmony import */ var _tdline_dtel_mjs__WEBPACK_IMPORTED_MODULE_386__ = __webpack_require__(/*! ./tdline.dtel.mjs */ \"./output/tdline.dtel.mjs\");\n/* harmony import */ var _text20_dtel_mjs__WEBPACK_IMPORTED_MODULE_387__ = __webpack_require__(/*! ./text20.dtel.mjs */ \"./output/text20.dtel.mjs\");\n/* harmony import */ var _text200_dtel_mjs__WEBPACK_IMPORTED_MODULE_388__ = __webpack_require__(/*! ./text200.dtel.mjs */ \"./output/text200.dtel.mjs\");\n/* harmony import */ var _text255_dtel_mjs__WEBPACK_IMPORTED_MODULE_389__ = __webpack_require__(/*! ./text255.dtel.mjs */ \"./output/text255.dtel.mjs\");\n/* harmony import */ var _text30_dtel_mjs__WEBPACK_IMPORTED_MODULE_390__ = __webpack_require__(/*! ./text30.dtel.mjs */ \"./output/text30.dtel.mjs\");\n/* harmony import */ var _text80_dtel_mjs__WEBPACK_IMPORTED_MODULE_391__ = __webpack_require__(/*! ./text80.dtel.mjs */ \"./output/text80.dtel.mjs\");\n/* harmony import */ var _textpool_tabl_mjs__WEBPACK_IMPORTED_MODULE_392__ = __webpack_require__(/*! ./textpool.tabl.mjs */ \"./output/textpool.tabl.mjs\");\n/* harmony import */ var _tfdir_tabl_mjs__WEBPACK_IMPORTED_MODULE_393__ = __webpack_require__(/*! ./tfdir.tabl.mjs */ \"./output/tfdir.tabl.mjs\");\n/* harmony import */ var _tihttpnvp_ttyp_mjs__WEBPACK_IMPORTED_MODULE_394__ = __webpack_require__(/*! ./tihttpnvp.ttyp.mjs */ \"./output/tihttpnvp.ttyp.mjs\");\n/* harmony import */ var _timestamp_dtel_mjs__WEBPACK_IMPORTED_MODULE_395__ = __webpack_require__(/*! ./timestamp.dtel.mjs */ \"./output/timestamp.dtel.mjs\");\n/* harmony import */ var _timestampl_dtel_mjs__WEBPACK_IMPORTED_MODULE_396__ = __webpack_require__(/*! ./timestampl.dtel.mjs */ \"./output/timestampl.dtel.mjs\");\n/* harmony import */ var _timezone_dtel_mjs__WEBPACK_IMPORTED_MODULE_397__ = __webpack_require__(/*! ./timezone.dtel.mjs */ \"./output/timezone.dtel.mjs\");\n/* harmony import */ var _tline_tabl_mjs__WEBPACK_IMPORTED_MODULE_398__ = __webpack_require__(/*! ./tline.tabl.mjs */ \"./output/tline.tabl.mjs\");\n/* harmony import */ var _tline_tab_ttyp_mjs__WEBPACK_IMPORTED_MODULE_399__ = __webpack_require__(/*! ./tline_tab.ttyp.mjs */ \"./output/tline_tab.ttyp.mjs\");\n/* harmony import */ var _trfunction_dtel_mjs__WEBPACK_IMPORTED_MODULE_400__ = __webpack_require__(/*! ./trfunction.dtel.mjs */ \"./output/trfunction.dtel.mjs\");\n/* harmony import */ var _trkorr_dtel_mjs__WEBPACK_IMPORTED_MODULE_401__ = __webpack_require__(/*! ./trkorr.dtel.mjs */ \"./output/trkorr.dtel.mjs\");\n/* harmony import */ var _tzntstmpl_dtel_mjs__WEBPACK_IMPORTED_MODULE_402__ = __webpack_require__(/*! ./tzntstmpl.dtel.mjs */ \"./output/tzntstmpl.dtel.mjs\");\n/* harmony import */ var _uname_dtel_mjs__WEBPACK_IMPORTED_MODULE_403__ = __webpack_require__(/*! ./uname.dtel.mjs */ \"./output/uname.dtel.mjs\");\n/* harmony import */ var _usnam_dtel_mjs__WEBPACK_IMPORTED_MODULE_404__ = __webpack_require__(/*! ./usnam.dtel.mjs */ \"./output/usnam.dtel.mjs\");\n/* harmony import */ var _w3mime_tabl_mjs__WEBPACK_IMPORTED_MODULE_405__ = __webpack_require__(/*! ./w3mime.tabl.mjs */ \"./output/w3mime.tabl.mjs\");\n/* harmony import */ var _wwwdatatab_tabl_mjs__WEBPACK_IMPORTED_MODULE_406__ = __webpack_require__(/*! ./wwwdatatab.tabl.mjs */ \"./output/wwwdatatab.tabl.mjs\");\n/* harmony import */ var _wwwparams_tabl_mjs__WEBPACK_IMPORTED_MODULE_407__ = __webpack_require__(/*! ./wwwparams.tabl.mjs */ \"./output/wwwparams.tabl.mjs\");\n/* harmony import */ var _xfeld_dtel_mjs__WEBPACK_IMPORTED_MODULE_408__ = __webpack_require__(/*! ./xfeld.dtel.mjs */ \"./output/xfeld.dtel.mjs\");\n/* harmony import */ var _xsdboolean_dtel_mjs__WEBPACK_IMPORTED_MODULE_409__ = __webpack_require__(/*! ./xsdboolean.dtel.mjs */ \"./output/xsdboolean.dtel.mjs\");\n/* harmony import */ var _xsdtime_t_dtel_mjs__WEBPACK_IMPORTED_MODULE_410__ = __webpack_require__(/*! ./xsdtime_t.dtel.mjs */ \"./output/xsdtime_t.dtel.mjs\");\n/* harmony import */ var _zcl_http_handler_clas_mjs__WEBPACK_IMPORTED_MODULE_411__ = __webpack_require__(/*! ./zcl_http_handler.clas.mjs */ \"./output/zcl_http_handler.clas.mjs\");\n/* harmony import */ var _zcl_otm_table_maintenance_clas_mjs__WEBPACK_IMPORTED_MODULE_412__ = __webpack_require__(/*! ./zcl_otm_table_maintenance.clas.mjs */ \"./output/zcl_otm_table_maintenance.clas.mjs\");\n/* harmony import */ var _zopentest_tabl_mjs__WEBPACK_IMPORTED_MODULE_413__ = __webpack_require__(/*! ./zopentest.tabl.mjs */ \"./output/zopentest.tabl.mjs\");\n/* harmony import */ var _zw3mi_fugr_wwwdata_export_mjs__WEBPACK_IMPORTED_MODULE_414__ = __webpack_require__(/*! ./zw3mi.fugr.wwwdata_export.mjs */ \"./output/zw3mi.fugr.wwwdata_export.mjs\");\n/* harmony import */ var _zw3mi_fugr_wwwdata_import_mjs__WEBPACK_IMPORTED_MODULE_415__ = __webpack_require__(/*! ./zw3mi.fugr.wwwdata_import.mjs */ \"./output/zw3mi.fugr.wwwdata_import.mjs\");\n/* harmony import */ var _zw3mi_fugr_wwwparams_insert_mjs__WEBPACK_IMPORTED_MODULE_416__ = __webpack_require__(/*! ./zw3mi.fugr.wwwparams_insert.mjs */ \"./output/zw3mi.fugr.wwwparams_insert.mjs\");\n/* harmony import */ var _zw3mi_fugr_wwwparams_read_mjs__WEBPACK_IMPORTED_MODULE_417__ = __webpack_require__(/*! ./zw3mi.fugr.wwwparams_read.mjs */ \"./output/zw3mi.fugr.wwwparams_read.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cl_abap_char_utilities_clas_mjs__WEBPACK_IMPORTED_MODULE_35__, _cl_abap_classdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_36__, _cl_abap_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_37__, _cl_abap_complexdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_38__, _cl_abap_conv_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_39__, _cl_abap_conv_in_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_40__, _cl_abap_conv_out_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_41__, _cl_abap_datadescr_clas_mjs__WEBPACK_IMPORTED_MODULE_42__, _cl_abap_dyn_prg_clas_mjs__WEBPACK_IMPORTED_MODULE_43__, _cl_abap_elemdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_44__, _cl_abap_enumdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_45__, _cl_abap_exceptional_values_clas_mjs__WEBPACK_IMPORTED_MODULE_46__, _cl_abap_format_clas_mjs__WEBPACK_IMPORTED_MODULE_47__, _cl_abap_gzip_clas_mjs__WEBPACK_IMPORTED_MODULE_48__, _cl_abap_hmac_clas_mjs__WEBPACK_IMPORTED_MODULE_49__, _cl_abap_intfdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_50__, _cl_abap_matcher_clas_mjs__WEBPACK_IMPORTED_MODULE_51__, _cl_abap_math_clas_mjs__WEBPACK_IMPORTED_MODULE_52__, _cl_abap_objectdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_53__, _cl_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_54__, _cl_abap_random_int_clas_mjs__WEBPACK_IMPORTED_MODULE_55__, _cl_abap_refdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_56__, _cl_abap_regex_clas_mjs__WEBPACK_IMPORTED_MODULE_57__, _cl_abap_structdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_58__, _cl_abap_tabledescr_clas_mjs__WEBPACK_IMPORTED_MODULE_59__, _cl_abap_tstmp_clas_mjs__WEBPACK_IMPORTED_MODULE_60__, _cl_abap_typedescr_clas_mjs__WEBPACK_IMPORTED_MODULE_61__, _cl_abap_unit_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_62__, _cl_abap_zip_clas_mjs__WEBPACK_IMPORTED_MODULE_63__, _cl_apc_tcp_client_manager_clas_mjs__WEBPACK_IMPORTED_MODULE_64__, _cl_apc_wsp_ext_stateless_base_clas_mjs__WEBPACK_IMPORTED_MODULE_65__, _cl_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_66__, _cl_bcs_convert_clas_mjs__WEBPACK_IMPORTED_MODULE_67__, _cl_cam_address_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_68__, _cl_demo_output_clas_mjs__WEBPACK_IMPORTED_MODULE_69__, _cl_document_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_70__, _cl_express_icf_shim_clas_mjs__WEBPACK_IMPORTED_MODULE_71__, _cl_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_72__, _cl_gui_cfw_clas_mjs__WEBPACK_IMPORTED_MODULE_73__, _cl_gui_container_clas_mjs__WEBPACK_IMPORTED_MODULE_74__, _cl_gui_frontend_services_clas_mjs__WEBPACK_IMPORTED_MODULE_75__, _cl_http_client_clas_mjs__WEBPACK_IMPORTED_MODULE_76__, _cl_http_entity_clas_mjs__WEBPACK_IMPORTED_MODULE_77__, _cl_http_server_clas_mjs__WEBPACK_IMPORTED_MODULE_78__, _cl_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_79__, _cl_i18n_languages_clas_mjs__WEBPACK_IMPORTED_MODULE_80__, _cl_icf_tree_clas_mjs__WEBPACK_IMPORTED_MODULE_81__, _cl_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_82__, _cl_message_helper_clas_mjs__WEBPACK_IMPORTED_MODULE_83__, _cl_mime_repository_api_clas_mjs__WEBPACK_IMPORTED_MODULE_84__, _cl_numberrange_runtime_clas_mjs__WEBPACK_IMPORTED_MODULE_85__, _cl_oo_factory_clas_mjs__WEBPACK_IMPORTED_MODULE_86__, _cl_progress_indicator_clas_mjs__WEBPACK_IMPORTED_MODULE_87__, _cl_salv_aggregations_clas_mjs__WEBPACK_IMPORTED_MODULE_88__, _cl_salv_column_clas_mjs__WEBPACK_IMPORTED_MODULE_89__, _cl_salv_columns_table_clas_mjs__WEBPACK_IMPORTED_MODULE_90__, _cl_salv_events_table_clas_mjs__WEBPACK_IMPORTED_MODULE_91__, _cl_salv_filters_clas_mjs__WEBPACK_IMPORTED_MODULE_92__, _cl_salv_functions_list_clas_mjs__WEBPACK_IMPORTED_MODULE_93__, _cl_salv_table_clas_mjs__WEBPACK_IMPORTED_MODULE_94__, _cl_shm_area_clas_mjs__WEBPACK_IMPORTED_MODULE_95__, _cl_shm_service_clas_mjs__WEBPACK_IMPORTED_MODULE_96__, _cl_sxml_string_reader_clas_mjs__WEBPACK_IMPORTED_MODULE_97__, _cl_sxml_string_writer_clas_mjs__WEBPACK_IMPORTED_MODULE_98__, _cl_system_uuid_clas_mjs__WEBPACK_IMPORTED_MODULE_99__, _cl_web_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_100__, _cx_abap_message_digest_clas_mjs__WEBPACK_IMPORTED_MODULE_101__, _cx_abap_not_a_table_clas_mjs__WEBPACK_IMPORTED_MODULE_102__, _cx_abap_not_in_package_clas_mjs__WEBPACK_IMPORTED_MODULE_103__, _cx_abap_not_in_whitelist_clas_mjs__WEBPACK_IMPORTED_MODULE_104__, _cx_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_105__, _cx_apc_error_clas_mjs__WEBPACK_IMPORTED_MODULE_106__, _cx_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_107__, _cx_dynamic_check_clas_mjs__WEBPACK_IMPORTED_MODULE_108__, _cx_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_109__, _cx_no_check_clas_mjs__WEBPACK_IMPORTED_MODULE_110__, _cx_oo_clif_not_exists_clas_mjs__WEBPACK_IMPORTED_MODULE_111__, _cx_parameter_invalid_clas_mjs__WEBPACK_IMPORTED_MODULE_112__, _cx_parameter_invalid_range_clas_mjs__WEBPACK_IMPORTED_MODULE_113__, _cx_parameter_invalid_type_clas_mjs__WEBPACK_IMPORTED_MODULE_114__, _cx_salv_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_116__, _cx_salv_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_117__, _cx_salv_error_clas_mjs__WEBPACK_IMPORTED_MODULE_118__, _cx_salv_msg_clas_mjs__WEBPACK_IMPORTED_MODULE_119__, _cx_salv_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_120__, _cx_salv_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_121__, _cx_shm_already_detached_clas_mjs__WEBPACK_IMPORTED_MODULE_122__, _cx_shm_attach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_123__, _cx_shm_build_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_124__, _cx_shm_change_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_125__, _cx_shm_completion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_126__, _cx_shm_detach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_127__, _cx_shm_error_clas_mjs__WEBPACK_IMPORTED_MODULE_128__, _cx_shm_event_execution_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_129__, _cx_shm_exclusive_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_130__, _cx_shm_general_error_clas_mjs__WEBPACK_IMPORTED_MODULE_131__, _cx_shm_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_132__, _cx_shm_initial_reference_clas_mjs__WEBPACK_IMPORTED_MODULE_133__, _cx_shm_no_active_version_clas_mjs__WEBPACK_IMPORTED_MODULE_134__, _cx_shm_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_135__, _cx_shm_pending_lock_removed_clas_mjs__WEBPACK_IMPORTED_MODULE_136__, _cx_shm_read_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_137__, _cx_shm_secondary_commit_clas_mjs__WEBPACK_IMPORTED_MODULE_138__, _cx_shm_version_limit_exceeded_clas_mjs__WEBPACK_IMPORTED_MODULE_139__, _cx_shm_wrong_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_140__, _cx_shma_dynamic_clas_mjs__WEBPACK_IMPORTED_MODULE_141__, _cx_shma_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_142__, _cx_shma_not_configured_clas_mjs__WEBPACK_IMPORTED_MODULE_143__, _cx_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_144__, _cx_sxml_error_clas_mjs__WEBPACK_IMPORTED_MODULE_145__, _cx_sxml_illegal_argument_error_clas_mjs__WEBPACK_IMPORTED_MODULE_146__, _cx_sxml_name_error_clas_mjs__WEBPACK_IMPORTED_MODULE_147__, _cx_sxml_parse_error_clas_mjs__WEBPACK_IMPORTED_MODULE_148__, _cx_sxml_state_error_clas_mjs__WEBPACK_IMPORTED_MODULE_149__, _cx_sy_arithmetic_error_clas_mjs__WEBPACK_IMPORTED_MODULE_150__, _cx_sy_buffer_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_151__, _cx_sy_codepage_converter_init_clas_mjs__WEBPACK_IMPORTED_MODULE_152__, _cx_sy_compression_error_clas_mjs__WEBPACK_IMPORTED_MODULE_153__, _cx_sy_conversion_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_154__, _cx_sy_conversion_data_loss_clas_mjs__WEBPACK_IMPORTED_MODULE_155__, _cx_sy_conversion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_156__, _cx_sy_conversion_no_number_clas_mjs__WEBPACK_IMPORTED_MODULE_157__, _cx_sy_conversion_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_158__, _cx_sy_create_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_159__, _cx_sy_create_object_error_clas_mjs__WEBPACK_IMPORTED_MODULE_160__, _cx_sy_data_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_161__, _cx_sy_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_162__, _cx_sy_dyn_call_error_clas_mjs__WEBPACK_IMPORTED_MODULE_163__, _cx_sy_dyn_call_illegal_class_clas_mjs__WEBPACK_IMPORTED_MODULE_164__, _cx_sy_dyn_call_illegal_form_clas_mjs__WEBPACK_IMPORTED_MODULE_165__, _cx_sy_dyn_call_illegal_func_clas_mjs__WEBPACK_IMPORTED_MODULE_166__, _cx_sy_dyn_call_illegal_method_clas_mjs__WEBPACK_IMPORTED_MODULE_167__, _cx_sy_dyn_call_param_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_168__, _cx_sy_dyn_call_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_169__, _cx_sy_dynamic_osql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_170__, _cx_sy_dynamic_osql_semantics_clas_mjs__WEBPACK_IMPORTED_MODULE_171__, _cx_sy_itab_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_172__, _cx_sy_itab_error_clas_mjs__WEBPACK_IMPORTED_MODULE_173__, _cx_sy_itab_line_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_174__, _cx_sy_message_illegal_text_clas_mjs__WEBPACK_IMPORTED_MODULE_175__, _cx_sy_move_cast_error_clas_mjs__WEBPACK_IMPORTED_MODULE_176__, _cx_sy_open_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_177__, _cx_sy_range_out_of_bounds_clas_mjs__WEBPACK_IMPORTED_MODULE_178__, _cx_sy_ref_is_initial_clas_mjs__WEBPACK_IMPORTED_MODULE_179__, _cx_sy_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_180__, _cx_sy_strg_par_val_clas_mjs__WEBPACK_IMPORTED_MODULE_181__, _cx_sy_struct_attributes_clas_mjs__WEBPACK_IMPORTED_MODULE_182__, _cx_sy_struct_comp_name_clas_mjs__WEBPACK_IMPORTED_MODULE_183__, _cx_sy_struct_comp_type_clas_mjs__WEBPACK_IMPORTED_MODULE_184__, _cx_sy_struct_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_185__, _cx_sy_type_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_186__, _cx_sy_zerodivide_clas_mjs__WEBPACK_IMPORTED_MODULE_187__, _cx_transformation_error_clas_mjs__WEBPACK_IMPORTED_MODULE_188__, _cx_uuid_error_clas_mjs__WEBPACK_IMPORTED_MODULE_189__, _cx_xslt_exception_clas_mjs__WEBPACK_IMPORTED_MODULE_190__, _cx_xslt_format_error_clas_mjs__WEBPACK_IMPORTED_MODULE_191__, _cx_xslt_runtime_error_clas_mjs__WEBPACK_IMPORTED_MODULE_192__, _cx_xslt_system_error_clas_mjs__WEBPACK_IMPORTED_MODULE_193__, _kernel_authority_check_clas_mjs__WEBPACK_IMPORTED_MODULE_283__, _kernel_call_clas_mjs__WEBPACK_IMPORTED_MODULE_284__, _kernel_call_transformation_clas_mjs__WEBPACK_IMPORTED_MODULE_285__, _kernel_create_data_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_286__, _kernel_cx_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_287__, _kernel_fugr_test_clas_mjs__WEBPACK_IMPORTED_MODULE_288__, _kernel_ixml_json_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_289__, _kernel_ixml_xml_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_290__, _kernel_json_to_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_291__, _kernel_lock_clas_mjs__WEBPACK_IMPORTED_MODULE_292__, _kernel_numberrange_clas_mjs__WEBPACK_IMPORTED_MODULE_293__, _kernel_push_channels_clas_mjs__WEBPACK_IMPORTED_MODULE_294__, _kernel_scan_abap_source_clas_mjs__WEBPACK_IMPORTED_MODULE_295__, _kernel_unit_runner_clas_mjs__WEBPACK_IMPORTED_MODULE_296__, _number_get_next_fugr_number_get_next_mjs__WEBPACK_IMPORTED_MODULE_305__, _openabap_fugr_call_v1_ping_mjs__WEBPACK_IMPORTED_MODULE_307__, _openabap_fugr_conversion_exit_alpha_input_mjs__WEBPACK_IMPORTED_MODULE_308__, _openabap_fugr_conversion_exit_alpha_output_mjs__WEBPACK_IMPORTED_MODULE_309__, _openabap_fugr_conversion_exit_isola_input_mjs__WEBPACK_IMPORTED_MODULE_310__, _openabap_fugr_conversion_exit_isola_output_mjs__WEBPACK_IMPORTED_MODULE_311__, _openabap_fugr_convert_itf_to_stream_text_mjs__WEBPACK_IMPORTED_MODULE_312__, _openabap_fugr_docu_get_mjs__WEBPACK_IMPORTED_MODULE_313__, _openabap_fugr_function_exists_mjs__WEBPACK_IMPORTED_MODULE_314__, _openabap_fugr_generate_sec_random_mjs__WEBPACK_IMPORTED_MODULE_315__, _openabap_fugr_get_system_timezone_mjs__WEBPACK_IMPORTED_MODULE_316__, _openabap_fugr_system_callstack_mjs__WEBPACK_IMPORTED_MODULE_317__, _openabap_fugr_system_installed_languages_mjs__WEBPACK_IMPORTED_MODULE_318__, _openabap_fugr_text_split_mjs__WEBPACK_IMPORTED_MODULE_319__, _zcl_http_handler_clas_mjs__WEBPACK_IMPORTED_MODULE_411__, _zcl_otm_table_maintenance_clas_mjs__WEBPACK_IMPORTED_MODULE_412__, _zw3mi_fugr_wwwdata_export_mjs__WEBPACK_IMPORTED_MODULE_414__, _zw3mi_fugr_wwwdata_import_mjs__WEBPACK_IMPORTED_MODULE_415__, _zw3mi_fugr_wwwparams_insert_mjs__WEBPACK_IMPORTED_MODULE_416__, _zw3mi_fugr_wwwparams_read_mjs__WEBPACK_IMPORTED_MODULE_417__]);\n([_cl_abap_char_utilities_clas_mjs__WEBPACK_IMPORTED_MODULE_35__, _cl_abap_classdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_36__, _cl_abap_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_37__, _cl_abap_complexdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_38__, _cl_abap_conv_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_39__, _cl_abap_conv_in_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_40__, _cl_abap_conv_out_ce_clas_mjs__WEBPACK_IMPORTED_MODULE_41__, _cl_abap_datadescr_clas_mjs__WEBPACK_IMPORTED_MODULE_42__, _cl_abap_dyn_prg_clas_mjs__WEBPACK_IMPORTED_MODULE_43__, _cl_abap_elemdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_44__, _cl_abap_enumdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_45__, _cl_abap_exceptional_values_clas_mjs__WEBPACK_IMPORTED_MODULE_46__, _cl_abap_format_clas_mjs__WEBPACK_IMPORTED_MODULE_47__, _cl_abap_gzip_clas_mjs__WEBPACK_IMPORTED_MODULE_48__, _cl_abap_hmac_clas_mjs__WEBPACK_IMPORTED_MODULE_49__, _cl_abap_intfdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_50__, _cl_abap_matcher_clas_mjs__WEBPACK_IMPORTED_MODULE_51__, _cl_abap_math_clas_mjs__WEBPACK_IMPORTED_MODULE_52__, _cl_abap_objectdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_53__, _cl_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_54__, _cl_abap_random_int_clas_mjs__WEBPACK_IMPORTED_MODULE_55__, _cl_abap_refdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_56__, _cl_abap_regex_clas_mjs__WEBPACK_IMPORTED_MODULE_57__, _cl_abap_structdescr_clas_mjs__WEBPACK_IMPORTED_MODULE_58__, _cl_abap_tabledescr_clas_mjs__WEBPACK_IMPORTED_MODULE_59__, _cl_abap_tstmp_clas_mjs__WEBPACK_IMPORTED_MODULE_60__, _cl_abap_typedescr_clas_mjs__WEBPACK_IMPORTED_MODULE_61__, _cl_abap_unit_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_62__, _cl_abap_zip_clas_mjs__WEBPACK_IMPORTED_MODULE_63__, _cl_apc_tcp_client_manager_clas_mjs__WEBPACK_IMPORTED_MODULE_64__, _cl_apc_wsp_ext_stateless_base_clas_mjs__WEBPACK_IMPORTED_MODULE_65__, _cl_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_66__, _cl_bcs_convert_clas_mjs__WEBPACK_IMPORTED_MODULE_67__, _cl_cam_address_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_68__, _cl_demo_output_clas_mjs__WEBPACK_IMPORTED_MODULE_69__, _cl_document_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_70__, _cl_express_icf_shim_clas_mjs__WEBPACK_IMPORTED_MODULE_71__, _cl_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_72__, _cl_gui_cfw_clas_mjs__WEBPACK_IMPORTED_MODULE_73__, _cl_gui_container_clas_mjs__WEBPACK_IMPORTED_MODULE_74__, _cl_gui_frontend_services_clas_mjs__WEBPACK_IMPORTED_MODULE_75__, _cl_http_client_clas_mjs__WEBPACK_IMPORTED_MODULE_76__, _cl_http_entity_clas_mjs__WEBPACK_IMPORTED_MODULE_77__, _cl_http_server_clas_mjs__WEBPACK_IMPORTED_MODULE_78__, _cl_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_79__, _cl_i18n_languages_clas_mjs__WEBPACK_IMPORTED_MODULE_80__, _cl_icf_tree_clas_mjs__WEBPACK_IMPORTED_MODULE_81__, _cl_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_82__, _cl_message_helper_clas_mjs__WEBPACK_IMPORTED_MODULE_83__, _cl_mime_repository_api_clas_mjs__WEBPACK_IMPORTED_MODULE_84__, _cl_numberrange_runtime_clas_mjs__WEBPACK_IMPORTED_MODULE_85__, _cl_oo_factory_clas_mjs__WEBPACK_IMPORTED_MODULE_86__, _cl_progress_indicator_clas_mjs__WEBPACK_IMPORTED_MODULE_87__, _cl_salv_aggregations_clas_mjs__WEBPACK_IMPORTED_MODULE_88__, _cl_salv_column_clas_mjs__WEBPACK_IMPORTED_MODULE_89__, _cl_salv_columns_table_clas_mjs__WEBPACK_IMPORTED_MODULE_90__, _cl_salv_events_table_clas_mjs__WEBPACK_IMPORTED_MODULE_91__, _cl_salv_filters_clas_mjs__WEBPACK_IMPORTED_MODULE_92__, _cl_salv_functions_list_clas_mjs__WEBPACK_IMPORTED_MODULE_93__, _cl_salv_table_clas_mjs__WEBPACK_IMPORTED_MODULE_94__, _cl_shm_area_clas_mjs__WEBPACK_IMPORTED_MODULE_95__, _cl_shm_service_clas_mjs__WEBPACK_IMPORTED_MODULE_96__, _cl_sxml_string_reader_clas_mjs__WEBPACK_IMPORTED_MODULE_97__, _cl_sxml_string_writer_clas_mjs__WEBPACK_IMPORTED_MODULE_98__, _cl_system_uuid_clas_mjs__WEBPACK_IMPORTED_MODULE_99__, _cl_web_http_utility_clas_mjs__WEBPACK_IMPORTED_MODULE_100__, _cx_abap_message_digest_clas_mjs__WEBPACK_IMPORTED_MODULE_101__, _cx_abap_not_a_table_clas_mjs__WEBPACK_IMPORTED_MODULE_102__, _cx_abap_not_in_package_clas_mjs__WEBPACK_IMPORTED_MODULE_103__, _cx_abap_not_in_whitelist_clas_mjs__WEBPACK_IMPORTED_MODULE_104__, _cx_abap_random_clas_mjs__WEBPACK_IMPORTED_MODULE_105__, _cx_apc_error_clas_mjs__WEBPACK_IMPORTED_MODULE_106__, _cx_bcs_clas_mjs__WEBPACK_IMPORTED_MODULE_107__, _cx_dynamic_check_clas_mjs__WEBPACK_IMPORTED_MODULE_108__, _cx_gdt_conversion_clas_mjs__WEBPACK_IMPORTED_MODULE_109__, _cx_no_check_clas_mjs__WEBPACK_IMPORTED_MODULE_110__, _cx_oo_clif_not_exists_clas_mjs__WEBPACK_IMPORTED_MODULE_111__, _cx_parameter_invalid_clas_mjs__WEBPACK_IMPORTED_MODULE_112__, _cx_parameter_invalid_range_clas_mjs__WEBPACK_IMPORTED_MODULE_113__, _cx_parameter_invalid_type_clas_mjs__WEBPACK_IMPORTED_MODULE_114__, _cx_salv_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_116__, _cx_salv_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_117__, _cx_salv_error_clas_mjs__WEBPACK_IMPORTED_MODULE_118__, _cx_salv_msg_clas_mjs__WEBPACK_IMPORTED_MODULE_119__, _cx_salv_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_120__, _cx_salv_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_121__, _cx_shm_already_detached_clas_mjs__WEBPACK_IMPORTED_MODULE_122__, _cx_shm_attach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_123__, _cx_shm_build_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_124__, _cx_shm_change_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_125__, _cx_shm_completion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_126__, _cx_shm_detach_error_clas_mjs__WEBPACK_IMPORTED_MODULE_127__, _cx_shm_error_clas_mjs__WEBPACK_IMPORTED_MODULE_128__, _cx_shm_event_execution_failed_clas_mjs__WEBPACK_IMPORTED_MODULE_129__, _cx_shm_exclusive_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_130__, _cx_shm_general_error_clas_mjs__WEBPACK_IMPORTED_MODULE_131__, _cx_shm_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_132__, _cx_shm_initial_reference_clas_mjs__WEBPACK_IMPORTED_MODULE_133__, _cx_shm_no_active_version_clas_mjs__WEBPACK_IMPORTED_MODULE_134__, _cx_shm_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_135__, _cx_shm_pending_lock_removed_clas_mjs__WEBPACK_IMPORTED_MODULE_136__, _cx_shm_read_lock_active_clas_mjs__WEBPACK_IMPORTED_MODULE_137__, _cx_shm_secondary_commit_clas_mjs__WEBPACK_IMPORTED_MODULE_138__, _cx_shm_version_limit_exceeded_clas_mjs__WEBPACK_IMPORTED_MODULE_139__, _cx_shm_wrong_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_140__, _cx_shma_dynamic_clas_mjs__WEBPACK_IMPORTED_MODULE_141__, _cx_shma_inconsistent_clas_mjs__WEBPACK_IMPORTED_MODULE_142__, _cx_shma_not_configured_clas_mjs__WEBPACK_IMPORTED_MODULE_143__, _cx_static_check_clas_mjs__WEBPACK_IMPORTED_MODULE_144__, _cx_sxml_error_clas_mjs__WEBPACK_IMPORTED_MODULE_145__, _cx_sxml_illegal_argument_error_clas_mjs__WEBPACK_IMPORTED_MODULE_146__, _cx_sxml_name_error_clas_mjs__WEBPACK_IMPORTED_MODULE_147__, _cx_sxml_parse_error_clas_mjs__WEBPACK_IMPORTED_MODULE_148__, _cx_sxml_state_error_clas_mjs__WEBPACK_IMPORTED_MODULE_149__, _cx_sy_arithmetic_error_clas_mjs__WEBPACK_IMPORTED_MODULE_150__, _cx_sy_buffer_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_151__, _cx_sy_codepage_converter_init_clas_mjs__WEBPACK_IMPORTED_MODULE_152__, _cx_sy_compression_error_clas_mjs__WEBPACK_IMPORTED_MODULE_153__, _cx_sy_conversion_codepage_clas_mjs__WEBPACK_IMPORTED_MODULE_154__, _cx_sy_conversion_data_loss_clas_mjs__WEBPACK_IMPORTED_MODULE_155__, _cx_sy_conversion_error_clas_mjs__WEBPACK_IMPORTED_MODULE_156__, _cx_sy_conversion_no_number_clas_mjs__WEBPACK_IMPORTED_MODULE_157__, _cx_sy_conversion_overflow_clas_mjs__WEBPACK_IMPORTED_MODULE_158__, _cx_sy_create_data_error_clas_mjs__WEBPACK_IMPORTED_MODULE_159__, _cx_sy_create_object_error_clas_mjs__WEBPACK_IMPORTED_MODULE_160__, _cx_sy_data_access_error_clas_mjs__WEBPACK_IMPORTED_MODULE_161__, _cx_sy_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_162__, _cx_sy_dyn_call_error_clas_mjs__WEBPACK_IMPORTED_MODULE_163__, _cx_sy_dyn_call_illegal_class_clas_mjs__WEBPACK_IMPORTED_MODULE_164__, _cx_sy_dyn_call_illegal_form_clas_mjs__WEBPACK_IMPORTED_MODULE_165__, _cx_sy_dyn_call_illegal_func_clas_mjs__WEBPACK_IMPORTED_MODULE_166__, _cx_sy_dyn_call_illegal_method_clas_mjs__WEBPACK_IMPORTED_MODULE_167__, _cx_sy_dyn_call_param_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_168__, _cx_sy_dyn_call_parameter_error_clas_mjs__WEBPACK_IMPORTED_MODULE_169__, _cx_sy_dynamic_osql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_170__, _cx_sy_dynamic_osql_semantics_clas_mjs__WEBPACK_IMPORTED_MODULE_171__, _cx_sy_itab_duplicate_key_clas_mjs__WEBPACK_IMPORTED_MODULE_172__, _cx_sy_itab_error_clas_mjs__WEBPACK_IMPORTED_MODULE_173__, _cx_sy_itab_line_not_found_clas_mjs__WEBPACK_IMPORTED_MODULE_174__, _cx_sy_message_illegal_text_clas_mjs__WEBPACK_IMPORTED_MODULE_175__, _cx_sy_move_cast_error_clas_mjs__WEBPACK_IMPORTED_MODULE_176__, _cx_sy_open_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_177__, _cx_sy_range_out_of_bounds_clas_mjs__WEBPACK_IMPORTED_MODULE_178__, _cx_sy_ref_is_initial_clas_mjs__WEBPACK_IMPORTED_MODULE_179__, _cx_sy_sql_error_clas_mjs__WEBPACK_IMPORTED_MODULE_180__, _cx_sy_strg_par_val_clas_mjs__WEBPACK_IMPORTED_MODULE_181__, _cx_sy_struct_attributes_clas_mjs__WEBPACK_IMPORTED_MODULE_182__, _cx_sy_struct_comp_name_clas_mjs__WEBPACK_IMPORTED_MODULE_183__, _cx_sy_struct_comp_type_clas_mjs__WEBPACK_IMPORTED_MODULE_184__, _cx_sy_struct_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_185__, _cx_sy_type_creation_clas_mjs__WEBPACK_IMPORTED_MODULE_186__, _cx_sy_zerodivide_clas_mjs__WEBPACK_IMPORTED_MODULE_187__, _cx_transformation_error_clas_mjs__WEBPACK_IMPORTED_MODULE_188__, _cx_uuid_error_clas_mjs__WEBPACK_IMPORTED_MODULE_189__, _cx_xslt_exception_clas_mjs__WEBPACK_IMPORTED_MODULE_190__, _cx_xslt_format_error_clas_mjs__WEBPACK_IMPORTED_MODULE_191__, _cx_xslt_runtime_error_clas_mjs__WEBPACK_IMPORTED_MODULE_192__, _cx_xslt_system_error_clas_mjs__WEBPACK_IMPORTED_MODULE_193__, _kernel_authority_check_clas_mjs__WEBPACK_IMPORTED_MODULE_283__, _kernel_call_clas_mjs__WEBPACK_IMPORTED_MODULE_284__, _kernel_call_transformation_clas_mjs__WEBPACK_IMPORTED_MODULE_285__, _kernel_create_data_handle_clas_mjs__WEBPACK_IMPORTED_MODULE_286__, _kernel_cx_assert_clas_mjs__WEBPACK_IMPORTED_MODULE_287__, _kernel_fugr_test_clas_mjs__WEBPACK_IMPORTED_MODULE_288__, _kernel_ixml_json_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_289__, _kernel_ixml_xml_to_data_clas_mjs__WEBPACK_IMPORTED_MODULE_290__, _kernel_json_to_ixml_clas_mjs__WEBPACK_IMPORTED_MODULE_291__, _kernel_lock_clas_mjs__WEBPACK_IMPORTED_MODULE_292__, _kernel_numberrange_clas_mjs__WEBPACK_IMPORTED_MODULE_293__, _kernel_push_channels_clas_mjs__WEBPACK_IMPORTED_MODULE_294__, _kernel_scan_abap_source_clas_mjs__WEBPACK_IMPORTED_MODULE_295__, _kernel_unit_runner_clas_mjs__WEBPACK_IMPORTED_MODULE_296__, _number_get_next_fugr_number_get_next_mjs__WEBPACK_IMPORTED_MODULE_305__, _openabap_fugr_call_v1_ping_mjs__WEBPACK_IMPORTED_MODULE_307__, _openabap_fugr_conversion_exit_alpha_input_mjs__WEBPACK_IMPORTED_MODULE_308__, _openabap_fugr_conversion_exit_alpha_output_mjs__WEBPACK_IMPORTED_MODULE_309__, _openabap_fugr_conversion_exit_isola_input_mjs__WEBPACK_IMPORTED_MODULE_310__, _openabap_fugr_conversion_exit_isola_output_mjs__WEBPACK_IMPORTED_MODULE_311__, _openabap_fugr_convert_itf_to_stream_text_mjs__WEBPACK_IMPORTED_MODULE_312__, _openabap_fugr_docu_get_mjs__WEBPACK_IMPORTED_MODULE_313__, _openabap_fugr_function_exists_mjs__WEBPACK_IMPORTED_MODULE_314__, _openabap_fugr_generate_sec_random_mjs__WEBPACK_IMPORTED_MODULE_315__, _openabap_fugr_get_system_timezone_mjs__WEBPACK_IMPORTED_MODULE_316__, _openabap_fugr_system_callstack_mjs__WEBPACK_IMPORTED_MODULE_317__, _openabap_fugr_system_installed_languages_mjs__WEBPACK_IMPORTED_MODULE_318__, _openabap_fugr_text_split_mjs__WEBPACK_IMPORTED_MODULE_319__, _zcl_http_handler_clas_mjs__WEBPACK_IMPORTED_MODULE_411__, _zcl_otm_table_maintenance_clas_mjs__WEBPACK_IMPORTED_MODULE_412__, _zw3mi_fugr_wwwdata_export_mjs__WEBPACK_IMPORTED_MODULE_414__, _zw3mi_fugr_wwwdata_import_mjs__WEBPACK_IMPORTED_MODULE_415__, _zw3mi_fugr_wwwparams_insert_mjs__WEBPACK_IMPORTED_MODULE_416__, _zw3mi_fugr_wwwparams_read_mjs__WEBPACK_IMPORTED_MODULE_417__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* eslint-disable import/newline-after-import */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function initializeABAP() {\n  const sqlite = [];\nsqlite.push(`CREATE TABLE 'zopentest' ('keyfield' NCHAR(4) COLLATE RTRIM, 'valuefield' NCHAR(10) COLLATE RTRIM, 'boolean' NCHAR(1) COLLATE RTRIM, PRIMARY KEY('keyfield'));`);\nsqlite.push(`CREATE TABLE 't000' ('mandt' NCHAR(3) COLLATE RTRIM, 'cccategory' NCHAR(1) COLLATE RTRIM, 'ccnocliind' NCHAR(1) COLLATE RTRIM, PRIMARY KEY('mandt'));`);\nsqlite.push(`CREATE TABLE 't100' ('sprsl' NCHAR(1) COLLATE RTRIM, 'arbgb' NCHAR(20) COLLATE RTRIM, 'msgnr' NCHAR(3) COLLATE RTRIM, 'text' NCHAR(73) COLLATE RTRIM, PRIMARY KEY('sprsl','arbgb','msgnr'));`);\nsqlite.push(`CREATE TABLE 'tdevc' ('devclass' NCHAR(30) COLLATE RTRIM, 'dlvunit' NCHAR(30) COLLATE RTRIM, 'component' NCHAR(20) COLLATE RTRIM, 'parentcl' NCHAR(30) COLLATE RTRIM, 'as4user' NCHAR(12) COLLATE RTRIM, 'created_by' NCHAR(12) COLLATE RTRIM, 'created_on' NCHAR(8), 'ctext' NCHAR(60) COLLATE RTRIM, PRIMARY KEY('devclass'));`);\nsqlite.push(`CREATE TABLE 'tfdir' ('funcname' NCHAR(30) COLLATE RTRIM, PRIMARY KEY('funcname'));`);\nsqlite.push(`CREATE TABLE 'reposrc' ('progname' NCHAR(40) COLLATE RTRIM, 'data' TEXT COLLATE RTRIM, 'unam' NCHAR(12) COLLATE RTRIM, 'udat' NCHAR(8), 'utime' NCHAR(6), PRIMARY KEY('progname'));`);\n  const hdb = `todo`;\n  const pg = `todo`;\n  const schemas = {sqlite, hdb, pg};\n  const insert = [];\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('ZCL_HTTP_HANDLER                        ', 'CLASS zcl_http_handler DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_http_extension.\nENDCLASS.\n\nCLASS zcl_http_handler IMPLEMENTATION.\n\n  METHOD if_http_extension~handle_request.\n\n    DATA temp1 TYPE zcl_otm_table_maintenance=>ty_request.\n    DATA result TYPE zcl_otm_table_maintenance=>ty_http.\n    DATA temp3 TYPE REF TO zcl_otm_table_maintenance.\n    DATA temp2 TYPE string.\n    CLEAR temp1.\n    temp1-method = server->request->get_method( ).\n    temp1-path = server->request->get_header_field( ''~path'' ).\n    temp1-body = server->request->get_data( ).\n    \n    \n    CREATE OBJECT temp3 TYPE zcl_otm_table_maintenance EXPORTING IV_TABLE = ''ZOPENTEST''.\n    result = temp3->serve( temp1 ).\n\n    server->response->set_data( result-body ).\n    server->response->set_content_type( result-content_type ).\n    \n    temp2 = result-status.\n    server->response->set_status(\n      code   = result-status\n      reason = temp2 ).\n\n  ENDMETHOD.\n\nENDCLASS.\n');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('ZCL_OTM_TABLE_MAINTENANCE               ', 'CLASS zcl_otm_table_maintenance DEFINITION\n  PUBLIC\n  CREATE PUBLIC .\n\n  PUBLIC SECTION.\n* MIT License, Copyright (c) 2021 open-abap\n* https://github.com/open-abap/open-table-maintenance\n\n    TYPES:\n      BEGIN OF ty_request,\n        method TYPE string,\n        path   TYPE string,\n        body   TYPE xstring,\n      END OF ty_request.\n    TYPES:\n      BEGIN OF ty_http,\n        status       TYPE i,\n        content_type TYPE string,\n        body         TYPE xstring,\n      END OF ty_http .\n\n    METHODS constructor\n      IMPORTING\n        !iv_table TYPE tabname .\n    METHODS serve\n      IMPORTING\n        !is_request    TYPE ty_request\n      RETURNING\n        VALUE(rs_http) TYPE ty_http .\n  PROTECTED SECTION.\n  PRIVATE SECTION.\n\n    TYPES:\n      ty_names TYPE STANDARD TABLE OF abap_compname WITH DEFAULT KEY .\n    TYPES:\n* there is no common released type for both steampunk and on-prem, workaround:\n      BEGIN OF ty_fixvalue,\n        low        TYPE c LENGTH 10,\n        high       TYPE c LENGTH 10,\n        option     TYPE c LENGTH 2,\n        ddlanguage TYPE c LENGTH 1,\n        ddtext     TYPE c LENGTH 60,\n      END OF ty_fixvalue .\n    TYPES:\n      ty_fixvalues TYPE STANDARD TABLE OF ty_fixvalue WITH DEFAULT KEY .\n    TYPES:\n      BEGIN OF ty_fielddata,\n        name      TYPE abap_compname,\n        key       TYPE abap_bool,\n        type_kind TYPE abap_typekind,\n        length    TYPE i,\n        fixvalues TYPE ty_fixvalues,\n      END OF ty_fielddata .\n    TYPES:\n      ty_metadata TYPE STANDARD TABLE OF ty_fielddata WITH DEFAULT KEY .\n\n    DATA mv_table TYPE tabname .\n\n    METHODS from_xstring\n      IMPORTING\n        !xstring      TYPE xstring\n      RETURNING\n        VALUE(string) TYPE string .\n    METHODS get_html\n      RETURNING\n        VALUE(rv_html) TYPE string .\n    METHODS read_table\n      RETURNING\n        VALUE(rv_json) TYPE string .\n    METHODS save_table\n      IMPORTING\n        !iv_json TYPE string\n      RAISING\n        cx_sy_conversion_data_loss .\n    METHODS to_json\n      IMPORTING\n        !ref           TYPE REF TO data\n      RETURNING\n        VALUE(rv_json) TYPE string .\n    METHODS to_xstring\n      IMPORTING\n        !string        TYPE string\n      RETURNING\n        VALUE(xstring) TYPE xstring .\n    METHODS list_key_fields\n      RETURNING\n        VALUE(names) TYPE ty_names .\n    METHODS build_metadata\n      RETURNING\n        VALUE(rt_metadata) TYPE ty_metadata .\nENDCLASS.\n\n\n\nCLASS zcl_otm_table_maintenance IMPLEMENTATION.\n\n\n  METHOD build_metadata.\n    DATA lv_key TYPE abap_bool.\n    DATA lo_element TYPE REF TO cl_abap_elemdescr.\n    DATA lt_values TYPE ty_fixvalues.\n\n    DATA lt_key_fields TYPE zcl_otm_table_maintenance=>ty_names.\n    DATA temp1 TYPE REF TO cl_abap_structdescr.\n    DATA lt_components TYPE abap_component_tab.\n    DATA ls_component LIKE LINE OF lt_components.\n      DATA temp2 TYPE zcl_otm_table_maintenance=>ty_fielddata.\n    lt_key_fields = list_key_fields( ).\n    \n    temp1 ?= cl_abap_typedescr=>describe_by_name( mv_table ).\n    \n    lt_components = temp1->get_components( ).\n\n    \n    LOOP AT lt_components INTO ls_component.\n\n      lo_element ?= ls_component-type.\n      lt_values = lo_element->get_ddic_fixed_values( ).\n\n      READ TABLE lt_key_fields WITH KEY table_line = ls_component-name TRANSPORTING NO FIELDS.\n      lv_key = boolc( sy-subrc = 0 ).\n      \n      CLEAR temp2.\n      temp2-name = ls_component-name.\n      temp2-key = lv_key.\n      temp2-type_kind = ls_component-type->type_kind.\n      temp2-length = ls_component-type->length.\n      temp2-fixvalues = lt_values.\n      APPEND temp2 TO rt_metadata.\n    ENDLOOP.\n\n  ENDMETHOD.\n\n\n  METHOD constructor.\n    ASSERT iv_table IS NOT INITIAL.\n    mv_table = iv_table.\n  ENDMETHOD.\n\n\n  METHOD from_xstring.\n\n    DATA conv TYPE REF TO object.\n        DATA conv_in_class TYPE c LENGTH 18.\n\n    TRY.\n        CALL METHOD (''CL_ABAP_CONV_CODEPAGE'')=>create_in\n          RECEIVING\n            instance = conv.\n\n        CALL METHOD conv->(''IF_ABAP_CONV_IN~CONVERT'')\n          EXPORTING\n            source = xstring\n          RECEIVING\n            result = string.\n      CATCH cx_sy_dyn_call_illegal_class.\n        \n        conv_in_class = ''CL_ABAP_CONV_IN_CE''.\n        CALL METHOD (conv_in_class)=>create\n          EXPORTING\n            encoding = ''UTF-8''\n          RECEIVING\n            conv     = conv.\n\n        CALL METHOD conv->(''CONVERT'')\n          EXPORTING\n            input = xstring\n          IMPORTING\n            data  = string.\n    ENDTRY.\n\n  ENDMETHOD.\n\n\n  METHOD get_html.\n    rv_html = |<!DOCTYPE html>\\\\n| &&\n      |<html>\\\\n| &&\n      |<head>\\\\n| &&\n      |<title>open-table-maintenance</title>\\\\n| &&\n      |<script src=\"https://bossanova.uk/jspreadsheet/v4/jexcel.js\" async></script>\\\\n| &&\n      |<script src=\"https://jsuites.net/v4/jsuites.js\" async></script>\\\\n| &&\n      |<link rel=\"stylesheet\" href=\"https://jsuites.net/v4/jsuites.css\" type=\"text/css\" />\\\\n| &&\n      |<link rel=\"stylesheet\" href=\"https://bossanova.uk/jspreadsheet/v4/jexcel.css\" type=\"text/css\" />\\\\n| &&\n      |<script>\\\\n| &&\n      ''let jtable;'' && |\\\\n| &&\n      ''let columnNames;'' && |\\\\n| &&\n      ''const url = window.location.pathname + \"/rest\";'' && |\\\\n| &&\n      ''function run() {'' && |\\\\n| &&\n      ''  fetch(url).then((response) => {'' && |\\\\n| &&\n      ''    return response.json();'' && |\\\\n| &&\n      ''    }).then((parsed) => {'' && |\\\\n| &&\n      ''    document.getElementById(\"tablename\").innerHTML = '' && |\\\\n| &&\n      ''      \"<h1 style=\\\\\"display:inline\\\\\">hello \" + parsed.TABLENAME + \"</h1>&nbsp;<tt>\" + '' && |\\\\n| &&\n      ''       parsed.SY.SYSID + \"-\" + parsed.SY.MANDT + \"</tt>\";'' && |\\\\n| &&\n      ''    const data = parsed.DATA;'' && |\\\\n| &&\n      ''    if (data.length === 0) { '' && |\\\\n| &&\n      ''       const obj = {};'' && |\\\\n| &&\n      ''       obj[parsed.META[0][\"NAME\"]] = \"_\";'' && |\\\\n| &&\n      ''       data.push(obj);'' && |\\\\n| &&\n      ''    }'' && |\\\\n| &&\n      ''    columnNames = parsed.META.map(n => n.NAME);'' && |\\\\n| &&\n      ''    document.getElementById(\"content\").innerHTML = \"\";'' && |\\\\n| &&\n      ''    let columnSettings = parsed.META.map(n => {return {'' && |\\\\n| &&\n      ''      \"type\": n.FIXVALUES.length > 0 ? \"dropdown\" : undefined,'' && |\\\\n| &&\n      ''      \"title\": n.NAME,'' && |\\\\n| &&\n      ''      \"source\": n.FIXVALUES.map(f => f.LOW),'' && |\\\\n| &&\n      ''      \"width\": Math.min(200, n.LENGTH * 20)'' && |\\\\n| &&\n      ''    };});'' && |\\\\n| &&\n      ''    jtable = jspreadsheet(document.getElementById(\"content\"), {'' && |\\\\n| &&\n      ''      defaultColAlign:\"left\",'' && |\\\\n| &&\n      ''      allowInsertRow:true,'' && |\\\\n| &&\n      ''      allowManualInsertRow:true,'' && |\\\\n| &&\n      ''      allowInsertColumn:false,'' && |\\\\n| &&\n      ''      allowManualInsertColumn:false,'' && |\\\\n| &&\n      ''      allowDeleteRow:true,'' && |\\\\n| &&\n      ''      allowRenameColumn:false,'' && |\\\\n| &&\n      ''      allowDeleteColumn:false,'' && |\\\\n| &&\n      ''      data: data,'' && |\\\\n| &&\n      ''      onload: function(instance) {'' && |\\\\n| &&\n      ''        const keyCount = parsed.META.filter(n => n.KEY === \"X\").length;'' && |\\\\n| &&\n      ''        for (let i = 0; i < keyCount; i++) {'' && |\\\\n| &&\n      ''          instance.jexcel.colgroup[i].style.backgroundColor=\"#F8F8F8\";'' && |\\\\n| &&\n      ''        }'' && |\\\\n| &&\n      ''      },'' && |\\\\n| &&\n      ''      columns: columnSettings});'' && |\\\\n| &&\n      ''  });'' && |\\\\n| &&\n      ''}'' && |\\\\n| &&\n      ''function toObject(row) {'' && |\\\\n| &&\n      ''  let ret = {};'' && |\\\\n| &&\n      ''  for (let i = 0; i < columnNames.length; i++) {'' && |\\\\n| &&\n      ''    ret[columnNames[i]] = row[i];'' && |\\\\n| &&\n      ''  }'' && |\\\\n| &&\n      ''  return ret;'' && |\\\\n| &&\n      ''}'' && |\\\\n| &&\n      ''function save() {'' && |\\\\n| &&\n      ''  const body = {\"DATA\": jtable.getData().map(toObject)};'' && |\\\\n| &&\n      ''  fetch(url, {method: \"POST\", body: JSON.stringify(body)}).then(() => {alert(\"data saved\");});'' && |\\\\n| &&\n      ''}'' && |\\\\n| &&\n      |</script>\\\\n| &&\n      |</head>\\\\n| &&\n      |<body onload=\"run()\">\\\\n| &&\n      |<div id=\"tablename\"><h1>open-table-maintenance</h1></div>\\\\n| &&\n      |<button type=\"button\" onclick=\"save()\">Save</button><br>\\\\n| &&\n      |<div id=\"content\">loading</div><br>\\\\n| &&\n      |</body>\\\\n| &&\n      |</html>|.\n  ENDMETHOD.\n\n\n  METHOD list_key_fields.\n    DATA obj TYPE REF TO object.\n    DATA lv_tabname TYPE c LENGTH 16.\n    DATA lr_ddfields TYPE REF TO data.\n    FIELD-SYMBOLS <any> TYPE any.\n    FIELD-SYMBOLS <field> TYPE simple.\n    FIELD-SYMBOLS <ddfields> TYPE ANY TABLE.\n        DATA workaround TYPE c LENGTH 8.\n        DATA temp3 TYPE REF TO cl_abap_structdescr.\n\n* convert to correct type,\n    lv_tabname = mv_table.\n\n    TRY.\n        CALL METHOD (''XCO_CP_ABAP_DICTIONARY'')=>database_table\n          EXPORTING\n            iv_name           = lv_tabname\n          RECEIVING\n            ro_database_table = obj.\n        ASSIGN obj->(''IF_XCO_DATABASE_TABLE~FIELDS->IF_XCO_DBT_FIELDS_FACTORY~KEY'') TO <any>.\n        ASSERT sy-subrc = 0.\n        obj = <any>.\n        CALL METHOD obj->(''IF_XCO_DBT_FIELDS~GET_NAMES'')\n          RECEIVING\n            rt_names = names.\n      CATCH cx_sy_dyn_call_illegal_class.\n        \n        workaround = ''DDFIELDS''.\n        CREATE DATA lr_ddfields TYPE (workaround).\n        ASSIGN lr_ddfields->* TO <ddfields>.\n        ASSERT sy-subrc = 0.\n        \n        temp3 ?= cl_abap_typedescr=>describe_by_name( lv_tabname ).\n        <ddfields> = temp3->get_ddic_field_list( ).\n        LOOP AT <ddfields> ASSIGNING <any>.\n          ASSIGN COMPONENT ''KEYFLAG'' OF STRUCTURE <any> TO <field>.\n          IF sy-subrc <> 0 OR <field> <> abap_true.\n            CONTINUE.\n          ENDIF.\n          ASSIGN COMPONENT ''FIELDNAME'' OF STRUCTURE <any> TO <field>.\n          ASSERT sy-subrc = 0.\n          APPEND <field> TO names.\n        ENDLOOP.\n    ENDTRY.\n\n  ENDMETHOD.\n\n\n  METHOD read_table.\n\n    FIELD-SYMBOLS <fs> TYPE STANDARD TABLE.\n    DATA dref TYPE REF TO data.\n    CREATE DATA dref TYPE STANDARD TABLE OF (mv_table) WITH DEFAULT KEY.\n    ASSIGN dref->* TO <fs>.\n    ASSERT sy-subrc = 0.\n\n    \" dont check SUBRC, the table might be empty\n    SELECT * FROM (mv_table) ORDER BY PRIMARY KEY INTO TABLE <fs> ##SUBRC_OK.\n\n    rv_json = to_json( dref ).\n\n  ENDMETHOD.\n\n\n  METHOD save_table.\n\n    FIELD-SYMBOLS <fs> TYPE STANDARD TABLE.\n    DATA dref TYPE REF TO data.\n    CREATE DATA dref TYPE STANDARD TABLE OF (mv_table) WITH DEFAULT KEY.\n    ASSIGN dref->* TO <fs>.\n    ASSERT sy-subrc = 0.\n\n    CALL TRANSFORMATION id SOURCE XML iv_json RESULT data = <fs>.\n\n    MODIFY (mv_table) FROM TABLE <fs> ##SUBRC_OK.\n\n  ENDMETHOD.\n\n\n  METHOD serve.\n            DATA lv_body TYPE string.\n\n    TRY.\n        rs_http-status = 200.\n        IF is_request-path CP ''*/rest''.\n          IF is_request-method = ''GET''.\n            \n            lv_body = read_table( ).\n            rs_http-content_type = ''application/json''.\n          ELSEIF is_request-method = ''POST''.\n            save_table( from_xstring( is_request-body ) ).\n          ELSE.\n            ASSERT 1 = 2.\n          ENDIF.\n        ELSE.\n          lv_body = get_html( ).\n          rs_http-content_type = ''text/html''.\n        ENDIF.\n        rs_http-body = to_xstring( lv_body ).\n      CATCH cx_root.\n        rs_http-status = 500.\n        rs_http-body   = to_xstring( |Exception occurred| ).\n    ENDTRY.\n\n  ENDMETHOD.\n\n\n  METHOD to_json.\n\n    FIELD-SYMBOLS <fs> TYPE STANDARD TABLE.\n    DATA meta TYPE zcl_otm_table_maintenance=>ty_metadata.\n    DATA writer TYPE REF TO cl_sxml_string_writer.\n    ASSIGN ref->* TO <fs>.\n    ASSERT sy-subrc = 0.\n\n    \n    meta = build_metadata( ).\n    \n    writer = cl_sxml_string_writer=>create( if_sxml=>co_xt_json ).\n    CALL TRANSFORMATION id\n      SOURCE\n        data      = <fs>\n        meta      = meta\n        tablename = mv_table\n        sy        = sy\n      RESULT XML writer.\n    rv_json = from_xstring( writer->get_output( ) ).\n\n  ENDMETHOD.\n\n\n  METHOD to_xstring.\n\n    DATA conv TYPE REF TO object.\n        DATA conv_out_class TYPE c LENGTH 19.\n\n    TRY.\n        CALL METHOD (''CL_ABAP_CONV_CODEPAGE'')=>create_out\n          RECEIVING\n            instance = conv.\n\n        CALL METHOD conv->(''IF_ABAP_CONV_OUT~CONVERT'')\n          EXPORTING\n            source = string\n          RECEIVING\n            result = xstring.\n      CATCH cx_sy_dyn_call_illegal_class.\n        \n        conv_out_class = ''CL_ABAP_CONV_OUT_CE''.\n        CALL METHOD (conv_out_class)=>create\n          EXPORTING\n            encoding = ''UTF-8''\n          RECEIVING\n            conv     = conv.\n\n        CALL METHOD conv->(''CONVERT'')\n          EXPORTING\n            data   = string\n          IMPORTING\n            buffer = xstring.\n    ENDTRY.\n\n  ENDMETHOD.\nENDCLASS.\n');`);\n  insert.push(`INSERT INTO t100 ('SPRSL', 'ARBGB', 'MSGNR', 'TEXT') VALUES ('E', '00                  ', '001', '&1&2&3&4                                                                 ');\n`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_BCS                                  ', 'CLASS cl_bcs DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS create_persistent\n      RETURNING\n        VALUE(result) TYPE REF TO cl_bcs\n      RAISING\n        cx_bcs.\n\n    METHODS add_recipient\n      IMPORTING\n        i_recipient  TYPE REF TO if_recipient_bcs\n        i_express    TYPE abap_bool OPTIONAL\n        i_copy       TYPE abap_bool OPTIONAL\n        i_blind_copy TYPE abap_bool OPTIONAL\n        i_no_forward TYPE abap_bool OPTIONAL\n      RAISING\n        cx_bcs.\n\n    METHODS set_sender\n      IMPORTING\n        i_sender TYPE REF TO if_sender_bcs\n      RAISING\n        cx_bcs.\n\n    METHODS set_status_attributes\n      IMPORTING\n        i_requested_status TYPE any.\n\n    METHODS set_document\n      IMPORTING\n        i_document TYPE REF TO if_document_bcs\n      RAISING\n        cx_bcs.\n\n    METHODS set_message_subject\n      IMPORTING\n        ip_subject TYPE string\n      RAISING\n        cx_bcs.\n\n    METHODS send\n      IMPORTING\n        i_with_error_screen TYPE abap_bool DEFAULT abap_false\n      RETURNING\n        VALUE(result) TYPE abap_bool\n      RAISING\n        cx_bcs.\n\n    METHODS set_send_immediately\n      IMPORTING\n        i_send_immediately TYPE abap_bool\n      RAISING\n        cx_bcs.\nENDCLASS.\n\nCLASS cl_bcs IMPLEMENTATION.\n\n  METHOD set_document.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_status_attributes.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_send_immediately.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_message_subject.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_sender.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD send.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD create_persistent.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD add_recipient.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_BCS_CONVERT                          ', 'CLASS cl_bcs_convert DEFINITION PUBLIC.\n  PUBLIC SECTION.\n\n    CLASS-METHODS string_to_soli\n      IMPORTING\n        iv_string      TYPE string\n      RETURNING\n        VALUE(et_soli) TYPE soli_tab.\n\n    CLASS-METHODS xstring_to_solix\n      IMPORTING\n        iv_xstring TYPE xstring\n      RETURNING\n        VALUE(et_solix) TYPE solix_tab.\n\nENDCLASS.\n\nCLASS cl_bcs_convert IMPLEMENTATION.\n\n  METHOD string_to_soli.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD xstring_to_solix.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_CAM_ADDRESS_BCS                      ', 'CLASS cl_cam_address_bcs DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_recipient_bcs.\n    INTERFACES if_sender_bcs.\n\n    CLASS-METHODS create_internet_address\n      IMPORTING\n        i_address_string TYPE clike\n        i_address_name   TYPE clike OPTIONAL\n        i_incl_sapuser   TYPE abap_bool OPTIONAL\n      RETURNING\n        VALUE(result)    TYPE REF TO cl_cam_address_bcs\n      RAISING\n        cx_bcs.\n\nENDCLASS.\n\nCLASS cl_cam_address_bcs IMPLEMENTATION.\n\n  METHOD create_internet_address.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_DOCUMENT_BCS                         ', 'CLASS cl_document_bcs DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_document_bcs.\n\n    CLASS-METHODS create_document\n      IMPORTING\n        i_type    TYPE string\n        i_subject TYPE string\n        i_text    TYPE any OPTIONAL\n        i_length  TYPE i OPTIONAL\n      RETURNING\n        VALUE(result) TYPE REF TO cl_document_bcs\n      RAISING\n        cx_bcs.\n\n    METHODS add_attachment\n      IMPORTING\n        i_attachment_type    TYPE string\n        i_attachment_subject TYPE string\n        i_attachment_size    TYPE i OPTIONAL\n        i_att_content_text   TYPE any OPTIONAL\n        i_att_content_hex    TYPE any OPTIONAL\n        i_attachment_header  TYPE soli_tab OPTIONAL\n      RAISING\n        cx_bcs.\n\nENDCLASS.\n\nCLASS cl_document_bcs IMPLEMENTATION.\n\n  METHOD create_document.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD add_attachment.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_BCS                                  ', 'CLASS cx_bcs DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_bcs IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_DOCUMENT_BCS                         ', 'INTERFACE if_document_bcs PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_RECIPIENT_BCS                        ', 'INTERFACE if_recipient_bcs PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SENDER_BCS                           ', 'INTERFACE if_sender_bcs PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CHAR_UTILITIES                  ', 'CLASS cl_abap_char_utilities DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS:\n* https://en.wikipedia.org/wiki/Byte_order_mark, 0xEF,0xBB,0xBF\n      byte_order_mark_utf8   TYPE x LENGTH 3 VALUE ''EFBBBF'',\n      byte_order_mark_big    TYPE x LENGTH 2 VALUE ''FEFF'',\n      byte_order_mark_little TYPE x LENGTH 2 VALUE ''FFFE'',\n      cr_lf                  TYPE c LENGTH 2 VALUE ''__'',\n      charsize               TYPE i VALUE 2,\n      horizontal_tab         TYPE c LENGTH 1 VALUE ''_'',\n      vertical_tab           TYPE c LENGTH 1 VALUE ''_'',\n      form_feed              TYPE c LENGTH 1 VALUE ''_'',\n      backspace              TYPE c LENGTH 1 VALUE ''_'',\n      minchar                TYPE c LENGTH 1 VALUE ''_'',\n      maxchar                TYPE c LENGTH 1 VALUE ''_'',\n      newline                TYPE c LENGTH 1 VALUE ''_''.\n\n    CLASS-METHODS class_constructor.\n\n    CLASS-METHODS get_simple_spaces_for_cur_cp\n      RETURNING\n        VALUE(s_str) TYPE string.\nENDCLASS.\n\nCLASS cl_abap_char_utilities IMPLEMENTATION.\n\n  METHOD class_constructor.\n    WRITE ''@KERNEL cl_abap_char_utilities.cr_lf.set(\"\\\\r\\\\n\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.horizontal_tab.set(\"\\\\t\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.vertical_tab.set(\"\\\\v\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.form_feed.set(\"\\\\f\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.backspace.set(\"\\\\b\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.newline.set(\"\\\\n\");''.\n    WRITE ''@KERNEL cl_abap_char_utilities.minchar.set(Buffer.from(\"0000\", \"hex\").toString());''.\n    WRITE ''@KERNEL cl_abap_char_utilities.maxchar.set(Buffer.from(\"FDFF\", \"hex\").toString());''.\n  ENDMETHOD.\n\n  METHOD get_simple_spaces_for_cur_cp.\n    CONCATENATE \\` \\` horizontal_tab vertical_tab newline cr_lf(1) form_feed INTO s_str.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_EXCEPTIONAL_VALUES              ', 'CLASS cl_abap_exceptional_values DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS get_max_value\n      IMPORTING\n        in_ TYPE any\n      RETURNING\n        VALUE(out) TYPE REF TO data.\n\n    CLASS-METHODS get_min_value\n      IMPORTING\n        in_ TYPE any\n      RETURNING\n        VALUE(out) TYPE REF TO data.\nENDCLASS.\n\nCLASS cl_abap_exceptional_values IMPLEMENTATION.\n\n  METHOD get_max_value.\n    DATA lv_type     TYPE c LENGTH 1.\n    DATA lv_length   TYPE i.\n    DATA lv_decimals TYPE i.\n    FIELD-SYMBOLS <out> TYPE any.\n\n    DESCRIBE FIELD in_ TYPE lv_type.\n\n    CASE lv_type.\n      WHEN cl_abap_typedescr=>typekind_int.\n        GET REFERENCE OF cl_abap_math=>max_int4 INTO out.\n      WHEN cl_abap_typedescr=>typekind_packed.\n        DESCRIBE FIELD in_ LENGTH lv_length IN BYTE MODE DECIMALS lv_decimals.\n\n        CREATE DATA out TYPE p LENGTH lv_length DECIMALS lv_decimals.\n        ASSIGN out->* TO <out>.\n\n        IF lv_length = 3 AND lv_decimals = 1.\n          <out> = ''9999.9''.\n        ELSEIF lv_length = 4 AND lv_decimals = 1.\n          <out> = ''999999.9''.\n        ELSEIF lv_length = 7 AND lv_decimals = 3.\n          <out> = ''9999999999.999''.\n        ELSE.\n          ASSERT 1 = ''todo''.\n        ENDIF.\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(INPUT);''.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD get_min_value.\n    DATA lv_type TYPE c LENGTH 1.\n    FIELD-SYMBOLS <out> TYPE any.\n\n    DESCRIBE FIELD in_ TYPE lv_type.\n\n    CASE lv_type.\n      WHEN cl_abap_typedescr=>typekind_int.\n        GET REFERENCE OF cl_abap_math=>min_int4 INTO out.\n      WHEN cl_abap_typedescr=>typekind_packed.\n        out = get_max_value( in_ ).\n        ASSIGN out->* TO <out>.\n        <out> = <out> * -1.\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(INPUT);''.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_FORMAT                          ', 'CLASS cl_abap_format DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS e_html_attr TYPE i VALUE 5.\n    CONSTANTS e_html_text TYPE i VALUE 4.\n    CONSTANTS e_json_string TYPE i VALUE 24.\n    CONSTANTS e_url TYPE i VALUE 12.\nENDCLASS.\n\nCLASS cl_abap_format IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_GZIP                            ', 'CLASS cl_abap_gzip DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS decompress_binary\n      IMPORTING\n        gzip_in     TYPE xstring\n      EXPORTING\n        raw_out     TYPE xstring\n        raw_out_len TYPE i.\n\n    CLASS-METHODS compress_binary\n      IMPORTING\n        compress_level TYPE i OPTIONAL\n        raw_in         TYPE xstring\n      EXPORTING\n        gzip_out       TYPE xstring\n        gzip_out_len   TYPE i.\n\n    CLASS-METHODS decompress_text\n      IMPORTING\n        gzip_in     TYPE xsequence\n        gzip_in_len TYPE i DEFAULT -1\n        conversion  TYPE abap_encod DEFAULT ''DEFAULT''\n      EXPORTING\n        text_out     TYPE csequence\n        text_out_len TYPE i\n      RAISING\n        cx_parameter_invalid_range\n        cx_sy_buffer_overflow\n        cx_sy_conversion_codepage\n        cx_sy_compression_error.\n\n    CLASS-METHODS compress_text\n      IMPORTING\n        text_in        TYPE csequence\n        text_in_len    TYPE i DEFAULT -1\n        compress_level TYPE i DEFAULT 6\n        conversion     TYPE abap_encod DEFAULT ''DEFAULT''\n      EXPORTING\n        gzip_out TYPE xsequence\n        gzip_out_len TYPE i\n      RAISING\n        cx_parameter_invalid_range\n        cx_sy_buffer_overflow\n        cx_sy_conversion_codepage\n        cx_sy_compression_error.\n\n    CLASS-METHODS decompress_binary_with_header\n      IMPORTING\n        gzip_in TYPE xstring\n      EXPORTING\n        raw_out TYPE xstring\n      RAISING\n        cx_parameter_invalid\n        cx_sy_buffer_overflow\n        cx_sy_compression_error.\nENDCLASS.\n\nCLASS cl_abap_gzip IMPLEMENTATION.\n  METHOD decompress_binary_with_header.\n    WRITE ''@KERNEL const zlib = await import(\"zlib\");''.\n    WRITE ''@KERNEL const buf = Buffer.from(gzip_in.get(), \"hex\");''.\n    WRITE ''@KERNEL const decompress = zlib.gunzipSync(buf).toString(\"hex\").toUpperCase();''.\n\n    WRITE ''@KERNEL raw_out.set(decompress);''.\n  ENDMETHOD.\n\n  METHOD decompress_text.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD compress_text.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD decompress_binary.\n    WRITE ''@KERNEL const zlib = await import(\"zlib\");''.\n    WRITE ''@KERNEL const buf = Buffer.from(gzip_in.get(), \"hex\");''.\n    WRITE ''@KERNEL const decompress = zlib.inflateRawSync(buf).toString(\"hex\").toUpperCase();''.\n\n    WRITE ''@KERNEL raw_out.set(decompress);''.\n    raw_out_len = xstrlen( raw_out ).\n  ENDMETHOD.\n\n  METHOD compress_binary.\n* todo, input parameter COMPRESS_LEVEL corresponds to \"level\" in \"options\" for Node?\n    WRITE ''@KERNEL const zlib = await import(\"zlib\");''.\n    WRITE ''@KERNEL const buf = Buffer.from(raw_in.get(), \"hex\");''.\n    WRITE ''@KERNEL const gzi = zlib.deflateRawSync(buf).toString(\"hex\").toUpperCase();''.\n\n    WRITE ''@KERNEL gzip_out.set(gzi);''.\n    gzip_out_len = xstrlen( gzip_out ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_HMAC                            ', 'CLASS cl_abap_hmac DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS calculate_hmac_for_raw\n      IMPORTING\n        if_algorithm   TYPE string DEFAULT ''SHA1''\n        if_key         TYPE xstring\n        if_data        TYPE xstring\n      EXPORTING\n        ef_hmacstring  TYPE string\n        ef_hmacxstring TYPE xstring\n      RAISING\n        cx_abap_message_digest.\n\n    CLASS-METHODS calculate_hmac_for_char\n      IMPORTING\n        if_algorithm     TYPE string DEFAULT ''SHA1''\n        if_key           TYPE xstring\n        if_data          TYPE string\n      EXPORTING\n        ef_hmacstring    TYPE string\n        ef_hmacxstring   TYPE xstring\n        ef_hmacb64string TYPE string\n      RAISING\n        cx_abap_message_digest.\nENDCLASS.\n\nCLASS cl_abap_hmac IMPLEMENTATION.\n  METHOD calculate_hmac_for_raw.\n\n    DATA lv_algorithm TYPE string.\n\n    CLEAR ef_hmacstring.\n    CLEAR ef_hmacxstring.\n\n    lv_algorithm = to_lower( if_algorithm ).\n    ASSERT lv_algorithm = ''sha1'' OR lv_algorithm = ''md5'' OR lv_algorithm = ''sha256''.\n\n* todo, this doesnt work in browser?\n    WRITE ''@KERNEL const crypto = await import(\"crypto\");''.\n    IF if_key IS INITIAL.\n      WRITE ''@KERNEL var shasum = crypto.createHash(lv_algorithm.get());''.\n      WRITE ''@KERNEL shasum.update(if_data.get(), \"hex\");''.\n      WRITE ''@KERNEL ef_hmacstring.set(shasum.digest(\"hex\").toUpperCase());''.\n    ELSE.\n      WRITE ''@KERNEL let hmac = crypto.createHmac(lv_algorithm.get(), Buffer.from(if_key.get(), \"hex\")).update(if_data.get(), \"hex\").digest(\"hex\").toUpperCase();''.\n      WRITE ''@KERNEL ef_hmacstring.set(hmac);''.\n    ENDIF.\n\n    ef_hmacxstring = ef_hmacstring.\n\n  ENDMETHOD.\n\n  METHOD calculate_hmac_for_char.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_TSTMP                           ', 'CLASS cl_abap_tstmp DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS subtract\n      IMPORTING\n        tstmp1 TYPE p\n        tstmp2 TYPE p\n      RETURNING\n        VALUE(r_secs) TYPE i.\n\n    CLASS-METHODS add\n      IMPORTING\n        tstmp   TYPE p\n        secs    TYPE i\n      RETURNING\n        VALUE(time) TYPE timestamp.\n\n    CLASS-METHODS subtractsecs\n      IMPORTING\n        tstmp   TYPE p\n        secs    TYPE i\n      RETURNING\n        VALUE(time) TYPE timestamp.\n\n    CLASS-METHODS td_add\n      IMPORTING\n        date     TYPE d\n        time     TYPE t\n        secs     TYPE numeric\n      EXPORTING\n        res_date TYPE d\n        res_time TYPE t.\n\n    CLASS-METHODS move\n      IMPORTING\n        tstmp_src   TYPE p\n      EXPORTING\n        tstmp_tgt TYPE p.\n\n    CLASS-METHODS systemtstmp_syst2utc\n      IMPORTING\n        syst_date TYPE d\n        syst_time TYPE t\n      EXPORTING\n        utc_tstmp TYPE p.\nENDCLASS.\n\nCLASS cl_abap_tstmp IMPLEMENTATION.\n\n  METHOD td_add.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD move.\n* todo, this is most likely wrong, but will also work in some cases\n    tstmp_tgt = tstmp_src.\n\n  ENDMETHOD.\n\n  METHOD systemtstmp_syst2utc.\n* system timezone is always UTC for open-abap, so no conversion needed\n    utc_tstmp = |{ syst_date }{ syst_time }|.\n  ENDMETHOD.\n\n  METHOD subtract.\n    DATA str TYPE string.\n    str = |{ tstmp1 TIMESTAMP = ISO }|.\n    WRITE ''@KERNEL let t1 = Date.parse(str.get());''.\n    str = |{ tstmp2 TIMESTAMP = ISO }|.\n    WRITE ''@KERNEL let t2 = Date.parse(str.get());''.\n    WRITE ''@KERNEL r_secs.set((t1 - t2)/1000);''.\n  ENDMETHOD.\n\n  METHOD add.\n    DATA str TYPE string.\n    str = |{ tstmp TIMESTAMP = ISO }|.\n    WRITE ''@KERNEL let t1 = new Date(Date.parse(str.get() + \"Z\"));''.\n    WRITE ''@KERNEL t1.setSeconds( t1.getSeconds() + secs.get() );''.\n    WRITE ''@KERNEL time.set(t1.toISOString().slice(0, 19).replace(/-/g, \"\").replace(/:/g, \"\").replace(\"T\", \"\"));''.\n  ENDMETHOD.\n\n  METHOD subtractsecs.\n    DATA lv_secs TYPE i.\n    lv_secs = secs * -1.\n    time = add(\n      tstmp = tstmp\n      secs  = lv_secs ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_ZIP                             ', 'CLASS cl_abap_zip DEFINITION PUBLIC.\n\n  PUBLIC SECTION.\n    METHODS add\n      IMPORTING\n        name TYPE string\n        content TYPE xstring.\n\n    METHODS save RETURNING VALUE(val) TYPE xstring.\n\n    METHODS load IMPORTING zip TYPE xstring.\n\n    METHODS get\n      IMPORTING name TYPE string\n      EXPORTING content TYPE xstring.\n\n    METHODS delete\n      IMPORTING\n        name  TYPE string OPTIONAL\n        index TYPE i DEFAULT 0\n      EXCEPTIONS\n        zip_index_error.\n\n    CLASS-METHODS crc32\n      IMPORTING content TYPE xstring\n      RETURNING VALUE(crc) TYPE i.\n\n    TYPES: BEGIN OF t_file,\n             name TYPE string,\n             size TYPE i,\n           END OF t_file.\n    TYPES t_files TYPE STANDARD TABLE OF t_file WITH DEFAULT KEY.\n    DATA files TYPE t_files.\n\n  PRIVATE SECTION.\n    TYPES: BEGIN OF ty_contents,\n             name          TYPE string,\n             original_size TYPE i,\n* todo, optimize memory usage, dont store both compressed and original,\n             content       TYPE xstring,\n             compressed    TYPE xstring,\n           END OF ty_contents.\n    DATA mt_contents TYPE STANDARD TABLE OF ty_contents WITH DEFAULT KEY.\n\nENDCLASS.\n\nCLASS cl_abap_zip IMPLEMENTATION.\n\n  METHOD crc32.\n    DATA lo_stream TYPE REF TO lcl_stream.\n    CREATE OBJECT lo_stream.\n    crc = lo_stream->append_crc( content ).\n  ENDMETHOD.\n\n  METHOD delete.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get.\n    DATA:\n      ls_length TYPE i,\n      ls_contents LIKE LINE OF mt_contents.\n    READ TABLE mt_contents WITH KEY name = name INTO ls_contents.\n    cl_abap_gzip=>decompress_binary(\n        EXPORTING gzip_in = ls_contents-compressed\n        IMPORTING raw_out = content\n                  raw_out_len = ls_length ).\n  ENDMETHOD.\n\n  METHOD add.\n    DATA ls_contents LIKE LINE OF mt_contents.\n    ls_contents-name = name.\n    ls_contents-original_size = xstrlen( content ).\n    ls_contents-content = content.\n    cl_abap_gzip=>compress_binary(\n      EXPORTING\n        raw_in   = content\n      IMPORTING\n        gzip_out = ls_contents-compressed ).\n    INSERT ls_contents INTO TABLE mt_contents.\n  ENDMETHOD.\n\n  METHOD load.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD save.\n* https://en.wikipedia.org/wiki/ZIP_(file_format)\n\n    DATA lo_stream TYPE REF TO lcl_stream.\n    DATA ls_contents LIKE LINE OF mt_contents.\n    DATA lv_buffer TYPE xstring.\n    DATA lo_conv TYPE REF TO cl_abap_conv_out_ce.\n\n    CREATE OBJECT lo_stream.\n    lo_conv = cl_abap_conv_out_ce=>create( ).\n\n    LOOP AT mt_contents INTO ls_contents.\n* 0, 4, Local file header signature\n      lo_stream->append( ''504B0304'' ).\n* 4, 2, Version needed to extract (minimum)\n      lo_stream->append( ''1400'' ).\n* 6, 2, General purpose bit flag\n      lo_stream->append( ''0000'' ).\n* 8, 2, Compression method; e.g. none = 0, DEFLATE = 8 (or \"0x08 0x00\")\n      lo_stream->append( ''0800'' ).\n* 10, 2, File last modification time\n      lo_stream->append( ''0000'' ). \"lo_stream->append_time( sy-uzeit ).\n* 12, 2, File last modification date\n      lo_stream->append( ''0000'' ). \"lo_stream->append_date( sy-datum ).\n* 14, 4, CRC-32 of uncompressed data\n      lo_stream->append_crc( ls_contents-content ).\n* 18, 4, Compressed size (or 0xffffffff for ZIP64)\n      lo_stream->append_int4( xstrlen( ls_contents-compressed ) ).\n* 22, 4, Uncompressed size (or 0xffffffff for ZIP64)\n      lo_stream->append_int4( xstrlen( ls_contents-content ) ).\n* 26, 2, File name length (n)\n      lo_stream->append_int2( strlen( ls_contents-name ) ).\n* 28, 2, Extra field length (m)\n      lo_stream->append( ''0000'' ).\n* 30, n, File name\n      lo_conv->convert( EXPORTING data = ls_contents-name\n                        IMPORTING buffer = lv_buffer ).\n      lo_stream->append( lv_buffer ).\n* 30+n, m, Extra field\n* empty, no extra field\n* compressed data,\n      lo_stream->append( ls_contents-compressed ).\n    ENDLOOP.\n\n    val = lo_stream->get( ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_GDT_CONVERSION                       ', 'CLASS cl_gdt_conversion DEFINITION PUBLIC.\n\n  PUBLIC SECTION.\n    CLASS-METHODS language_code_outbound\n      IMPORTING\n        im_value TYPE spras\n      EXPORTING\n        ex_value TYPE laiso.\n\n    CLASS-METHODS language_code_inbound\n      IMPORTING\n        im_value TYPE csequence\n      EXPORTING\n        ex_value TYPE spras\n      RAISING\n        cx_gdt_conversion.\n\n    CLASS-METHODS amount_outbound\n      IMPORTING\n        im_value         TYPE p\n        im_currency_code TYPE string\n      EXPORTING\n        ex_value         TYPE p\n      RAISING\n        cx_gdt_conversion.\n\n    CLASS-METHODS country_code_outbound\n      IMPORTING\n        im_value TYPE string\n      EXPORTING\n        ex_value TYPE csequence\n      RAISING\n        cx_gdt_conversion.\n\n    CLASS-METHODS date_time_inbound\n      IMPORTING\n        im_value       TYPE csequence\n      EXPORTING\n        ex_value_short TYPE timestamp\n      RAISING\n        cx_gdt_conversion.\n\n    CLASS-METHODS unit_code_inbound\n      IMPORTING\n        im_value TYPE csequence\n      EXPORTING\n        ex_value TYPE msehi\n      RAISING\n        cx_gdt_conversion.\n\n    CLASS-METHODS unit_code_outbound\n      IMPORTING\n        im_value TYPE msehi\n      EXPORTING\n        ex_value TYPE csequence\n      RAISING\n        cx_gdt_conversion.\n\nENDCLASS.\n\nCLASS cl_gdt_conversion IMPLEMENTATION.\n\n  METHOD amount_outbound.\n    CASE im_currency_code.\n      WHEN ''DKK'' OR ''EUR'' OR ''USD''.\n        ex_value = im_value.\n      WHEN ''VND''.\n        ex_value = im_value * 100.\n      WHEN OTHERS.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD language_code_inbound.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD unit_code_outbound.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD country_code_outbound.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD date_time_inbound.\n    DATA lv_str TYPE string.\n\n    IF im_value NP ''*Z''.\n      ASSERT 1 = ''todo, only handles UTC for now''.\n    ENDIF.\n\n    lv_str = im_value.\n    REPLACE ALL OCCURRENCES OF ''-'' IN lv_str WITH ''''.\n    REPLACE ALL OCCURRENCES OF '':'' IN lv_str WITH ''''.\n    REPLACE ALL OCCURRENCES OF ''T'' IN lv_str WITH ''''.\n    REPLACE ALL OCCURRENCES OF ''Z'' IN lv_str WITH ''''.\n    ex_value_short = lv_str.\n  ENDMETHOD.\n\n  METHOD unit_code_inbound.\n\n* todo, first look up in database, if there is no database connected, fallback to below\n\n    CASE im_value.\n      WHEN ''MTR''.\n        ex_value = ''M''.\n      WHEN ''PCE''.\n        ex_value = ''PC''.\n      WHEN ''KGM''.\n        ex_value = ''KG''.\n      WHEN ''LTR''.\n        ex_value = ''L''.\n      WHEN OTHERS.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n\n  ENDMETHOD.\n\n  METHOD language_code_outbound.\n\n* todo, first look up in database, if there is no database connected, fallback to below\n\n    CASE im_value.\n      WHEN ''E''.\n        ex_value = ''en''.\n      WHEN ''K''.\n        ex_value = ''da''.\n      WHEN ''D''.\n        ex_value = ''de''.\n      WHEN OTHERS.\n        ASSERT 0 = 1.\n    ENDCASE.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_I18N_LANGUAGES                       ', 'CLASS cl_i18n_languages DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS sap1_to_sap2\n      IMPORTING\n        im_lang_sap1        TYPE sy-langu\n      RETURNING\n        VALUE(re_lang_sap2) TYPE string\n      EXCEPTIONS\n        no_assignment.\n\n    CLASS-METHODS sap2_to_sap1\n      IMPORTING\n        im_lang_sap2 TYPE laiso\n      RETURNING\n        VALUE(re_lang_sap1) TYPE sy-langu\n      EXCEPTIONS\n        no_assignment.\n\n    CLASS-METHODS sap2_to_iso639_1\n      IMPORTING\n        im_lang_sap2   TYPE string\n      EXPORTING\n        ex_lang_iso639 TYPE string\n        ex_country     TYPE land1\n      EXCEPTIONS\n        no_assignment.\nENDCLASS.\n\nCLASS cl_i18n_languages IMPLEMENTATION.\n  METHOD sap2_to_sap1.\n    CASE to_upper( im_lang_sap2 ).\n      WHEN ''SR''.\n        re_lang_sap1 = ''0''.\n      WHEN ''ZH''.\n        re_lang_sap1 = ''1''.\n      WHEN ''TH''.\n        re_lang_sap1 = ''2''.\n      WHEN ''KO''.\n        re_lang_sap1 = ''3''.\n      WHEN ''RO''.\n        re_lang_sap1 = ''4''.\n      WHEN ''SL''.\n        re_lang_sap1 = ''5''.\n      WHEN ''HR''.\n        re_lang_sap1 = ''6''.\n      WHEN ''MS''.\n        re_lang_sap1 = ''7''.\n      WHEN ''UK''.\n        re_lang_sap1 = ''8''.\n      WHEN ''ET''.\n        re_lang_sap1 = ''9''.\n      WHEN ''AR''.\n        re_lang_sap1 = ''A''.\n      WHEN ''HE''.\n        re_lang_sap1 = ''B''.\n      WHEN ''CS''.\n        re_lang_sap1 = ''C''.\n      WHEN ''DE''.\n        re_lang_sap1 = ''D''.\n      WHEN ''EN''.\n        re_lang_sap1 = ''E''.\n      WHEN ''FR''.\n        re_lang_sap1 = ''F''.\n      WHEN ''EL''.\n        re_lang_sap1 = ''G''.\n      WHEN ''HU''.\n        re_lang_sap1 = ''H''.\n      WHEN ''IT''.\n        re_lang_sap1 = ''I''.\n      WHEN ''JA''.\n        re_lang_sap1 = ''J''.\n      WHEN ''DA''.\n        re_lang_sap1 = ''K''.\n      WHEN ''PL''.\n        re_lang_sap1 = ''L''.\n      WHEN ''ZF''.\n        re_lang_sap1 = ''M''.\n      WHEN ''NL''.\n        re_lang_sap1 = ''N''.\n      WHEN ''NO''.\n        re_lang_sap1 = ''O''.\n      WHEN ''PT''.\n        re_lang_sap1 = ''P''.\n      WHEN ''SK''.\n        re_lang_sap1 = ''Q''.\n      WHEN ''RU''.\n        re_lang_sap1 = ''R''.\n      WHEN ''ES''.\n        re_lang_sap1 = ''S''.\n      WHEN ''TR''.\n        re_lang_sap1 = ''T''.\n      WHEN ''FI''.\n        re_lang_sap1 = ''U''.\n      WHEN ''SV''.\n        re_lang_sap1 = ''V''.\n      WHEN ''BG''.\n        re_lang_sap1 = ''W''.\n      WHEN ''LT''.\n        re_lang_sap1 = ''X''.\n      WHEN ''LV''.\n        re_lang_sap1 = ''Y''.\n      WHEN ''Z1''.\n        re_lang_sap1 = ''Z''.\n      WHEN ''AF''.\n        re_lang_sap1 = ''a''.\n      WHEN ''IS''.\n        re_lang_sap1 = ''b''.\n      WHEN ''CA''.\n        re_lang_sap1 = ''c''.\n      WHEN ''SH''.\n        re_lang_sap1 = ''d''.\n      WHEN ''ID''.\n        re_lang_sap1 = ''i''.\n      WHEN ''1Q''.\n        re_lang_sap1 = ''''.\n      WHEN OTHERS.\n        RAISE no_assignment.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD sap1_to_sap2.\n* todo, ideally this should look up in a database table first\n* if there is no database attached, fallback to the CASE below\n    CASE im_lang_sap1.\n      WHEN ''0''.\n        re_lang_sap2 = ''SR''.\n      WHEN ''1''.\n        re_lang_sap2 = ''ZH''.\n      WHEN ''2''.\n        re_lang_sap2 = ''TH''.\n      WHEN ''3''.\n        re_lang_sap2 = ''KO''.\n      WHEN ''4''.\n        re_lang_sap2 = ''RO''.\n      WHEN ''5''.\n        re_lang_sap2 = ''SL''.\n      WHEN ''6''.\n        re_lang_sap2 = ''HR''.\n      WHEN ''7''.\n        re_lang_sap2 = ''MS''.\n      WHEN ''8''.\n        re_lang_sap2 = ''UK''.\n      WHEN ''9''.\n        re_lang_sap2 = ''ET''.\n      WHEN ''A''.\n        re_lang_sap2 = ''AR''.\n      WHEN ''B''.\n        re_lang_sap2 = ''HE''.\n      WHEN ''C''.\n        re_lang_sap2 = ''CS''.\n      WHEN ''D''.\n        re_lang_sap2 = ''DE''.\n      WHEN ''E''.\n        re_lang_sap2 = ''EN''.\n      WHEN ''F''.\n        re_lang_sap2 = ''FR''.\n      WHEN ''G''.\n        re_lang_sap2 = ''EL''.\n      WHEN ''H''.\n        re_lang_sap2 = ''HU''.\n      WHEN ''I''.\n        re_lang_sap2 = ''IT''.\n      WHEN ''J''.\n        re_lang_sap2 = ''JA''.\n      WHEN ''K''.\n        re_lang_sap2 = ''DA''.\n      WHEN ''L''.\n        re_lang_sap2 = ''PL''.\n      WHEN ''M''.\n        re_lang_sap2 = ''ZF''.\n      WHEN ''N''.\n        re_lang_sap2 = ''NL''.\n      WHEN ''O''.\n        re_lang_sap2 = ''NO''.\n      WHEN ''P''.\n        re_lang_sap2 = ''PT''.\n      WHEN ''Q''.\n        re_lang_sap2 = ''SK''.\n      WHEN ''R''.\n        re_lang_sap2 = ''RU''.\n      WHEN ''S''.\n        re_lang_sap2 = ''ES''.\n      WHEN ''T''.\n        re_lang_sap2 = ''TR''.\n      WHEN ''U''.\n        re_lang_sap2 = ''FI''.\n      WHEN ''V''.\n        re_lang_sap2 = ''SV''.\n      WHEN ''W''.\n        re_lang_sap2 = ''BG''.\n      WHEN ''X''.\n        re_lang_sap2 = ''LT''.\n      WHEN ''Y''.\n        re_lang_sap2 = ''LV''.\n      WHEN ''Z''.\n        re_lang_sap2 = ''Z1''.\n      WHEN ''a''.\n        re_lang_sap2 = ''AF''.\n      WHEN ''b''.\n        re_lang_sap2 = ''IS''.\n      WHEN ''c''.\n        re_lang_sap2 = ''CA''.\n      WHEN ''d''.\n        re_lang_sap2 = ''SH''.\n      WHEN ''i''.\n        re_lang_sap2 = ''ID''.\n      WHEN OTHERS.\n        RAISE no_assignment.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD sap2_to_iso639_1.\n    CASE im_lang_sap2.\n      WHEN ''SR''.\n        ex_lang_iso639 = ''sr''.\n      WHEN ''ZH''.\n        ex_lang_iso639 = ''zh''.\n        ex_country = ''CN''.\n      WHEN ''TH''.\n        ex_lang_iso639 = ''th''.\n      WHEN ''KO''.\n        ex_lang_iso639 = ''ko''.\n        ex_country = ''KR''.\n      WHEN ''RO''.\n        ex_lang_iso639 = ''ro''.\n        ex_country = ''RO''.\n      WHEN ''SL''.\n        ex_lang_iso639 = ''sl''.\n      WHEN ''HR''.\n        ex_lang_iso639 = ''hr''.\n      WHEN ''MS''.\n        ex_lang_iso639 = ''ms''.\n        ex_country = ''MY''.\n      WHEN ''UK''.\n        ex_lang_iso639 = ''uk''.\n      WHEN ''ET''.\n        ex_lang_iso639 = ''et''.\n      WHEN ''AR''.\n        ex_lang_iso639 = ''ar''.\n        ex_country = ''SA''.\n      WHEN ''HE''.\n        ex_lang_iso639 = ''he''.\n      WHEN ''CS''.\n        ex_lang_iso639 = ''cs''.\n      WHEN ''DE''.\n        ex_lang_iso639 = ''de''.\n        ex_country = ''DE''.\n      WHEN ''EN''.\n        ex_lang_iso639 = ''en''.\n        ex_country = ''US''.\n      WHEN ''FR''.\n        ex_lang_iso639 = ''fr''.\n        ex_country = ''FR''.\n      WHEN ''EL''.\n        ex_lang_iso639 = ''el''.\n      WHEN ''HU''.\n        ex_lang_iso639 = ''hu''.\n      WHEN ''IT''.\n        ex_lang_iso639 = ''it''.\n        ex_country = ''IT''.\n      WHEN ''JA''.\n        ex_lang_iso639 = ''ja''.\n      WHEN ''DA''.\n        ex_lang_iso639 = ''da''.\n      WHEN ''PL''.\n        ex_lang_iso639 = ''pl''.\n      WHEN ''ZF''.\n        ex_lang_iso639 = ''zh''.\n        ex_country = ''TW''.\n      WHEN ''NL''.\n        ex_lang_iso639 = ''nl''.\n        ex_country = ''NL''.\n      WHEN ''NO''.\n        ex_lang_iso639 = ''no''.\n      WHEN ''PT''.\n        ex_lang_iso639 = ''pt''.\n        ex_country = ''BR''.\n      WHEN ''SK''.\n        ex_lang_iso639 = ''sk''.\n      WHEN ''RU''.\n        ex_lang_iso639 = ''ru''.\n        ex_country = ''RU''.\n      WHEN ''ES''.\n        ex_lang_iso639 = ''es''.\n        ex_country = ''ES''.\n      WHEN ''TR''.\n        ex_lang_iso639 = ''tr''.\n      WHEN ''FI''.\n        ex_lang_iso639 = ''fi''.\n      WHEN ''SV''.\n        ex_lang_iso639 = ''sv''.\n      WHEN ''BG''.\n        ex_lang_iso639 = ''bg''.\n      WHEN ''LT''.\n        ex_lang_iso639 = ''lt''.\n      WHEN ''LV''.\n        ex_lang_iso639 = ''lv''.\n      WHEN ''AF''.\n        ex_lang_iso639 = ''af''.\n      WHEN ''IS''.\n        ex_lang_iso639 = ''is''.\n      WHEN ''CA''.\n        ex_lang_iso639 = ''ca''.\n      WHEN ''SH''.\n        ex_lang_iso639 = ''sr''.\n      WHEN ''ID''.\n        ex_lang_iso639 = ''id''.\n      WHEN OTHERS.\n        RAISE no_assignment.\n    ENDCASE.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_MESSAGE_HELPER                       ', 'CLASS cl_message_helper DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS set_msg_vars_for_if_msg\n      IMPORTING\n        text TYPE REF TO if_message\n      EXPORTING\n        VALUE(string) TYPE string.\n\n    CLASS-METHODS set_msg_vars_for_clike\n      IMPORTING\n        text TYPE clike.\n\n    CLASS-METHODS get_text_for_message\n      IMPORTING\n        text TYPE REF TO if_message\n      RETURNING\n        VALUE(result) TYPE string.\n  PRIVATE SECTION.\n    CONSTANTS gc_fallback TYPE string VALUE ''An exception was raised.''.\nENDCLASS.\n\nCLASS cl_message_helper IMPLEMENTATION.\n\n  METHOD get_text_for_message.\n\n    DATA lv_msgid LIKE sy-msgid.\n    DATA lv_msgno LIKE sy-msgno.\n    DATA lv_msgv1 LIKE sy-msgv1.\n    DATA lv_msgv2 LIKE sy-msgv2.\n    DATA lv_msgv3 LIKE sy-msgv3.\n    DATA lv_msgv4 LIKE sy-msgv4.\n\n* when the transpiler can do more, the below can be implemented in ABAP instead of using KERNEL,\n    WRITE ''@KERNEL if (text.get()?.if_t100_message$t100key === undefined) { result.set(this.gc_fallback); return result; };''.\n\n    WRITE ''@KERNEL lv_msgid.set(text.get().if_t100_message$t100key.get().msgid);''.\n    WRITE ''@KERNEL lv_msgno.set(text.get().if_t100_message$t100key.get().msgno);''.\n    WRITE ''@KERNEL lv_msgv1.set(text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");''.\n    WRITE ''@KERNEL lv_msgv2.set(text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");''.\n    WRITE ''@KERNEL lv_msgv3.set(text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");''.\n    WRITE ''@KERNEL lv_msgv4.set(text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");''.\n\n    MESSAGE ID lv_msgid TYPE ''I'' NUMBER lv_msgno WITH lv_msgv1 lv_msgv2 lv_msgv3 lv_msgv4 INTO result.\n\n  ENDMETHOD.\n\n  METHOD set_msg_vars_for_if_msg.\n    IF text IS INITIAL.\n      RAISE EXCEPTION TYPE cx_sy_message_illegal_text.\n    ENDIF.\n\n* first try if_t100_message\n    string = get_text_for_message( text ).\n    IF string <> gc_fallback.\n      CLEAR sy-msgty.\n      RETURN.\n    ENDIF.\n\n    string = text->get_text( ).\n    IF string IS INITIAL.\n      ASSERT 1 = ''todo''.\n    ENDIF.\n\n    set_msg_vars_for_clike( string ).\n  ENDMETHOD.\n\n  METHOD set_msg_vars_for_clike.\n    sy-msgid = ''00''.\n    sy-msgno = ''001''.\n    sy-msgv1 = text.\n    IF strlen( text ) > 50.\n      sy-msgv2 = text+50.\n    ENDIF.\n    IF strlen( text ) > 100.\n      sy-msgv3 = text+100.\n    ENDIF.\n    IF strlen( text ) > 150.\n      sy-msgv4 = text+150.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_OO_ADT_CLASSRUN                      ', 'INTERFACE if_oo_adt_classrun PUBLIC.\n  METHODS main IMPORTING out TYPE REF TO if_oo_adt_classrun_out.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_OO_ADT_CLASSRUN_OUT                  ', 'INTERFACE if_oo_adt_classrun_out PUBLIC.\n\n  METHODS write\n    IMPORTING\n      data TYPE any\n      name TYPE string OPTIONAL\n    RETURNING\n      VALUE(output) TYPE REF TO if_oo_adt_classrun_out.\n\n  METHODS get\n    IMPORTING\n      data TYPE any OPTIONAL\n      name TYPE string OPTIONAL PREFERRED PARAMETER data\n    RETURNING\n      VALUE(output) TYPE string.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CODEPAGE                        ', 'CLASS cl_abap_codepage DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS convert_to\n      IMPORTING\n        codepage      TYPE string OPTIONAL\n        source        TYPE string\n      RETURNING\n        VALUE(output) TYPE xstring.\n\n    CLASS-METHODS convert_from\n      IMPORTING\n        codepage      TYPE string OPTIONAL\n        source        TYPE xstring\n      RETURNING\n        VALUE(output) TYPE string.\n\n    CLASS-METHODS sap_codepage\n      IMPORTING\n        encoding TYPE string\n      RETURNING\n        VALUE(codepage) TYPE abap_encoding.\nENDCLASS.\n\nCLASS cl_abap_codepage IMPLEMENTATION.\n  METHOD convert_to.\n    DATA conv TYPE REF TO cl_abap_conv_out_ce.\n    conv = cl_abap_conv_out_ce=>create( encoding = ''UTF-8'' ).\n    conv->convert( EXPORTING data   = source\n                   IMPORTING buffer = output ).\n  ENDMETHOD.\n\n  METHOD convert_from.\n    DATA conv TYPE REF TO cl_abap_conv_in_ce.\n    DATA data TYPE string.\n    conv = cl_abap_conv_in_ce=>create( encoding = ''UTF-8'' ).\n    conv->convert(\n      EXPORTING input = source\n      IMPORTING data = output ).\n  ENDMETHOD.\n\n  METHOD sap_codepage.\n    ASSERT encoding = ''UTF-16LE''.\n    codepage = ''4103''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CONV_CODEPAGE                   ', 'CLASS cl_abap_conv_codepage DEFINITION PUBLIC FINAL CREATE PRIVATE.\n\n  PUBLIC SECTION.\n\n    CLASS-METHODS create_in\n      RETURNING\n        VALUE(instance) TYPE REF TO if_abap_conv_in\n      RAISING\n        cx_parameter_invalid_range.\n\n    CLASS-METHODS create_out\n      RETURNING\n        VALUE(instance) TYPE REF TO if_abap_conv_out\n      RAISING\n        cx_parameter_invalid_range.\n\nENDCLASS.\n\nCLASS cl_abap_conv_codepage IMPLEMENTATION.\n\n  METHOD create_in.\n    CREATE OBJECT instance TYPE lcl_in.\n  ENDMETHOD.\n\n  METHOD create_out.\n    CREATE OBJECT instance TYPE lcl_out.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CONV_IN_CE                      ', 'CLASS cl_abap_conv_in_ce DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS\n      create\n        IMPORTING\n          encoding    TYPE abap_encoding DEFAULT ''UTF-8''\n          input       TYPE xstring OPTIONAL\n          replacement TYPE char1 DEFAULT ''#''\n          ignore_cerr TYPE abap_bool DEFAULT abap_false\n          endian      TYPE char1 OPTIONAL\n        RETURNING\n          VALUE(ret)  TYPE REF TO cl_abap_conv_in_ce.\n\n    CLASS-METHODS\n      uccpi\n        IMPORTING\n          value TYPE i\n        RETURNING\n          VALUE(ret) TYPE string.\n\n    TYPES ty_char2 TYPE c LENGTH 2.\n    CLASS-METHODS uccp\n      IMPORTING\n        uccp TYPE simple\n      RETURNING\n        VALUE(char_) TYPE ty_char2.\n\n    METHODS\n      convert\n        IMPORTING\n          input TYPE xstring\n          n     TYPE i OPTIONAL\n        EXPORTING\n          data  TYPE string.\n    METHODS\n      read\n        IMPORTING\n          n     TYPE i OPTIONAL\n        EXPORTING\n          data  TYPE string.\n  PRIVATE SECTION.\n    DATA mv_input TYPE xstring.\n    DATA mv_js_encoding TYPE string.\n    DATA mv_ignore_cerr TYPE abap_bool.\nENDCLASS.\n\nCLASS cl_abap_conv_in_ce IMPLEMENTATION.\n  METHOD create.\n    ASSERT replacement = ''#''. \" todo\n    ASSERT endian IS INITIAL. \" todo\n\n    CREATE OBJECT ret.\n\n    CASE encoding.\n      WHEN ''UTF-8''.\n        ret->mv_js_encoding = ''utf8''.\n      WHEN ''4103''.\n        ret->mv_js_encoding = ''utf-16le''.\n      WHEN OTHERS.\n        ASSERT 1 = ''not supported''.\n    ENDCASE.\n\n    ret->mv_input = input.\n    ret->mv_ignore_cerr = ignore_cerr.\n  ENDMETHOD.\n\n  METHOD uccp.\n    DATA int TYPE i.\n    DATA hex TYPE x LENGTH 2.\n    hex = uccp.\n    int = hex.\n    TRY.\n        char_ = uccpi( int ).\n      CATCH cx_sy_conversion_codepage.\n* todo, hmm\n    ENDTRY.\n  ENDMETHOD.\n\n  METHOD uccpi.\n    DATA lv_hex TYPE x LENGTH 2.\n    DATA lo_in TYPE REF TO cl_abap_conv_in_ce.\n\n    lv_hex(1) = value MOD 255.\n    lv_hex+1(1) = value DIV 255.\n\n    lo_in = create( encoding = ''4103'' ).\n\n    lo_in->convert(\n      EXPORTING\n        input = lv_hex\n      IMPORTING\n        data  = ret ).\n  ENDMETHOD.\n\n  METHOD convert.\n    DATA lv_error TYPE abap_bool.\n\n    IF input IS INITIAL.\n      RETURN.\n    ENDIF.\n    ASSERT mv_js_encoding IS NOT INITIAL.\n    WRITE ''@KERNEL let buf = Buffer.from(input.get(), \"hex\");''.\n\n    WRITE ''@KERNEL const util= await import(\"util\");''.\n    WRITE ''@KERNEL const td = new util.TextDecoder(this.mv_js_encoding.get(), {fatal: this.mv_ignore_cerr.get() !== \"X\"});''.\n    WRITE ''@KERNEL try {''.\n    WRITE ''@KERNEL   data.set(td.decode(buf));''.\n    WRITE ''@KERNEL } catch {''.\n    lv_error = abap_true.\n    WRITE ''@KERNEL }''.\n\n    IF lv_error = abap_true.\n      RAISE EXCEPTION TYPE cx_sy_conversion_codepage.\n    ENDIF.\n\n* old    WRITE ''@KERNEL let result = buf.toString(this.mv_js_encoding.get());''.\n* old    WRITE ''@KERNEL data.set(result);''.\n  ENDMETHOD.\n\n  METHOD read.\n    convert(\n      EXPORTING\n        input = mv_input\n        n     = n\n      IMPORTING\n        data  = data ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CONV_OUT_CE                     ', 'CLASS cl_abap_conv_out_ce DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS\n      create\n        IMPORTING\n          encoding    TYPE abap_encoding OPTIONAL\n          ignore_cerr TYPE abap_bool DEFAULT abap_false\n          endian      TYPE string OPTIONAL\n          replacement TYPE string OPTIONAL\n        RETURNING\n          VALUE(ret)  TYPE REF TO cl_abap_conv_out_ce.\n    CLASS-METHODS\n      uccpi\n        IMPORTING\n          value TYPE string\n        RETURNING\n          VALUE(ret) TYPE i.\n    METHODS\n      convert\n        IMPORTING\n          data   TYPE string\n          n      TYPE i OPTIONAL\n        EXPORTING\n          buffer TYPE xstring.\n    METHODS write\n      IMPORTING\n        data TYPE string.\n    METHODS get_buffer\n      RETURNING\n        VALUE(buffer) TYPE xstring.\n    METHODS reset.\n  PRIVATE SECTION.\n    DATA mv_js_encoding TYPE string.\n    DATA mv_buffer TYPE xstring.\nENDCLASS.\n\nCLASS cl_abap_conv_out_ce IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT ret.\n    CASE encoding.\n      WHEN ''UTF-8'' OR ''''.\n        ret->mv_js_encoding = ''utf8''.\n      WHEN ''4103''.\n        ret->mv_js_encoding = ''utf16le''.\n      WHEN OTHERS.\n        ASSERT 1 = ''not supported''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD uccpi.\n    DATA lo_out TYPE REF TO cl_abap_conv_out_ce.\n    DATA lv_hex TYPE xstring.\n    lo_out = create( encoding = ''4103'' ).\n    lo_out->convert(\n      EXPORTING\n        data = value\n      IMPORTING\n        buffer = lv_hex ).\n    ASSERT xstrlen( lv_hex ) = 2.\n    ret = lv_hex(1).\n    ret = ret + lv_hex+1(1) * 255.\n  ENDMETHOD.\n\n  METHOD write.\n    DATA res TYPE xstring.\n    convert( EXPORTING data = data\n             IMPORTING buffer = res ).\n    CONCATENATE mv_buffer res INTO mv_buffer IN BYTE MODE.\n  ENDMETHOD.\n\n  METHOD get_buffer.\n    buffer = mv_buffer.\n  ENDMETHOD.\n\n  METHOD reset.\n    CLEAR mv_buffer.\n  ENDMETHOD.\n\n  METHOD convert.\n* todo, input parameter \"N\" not handled\n\n    WRITE ''@KERNEL let result = Buffer.from(data.get(), this.mv_js_encoding.get()).toString(\"hex\");''.\n    WRITE ''@KERNEL buffer.set(result.toUpperCase());''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_GDT_CONVERSION                       ', 'CLASS cx_gdt_conversion DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_gdt_conversion IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_ABAP_CONV_IN                         ', 'INTERFACE if_abap_conv_in PUBLIC.\n\n  METHODS convert\n    IMPORTING\n      source TYPE xstring\n    RETURNING\n      VALUE(result) TYPE string\n    RAISING\n      cx_sy_conversion_codepage.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_ABAP_CONV_OUT                        ', 'INTERFACE if_abap_conv_out PUBLIC.\n\n  METHODS convert\n    IMPORTING\n      source TYPE string\n    RETURNING\n      VALUE(result) TYPE xstring\n    RAISING\n      cx_sy_conversion_codepage.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_DYN_PRG                         ', 'CLASS cl_abap_dyn_prg DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS check_table_name_str\n      IMPORTING\n        val            TYPE csequence\n        packages       TYPE csequence\n      RETURNING\n        VALUE(val_str) TYPE string\n      RAISING\n        cx_abap_not_a_table\n        cx_abap_not_in_package.\n\n    CLASS-METHODS check_whitelist_str\n      IMPORTING\n        val            TYPE csequence\n        whitelist      TYPE csequence\n      RETURNING\n        VALUE(val_str) TYPE string\n      RAISING\n        cx_abap_not_in_whitelist.\nENDCLASS.\n\nCLASS cl_abap_dyn_prg IMPLEMENTATION.\n\n  METHOD check_table_name_str.\n* allow everything\n    val_str = val.\n  ENDMETHOD.\n\n  METHOD check_whitelist_str.\n* allow everything\n    val_str = val.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ABAP_NOT_A_TABLE                     ', 'CLASS cx_abap_not_a_table DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_abap_not_a_table IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ABAP_NOT_IN_PACKAGE                  ', 'CLASS cx_abap_not_in_package DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_abap_not_in_package IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ABAP_NOT_IN_WHITELIST                ', 'CLASS cx_abap_not_in_whitelist DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_abap_not_in_whitelist IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ABAP_MESSAGE_DIGEST                  ', 'CLASS cx_abap_message_digest DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_abap_message_digest IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_DYNAMIC_CHECK                        ', 'CLASS cx_dynamic_check DEFINITION ABSTRACT PUBLIC INHERITING FROM cx_root.\n\nENDCLASS.\n\nCLASS cx_dynamic_check IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_NO_CHECK                             ', 'CLASS cx_no_check DEFINITION PUBLIC INHERITING FROM cx_root.\n\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        previous TYPE REF TO cx_root OPTIONAL.\n\nENDCLASS.\n\nCLASS cx_no_check IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor( previous = previous ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_PARAMETER_INVALID                    ', 'CLASS cx_parameter_invalid DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_parameter_invalid IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_PARAMETER_INVALID_RANGE              ', 'CLASS cx_parameter_invalid_range DEFINITION PUBLIC INHERITING FROM cx_parameter_invalid.\n\nENDCLASS.\n\nCLASS cx_parameter_invalid_range IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_PARAMETER_INVALID_TYPE               ', 'CLASS cx_parameter_invalid_type DEFINITION PUBLIC INHERITING FROM cx_parameter_invalid.\n\nENDCLASS.\n\nCLASS cx_parameter_invalid_type IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ROOT                                 ', 'CLASS cx_root DEFINITION ABSTRACT PUBLIC.\n\n  PUBLIC SECTION.\n    DATA previous TYPE REF TO cx_root.\n    DATA textid   TYPE c LENGTH 32.\n\n    METHODS constructor\n      IMPORTING\n        textid   LIKE textid OPTIONAL\n        previous TYPE REF TO cx_root OPTIONAL.\n\n    METHODS get_source_position\n      EXPORTING\n        program_name TYPE string\n        include_name TYPE string\n        source_line  TYPE string.\n\n    INTERFACES if_message.\n    ALIASES get_longtext FOR if_message~get_longtext.\n    ALIASES get_text FOR if_message~get_text.\n\nENDCLASS.\n\nCLASS cx_root IMPLEMENTATION.\n\n  METHOD constructor.\n    me->previous = previous.\n    me->textid = textid.\n  ENDMETHOD.\n\n  METHOD get_source_position.\n    ASSERT ''todo'' = 1.\n  ENDMETHOD.\n\n  METHOD if_message~get_longtext.\n    result = ''OpenAbapGetLongtextDummyValue''.\n  ENDMETHOD.\n\n  METHOD if_message~get_text.\n    result = cl_message_helper=>get_text_for_message( me ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_STATIC_CHECK                         ', 'CLASS cx_static_check DEFINITION PUBLIC INHERITING FROM cx_root.\n\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        textid   LIKE if_t100_message=>t100key OPTIONAL\n        previous TYPE REF TO cx_root OPTIONAL\n        msgv1    TYPE c OPTIONAL\n        msgv2    TYPE c OPTIONAL\n        msgv3    TYPE c OPTIONAL\n        msgv4    TYPE c OPTIONAL.\nENDCLASS.\n\nCLASS cx_static_check IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor(\n      textid   = textid\n      previous = previous ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_ARITHMETIC_ERROR                  ', 'CLASS cx_sy_arithmetic_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_arithmetic_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_BUFFER_OVERFLOW                   ', 'CLASS cx_sy_buffer_overflow DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_buffer_overflow IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CODEPAGE_CONVERTER_INIT           ', 'CLASS cx_sy_codepage_converter_init DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_codepage_converter_init IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_COMPRESSION_ERROR                 ', 'CLASS cx_sy_compression_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_compression_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CONVERSION_CODEPAGE               ', 'CLASS cx_sy_conversion_codepage DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\n    DATA source_extract TYPE xstring.\nENDCLASS.\n\nCLASS cx_sy_conversion_codepage IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CONVERSION_DATA_LOSS              ', 'CLASS cx_sy_conversion_data_loss DEFINITION PUBLIC INHERITING FROM cx_sy_conversion_error.\n\nENDCLASS.\n\nCLASS cx_sy_conversion_data_loss IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CONVERSION_ERROR                  ', 'CLASS cx_sy_conversion_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_conversion_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CONVERSION_NO_NUMBER              ', 'CLASS cx_sy_conversion_no_number DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_conversion_no_number IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CONVERSION_OVERFLOW               ', 'CLASS cx_sy_conversion_overflow DEFINITION PUBLIC INHERITING FROM cx_sy_conversion_error.\n\nENDCLASS.\n\nCLASS cx_sy_conversion_overflow IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CREATE_DATA_ERROR                 ', 'CLASS cx_sy_create_data_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_create_data_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_CREATE_OBJECT_ERROR               ', 'CLASS cx_sy_create_object_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        textid    LIKE textid OPTIONAL\n        previous  LIKE previous OPTIONAL\n        classname TYPE string OPTIONAL.\n\n    METHODS if_message~get_text REDEFINITION.\n\n    DATA classname TYPE string READ-ONLY.\nENDCLASS.\n\nCLASS cx_sy_create_object_error IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor(\n      textid   = textid\n      previous = previous ).\n    me->classname = classname.\n  ENDMETHOD.\n\n  METHOD if_message~get_text.\n    result = ''The object could not be created: The class ??? does not exist.''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DATA_ACCESS_ERROR                 ', 'CLASS cx_sy_data_access_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_data_access_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DUPLICATE_KEY                     ', 'CLASS cx_sy_duplicate_key DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_duplicate_key IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_ERROR                    ', 'CLASS cx_sy_dyn_call_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_ILLEGAL_CLASS            ', 'CLASS cx_sy_dyn_call_illegal_class DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_error.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_illegal_class IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_ILLEGAL_FORM             ', 'CLASS cx_sy_dyn_call_illegal_form DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_error.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_illegal_form IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_ILLEGAL_FUNC             ', 'CLASS cx_sy_dyn_call_illegal_func DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_error.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_illegal_func IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_ILLEGAL_METHOD           ', 'CLASS cx_sy_dyn_call_illegal_method DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_error.\n\n  PUBLIC SECTION.\n    CONSTANTS private_method TYPE c VALUE ''1''.\n\n    METHODS constructor\n      IMPORTING\n        textid     LIKE textid OPTIONAL\n        previous   LIKE previous OPTIONAL\n        classname  TYPE string OPTIONAL\n        methodname TYPE string OPTIONAL.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_illegal_method IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor( previous = previous ).\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_PARAM_NOT_FOUND          ', 'CLASS cx_sy_dyn_call_param_not_found DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_parameter_error.\n\nENDCLASS.\n\nCLASS cx_sy_dyn_call_param_not_found IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYN_CALL_PARAMETER_ERROR          ', 'CLASS cx_sy_dyn_call_parameter_error DEFINITION PUBLIC INHERITING FROM cx_sy_dyn_call_error.\n  PUBLIC SECTION.\n    DATA parameter TYPE string.\nENDCLASS.\n\nCLASS cx_sy_dyn_call_parameter_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYNAMIC_OSQL_ERROR                ', 'CLASS cx_sy_dynamic_osql_error DEFINITION PUBLIC INHERITING FROM cx_sy_open_sql_error.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        sqlmsg TYPE string OPTIONAL.\nENDCLASS.\n\nCLASS cx_sy_dynamic_osql_error IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( sqlmsg = sqlmsg ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_DYNAMIC_OSQL_SEMANTICS            ', 'CLASS cx_sy_dynamic_osql_semantics DEFINITION PUBLIC INHERITING FROM cx_sy_dynamic_osql_error.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        sqlmsg TYPE string OPTIONAL.\nENDCLASS.\n\nCLASS cx_sy_dynamic_osql_semantics IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( sqlmsg = sqlmsg ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_ITAB_DUPLICATE_KEY                ', 'CLASS cx_sy_itab_duplicate_key DEFINITION PUBLIC INHERITING FROM cx_sy_itab_error.\n\nENDCLASS.\n\nCLASS cx_sy_itab_duplicate_key IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_ITAB_ERROR                        ', 'CLASS cx_sy_itab_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_itab_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_ITAB_LINE_NOT_FOUND               ', 'CLASS cx_sy_itab_line_not_found DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_itab_line_not_found IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_MESSAGE_ILLEGAL_TEXT              ', 'CLASS cx_sy_message_illegal_text DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cx_sy_message_illegal_text IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_MOVE_CAST_ERROR                   ', 'CLASS cx_sy_move_cast_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_move_cast_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_OPEN_SQL_ERROR                    ', 'CLASS cx_sy_open_sql_error DEFINITION PUBLIC INHERITING FROM cx_sy_sql_error.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        sqlmsg TYPE string OPTIONAL.\nENDCLASS.\n\nCLASS cx_sy_open_sql_error IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( sqlmsg = sqlmsg ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_RANGE_OUT_OF_BOUNDS               ', 'CLASS cx_sy_range_out_of_bounds DEFINITION PUBLIC INHERITING FROM cx_sy_data_access_error.\n\nENDCLASS.\n\nCLASS cx_sy_range_out_of_bounds IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_REF_IS_INITIAL                    ', 'CLASS cx_sy_ref_is_initial DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_ref_is_initial IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_SQL_ERROR                         ', 'CLASS cx_sy_sql_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\n    DATA sqlmsg TYPE string.\n\n    METHODS constructor\n      IMPORTING\n        sqlmsg TYPE string OPTIONAL.\nENDCLASS.\n\nCLASS cx_sy_sql_error IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( ).\n    me->sqlmsg = sqlmsg.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_STRG_PAR_VAL                      ', 'CLASS cx_sy_strg_par_val DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cx_sy_strg_par_val IMPLEMENTATION.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_STRUCT_ATTRIBUTES                 ', 'CLASS cx_sy_struct_attributes DEFINITION PUBLIC INHERITING FROM cx_sy_struct_creation.\n\nENDCLASS.\n\nCLASS cx_sy_struct_attributes IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_STRUCT_COMP_NAME                  ', 'CLASS cx_sy_struct_comp_name DEFINITION PUBLIC INHERITING FROM cx_sy_struct_creation.\n\nENDCLASS.\n\nCLASS cx_sy_struct_comp_name IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_STRUCT_COMP_TYPE                  ', 'CLASS cx_sy_struct_comp_type DEFINITION PUBLIC INHERITING FROM cx_sy_struct_creation.\n\nENDCLASS.\n\nCLASS cx_sy_struct_comp_type IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_STRUCT_CREATION                   ', 'CLASS cx_sy_struct_creation DEFINITION PUBLIC INHERITING FROM cx_sy_type_creation.\n\nENDCLASS.\n\nCLASS cx_sy_struct_creation IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_TYPE_CREATION                     ', 'CLASS cx_sy_type_creation DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sy_type_creation IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SY_ZERODIVIDE                        ', 'CLASS cx_sy_zerodivide DEFINITION PUBLIC INHERITING FROM cx_sy_arithmetic_error.\n\nENDCLASS.\n\nCLASS cx_sy_zerodivide IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_TRANSFORMATION_ERROR                 ', 'CLASS cx_transformation_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_transformation_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_XSLT_EXCEPTION                       ', 'CLASS cx_xslt_exception DEFINITION PUBLIC INHERITING FROM cx_transformation_error.\n\nENDCLASS.\n\nCLASS cx_xslt_exception IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_XSLT_FORMAT_ERROR                    ', 'CLASS cx_xslt_format_error DEFINITION PUBLIC INHERITING FROM cx_xslt_system_error.\n\nENDCLASS.\n\nCLASS cx_xslt_format_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_XSLT_RUNTIME_ERROR                   ', 'CLASS cx_xslt_runtime_error DEFINITION PUBLIC INHERITING FROM cx_transformation_error.\n\nENDCLASS.\n\nCLASS cx_xslt_runtime_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_XSLT_SYSTEM_ERROR                    ', 'CLASS cx_xslt_system_error DEFINITION PUBLIC INHERITING FROM cx_xslt_exception.\n\nENDCLASS.\n\nCLASS cx_xslt_system_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_MESSAGE                              ', 'INTERFACE if_message PUBLIC.\n\n  METHODS get_text RETURNING VALUE(result) TYPE string.\n\n  METHODS get_longtext\n    IMPORTING preserve_newlines TYPE abap_bool OPTIONAL\n    RETURNING VALUE(result) TYPE string.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_T100_DYN_MSG                         ', 'INTERFACE if_t100_dyn_msg PUBLIC.\n\n  DATA msgty TYPE symsgty.\n\n  DATA msgv1 TYPE symsgv.\n  DATA msgv2 TYPE symsgv.\n  DATA msgv3 TYPE symsgv.\n  DATA msgv4 TYPE symsgv.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_T100_MESSAGE                         ', 'INTERFACE if_t100_message PUBLIC.\n\n  DATA t100key TYPE scx_t100key.\n\n  CONSTANTS:\n    BEGIN OF default_textid,\n      msgid TYPE symsgid VALUE ''AB'',\n      msgno TYPE symsgno VALUE ''123'',\n      attr1 TYPE scx_attrname VALUE '''',\n      attr2 TYPE scx_attrname VALUE '''',\n      attr3 TYPE scx_attrname VALUE '''',\n      attr4 TYPE scx_attrname VALUE '''',\n    END OF default_textid.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_FUGR_TEST                        ', 'CLASS kernel_fugr_test DEFINITION PUBLIC.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS kernel_fugr_test IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_DEMO_OUTPUT                          ', 'CLASS cl_demo_output DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS write\n      IMPORTING\n        data TYPE any\n        name TYPE string OPTIONAL.\n    CLASS-METHODS clear.\n    CLASS-METHODS display\n      IMPORTING\n      data TYPE any OPTIONAL\n      name TYPE string OPTIONAL PREFERRED PARAMETER data.\nENDCLASS.\n\nCLASS cl_demo_output IMPLEMENTATION.\n  METHOD write.\n    ASSERT 1 = ''not supported''.\n  ENDMETHOD.\n\n  METHOD clear.\n    ASSERT 1 = ''not supported''.\n  ENDMETHOD.\n\n  METHOD display.\n    ASSERT 1 = ''not supported''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_GUI_CFW                              ', 'CLASS cl_gui_cfw DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS\n      compute_pixel_from_metric\n        IMPORTING\n          x_or_y TYPE c\n          in_     TYPE i\n        RETURNING\n          VALUE(val) TYPE i.\n\n    CLASS-METHODS flush.\nENDCLASS.\n\nCLASS cl_gui_cfw IMPLEMENTATION.\n  METHOD compute_pixel_from_metric.\n    val = 1.\n  ENDMETHOD.\n\n  METHOD flush.\n    RETURN.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_GUI_CONTAINER                        ', 'CLASS cl_gui_container DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-DATA screen0 TYPE REF TO cl_gui_container.\n    CLASS-DATA default_screen TYPE REF TO cl_gui_container.\n    CONSTANTS visible_true TYPE c LENGTH 1 VALUE ''1''.\n    CONSTANTS visible_false TYPE c LENGTH 1 VALUE ''0''.\nENDCLASS.\n\nCLASS cl_gui_container IMPLEMENTATION.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_GUI_FRONTEND_SERVICES                ', 'CLASS cl_gui_frontend_services DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS filetype_all TYPE string VALUE ''abc''.\n    CONSTANTS action_cancel TYPE i VALUE 1.\n    CONSTANTS action_ok TYPE i VALUE 1.\n\n    CONSTANTS platform_nt351 TYPE i VALUE 1.\n    CONSTANTS platform_nt40 TYPE i VALUE 2.\n    CONSTANTS platform_nt50 TYPE i VALUE 3.\n    CONSTANTS platform_windows95 TYPE i VALUE 4.\n    CONSTANTS platform_windows98 TYPE i VALUE 5.\n    CONSTANTS platform_windowsxp TYPE i VALUE 6.\n\n    CLASS-METHODS\n      gui_download\n        IMPORTING\n          bin_filesize          TYPE i OPTIONAL\n          filename              TYPE string\n          filetype              TYPE string OPTIONAL\n          write_lf              TYPE abap_bool OPTIONAL\n          write_field_separator TYPE char1 OPTIONAL\n        CHANGING\n          data_tab TYPE any.\n\n    CLASS-METHODS file_exist\n      IMPORTING\n        file          TYPE string\n      RETURNING\n        VALUE(result) TYPE abap_bool.\n\n    CLASS-METHODS\n      directory_list_files\n        IMPORTING\n          directory  TYPE string\n        CHANGING\n          file_table TYPE any\n          count      TYPE i.\n\n    CLASS-METHODS\n      gui_upload\n        IMPORTING\n          filename TYPE string\n          filetype TYPE string OPTIONAL\n          codepage TYPE abap_encoding DEFAULT space\n        EXPORTING\n          filelength TYPE i\n        CHANGING\n          data_tab TYPE any.\n\n    CLASS-METHODS\n      file_open_dialog\n        IMPORTING\n          window_title      TYPE string OPTIONAL\n          default_filename  TYPE string OPTIONAL\n          default_extension TYPE string OPTIONAL\n          multiselection    TYPE abap_bool OPTIONAL\n          file_filter       TYPE string OPTIONAL\n          initial_directory TYPE string OPTIONAL\n        CHANGING\n          file_table        TYPE filetable\n          rc                TYPE i\n          user_action       TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      get_platform\n        RETURNING\n          VALUE(platform) TYPE i.\n\n    CLASS-METHODS\n      file_save_dialog\n        IMPORTING\n          window_title         TYPE string OPTIONAL\n          default_extension    TYPE string OPTIONAL\n          default_file_name    TYPE string OPTIONAL\n          file_filter          TYPE string OPTIONAL\n        CHANGING\n          filename             TYPE string\n          path                 TYPE string\n          fullpath             TYPE string\n          user_action          TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      directory_browse\n        IMPORTING\n          window_title    TYPE string OPTIONAL\n          initial_folder  TYPE string\n        CHANGING\n          selected_folder TYPE string.\n\n    CLASS-METHODS\n      execute\n        IMPORTING\n          document          TYPE string OPTIONAL\n          application       TYPE string OPTIONAL\n          parameter         TYPE string OPTIONAL\n          default_directory TYPE string OPTIONAL\n          maximized         TYPE string OPTIONAL\n          minimized         TYPE string OPTIONAL\n          synchronous       TYPE string OPTIONAL\n          operation         TYPE string DEFAULT ''OPEN''.\n\n    CLASS-METHODS\n      get_file_separator\n        CHANGING\n          file_separator TYPE string.\n\n    CLASS-METHODS\n      directory_exist\n        IMPORTING\n          directory TYPE string\n        RETURNING\n          VALUE(result) TYPE abap_bool.\n\n    CLASS-METHODS\n      directory_create\n        IMPORTING\n          directory TYPE string\n        CHANGING\n          rc TYPE i.\n\n    CLASS-METHODS\n      clipboard_export\n        IMPORTING\n          no_auth_check TYPE abap_bool OPTIONAL\n        EXPORTING\n          data TYPE any\n        CHANGING\n          rc TYPE i.\n\n    CLASS-METHODS\n      get_system_directory\n        CHANGING\n          system_directory TYPE string.\n\n    CLASS-METHODS\n      get_gui_version\n        CHANGING\n          version_table TYPE filetable\n          rc            TYPE i.\n\n    CLASS-METHODS clipboard_import\n      EXPORTING\n        data   TYPE STANDARD TABLE\n        length TYPE i.\n\n    CLASS-METHODS file_delete\n      IMPORTING\n        filename TYPE string\n      CHANGING\n        rc       TYPE i.\n\n    CLASS-METHODS get_sapgui_workdir\n      CHANGING\n        sapworkdir TYPE string.\n\nENDCLASS.\n\nCLASS cl_gui_frontend_services IMPLEMENTATION.\n  METHOD directory_exist.\n    ASSERT 1 = ''directory_exist not supported''.\n  ENDMETHOD.\n\n  METHOD get_sapgui_workdir.\n    ASSERT 1 = ''get_sapgui_workdir not supported''.\n  ENDMETHOD.\n\n  METHOD file_exist.\n    ASSERT 1 = ''file_exist not supported''.\n  ENDMETHOD.\n\n  METHOD file_delete.\n    ASSERT 1 = ''file_delete not supported''.\n  ENDMETHOD.\n\n  METHOD clipboard_import.\n    ASSERT 1 = ''clipboard_import not supported''.\n  ENDMETHOD.\n\n  METHOD directory_list_files.\n    ASSERT 1 = ''directory_list_files not supported''.\n  ENDMETHOD.\n\n  METHOD directory_create.\n    ASSERT 1 = ''directory_create not supported''.\n  ENDMETHOD.\n\n  METHOD gui_download.\n    ASSERT 1 = ''gui_download not supported''.\n  ENDMETHOD.\n\n  METHOD get_file_separator.\n    ASSERT 1 = ''get_file_separator not supported''.\n  ENDMETHOD.\n\n  METHOD execute.\n    ASSERT 1 = ''execute not supported''.\n  ENDMETHOD.\n\n  METHOD directory_browse.\n    ASSERT 1 = ''directory_browse not supported''.\n  ENDMETHOD.\n\n  METHOD gui_upload.\n    ASSERT 1 = ''gui_upload not supported''.\n  ENDMETHOD.\n\n  METHOD file_open_dialog.\n    ASSERT 1 = ''file_open_dialog not supported''.\n  ENDMETHOD.\n\n  METHOD file_save_dialog.\n    ASSERT 1 = ''file_save_dialog not supported''.\n  ENDMETHOD.\n\n  METHOD get_platform.\n    platform = platform_windowsxp.\n  ENDMETHOD.\n\n  METHOD clipboard_export.\n    ASSERT 1 = ''clipboard_export not supported''.\n  ENDMETHOD.\n\n  METHOD get_system_directory.\n    ASSERT 1 = ''get_system_directory not supported''.\n  ENDMETHOD.\n\n  METHOD get_gui_version.\n    ASSERT 1 = ''get_gui_verison not supported''.\n  ENDMETHOD.\nENDCLASS.\n');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_PROGRESS_INDICATOR                   ', 'CLASS cl_progress_indicator DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS progress_indicate\n      IMPORTING\n        i_text               TYPE any OPTIONAL\n        i_processed          TYPE sy-tabix OPTIONAL\n        i_total              TYPE sy-tabix OPTIONAL\n        i_output_immediately TYPE abap_bool OPTIONAL\n      EXPORTING\n        e_progress_sent      TYPE abap_bool.\nENDCLASS.\n\nCLASS cl_progress_indicator IMPLEMENTATION.\n  METHOD progress_indicate.\n* do nothing, gui is not supported, but background logic might indicatoe progress\n    RETURN.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_AGGREGATIONS                    ', 'CLASS cl_salv_aggregations DEFINITION PUBLIC.\n  PUBLIC SECTION.\n\nENDCLASS.\n\nCLASS cl_salv_aggregations IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_COLUMN                          ', 'CLASS cl_salv_column DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    METHODS set_technical IMPORTING value TYPE abap_bool DEFAULT abap_true.\n    METHODS set_short_text IMPORTING value TYPE string.\n    METHODS set_medium_text IMPORTING value TYPE string.\n    METHODS set_long_text IMPORTING value TYPE string.\nENDCLASS.\n\nCLASS cl_salv_column IMPLEMENTATION.\n  METHOD set_technical.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_short_text.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_medium_text.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_long_text.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_COLUMNS_TABLE                   ', 'CLASS cl_salv_columns_table DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    METHODS set_cell_type_column\n      IMPORTING value TYPE string.\n    METHODS set_optimize\n      IMPORTING value TYPE abap_bool DEFAULT abap_true.\n    METHODS set_color_column\n      IMPORTING value TYPE string.\n    METHODS get_column\n      IMPORTING columnname TYPE string\n      RETURNING VALUE(value) TYPE REF TO cl_salv_column.\n    METHODS get\n      RETURNING VALUE(value) TYPE string.\nENDCLASS.\n\nCLASS cl_salv_columns_table IMPLEMENTATION.\n  METHOD get_column.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_cell_type_column.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_optimize.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_color_column.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_EVENTS_TABLE                    ', 'CLASS cl_salv_events_table DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    EVENTS double_click\n      EXPORTING\n        VALUE(row)    TYPE i\n        VALUE(column) TYPE string.\n\n    EVENTS added_function\n      EXPORTING\n        VALUE(e_salv_function) TYPE string OPTIONAL.\n\n    EVENTS link_click\n      EXPORTING\n        VALUE(row) TYPE i\n        VALUE(column) TYPE string.\n\nENDCLASS.\n\nCLASS cl_salv_events_table IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_FILTERS                         ', 'CLASS cl_salv_filters DEFINITION PUBLIC.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cl_salv_filters IMPLEMENTATION.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_FUNCTIONS_LIST                  ', 'CLASS cl_salv_functions_list DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    METHODS set_all IMPORTING flag TYPE abap_bool OPTIONAL.\n    METHODS get_functions RETURNING VALUE(sdf) TYPE string.\nENDCLASS.\n\nCLASS cl_salv_functions_list IMPLEMENTATION.\n  METHOD set_all.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_functions.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SALV_TABLE                           ', 'CLASS cl_salv_table DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS c_functions_all TYPE i VALUE 1.\n    TYPES ty_rows TYPE STANDARD TABLE OF i WITH DEFAULT KEY.\n\n    CLASS-METHODS factory\n      IMPORTING\n        r_container TYPE any OPTIONAL\n      EXPORTING\n        r_salv_table TYPE any\n      CHANGING\n        t_table TYPE any.\n    METHODS get_selections RETURNING VALUE(val) TYPE REF TO cl_salv_table.\n    METHODS set_selected_rows IMPORTING val TYPE any.\n    METHODS set_selection_mode IMPORTING val TYPE i.\n    METHODS get_selected_rows RETURNING VALUE(rows) TYPE ty_rows.\n    METHODS close_screen.\n    METHODS refresh.\n    METHODS display.\n    METHODS is_offline RETURNING VALUE(value) TYPE abap_bool.\n    METHODS get_metadata.\n    METHODS set_screen_status\n      IMPORTING\n        pfstatus      TYPE any\n        set_functions TYPE any OPTIONAL\n        report        TYPE any.\n    METHODS set_screen_popup\n      IMPORTING\n        start_column TYPE i\n        end_column   TYPE i\n        start_line   TYPE i\n        end_line     TYPE i.\n    METHODS get_event\n      RETURNING VALUE(val) TYPE REF TO cl_salv_events_table.\n    METHODS get_display_settings\n      RETURNING VALUE(val) TYPE REF TO cl_salv_table.\n    METHODS set_striped_pattern IMPORTING val TYPE any.\n    METHODS set_list_header IMPORTING val TYPE any.\n    METHODS set_top_of_list IMPORTING val TYPE any.\n    METHODS get_columns RETURNING VALUE(val) TYPE REF TO cl_salv_columns_table.\n    METHODS get_functions RETURNING VALUE(val) TYPE REF TO cl_salv_functions_list.\n    METHODS get_aggregations\n      RETURNING\n        VALUE(value) TYPE REF TO cl_salv_aggregations.\n    METHODS get_filters\n      RETURNING\n        VALUE(foo) TYPE REF TO cl_salv_filters.\nENDCLASS.\n\nCLASS cl_salv_table IMPLEMENTATION.\n\n  METHOD set_selected_rows.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_filters.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_aggregations.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_functions.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_selected_rows.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_metadata.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_selection_mode.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_striped_pattern.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_list_header.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD factory.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD is_offline.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_selections.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD close_screen.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD refresh.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD display.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD set_screen_status.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\n  METHOD set_screen_popup.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\n  METHOD get_event.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\n  METHOD get_display_settings.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\n  METHOD set_top_of_list.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\n  METHOD get_columns.\n    ASSERT 1 = ''TODO''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_ACCESS_ERROR                    ', 'CLASS cx_salv_access_error DEFINITION PUBLIC INHERITING FROM cx_salv_static_check.\n\nENDCLASS.\n\nCLASS cx_salv_access_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_DATA_ERROR                      ', 'CLASS cx_salv_data_error DEFINITION PUBLIC INHERITING FROM cx_salv_static_check.\n\nENDCLASS.\n\nCLASS cx_salv_data_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_ERROR                           ', 'CLASS cx_salv_error DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_salv_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_MSG                             ', 'CLASS cx_salv_msg DEFINITION PUBLIC INHERITING FROM cx_salv_error.\n\nENDCLASS.\n\nCLASS cx_salv_msg IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_NOT_FOUND                       ', 'CLASS cx_salv_not_found DEFINITION PUBLIC INHERITING FROM cx_salv_access_error.\n\nENDCLASS.\n\nCLASS cx_salv_not_found IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SALV_STATIC_CHECK                    ', 'CLASS cx_salv_static_check DEFINITION PUBLIC INHERITING FROM cx_salv_error.\n\nENDCLASS.\n\nCLASS cx_salv_static_check IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SALV_C_BOOL_SAP                      ', 'INTERFACE if_salv_c_bool_sap PUBLIC.\n  CONSTANTS true_ TYPE abap_bool VALUE abap_true.\n  CONSTANTS false_ TYPE abap_bool VALUE abap_false.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SALV_C_SELECTION_MODE                ', 'INTERFACE if_salv_c_selection_mode PUBLIC.\n  CONSTANTS cell       TYPE i VALUE 1.\n  CONSTANTS multiple   TYPE i VALUE 2.\n  CONSTANTS none       TYPE i VALUE 3.\n  CONSTANTS row_column TYPE i VALUE 4.\n  CONSTANTS single     TYPE i VALUE 5.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_HTTP_CLIENT                          ', 'CLASS cl_http_client DEFINITION PUBLIC CREATE PRIVATE.\n  PUBLIC SECTION.\n    INTERFACES if_http_client.\n\n    CLASS-METHODS create_by_url\n      IMPORTING\n        url           TYPE string\n        ssl_id        TYPE ssfapplssl OPTIONAL\n        proxy_host    TYPE string OPTIONAL\n        proxy_service TYPE string OPTIONAL\n      EXPORTING\n        VALUE(client) TYPE REF TO if_http_client.\n* todo, add classic exceptions\n\n    CLASS-METHODS create_by_destination\n      IMPORTING\n        destination   TYPE string\n      EXPORTING\n        VALUE(client) TYPE REF TO if_http_client.\n* todo, add classic exceptions\n\n    METHODS constructor\n      IMPORTING\n        url TYPE string.\n\n  PRIVATE SECTION.\n    DATA mv_host TYPE string.\n\nENDCLASS.\n\nCLASS cl_http_client IMPLEMENTATION.\n\n  METHOD constructor.\n* SSL_ID and proxies are currently ignored\n\n    DATA lv_uri TYPE string.\n    DATA lv_query TYPE string.\n\n    CREATE OBJECT if_http_client~response TYPE cl_http_entity.\n\n    FIND REGEX ''\\\\w(\\\\/[\\\\w\\\\d\\\\.\\\\-\\\\/]+)'' IN url SUBMATCHES lv_uri.\n    mv_host = url.\n*    WRITE ''@KERNEL console.dir(this.mv_host.get());''.\n*    WRITE ''@KERNEL console.dir(lv_uri.get());''.\n    REPLACE FIRST OCCURRENCE OF lv_uri IN mv_host WITH ''''.\n\n    CREATE OBJECT if_http_client~request TYPE cl_http_entity.\n    if_http_client~request->set_header_field(\n      name = ''~request_uri''\n      value = lv_uri ).\n\n    FIND REGEX ''\\\\?(.*)'' IN url SUBMATCHES lv_query.\n    IF sy-subrc = 0.\n      cl_http_utility=>set_query(\n        request = if_http_client~request\n        query   = lv_query ).\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD create_by_url.\n    CREATE OBJECT client TYPE cl_http_client\n      EXPORTING\n        url = url.\n    sy-subrc = 0. \" todo\n  ENDMETHOD.\n\n  METHOD if_http_client~authenticate.\n    DATA lv_base64 TYPE string.\n    lv_base64 = cl_http_utility=>encode_base64( |{ username }:{ password }| ).\n    if_http_client~request->set_header_field(\n      name = ''authorization''\n      value = |Basic { lv_base64 }| ).\n  ENDMETHOD.\n\n  METHOD if_http_client~close.\n* todo\n    RETURN.\n  ENDMETHOD.\n\n  METHOD create_by_destination.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_client~send.\n    DATA lv_method        TYPE string.\n    DATA lv_url           TYPE string.\n    DATA lv_body          TYPE string.\n    DATA lv_name          TYPE string.\n    DATA lv_value         TYPE string.\n    DATA lv_content_type  TYPE string.\n    DATA lv_xstr          TYPE xstring.\n    DATA lt_form_fields   TYPE tihttpnvp.\n    DATA lt_header_fields TYPE tihttpnvp.\n    DATA ls_field         LIKE LINE OF lt_header_fields.\n\n    lv_method = if_http_client~request->get_method( ).\n    IF lv_method IS INITIAL.\n      lv_method = ''GET''.\n    ENDIF.\n\n* default user-agent if not set\n    IF if_http_client~request->get_header_field( ''user-agent'' ) IS INITIAL.\n      if_http_client~request->set_header_field(\n        name  = ''user-agent''\n        value = ''open-abap-http'' ).\n    ENDIF.\n\n* building URL\n    lv_url = if_http_client~request->get_header_field( ''~request_uri'' ).\n    REPLACE FIRST OCCURRENCE OF mv_host IN lv_url WITH ''''.\n    lv_url = mv_host && lv_url.\n    if_http_client~request->get_form_fields( CHANGING fields = lt_form_fields ).\n    IF lines( lt_form_fields ) > 0.\n      CASE lv_method.\n        WHEN ''GET''.\n          lv_url = lv_url && ''?'' && cl_http_utility=>fields_to_string( lt_form_fields ).\n        WHEN ''POST''.\n          if_http_client~request->set_cdata( cl_http_utility=>fields_to_string( lt_form_fields ) ).\n      ENDCASE.\n    ENDIF.\n*    WRITE ''@KERNEL console.dir(lv_url.get());''.\n\n* building headers\n    if_http_client~request->get_header_fields( CHANGING fields = lt_header_fields ).\n    WRITE ''@KERNEL let headers = {};''.\n    LOOP AT lt_header_fields INTO ls_field WHERE name <> ''~request_uri''.\n      WRITE ''@KERNEL headers[ls_field.get().name.get()] = ls_field.get().value.get();''.\n    ENDLOOP.\n\n    lv_content_type = if_http_client~request->get_content_type( ).\n    IF lv_content_type IS NOT INITIAL.\n      WRITE ''@KERNEL headers[\"content-type\"] = lv_content_type.get();''.\n    ENDIF.\n    WRITE ''@KERNEL headers[\"accept-encoding\"] = \"gzip\";''.\n\n*    WRITE ''@KERNEL console.dir(headers);''.\n\n    lv_body = if_http_client~request->get_cdata( ).\n*    WRITE ''@KERNEL console.dir(lv_body);''.\n    IF strlen( lv_body ) > 0.\n      WRITE ''@KERNEL headers[\"content-length\"] = lv_body.get().length;''.\n    ENDIF.\n\n    WRITE ''@KERNEL const https = await import(\"https\");''.\n    WRITE ''@KERNEL const http = await import(\"http\");''.\n    WRITE ''@KERNEL function postData(url, options, requestBody) {''.\n    WRITE ''@KERNEL   return new Promise((resolve, reject) => {''.\n    WRITE ''@KERNEL     const prot = url.startsWith(\"http://\") ? http : https;''.\n    WRITE ''@KERNEL     const req = prot.request(url, options,''.\n    WRITE ''@KERNEL       (res) => {''.\n    WRITE ''@KERNEL         let chunks = [];''.\n    WRITE ''@KERNEL         res.on(\"data\", (chunk) => {chunks.push(chunk);});''.\n    WRITE ''@KERNEL         res.on(\"error\", reject);''.\n    WRITE ''@KERNEL         res.on(\"end\", () => {''.\n*    WRITE ''@KERNEL           console.dir(res.statusCode + \" \" + JSON.stringify(res.headers));''.\n*    WRITE ''@KERNEL           if (res.statusCode >= 200 && res.statusCode <= 299) {''.\n    WRITE ''@KERNEL             resolve({statusCode: res.statusCode, headers: res.headers, body: Buffer.concat(chunks)});''.\n*    WRITE ''@KERNEL           } else {''.\n*    WRITE ''@KERNEL             reject(\"Request failed. status: \" + res.statusCode + \", body: \" + Buffer.concat(chunks).toString());''.\n*    WRITE ''@KERNEL           }''.\n    WRITE ''@KERNEL         });''.\n    WRITE ''@KERNEL       });''.\n    WRITE ''@KERNEL     req.on(\"error\", reject);''.\n    WRITE ''@KERNEL     req.write(requestBody, \"binary\");''.\n    WRITE ''@KERNEL     req.end();''.\n    WRITE ''@KERNEL   });''.\n    WRITE ''@KERNEL }''.\n\n    WRITE ''@KERNEL const prot = lv_url.get().startsWith(\"http://\") ? http : https;''.\n    WRITE ''@KERNEL if (this.agent === undefined) {this.agent = new prot.Agent({keepAlive: true, maxSockets: 1});}''.\n    WRITE ''@KERNEL let response = await postData(lv_url.get(), {method: lv_method.get(), headers: headers, agent: this.agent}, lv_body.get());''.\n\n    \" WRITE ''@KERNEL console.dir(response);''.\n    \" WRITE ''@KERNEL console.dir(response.headers);''.\n\n    WRITE ''@KERNEL for (const h in response.headers) {''.\n    WRITE ''@KERNEL   lv_name.set(h);''.\n    WRITE ''@KERNEL   if (Array.isArray(response.headers[h])) continue;''.\n    WRITE ''@KERNEL   lv_value.set(response.headers[h]);''.\n    if_http_client~response->set_header_field(\n      name  = lv_name\n      value = lv_value ).\n    WRITE ''@KERNEL }''.\n\n\n    WRITE ''@KERNEL this.if_http_client$response.get().mv_content_type.set(response.headers[\"content-type\"] || \"\");''.\n    WRITE ''@KERNEL this.if_http_client$response.get().mv_status.set(response.statusCode);''.\n    WRITE ''@KERNEL this.if_http_client$response.get().mv_data.set(response.body.toString(\"hex\").toUpperCase());''.\n*    WRITE ''@KERNEL console.dir(this.if_http_client$response.get().mv_data);''.\n\n    lv_value = if_http_client~response->get_header_field( ''content-encoding'' ).\n    IF lv_value = ''gzip''.\n      cl_abap_gzip=>decompress_binary_with_header(\n        EXPORTING\n          gzip_in = if_http_client~response->get_data( )\n        IMPORTING\n          raw_out = lv_xstr ).\n      if_http_client~response->set_data( lv_xstr ).\n    ENDIF.\n\n* workaround for classic exceptions, this should work sometime in the transpiler instead\n    sy-subrc = 0.\n\n  ENDMETHOD.\n\n  METHOD if_http_client~receive.\n* handled in send()\n\n* workaround for classic exceptions, this should work sometime in the transpiler instead\n    sy-subrc = 0.\n\n  ENDMETHOD.\n\n  METHOD if_http_client~get_last_error.\n    if_http_client~response->get_status( IMPORTING code = code ).\n    message = ''todo_open_abap''. \" get from one of the response headers?\n  ENDMETHOD.\n\n  METHOD if_http_client~send_sap_logon_ticket.\n    ASSERT 2 = ''not supported''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_HTTP_ENTITY                          ', 'CLASS cl_http_entity DEFINITION PUBLIC CREATE PRIVATE.\n  PUBLIC SECTION.\n    INTERFACES if_http_response.\n    INTERFACES if_http_request.\n  PRIVATE SECTION.\n    DATA mv_status       TYPE i.\n    DATA mv_reason       TYPE string.\n    DATA mv_content_type TYPE string.\n    DATA mv_method       TYPE string.\n    DATA mv_data         TYPE xstring.\n    DATA mt_headers      TYPE tihttpnvp.\n    DATA mt_form_fields  TYPE tihttpnvp.\nENDCLASS.\n\nCLASS cl_http_entity IMPLEMENTATION.\n\n  METHOD if_http_response~server_cache_expire_rel.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~server_cache_expire_default.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~server_cache_expire_abs.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~server_cache_browser_dependent.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~get_raw_message.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~copy.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_user_agent.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_uri_parameter.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_raw_message.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_form_data.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_authorization.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~copy.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_request~set_authorization.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~add_multipart.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_cookie_field.\n* todo\n    CLEAR field_value.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_compression.\n* todo\n  ENDMETHOD.\n\n  METHOD if_http_entity~append_cdata.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~append_cdata2.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~add_cookie_field.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~append_data.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~to_xstring.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_cookie_secure.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_cookies.\n* todo\n    CLEAR cookies.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_form_field.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_form_field_secure.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_cookie.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_data_length.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~from_xstring.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_form_field_cs.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_last_error.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_header_field.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_header_field_secure.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~delete_cookie.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_header_fields.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~suppress_content_type.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_formfield_encoding.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_cookie.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_version.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_serialized_message_length.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_header_field.\n    DATA ls_header LIKE LINE OF mt_headers.\n    READ TABLE mt_headers WITH KEY name = to_lower( name ) INTO ls_header.\n    IF sy-subrc = 0.\n      value = ls_header-value.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_header_fields.\n    fields = mt_headers.\n  ENDMETHOD.\n\n  METHOD if_http_response~get_status.\n    code = mv_status.\n    reason = mv_reason.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_cdata.\n    cl_abap_conv_in_ce=>create( encoding = ''UTF-8'' )->convert(\n      EXPORTING input = mv_data\n      IMPORTING data = data ).\n  ENDMETHOD.\n\n  METHOD if_http_response~set_status.\n    mv_status = code.\n    mv_reason = reason.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_cdata.\n    cl_abap_conv_out_ce=>create( encoding = ''UTF-8'' )->convert(\n      EXPORTING data = data\n      IMPORTING buffer = mv_data ).\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_content_type.\n    val = if_http_entity~get_header_field( ''content-type'' ).\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_content_type.\n    if_http_entity~set_header_field(\n      name  = ''content-type''\n      value = content_type ).\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_data.\n    data = mv_data.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_data.\n    mv_data = data.\n  ENDMETHOD.\n\n  METHOD if_http_response~delete_cookie_at_client.\n    ASSERT 2 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_response~redirect.\n    ASSERT 2 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~num_multiparts.\n* todo\n    num = 0.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_multipart.\n    ASSERT 2 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_form_fields_cs.\n    fields = mt_form_fields.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_form_fields.\n    mt_form_fields = fields.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_form_fields.\n    DATA ls_field LIKE LINE OF mt_form_fields.\n    LOOP AT mt_form_fields INTO ls_field.\n      TRANSLATE ls_field-name TO LOWER CASE.\n      APPEND ls_field TO fields.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD if_http_entity~get_form_field.\n    DATA ls_field LIKE LINE OF mt_form_fields.\n    READ TABLE mt_form_fields INTO ls_field WITH KEY name = to_lower( name ).\n    IF sy-subrc = 0.\n      value = ls_field-value.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_header_field.\n    DATA ls_header LIKE LINE OF mt_headers.\n    FIELD-SYMBOLS <ls_header> LIKE LINE OF mt_headers.\n    READ TABLE mt_headers WITH KEY name = to_lower( name ) ASSIGNING <ls_header>.\n    IF sy-subrc = 0.\n      <ls_header>-value = value.\n    ELSE.\n      ls_header-name = to_lower( name ).\n      ls_header-value = value.\n      APPEND ls_header TO mt_headers.\n    ENDIF.\n    IF name = ''~request_method''.\n      if_http_request~set_method( value ).\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD if_http_request~set_method.\n    mv_method = method.\n  ENDMETHOD.\n\n  METHOD if_http_request~get_method.\n    meth = mv_method.\n  ENDMETHOD.\n\n  METHOD if_http_request~set_version.\n    ASSERT 2 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_entity~set_form_field.\n    DATA ls_field LIKE LINE OF mt_form_fields.\n    ls_field-name = name.\n    ls_field-value = value.\n    APPEND ls_field TO mt_form_fields.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_HTTP_SERVER                          ', 'CLASS cl_http_server DEFINITION PUBLIC CREATE PRIVATE.\n  PUBLIC SECTION.\n    CLASS-METHODS get_location\n      IMPORTING\n        application TYPE csequence OPTIONAL\n      EXPORTING\n        port         TYPE string\n        out_protocol TYPE string\n        host         TYPE string.\nENDCLASS.\n\nCLASS cl_http_server IMPLEMENTATION.\n  METHOD get_location.\n    host = ''open-abap.org''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_HTTP_UTILITY                         ', 'CLASS cl_http_utility DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_http_utility.\n\n    ALIASES encode_base64 FOR if_http_utility~encode_base64.\n    ALIASES escape_url FOR if_http_utility~escape_url.\n    ALIASES get_last_error FOR if_http_utility~get_last_error.\n    ALIASES string_to_fields FOR if_http_utility~string_to_fields.\n    ALIASES unescape_url FOR if_http_utility~unescape_url.\n    ALIASES fields_to_string FOR if_http_utility~fields_to_string.\n\n    CLASS-METHODS decode_x_base64\n      IMPORTING\n        encoded TYPE string\n      RETURNING\n        VALUE(decoded) TYPE xstring.\n\n    CLASS-METHODS encode_x_base64\n      IMPORTING\n        data           TYPE xstring\n      RETURNING\n        VALUE(encoded) TYPE string.\n\n    CLASS-METHODS set_query\n      IMPORTING\n        request TYPE REF TO if_http_request\n        query   TYPE string.\n\n    CLASS-METHODS set_request_uri\n      IMPORTING\n        request TYPE REF TO if_http_request\n        uri     TYPE string.\n\n    CLASS-METHODS escape_xml_attr_value\n      IMPORTING\n        unescaped      TYPE csequence\n      RETURNING\n        VALUE(escaped) TYPE string.\n\n    CLASS-METHODS escape_html\n      IMPORTING\n        unescaped         TYPE string\n        keep_num_char_ref TYPE abap_bool DEFAULT abap_undefined\n      RETURNING\n        VALUE(escaped)    TYPE string.\n\n    CLASS-METHODS escape_javascript\n      IMPORTING\n        unescaped      TYPE string\n        inside_html    TYPE abap_bool DEFAULT abap_false\n      RETURNING\n        VALUE(escaped) TYPE string.\n\nENDCLASS.\n\nCLASS cl_http_utility IMPLEMENTATION.\n\n  METHOD set_request_uri.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD escape_html.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD escape_javascript.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD escape_xml_attr_value.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_utility~get_last_error.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_http_utility~string_to_fields.\n    DATA tab TYPE STANDARD TABLE OF string.\n    DATA str LIKE LINE OF tab.\n    DATA ls_field LIKE LINE OF fields.\n\n    SPLIT string AT ''&'' INTO TABLE tab.\n    LOOP AT tab INTO str.\n      SPLIT str AT ''='' INTO ls_field-name ls_field-value.\n      APPEND ls_field TO fields.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD set_query.\n    request->set_form_fields( string_to_fields( query ) ).\n  ENDMETHOD.\n\n  METHOD if_http_utility~fields_to_string.\n    DATA tab TYPE STANDARD TABLE OF string.\n    DATA str TYPE string.\n    DATA ls_field LIKE LINE OF fields.\n\n    LOOP AT fields INTO ls_field.\n      REPLACE ALL OCCURRENCES OF '':'' IN ls_field-value WITH ''%3a''.\n      REPLACE ALL OCCURRENCES OF ''/'' IN ls_field-value WITH ''%2f''.\n      str = ls_field-name && ''='' && ls_field-value.\n      APPEND str TO tab.\n    ENDLOOP.\n    string = concat_lines_of( table = tab sep = ''&'' ).\n  ENDMETHOD.\n\n  METHOD encode_x_base64.\n    WRITE ''@KERNEL let buffer = Buffer.from(data.get(), \"hex\");''.\n    WRITE ''@KERNEL encoded.set(buffer.toString(\"base64\"));''.\n  ENDMETHOD.\n\n  METHOD decode_x_base64.\n    WRITE ''@KERNEL let buffer = Buffer.from(encoded.get(), \"base64\");''.\n    WRITE ''@KERNEL decoded.set(buffer.toString(\"hex\").toUpperCase());''.\n  ENDMETHOD.\n\n  METHOD if_http_utility~unescape_url.\n    WRITE ''@KERNEL let foo = escaped.get();''.\n    WRITE ''@KERNEL unescaped.set(decodeURIComponent(foo));''.\n  ENDMETHOD.\n\n  METHOD if_http_utility~escape_url.\n    WRITE ''@KERNEL escaped.set(encodeURIComponent(unescaped.get()));''.\n  ENDMETHOD.\n\n  METHOD if_http_utility~encode_base64.\n    WRITE ''@KERNEL let buffer = Buffer.from(unencoded.get());''.\n    WRITE ''@KERNEL encoded.set(buffer.toString(\"base64\"));''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_WEB_HTTP_UTILITY                     ', 'CLASS cl_web_http_utility DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS unescape_url\n      IMPORTING\n        escaped TYPE string\n        options TYPE i OPTIONAL\n      RETURNING\n        VALUE(unescaped) TYPE string.\nENDCLASS.\n\nCLASS cl_web_http_utility IMPLEMENTATION.\n  METHOD unescape_url.\n    unescaped = cl_http_utility=>unescape_url(\n      escaped = escaped\n      options = options ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_CLIENT                          ', 'INTERFACE if_http_client PUBLIC.\n  DATA request TYPE REF TO if_http_request.\n  DATA response TYPE REF TO if_http_response.\n  DATA propertytype_logon_popup TYPE i.\n  DATA propertytype_accept_cookie TYPE i.\n\n  CONSTANTS co_disabled TYPE i VALUE 0.\n  CONSTANTS co_enabled TYPE i VALUE 1.\n\n  METHODS authenticate\n    IMPORTING\n      proxy_authentication TYPE abap_bool OPTIONAL\n      username             TYPE string\n      password             TYPE string.\n\n  METHODS close.\n  METHODS send\n    EXCEPTIONS\n      http_communication_failure\n      http_invalid_state\n      http_processing_failed\n      http_invalid_timeout.\n  METHODS receive\n    EXCEPTIONS\n      http_communication_failure\n      http_invalid_state\n      http_processing_failed.\n  METHODS send_sap_logon_ticket.\n\n  METHODS get_last_error\n    EXPORTING\n      code    TYPE i\n      message TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_ENTITY                          ', 'INTERFACE if_http_entity PUBLIC.\n\n  CONSTANTS co_request_method_get TYPE string VALUE ''GET''.\n  CONSTANTS co_request_method_post TYPE string VALUE ''POST''.\n  CONSTANTS co_body_before_query_string TYPE i VALUE 3.\n\n  METHODS set_cdata\n    IMPORTING\n      data   TYPE string\n      offset TYPE i OPTIONAL\n      length TYPE i OPTIONAL.\n\n  METHODS set_data\n    IMPORTING\n      data TYPE xstring.\n\n  METHODS get_header_field\n    IMPORTING\n      name TYPE string\n    RETURNING\n      VALUE(value) TYPE string.\n\n  METHODS set_header_field\n    IMPORTING\n      name  TYPE string\n      value TYPE string.\n\n  METHODS get_form_fields\n    CHANGING\n      fields TYPE tihttpnvp.\n\n  METHODS set_compression.\n\n  METHODS add_multipart\n    IMPORTING\n      suppress_content_length TYPE abap_bool DEFAULT abap_false\n    RETURNING\n      VALUE(entity) TYPE REF TO if_http_entity.\n\n  METHODS append_cdata IMPORTING data TYPE clike.\n\n  METHODS get_form_field IMPORTING name TYPE string RETURNING VALUE(value) TYPE string.\n\n  METHODS get_cdata RETURNING VALUE(data) TYPE string.\n\n  METHODS get_content_type\n    RETURNING VALUE(val) TYPE string.\n\n  METHODS get_serialized_message_length\n    EXPORTING\n      VALUE(body_length) TYPE i\n      VALUE(header_length) TYPE i.\n\n  METHODS set_content_type\n    IMPORTING\n      content_type TYPE string.\n\n  METHODS get_data\n    RETURNING\n      VALUE(data) TYPE xstring.\n\n  METHODS get_header_fields\n    CHANGING\n      fields TYPE tihttpnvp.\n\n  METHODS to_xstring\n    RETURNING\n      VALUE(data) TYPE xstring.\n\n  METHODS get_cookies\n    CHANGING\n      cookies TYPE any.\n\n  METHODS add_cookie_field\n    IMPORTING\n      cookie_name TYPE string\n      cookie_path TYPE string OPTIONAL\n      field_name  TYPE string\n      field_value TYPE string\n      base64      TYPE i DEFAULT 1.\n\n  METHODS append_cdata2\n    IMPORTING\n      data     TYPE string\n      encoding TYPE i OPTIONAL\n      offset   TYPE i OPTIONAL\n      length   TYPE i OPTIONAL.\n\n  METHODS append_data\n    IMPORTING\n      data   TYPE xstring\n      offset TYPE i OPTIONAL\n      length TYPE i OPTIONAL.\n\n  METHODS delete_cookie_secure\n    IMPORTING\n      name TYPE string\n      path TYPE string DEFAULT \\`\\`.\n\n  METHODS delete_form_field\n    IMPORTING\n      name TYPE string.\n\n  METHODS delete_form_field_secure\n    IMPORTING\n      name TYPE string.\n\n  METHODS from_xstring\n    IMPORTING\n      data TYPE xstring.\n\n  METHODS get_cookie\n    IMPORTING\n      name TYPE string\n      path TYPE string DEFAULT \\`\\`\n    EXPORTING\n      value   TYPE string\n      domain  TYPE string\n      expires TYPE string\n      secure  TYPE i.\n\n  METHODS get_cookie_field\n    IMPORTING\n      cookie_name TYPE string\n      cookie_path TYPE string OPTIONAL\n      field_name  TYPE string\n      base64      TYPE i DEFAULT 1\n    RETURNING\n      VALUE(field_value) TYPE string.\n\n  METHODS get_data_length\n    EXPORTING\n      VALUE(data_length) TYPE i.\n\n  METHODS get_form_fields_cs\n    IMPORTING\n      formfield_encoding TYPE i OPTIONAL\n      search_option      TYPE i DEFAULT co_body_before_query_string\n    CHANGING\n      fields             TYPE tihttpnvp.\n\n  METHODS get_form_field_cs\n    IMPORTING\n      name               TYPE string\n      formfield_encoding TYPE i OPTIONAL\n      search_option      TYPE i DEFAULT co_body_before_query_string\n    RETURNING\n      VALUE(value)       TYPE string.\n\n  METHODS get_last_error\n    RETURNING\n      VALUE(rc) TYPE i.\n\n  METHODS get_multipart\n    IMPORTING\n      index TYPE i\n    RETURNING\n      VALUE(entity) TYPE REF TO if_http_entity.\n\n  METHODS get_version\n    RETURNING\n      VALUE(version) TYPE i.\n\n  METHODS num_multiparts\n    RETURNING\n      VALUE(num) TYPE i.\n\n  METHODS set_cookie\n    IMPORTING\n      name    TYPE string\n      path    TYPE string OPTIONAL\n      value   TYPE string\n      domain  TYPE string OPTIONAL\n      expires TYPE string OPTIONAL\n      secure  TYPE i OPTIONAL.\n\n  METHODS set_formfield_encoding\n    IMPORTING\n      formfield_encoding TYPE i.\n\n  METHODS set_form_field\n    IMPORTING\n      name  TYPE string\n      value TYPE string.\n\n  METHODS set_form_fields\n    IMPORTING\n      fields     TYPE tihttpnvp\n      multivalue TYPE int4 OPTIONAL.\n\n  METHODS set_header_fields\n    IMPORTING\n      fields TYPE tihttpnvp.\n\n  METHODS suppress_content_type\n    IMPORTING\n      suppress TYPE abap_bool DEFAULT abap_true.\n\n  METHODS delete_cookie\n    IMPORTING\n      name TYPE string\n      path TYPE string OPTIONAL.\n\n  METHODS delete_header_field\n    IMPORTING\n      name TYPE string.\n\n  METHODS delete_header_field_secure\n    IMPORTING\n      name TYPE string.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_EXTENSION                       ', 'INTERFACE if_http_extension PUBLIC.\n\n  DATA flow_rc TYPE i.\n\n  CONSTANTS co_flow_ok             TYPE i VALUE 0.\n  CONSTANTS co_flow_ok_others_mand TYPE i VALUE 2.\n\n  METHODS handle_request IMPORTING server TYPE REF TO if_http_server.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_REQUEST                         ', 'INTERFACE if_http_request PUBLIC.\n\n  CONSTANTS:\n    co_protocol_version_1_1 TYPE string VALUE ''VER11'',\n    co_protocol_version_1_0 TYPE string VALUE ''VER10'',\n    co_request_method_get TYPE string VALUE ''GET'',\n    co_request_method_post TYPE string VALUE ''POST''.\n\n  INTERFACES if_http_entity.\n\n  ALIASES add_multipart FOR if_http_entity~add_multipart.\n  ALIASES get_cdata FOR if_http_entity~get_cdata.\n  ALIASES get_content_type FOR if_http_entity~get_content_type.\n  ALIASES get_cookie_field FOR if_http_entity~get_cookie_field.\n  ALIASES get_data FOR if_http_entity~get_data.\n  ALIASES get_form_field FOR if_http_entity~get_form_field.\n  ALIASES get_form_fields FOR if_http_entity~get_form_fields.\n  ALIASES get_form_fields_cs FOR if_http_entity~get_form_fields_cs.\n  ALIASES get_header_field FOR if_http_entity~get_header_field.\n  ALIASES get_header_fields FOR if_http_entity~get_header_fields.\n  ALIASES get_multipart FOR if_http_entity~get_multipart.\n  ALIASES num_multiparts FOR if_http_entity~num_multiparts.\n  ALIASES set_cdata FOR if_http_entity~set_cdata.\n  ALIASES set_content_type FOR if_http_entity~set_content_type.\n  ALIASES set_data FOR if_http_entity~set_data.\n  ALIASES set_form_field FOR if_http_entity~set_form_field.\n  ALIASES set_form_fields FOR if_http_entity~set_form_fields.\n  ALIASES set_header_field FOR if_http_entity~set_header_field.\n  ALIASES set_header_fields FOR if_http_entity~set_header_fields.\n  ALIASES set_compression FOR if_http_entity~set_compression.\n  ALIASES get_cookies FOR if_http_entity~get_cookies.\n\n  METHODS set_method\n    IMPORTING\n      method TYPE string.\n\n  METHODS get_method\n    RETURNING\n      VALUE(meth) TYPE string.\n\n  METHODS set_version\n    IMPORTING\n      version TYPE string.\n\n  METHODS set_authorization\n    IMPORTING\n      auth_type TYPE i DEFAULT 1\n      username  TYPE string\n      password  TYPE string.\n\n  METHODS copy\n    RETURNING\n      VALUE(request) TYPE REF TO if_http_request.\n\n  METHODS get_authorization\n    EXPORTING\n      auth_type TYPE i\n      username  TYPE string\n      password  TYPE string.\n\n  METHODS get_form_data\n    IMPORTING\n      name TYPE string\n    CHANGING\n      data TYPE data.\n\n  METHODS get_raw_message\n    RETURNING\n      VALUE(data) TYPE xstring.\n\n  METHODS get_uri_parameter\n    IMPORTING\n      name         TYPE string\n    RETURNING\n      VALUE(value) TYPE string.\n\n  METHODS get_user_agent\n    EXPORTING\n      user_agent_type    TYPE i\n      user_agent_version TYPE i.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_RESPONSE                        ', 'INTERFACE if_http_response PUBLIC.\n\n  INTERFACES if_http_entity.\n\n  ALIASES get_header_field FOR if_http_entity~get_header_field.\n  ALIASES get_cdata FOR if_http_entity~get_cdata.\n  ALIASES get_content_type FOR if_http_entity~get_content_type.\n  ALIASES set_content_type FOR if_http_entity~set_content_type.\n  ALIASES get_data FOR if_http_entity~get_data.\n  ALIASES set_data FOR if_http_entity~set_data.\n  ALIASES get_header_fields FOR if_http_entity~get_header_fields.\n  ALIASES set_header_field FOR if_http_entity~set_header_field.\n  ALIASES set_cdata FOR if_http_entity~set_cdata.\n  ALIASES append_cdata FOR if_http_entity~append_cdata.\n  ALIASES set_cookie FOR if_http_entity~set_cookie.\n  ALIASES delete_header_field FOR if_http_entity~delete_header_field.\n  ALIASES set_compression FOR if_http_entity~set_compression.\n\n  METHODS get_status\n    EXPORTING\n      code   TYPE i\n      reason TYPE string.\n\n  METHODS set_status\n    IMPORTING\n      code   TYPE i\n      reason TYPE string.\n\n  METHODS delete_cookie_at_client\n    IMPORTING\n      name   TYPE string\n      path   TYPE string OPTIONAL\n      domain TYPE string OPTIONAL.\n\n  METHODS redirect\n    IMPORTING\n      url                TYPE string\n      permanently        TYPE i OPTIONAL\n      protocol_dependent TYPE i OPTIONAL.\n\n  METHODS copy\n    RETURNING\n      VALUE(response) TYPE REF TO if_http_response.\n\n  METHODS get_raw_message\n    RETURNING\n      VALUE(data) TYPE xstring.\n\n  METHODS server_cache_browser_dependent\n    IMPORTING\n      dependent TYPE boolean DEFAULT abap_true.\n\n  METHODS server_cache_expire_abs\n    IMPORTING\n      expires_abs_date  TYPE d OPTIONAL\n      expires_abs_time  TYPE t OPTIONAL\n      etag              TYPE char32 OPTIONAL\n      browser_dependent TYPE boolean DEFAULT abap_false\n      no_ufo_cache      TYPE boolean DEFAULT abap_false.\n\n  METHODS server_cache_expire_default\n    IMPORTING\n      etag              TYPE char32 OPTIONAL\n      browser_dependent TYPE boolean DEFAULT abap_false\n      no_ufo_cache      TYPE boolean DEFAULT abap_false.\n\n  METHODS server_cache_expire_rel\n    IMPORTING\n      expires_rel       TYPE i\n      etag              TYPE char32 OPTIONAL\n      browser_dependent TYPE boolean DEFAULT abap_false\n      no_ufo_cache      TYPE boolean DEFAULT abap_false.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_SERVER                          ', 'INTERFACE if_http_server PUBLIC.\n\n  DATA response TYPE REF TO if_http_response.\n  DATA request TYPE REF TO if_http_request.\n\n  CONSTANTS authmethod_service             TYPE i VALUE 4.\n  CONSTANTS co_compress_based_on_mime_type TYPE i VALUE 2.\n  CONSTANTS co_disabled                    TYPE i VALUE 0.\n  CONSTANTS co_enabled                     TYPE i VALUE 1.\n  CONSTANTS co_page_error_type             TYPE c LENGTH 1 VALUE ''1''.\n  CONSTANTS co_response_page_option        TYPE c LENGTH 1 VALUE '' ''.\n\n  CLASS-DATA session_id TYPE string READ-ONLY.\n  CLASS-DATA authentication_method TYPE i READ-ONLY.\n\n  METHODS logoff\n    IMPORTING\n      delete_mysapsso2_cookie TYPE abap_bool OPTIONAL\n      propagate_logoff        TYPE abap_bool OPTIONAL\n      redirect_url            TYPE string OPTIONAL.\n\n  METHODS set_session_stateful\n    IMPORTING\n      stateful TYPE i DEFAULT co_enabled\n      path     TYPE string OPTIONAL.\n\n  CLASS-METHODS append_field_url\n    IMPORTING\n      name  TYPE string\n      value TYPE string\n    CHANGING\n      url   TYPE string.\n\n  METHODS create_abs_url\n    IMPORTING\n      protocol    TYPE string OPTIONAL\n      post        TYPE string OPTIONAL\n      port        TYPE string OPTIONAL\n      path        TYPE string OPTIONAL\n      querystring TYPE string OPTIONAL\n    RETURNING\n      VALUE(url) TYPE string.\n\n  METHODS create_rel_url\n    IMPORTING\n      path        TYPE string OPTIONAL\n      querystring TYPE string OPTIONAL\n    RETURNING\n      VALUE(url)  TYPE string.\n\n  CLASS-METHODS decode_base64\n    IMPORTING\n      encoded        TYPE string\n    RETURNING\n      VALUE(decoded) TYPE string.\n\n  METHODS enable_foreign_session_access\n    IMPORTING\n      url_path              TYPE string\n      user_id               TYPE syuname OPTIONAL\n      one_time_access_token TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      session_access_token  TYPE string\n    EXCEPTIONS\n      url_path_is_not_supported\n      user_unknown\n      session_is_not_stateful\n      internal_error.\n\n  CLASS-METHODS encode_base64\n    IMPORTING\n      unencoded TYPE string\n    RETURNING\n      VALUE(encoded) TYPE string.\n\n  CLASS-METHODS escape_html\n    IMPORTING\n      unescaped TYPE string\n    RETURNING\n      VALUE(escaped) TYPE string.\n\n  CLASS-METHODS escape_url\n    IMPORTING\n      unescaped TYPE string\n    RETURNING\n      VALUE(escaped) TYPE string.\n\n  CLASS-METHODS get_extension_info\n    IMPORTING\n      extension_class TYPE string OPTIONAL\n    EXPORTING\n      urls TYPE string_table.\n\n  CLASS-METHODS get_extension_url\n    IMPORTING\n      extension_class TYPE string\n    EXPORTING\n      urls TYPE string_table.\n\n  METHODS get_last_error\n    RETURNING\n      VALUE(rc) TYPE i.\n\n  CLASS-METHODS get_location\n    IMPORTING\n      protocol            TYPE csequence OPTIONAL\n      application         TYPE csequence OPTIONAL\n      for_domain          TYPE csequence OPTIONAL\n      server              TYPE REF TO if_http_server OPTIONAL\n      use_ticket_protocol TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      host TYPE string\n      port TYPE string\n      out_protocol TYPE string\n      vh_switch TYPE abap_bool\n    RETURNING\n      VALUE(url_part) TYPE string.\n\n  CLASS-METHODS get_location_exception\n    IMPORTING\n      protocol            TYPE csequence OPTIONAL\n      application         TYPE csequence OPTIONAL\n      for_domain          TYPE csequence OPTIONAL\n      server              TYPE REF TO if_http_server OPTIONAL\n      use_ticket_protocol TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      host                TYPE string\n      port                TYPE string\n      out_protocol        TYPE string\n      vh_switch           TYPE abap_bool\n    RETURNING\n      VALUE(url_part)     TYPE string.\n\n  METHODS get_xsrf_token\n    EXPORTING\n      token TYPE string\n    EXCEPTIONS\n      internal_error\n      called_by_public_service.\n\n  METHODS send_page.\n\n  METHODS set_compression\n    IMPORTING\n      options TYPE i DEFAULT co_compress_based_on_mime_type\n    EXCEPTIONS\n      compression_not_possible.\n\n  METHODS set_page\n    IMPORTING\n      response_page_type           TYPE char1 DEFAULT co_page_error_type\n      response_option              TYPE char1 DEFAULT co_response_page_option\n      response_option_page         TYPE any OPTIONAL\n      response_option_redirect_url TYPE any OPTIONAL\n    EXCEPTIONS\n      invalid_parameter\n      document_not_found.\n\n  METHODS set_session_stateful_via_url\n    IMPORTING\n      stateful    TYPE i DEFAULT co_enabled\n    CHANGING\n      rewrite_url TYPE string OPTIONAL.\n\n  CLASS-METHODS unescape_url\n    IMPORTING\n      escaped          TYPE string\n    RETURNING\n      VALUE(unescaped) TYPE string.\n\n  METHODS validate_xsrf_token\n    IMPORTING\n      token      TYPE string OPTIONAL\n    EXPORTING\n      successful TYPE abap_bool\n    EXCEPTIONS\n      token_not_found\n      cookie_not_found\n      internal_error\n      called_by_public_service.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_HTTP_UTILITY                         ', 'INTERFACE if_http_utility PUBLIC.\n\n  CLASS-METHODS string_to_fields\n    IMPORTING\n      string        TYPE string\n    RETURNING\n      VALUE(fields) TYPE tihttpnvp.\n\n  CLASS-METHODS get_last_error\n    RETURNING\n      VALUE(rc) TYPE i.\n\n  CLASS-METHODS unescape_url\n    IMPORTING\n      escaped          TYPE string\n      options          TYPE i OPTIONAL\n    RETURNING\n      VALUE(unescaped) TYPE string.\n\n  CLASS-METHODS escape_url\n    IMPORTING\n      unescaped      TYPE string\n    RETURNING\n      VALUE(escaped) TYPE string.\n\n  CLASS-METHODS encode_base64\n    IMPORTING\n      unencoded TYPE string\n    RETURNING\n      VALUE(encoded) TYPE string.\n\n  CLASS-METHODS fields_to_string\n    IMPORTING\n      fields TYPE tihttpnvp\n    RETURNING\n      VALUE(string) TYPE string.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SERIALIZABLE_OBJECT                  ', 'INTERFACE if_serializable_object PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_IXML                                 ', 'CLASS cl_ixml DEFINITION PUBLIC CREATE PRIVATE.\n  PUBLIC SECTION.\n    INTERFACES if_ixml.\n    CLASS-METHODS\n      create\n        RETURNING\n          VALUE(xml) TYPE REF TO if_ixml.\nENDCLASS.\n\nCLASS cl_ixml IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT xml TYPE cl_ixml.\n  ENDMETHOD.\n\n  METHOD if_ixml~create_encoding.\n    CREATE OBJECT rval TYPE lcl_encoding.\n  ENDMETHOD.\n\n  METHOD if_ixml~create_document.\n    CREATE OBJECT doc TYPE lcl_document.\n  ENDMETHOD.\n\n  METHOD if_ixml~create_stream_factory.\n    CREATE OBJECT stream TYPE lcl_stream_factory.\n  ENDMETHOD.\n\n  METHOD if_ixml~create_renderer.\n    CREATE OBJECT renderer TYPE lcl_renderer\n      EXPORTING\n        ostream  = ostream\n        document = document.\n  ENDMETHOD.\n\n  METHOD if_ixml~create_parser.\n    CREATE OBJECT parser TYPE lcl_parser\n      EXPORTING\n        istream  = istream\n        document = document.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML                                 ', 'INTERFACE if_ixml PUBLIC.\n  METHODS create_document\n    RETURNING\n      VALUE(doc) TYPE REF TO if_ixml_document.\n  METHODS create_stream_factory\n    RETURNING\n      VALUE(stream) TYPE REF TO if_ixml_stream_factory.\n  METHODS create_renderer\n    IMPORTING\n      ostream  TYPE REF TO if_ixml_ostream\n      document TYPE REF TO if_ixml_document\n    RETURNING\n      VALUE(renderer) TYPE REF TO if_ixml_renderer.\n  METHODS create_parser\n    IMPORTING\n      stream_factory  TYPE REF TO if_ixml_stream_factory\n      istream  TYPE REF TO if_ixml_istream\n      document TYPE REF TO if_ixml_document\n    RETURNING\n      VALUE(parser) TYPE REF TO if_ixml_parser.\n  METHODS create_encoding\n    IMPORTING\n      byte_order    TYPE string\n      character_set TYPE string\n    RETURNING\n      VALUE(rval) TYPE REF TO if_ixml_encoding.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_ATTRIBUTE                       ', 'INTERFACE if_ixml_attribute PUBLIC.\n  INTERFACES if_ixml_node.\n  METHODS get_value RETURNING VALUE(val) TYPE string.\n  METHODS set_value IMPORTING value TYPE string.\n  METHODS get_name RETURNING VALUE(val) TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_DOCUMENT                        ', 'INTERFACE if_ixml_document PUBLIC.\n  INTERFACES if_ixml_node.\n\n  METHODS:\n    set_encoding\n      IMPORTING\n        encoding TYPE REF TO object,\n    set_standalone\n      IMPORTING\n        standalone TYPE abap_bool,\n    set_namespace_prefix\n      IMPORTING\n        prefix TYPE string,\n    append_child\n      IMPORTING\n        new_child TYPE REF TO if_ixml_node,\n    get_first_child\n      RETURNING\n        VALUE(child) TYPE REF TO if_ixml_node,\n    create_attribute_ns\n      IMPORTING\n        name TYPE string\n        prefix TYPE string OPTIONAL\n      RETURNING\n        VALUE(element) TYPE REF TO if_ixml_attribute,\n    create_element_ns\n      IMPORTING\n        name TYPE string\n        prefix TYPE string OPTIONAL\n      RETURNING\n        VALUE(element) TYPE REF TO if_ixml_element,\n    create_element\n      IMPORTING\n        name TYPE string\n      RETURNING\n        VALUE(element) TYPE REF TO if_ixml_element,\n    create_iterator_filtered\n      IMPORTING input TYPE any\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_iterator,\n    create_filter_and\n      IMPORTING\n        filter1 TYPE any\n        filter2 TYPE any\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_node_filter,\n    create_iterator\n      RETURNING VALUE(rval) TYPE REF TO if_ixml_node_iterator,\n    create_filter_node_type\n      IMPORTING typ TYPE string\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_filter,\n    create_simple_element_ns\n      IMPORTING\n        name       TYPE string\n        parent     TYPE REF TO if_ixml_node\n        prefix     TYPE string OPTIONAL\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_element,\n    create_filter_attribute\n      IMPORTING name TYPE string\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_filter,\n    create_simple_element\n      IMPORTING\n        name       TYPE string\n        parent     TYPE REF TO if_ixml_node\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_element,\n    find_from_name\n      IMPORTING\n        name TYPE string\n        namespace TYPE string OPTIONAL\n      RETURNING\n        VALUE(element) TYPE REF TO if_ixml_element,\n    find_from_name_ns\n      IMPORTING\n        depth TYPE i OPTIONAL\n        uri   TYPE string OPTIONAL\n        name  TYPE string\n      RETURNING\n        VALUE(element) TYPE REF TO if_ixml_element,\n    find_from_path\n      IMPORTING\n        path TYPE string\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_element,\n    get_elements_by_tag_name_ns\n      IMPORTING\n        name TYPE string\n        namespace TYPE string OPTIONAL\n        uri TYPE string OPTIONAL\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_collection,\n    get_elements_by_tag_name\n      IMPORTING\n        depth     TYPE i OPTIONAL\n        name      TYPE string\n        namespace TYPE string OPTIONAL\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_collection,\n    get_root RETURNING VALUE(node) TYPE REF TO if_ixml_node,\n    get_root_element RETURNING VALUE(root) TYPE REF TO if_ixml_element.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_ELEMENT                         ', 'INTERFACE if_ixml_element PUBLIC.\n  INTERFACES if_ixml_node.\n\n  METHODS:\n    remove_attribute_ns\n      IMPORTING foo TYPE string,\n    get_attributes\n      RETURNING VALUE(attr) TYPE REF TO if_ixml_named_node_map,\n    get_next\n      RETURNING VALUE(next) TYPE REF TO if_ixml_element,\n    get_name\n      RETURNING VALUE(name) TYPE string,\n    append_child\n      IMPORTING\n        new_child TYPE REF TO if_ixml_node\n      RETURNING\n        VALUE(rc) TYPE i,\n    clone\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node,\n    create_filter_node_type\n      IMPORTING name TYPE string\n      RETURNING VALUE(val) TYPE REF TO any,\n    create_iterator\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_iterator,\n    find_from_name_ns\n      IMPORTING\n        name      TYPE string\n        namespace TYPE string OPTIONAL\n        uri       TYPE string OPTIONAL\n        depth     TYPE i OPTIONAL\n      RETURNING VALUE(val) TYPE REF TO if_ixml_element,\n    find_from_name\n      IMPORTING\n        name      TYPE string\n        namespace TYPE string OPTIONAL\n        depth     TYPE i OPTIONAL\n      RETURNING VALUE(val) TYPE REF TO if_ixml_element,\n    get_attribute_node\n      IMPORTING name TYPE string\n      RETURNING VALUE(val) TYPE REF TO if_ixml_attribute,\n    get_attribute_ns\n      IMPORTING\n        name TYPE string\n        uri TYPE string OPTIONAL\n      RETURNING\n        VALUE(val) TYPE string,\n    get_attribute\n      IMPORTING\n        name TYPE string\n        namespace TYPE string OPTIONAL\n      RETURNING VALUE(val) TYPE string,\n    get_children\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node_list,\n    get_elements_by_tag_name\n      IMPORTING\n        name TYPE string\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_node_collection,\n    get_elements_by_tag_name_ns\n      IMPORTING\n        name TYPE string\n        uri  TYPE string OPTIONAL\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_node_collection,\n    get_attribute_node_ns\n        IMPORTING\n        name TYPE string\n        uri  TYPE string OPTIONAL\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_attribute,\n    get_first_child\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node,\n    get_value\n      RETURNING VALUE(val) TYPE string,\n    remove_attribute\n      IMPORTING name TYPE string,\n    remove_node,\n    render\n      IMPORTING\n        ostream TYPE REF TO if_ixml_ostream,\n    set_attribute_node_ns\n      IMPORTING\n        attr TYPE any,\n    set_attribute\n      IMPORTING\n        name      TYPE string\n        namespace TYPE string OPTIONAL\n        value     TYPE string OPTIONAL,\n    set_attribute_ns\n      IMPORTING\n        name   TYPE string\n        prefix TYPE string OPTIONAL\n        value  TYPE string OPTIONAL,\n    set_value\n      IMPORTING\n        value TYPE string\n      RETURNING VALUE(rc) TYPE i.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_ENCODING                        ', 'INTERFACE if_ixml_encoding PUBLIC.\n  CONSTANTS co_platform_endian TYPE string VALUE ''a''.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_ISTREAM                         ', 'INTERFACE if_ixml_istream PUBLIC.\n  METHODS close.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NAMED_NODE_MAP                  ', 'INTERFACE if_ixml_named_node_map PUBLIC.\n  METHODS:\n    create_iterator\n      RETURNING VALUE(iterator) TYPE REF TO if_ixml_node_iterator,\n    get_length\n      RETURNING VALUE(val) TYPE i,\n    get_named_item_ns\n      IMPORTING name TYPE string\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node,\n    get_named_item\n      IMPORTING name TYPE string\n      RETURNING VALUE(val) TYPE REF TO if_ixml_node,\n    set_named_item_ns\n      IMPORTING node TYPE REF TO if_ixml_node,\n    remove_named_item\n      IMPORTING name TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NODE                            ', 'INTERFACE if_ixml_node PUBLIC.\n  CONSTANTS:\n    co_node_element TYPE i VALUE 0,\n    co_node_text TYPE i VALUE 0.\n  METHODS:\n    append_child IMPORTING new_child TYPE REF TO if_ixml_node,\n    get_attributes RETURNING VALUE(map) TYPE REF TO if_ixml_named_node_map,\n    get_first_child RETURNING VALUE(node) TYPE REF TO if_ixml_node,\n    get_children RETURNING VALUE(val) TYPE REF TO if_ixml_node_list,\n    query_interface\n      IMPORTING foo         TYPE string\n      RETURNING VALUE(rval) TYPE REF TO if_ixml_unknown,\n    remove_node,\n    get_parent RETURNING VALUE(val) TYPE REF TO if_ixml_node,\n    replace_child IMPORTING\n      new_child TYPE string\n      old_child TYPE string,\n    get_name RETURNING VALUE(val) TYPE string,\n    get_depth RETURNING VALUE(val) TYPE i,\n    is_leaf RETURNING VALUE(val) TYPE abap_bool,\n    get_namespace RETURNING VALUE(val) TYPE string,\n    get_value RETURNING VALUE(val) TYPE string,\n    get_type RETURNING VALUE(val) TYPE string,\n    set_name IMPORTING name TYPE string,\n    set_namespace_prefix IMPORTING val TYPE string,\n    remove_child IMPORTING child TYPE REF TO if_ixml_node,\n    set_value IMPORTING value TYPE string.\n\n  METHODS get_next\n    RETURNING\n      VALUE(rval) TYPE REF TO if_ixml_node.\n\n  METHODS get_namespace_prefix\n    RETURNING\n      VALUE(rv_prefix) TYPE string.\n  METHODS get_namespace_uri\n    RETURNING\n      VALUE(rval) TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NODE_COLLECTION                 ', 'INTERFACE if_ixml_node_collection PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NODE_FILTER                     ', 'INTERFACE if_ixml_node_filter PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NODE_ITERATOR                   ', 'INTERFACE if_ixml_node_iterator PUBLIC.\n\n  METHODS reset.\n\n  METHODS get_next\n    RETURNING\n      VALUE(rval) TYPE REF TO if_ixml_node.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_NODE_LIST                       ', 'INTERFACE if_ixml_node_list PUBLIC.\n\n  METHODS:\n    get_length\n      RETURNING\n        VALUE(length) TYPE i,\n    create_iterator\n      RETURNING VALUE(rval) TYPE REF TO if_ixml_node_iterator,\n    get_item\n      IMPORTING\n        index TYPE i\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_node,\n    create_rev_iterator_filtered\n      IMPORTING\n        filter TYPE any\n      RETURNING\n        VALUE(val) TYPE REF TO if_ixml_node_iterator.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_OSTREAM                         ', 'INTERFACE if_ixml_ostream PUBLIC.\n  METHODS write_string\n    IMPORTING\n      string      TYPE string\n    RETURNING\n      VALUE(rval) TYPE i.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_PARSE_ERROR                     ', 'INTERFACE if_ixml_parse_error PUBLIC.\n  METHODS get_reason\n    RETURNING\n      VALUE(reason) TYPE string.\n  METHODS get_line\n    RETURNING\n      VALUE(line) TYPE i.\n  METHODS get_column\n    RETURNING\n      VALUE(column) TYPE i.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_PARSER                          ', 'INTERFACE if_ixml_parser PUBLIC.\n  CONSTANTS co_no_validation TYPE i VALUE 0.\n\n  METHODS parse RETURNING VALUE(subrc) TYPE i.\n  METHODS set_normalizing IMPORTING normal TYPE abap_bool.\n  METHODS num_errors RETURNING VALUE(errors) TYPE i.\n  METHODS add_strip_space_element.\n  METHODS get_error\n    IMPORTING\n      index TYPE i\n    RETURNING\n      VALUE(error) TYPE REF TO if_ixml_parse_error.\n  METHODS set_validating\n    IMPORTING\n      mode TYPE i OPTIONAL\n    RETURNING\n      VALUE(rval) TYPE abap_bool.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_RENDERER                        ', 'INTERFACE if_ixml_renderer PUBLIC.\n  METHODS render.\n  METHODS set_normalizing IMPORTING normal TYPE abap_bool.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_STREAM_FACTORY                  ', 'INTERFACE if_ixml_stream_factory PUBLIC.\n  METHODS create_ostream_cstring\n    IMPORTING\n      string TYPE string\n    RETURNING\n      VALUE(stream) TYPE REF TO if_ixml_ostream.\n\n  METHODS create_ostream_xstring\n    IMPORTING\n      string TYPE xstring\n    RETURNING\n      VALUE(stream) TYPE REF TO if_ixml_ostream.\n\n  METHODS create_istream_string\n    IMPORTING\n      xml TYPE string\n    RETURNING\n      VALUE(stream) TYPE REF TO if_ixml_istream.\n\n  METHODS create_istream_xstring\n    IMPORTING\n      xml TYPE xstring\n    RETURNING\n      VALUE(stream) TYPE REF TO if_ixml_istream.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_IXML_UNKNOWN                         ', 'INTERFACE if_ixml_unknown PUBLIC.\n  METHODS query_interface\n    IMPORTING\n      iid         TYPE i\n    RETURNING\n      VALUE(rval) TYPE REF TO if_ixml_unknown.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('/UI2/CL_JSON                            ', 'CLASS /ui2/cl_json DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS: BEGIN OF pretty_mode,\n                 low_case   TYPE string VALUE ''low_case'',\n                 camel_case TYPE string VALUE ''camel_case'',\n               END OF pretty_mode.\n\n    TYPES tribool TYPE c LENGTH 1.\n\n    CLASS-METHODS deserialize\n      IMPORTING\n        json             TYPE string OPTIONAL\n        jsonx            TYPE xstring OPTIONAL\n        pretty_name      TYPE string OPTIONAL\n        assoc_arrays     TYPE abap_bool OPTIONAL\n        assoc_arrays_opt TYPE abap_bool OPTIONAL\n      CHANGING\n        data             TYPE data.\n\n    CLASS-METHODS serialize\n      IMPORTING\n        data          TYPE data\n        compress      TYPE abap_bool OPTIONAL\n        pretty_name   TYPE string OPTIONAL\n        assoc_arrays  TYPE abap_bool OPTIONAL\n        ts_as_iso8601 TYPE abap_bool OPTIONAL\n      RETURNING\n        VALUE(r_json) TYPE string.\n\n  PRIVATE SECTION.\n    CLASS-DATA mo_parsed TYPE REF TO lcl_parser.\n    CLASS-METHODS _deserialize\n      IMPORTING\n        prefix      TYPE string\n        pretty_name TYPE string OPTIONAL\n      CHANGING\n        data        TYPE data.\nENDCLASS.\n\nCLASS /ui2/cl_json IMPLEMENTATION.\n\n  METHOD serialize.\n    DATA lo_type       TYPE REF TO cl_abap_typedescr.\n    DATA lo_struct     TYPE REF TO cl_abap_structdescr.\n    DATA lt_components TYPE cl_abap_structdescr=>component_table.\n    DATA ls_component  LIKE LINE OF lt_components.\n    DATA ref           TYPE REF TO data.\n    DATA lv_index      TYPE i.\n\n    FIELD-SYMBOLS <any> TYPE any.\n    FIELD-SYMBOLS <tab> TYPE ANY TABLE.\n\n    lo_type = cl_abap_typedescr=>describe_by_data( data ).\n    CASE lo_type->kind.\n      WHEN cl_abap_typedescr=>kind_elem.\n*        WRITE ''@KERNEL console.dir(lo_type);''.\n        CASE lo_type->type_kind.\n          WHEN cl_abap_typedescr=>typekind_char.\n            IF lo_type->absolute_name = \\`\\\\TYPE-POOL=ABAP\\\\TYPE=ABAP_BOOL\\`.\n              IF data = abap_true.\n                r_json = ''true''.\n              ELSE.\n                r_json = ''false''.\n              ENDIF.\n            ELSEIF data IS INITIAL.\n              r_json = ''\"\"''.\n            ELSE.\n              r_json = ''\"'' && |{ data }| && ''\"''.\n            ENDIF.\n          WHEN cl_abap_typedescr=>typekind_string.\n            r_json = ''\"'' && data && ''\"''.\n          WHEN cl_abap_typedescr=>typekind_int.\n            r_json = |{ data }|.\n          WHEN OTHERS.\n            IF ts_as_iso8601 = abap_true\n                AND ( lo_type->absolute_name = \\`\\\\TYPE=TIMESTAMP\\`\n                OR lo_type->absolute_name = \\`\\\\TYPE=TIMESTAMPL\\` ).\n              IF data IS INITIAL.\n                r_json = |\"\"|.\n              ELSE.\n                r_json = |\"{ data TIMESTAMP = ISO }.0000000Z\"|.\n              ENDIF.\n            ELSE.\n              r_json = data.\n            ENDIF.\n        ENDCASE.\n      WHEN cl_abap_typedescr=>kind_table.\n        r_json = ''[''.\n        ASSIGN data TO <tab>.\n        LOOP AT <tab> ASSIGNING <any>.\n          lv_index = sy-tabix.\n          r_json = r_json && serialize(\n            data          = <any>\n            pretty_name   = pretty_name\n            ts_as_iso8601 = ts_as_iso8601 ).\n          IF lines( data ) <> lv_index.\n            r_json = r_json && '',''.\n          ENDIF.\n        ENDLOOP.\n        r_json = r_json && '']''.\n      WHEN cl_abap_typedescr=>kind_struct.\n        lo_struct ?= lo_type.\n        lt_components = lo_struct->get_components( ).\n        r_json = ''{''.\n        LOOP AT lt_components INTO ls_component.\n          lv_index = sy-tabix.\n          ASSIGN COMPONENT ls_component-name OF STRUCTURE data TO <any>.\n          ASSERT sy-subrc = 0.\n          IF pretty_name = pretty_mode-camel_case.\n            r_json = r_json && |\"{ to_mixed( to_lower( ls_component-name ) ) }\":|.\n          ELSEIF pretty_name = pretty_mode-low_case.\n            r_json = r_json && |\"{ to_lower( ls_component-name ) }\":|.\n          ELSE.\n            r_json = r_json && |\"{ ls_component-name }\":|.\n          ENDIF.\n          r_json = r_json && serialize(\n            data          = <any>\n            pretty_name   = pretty_name\n            ts_as_iso8601 = ts_as_iso8601 ).\n          IF lines( lt_components ) <> lv_index.\n            r_json = r_json && '',''.\n          ENDIF.\n        ENDLOOP.\n        r_json = r_json && ''}''.\n      WHEN OTHERS.\n        ASSERT 1 = ''cl_json, unknown kind''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD deserialize.\n    CREATE OBJECT mo_parsed.\n\n    IF jsonx IS NOT INITIAL.\n      mo_parsed->parse( cl_abap_codepage=>convert_from( jsonx ) ).\n    ELSE.\n      mo_parsed->parse( json ).\n    ENDIF.\n\n    CLEAR data.\n\n    _deserialize(\n      EXPORTING\n        prefix      = ''''\n        pretty_name = pretty_name\n      CHANGING\n        data        = data ).\n  ENDMETHOD.\n\n  METHOD _deserialize.\n    DATA lo_type       TYPE REF TO cl_abap_typedescr.\n    DATA lo_struct     TYPE REF TO cl_abap_structdescr.\n    DATA lt_components TYPE cl_abap_structdescr=>component_table.\n    DATA ls_component  LIKE LINE OF lt_components.\n    DATA lt_members    TYPE string_table.\n    DATA ref           TYPE REF TO data.\n    DATA lv_name       TYPE string.\n    DATA lv_value      TYPE string.\n    DATA lv_member     LIKE LINE OF lt_members.\n\n    FIELD-SYMBOLS <any> TYPE any.\n\n    lo_type = cl_abap_typedescr=>describe_by_data( data ).\n*    WRITE ''@KERNEL console.dir(lo_type.get());''.\n    CASE lo_type->kind.\n      WHEN cl_abap_typedescr=>kind_elem.\n*        WRITE ''@KERNEL console.dir(lo_type.get().absolute_name);''.\n        IF lo_type->absolute_name = ''\\\\TYPE-POOL=ABAP\\\\TYPE=ABAP_BOOL''\n            OR lo_type->absolute_name = ''\\\\TYPE=FLAG''.\n          data = boolc( mo_parsed->value_string( prefix ) = ''true'' ).\n        ELSEIF lo_type->absolute_name = \\`\\\\TYPE=TIMESTAMP\\`\n            OR lo_type->absolute_name = \\`\\\\TYPE=TIMESTAMPL\\`.\n          lv_value = mo_parsed->value_string( prefix ).\n          REPLACE ALL OCCURRENCES OF ''-'' IN lv_value WITH ''''.\n          REPLACE ALL OCCURRENCES OF ''T'' IN lv_value WITH ''''.\n          REPLACE ALL OCCURRENCES OF '':'' IN lv_value WITH ''''.\n          REPLACE ALL OCCURRENCES OF ''Z'' IN lv_value WITH ''''.\n          data = lv_value.\n        ELSE.\n          data = mo_parsed->value_string( prefix ).\n        ENDIF.\n      WHEN cl_abap_typedescr=>kind_table.\n        lt_members = mo_parsed->members( prefix && ''/'' ).\n        LOOP AT lt_members INTO lv_member.\n*          WRITE ''@KERNEL console.dir(lv_member.get());''.\n          CREATE DATA ref LIKE LINE OF data.\n          ASSIGN ref->* TO <any>.\n          _deserialize(\n            EXPORTING\n              prefix      = prefix && ''/'' && lv_member\n              pretty_name = pretty_name\n            CHANGING\n              data        = <any> ).\n*          WRITE ''@KERNEL console.dir(fs_row_);''.\n          INSERT <any> INTO TABLE data.\n        ENDLOOP.\n      WHEN cl_abap_typedescr=>kind_struct.\n        lo_struct ?= lo_type.\n        lt_components = lo_struct->get_components( ).\n        LOOP AT lt_components INTO ls_component.\n          ASSIGN COMPONENT ls_component-name OF STRUCTURE data TO <any>.\n          ASSERT sy-subrc = 0.\n          CASE pretty_name.\n            WHEN pretty_mode-camel_case.\n              lv_name = to_mixed( to_lower( ls_component-name ) ).\n            WHEN OTHERS.\n              lv_name = to_lower( ls_component-name ).\n          ENDCASE.\n*          WRITE ''@KERNEL console.dir(lv_name.get());''.\n          _deserialize(\n            EXPORTING\n              prefix      = prefix && ''/'' && lv_name\n              pretty_name = pretty_name\n            CHANGING\n              data        = <any> ).\n        ENDLOOP.\n      WHEN OTHERS.\n        ASSERT 1 = ''cl_json, unknown kind''.\n    ENDCASE.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_CALL_TRANSFORMATION              ', 'CLASS kernel_call_transformation DEFINITION PUBLIC.\n* handling of ABAP statement CALL TRANSFORMATION\n  PUBLIC SECTION.\n    CLASS-METHODS call IMPORTING input TYPE any.\n  PRIVATE SECTION.\n    CLASS-DATA mi_doc TYPE REF TO if_ixml_document.\n    CLASS-DATA mi_writer TYPE REF TO if_sxml_writer.\n\n    CLASS-METHODS parse_xml IMPORTING iv_xml TYPE string.\n\n    CLASS-METHODS traverse_write\n      IMPORTING iv_ref TYPE REF TO data.\n    CLASS-METHODS traverse_write_type\n      IMPORTING iv_ref TYPE REF TO data\n      RETURNING VALUE(rv_type) TYPE string.\nENDCLASS.\n\nCLASS kernel_call_transformation IMPLEMENTATION.\n\n  METHOD call.\n* first convert SOURCE to internal format stored in \"MI_DOC\"?\n* then output to RESULT\n\n    DATA lv_name   TYPE string.\n    DATA lv_source TYPE string.\n    DATA lv_result TYPE string.\n    DATA result    TYPE REF TO data.\n    DATA lt_rtab   TYPE abap_trans_resbind_tab.\n    DATA lo_writer TYPE REF TO cl_sxml_string_writer.\n    DATA ls_rtab   LIKE LINE OF lt_rtab.\n    DATA lv_type   TYPE string.\n\n    CLEAR mi_doc.\n    CLEAR mi_writer.\n\n*    WRITE ''@KERNEL console.dir(INPUT);''.\n\n* only the ID transformation is implemented\n    WRITE ''@KERNEL lv_name.set(INPUT.name.toUpperCase());''.\n    ASSERT lv_name = ''ID''.\n\n* Handle input SOURCE\n    WRITE ''@KERNEL if (INPUT.sourceXML?.constructor.name === \"ABAPObject\") this.mi_doc.set(INPUT.sourceXML);''.\n    WRITE ''@KERNEL if (INPUT.sourceXML?.constructor.name === \"String\") lv_source.set(INPUT.sourceXML);''.\n    IF lv_source IS NOT INITIAL.\n      IF lv_source(1) = ''<''.\n        lv_type = ''XML''.\n        parse_xml( lv_source ).\n      ELSEIF lv_source(1) = ''{'' OR lv_source(1) = ''[''.\n        lv_type = ''JSON''.\n        mi_doc = kernel_json_to_ixml=>build( lv_source ).\n      ELSE.\n        RAISE EXCEPTION TYPE cx_xslt_format_error.\n      ENDIF.\n    ENDIF.\n\n* todo, rewrite this part,\n    WRITE ''@KERNEL if (typeof INPUT.source === \"object\" && INPUT.resultXML?.constructor.name === \"ABAPObject\") {''.\n    WRITE ''@KERNEL   this.mi_writer.set(INPUT.resultXML);''.\n    WRITE ''@KERNEL }''.\n*    WRITE ''@KERNEL console.dir(INPUT);''.\n    IF mi_writer IS NOT INITIAL.\n* input is object and write to sxml output\n* todo, rewrite\n      mi_writer->open_element( name = ''object'' ).\n      WRITE ''@KERNEL for (const name in INPUT.source) {''.\n      WRITE ''@KERNEL   lv_name.set(name);''.\n      WRITE ''@KERNEL   if (INPUT.source[name].constructor.name === \"FieldSymbol\") {''.\n      WRITE ''@KERNEL     result.assign(INPUT.source[name].getPointer());''.\n      WRITE ''@KERNEL   } else {''.\n      WRITE ''@KERNEL     result.assign(INPUT.source[name]);''.\n      WRITE ''@KERNEL   }''.\n      mi_writer->open_element( name = ''str'' ).\n      mi_writer->write_attribute( name = ''name'' value = to_upper( lv_name ) ).\n      traverse_write( result ).\n      mi_writer->close_element( ).\n      WRITE ''@KERNEL }''.\n      mi_writer->close_element( ).\n      RETURN.\n    ENDIF.\n\n    WRITE ''@KERNEL if (INPUT.resultXML && INPUT.resultXML.constructor.name === \"String\") {''.\n    WRITE ''@KERNEL   lv_result.set(\"X\");''.\n    WRITE ''@KERNEL }''.\n    IF lv_result = abap_true.\n      lv_result = ''<?xml version=\"1.0\" encoding=\"utf-16\"?><asx:abap xmlns:asx=\"http://www.sap.com/abapxml\" version=\"1.0\"><asx:values>''.\n\n      WRITE ''@KERNEL for (const name in INPUT.source) {''.\n      WRITE ''@KERNEL   lv_name.set(name);''.\n      WRITE ''@KERNEL   if (INPUT.source[name].constructor.name === \"FieldSymbol\") {''.\n      WRITE ''@KERNEL     result.assign(INPUT.source[name].getPointer());''.\n      WRITE ''@KERNEL   } else {''.\n      WRITE ''@KERNEL     result.assign(INPUT.source[name]);''.\n      WRITE ''@KERNEL   }''.\n      lv_result = lv_result && |<{ to_upper( lv_name ) }>|.\n      lv_result = lv_result && lcl_data_to_xml=>run( result ).\n      lv_result = lv_result && |</{ to_upper( lv_name ) }>|.\n      WRITE ''@KERNEL }''.\n\n      lv_result = lv_result && |</asx:values></asx:abap>|.\n      WRITE ''@KERNEL   INPUT.resultXML.set(lv_result);''.\n      RETURN.\n    ENDIF.\n\n    IF lv_source IS INITIAL AND mi_doc IS INITIAL.\n      RAISE EXCEPTION TYPE cx_xslt_runtime_error.\n    ENDIF.\n\n    WRITE ''@KERNEL if (INPUT.result.constructor.name === \"Table\") {''.\n* INPUT.result is an ABAP internal table, dynamic result parameter\n    WRITE ''@KERNEL lt_rtab = INPUT.result;''.\n    LOOP AT lt_rtab INTO ls_rtab.\n      kernel_ixml_xml_to_data=>build(\n        iv_name = ls_rtab-name\n        iv_ref  = ls_rtab-value\n        ii_doc  = mi_doc ).\n    ENDLOOP.\n    WRITE ''@KERNEL } else {''.\n* INPUT.result is a javascript structure\n    WRITE ''@KERNEL for (const name in INPUT.result) {''.\n    WRITE ''@KERNEL   lv_name.set(name.toUpperCase());''.\n    WRITE ''@KERNEL   if (INPUT.result[name].constructor.name === \"FieldSymbol\") {''.\n    WRITE ''@KERNEL     result.assign(INPUT.result[name].getPointer());''.\n    WRITE ''@KERNEL   } else {''.\n    WRITE ''@KERNEL     result.assign(INPUT.result[name]);''.\n    WRITE ''@KERNEL   }''.\n    IF lv_type = ''JSON''.\n      kernel_ixml_json_to_data=>build(\n        iv_name = lv_name\n        iv_ref  = result\n        ii_doc  = mi_doc ).\n    ELSE.\n      kernel_ixml_xml_to_data=>build(\n        iv_name = lv_name\n        iv_ref  = result\n        ii_doc  = mi_doc ).\n    ENDIF.\n    WRITE ''@KERNEL }''.\n    WRITE ''@KERNEL }''.\n\n*    WRITE ''@KERNEL console.dir(INPUT.result.data);''.\n\n  ENDMETHOD.\n\n  METHOD traverse_write_type.\n    DATA lo_type TYPE REF TO cl_abap_typedescr.\n    lo_type = cl_abap_typedescr=>describe_by_data( iv_ref->* ).\n    CASE lo_type->type_kind.\n      WHEN cl_abap_typedescr=>typekind_int\n          OR cl_abap_typedescr=>typekind_int1\n          OR cl_abap_typedescr=>typekind_int2\n          OR cl_abap_typedescr=>typekind_int8\n          OR cl_abap_typedescr=>typekind_decfloat\n          OR cl_abap_typedescr=>typekind_decfloat16\n          OR cl_abap_typedescr=>typekind_decfloat34.\n        rv_type = ''num''.\n      WHEN OTHERS.\n        rv_type = ''str''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD traverse_write.\n* TODO: refactor this method\n\n    DATA lo_type TYPE REF TO cl_abap_typedescr.\n    DATA lo_struc TYPE REF TO cl_abap_structdescr.\n    DATA lt_comps TYPE cl_abap_structdescr=>component_table.\n    DATA li_element TYPE REF TO if_ixml_element.\n    DATA li_sub TYPE REF TO if_ixml_element.\n    DATA ls_compo LIKE LINE OF lt_comps.\n    DATA lv_ref TYPE REF TO data.\n    FIELD-SYMBOLS <any> TYPE any.\n    FIELD-SYMBOLS <table> TYPE ANY TABLE.\n    FIELD-SYMBOLS <field> TYPE any.\n\n*     WRITE ''@KERNEL console.dir(iv_ref.getPointer());''.\n    lo_type = cl_abap_typedescr=>describe_by_data( iv_ref->* ).\n*    WRITE ''@KERNEL console.dir(lo_type.get().kind.get());''.\n    CASE lo_type->kind.\n      WHEN cl_abap_typedescr=>kind_struct.\n        mi_writer->open_element( name = ''object'' ).\n\n        lo_struc ?= lo_type.\n        lt_comps = lo_struc->get_components( ).\n        ASSIGN iv_ref->* TO <any>.\n        LOOP AT lt_comps INTO ls_compo.\n          ASSIGN COMPONENT ls_compo-name OF STRUCTURE <any> TO <field>.\n          GET REFERENCE OF <field> INTO lv_ref.\n          mi_writer->open_element( name = traverse_write_type( lv_ref ) ).\n          mi_writer->write_attribute( name = ''name'' value = to_upper( ls_compo-name ) ).\n          traverse_write( lv_ref ).\n          mi_writer->close_element( ).\n        ENDLOOP.\n\n        mi_writer->close_element( ).\n      WHEN cl_abap_typedescr=>kind_elem.\n        mi_writer->write_value( iv_ref->* ).\n      WHEN cl_abap_typedescr=>kind_table.\n        mi_writer->open_element( name = ''array'' ).\n\n        ASSIGN iv_ref->* TO <table>.\n        LOOP AT <table> ASSIGNING <any>.\n          GET REFERENCE OF <any> INTO lv_ref.\n          IF cl_abap_typedescr=>describe_by_data( lv_ref->* )->kind = cl_abap_typedescr=>kind_elem.\n            mi_writer->open_element( name = traverse_write_type( lv_ref ) ).\n          ENDIF.\n          traverse_write( lv_ref ).\n          IF cl_abap_typedescr=>describe_by_data( lv_ref->* )->kind = cl_abap_typedescr=>kind_elem.\n            mi_writer->close_element( ).\n          ENDIF.\n        ENDLOOP.\n\n        mi_writer->close_element( ).\n      WHEN OTHERS.\n        ASSERT 1 = ''todo_traverse_write''.\n    ENDCASE.\n\n  ENDMETHOD.\n\n  METHOD parse_xml.\n\n    DATA li_factory TYPE REF TO if_ixml_stream_factory.\n    DATA li_istream TYPE REF TO if_ixml_istream.\n    DATA li_parser  TYPE REF TO if_ixml_parser.\n    DATA li_ixml    TYPE REF TO if_ixml.\n    DATA lv_subrc   TYPE i.\n\n    li_ixml = cl_ixml=>create( ).\n    mi_doc  = li_ixml->create_document( ).\n\n    li_factory = li_ixml->create_stream_factory( ).\n    li_istream = li_factory->create_istream_string( iv_xml ).\n    li_parser = li_ixml->create_parser( stream_factory = li_factory\n                                        istream        = li_istream\n                                        document       = mi_doc ).\n    li_parser->add_strip_space_element( ).\n    lv_subrc = li_parser->parse( ).\n    li_istream->close( ).\n\n    ASSERT lv_subrc = 0.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_IXML_JSON_TO_DATA                ', 'CLASS kernel_ixml_json_to_data DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS build\n      IMPORTING\n        iv_name TYPE string\n        iv_ref  TYPE REF TO data\n        ii_doc  TYPE REF TO if_ixml_document.\n  PRIVATE SECTION.\n    CLASS-METHODS get_field_name\n      IMPORTING ii_node TYPE REF TO if_ixml_node\n      RETURNING VALUE(rv_name) TYPE string.\n    CLASS-METHODS traverse\n      IMPORTING\n        ii_node TYPE REF TO if_ixml_node\n        iv_ref  TYPE REF TO data.\nENDCLASS.\n\nCLASS kernel_ixml_json_to_data IMPLEMENTATION.\n\n  METHOD get_field_name.\n    DATA li_aiterator TYPE REF TO if_ixml_node_iterator.\n    DATA li_anode TYPE REF TO if_ixml_node.\n    DATA attr TYPE REF TO if_ixml_named_node_map.\n\n    attr = ii_node->get_attributes( ).\n    IF attr IS NOT INITIAL.\n      li_aiterator = attr->create_iterator( ).\n      DO.\n        li_anode = li_aiterator->get_next( ).\n        IF li_anode IS INITIAL.\n          EXIT. \" current loop\n        ENDIF.\n* assume its the name,\n        rv_name = li_anode->get_value( ).\n        RETURN.\n      ENDDO.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD build.\n* assumptions: the top level element is an object containing iv_name\n\n    DATA li_first    TYPE REF TO if_ixml_node.\n    DATA li_node     TYPE REF TO if_ixml_node.\n    DATA lv_name     TYPE string.\n    DATA li_iterator TYPE REF TO if_ixml_node_iterator.\n\n    li_first = ii_doc->get_root( )->get_first_child( ).\n    ASSERT li_first->get_name( ) = ''object''.\n\n    li_iterator = li_first->get_children( )->create_iterator( ).\n    DO.\n      li_node = li_iterator->get_next( ).\n      IF li_node IS INITIAL.\n        EXIT. \" current loop\n      ENDIF.\n\n      lv_name = get_field_name( li_node ).\n      IF lv_name = iv_name.\n*        WRITE ''@KERNEL console.dir(\"found\");''.\n        traverse(\n          iv_ref  = iv_ref\n          ii_node = li_node ).\n        RETURN.\n      ENDIF.\n    ENDDO.\n  ENDMETHOD.\n\n  METHOD traverse.\n\n    DATA lo_type     TYPE REF TO cl_abap_typedescr.\n    DATA li_child    TYPE REF TO if_ixml_node.\n    DATA lv_name     TYPE string.\n    DATA li_iterator TYPE REF TO if_ixml_node_iterator.\n    DATA lv_ref      TYPE REF TO data.\n\n    FIELD-SYMBOLS <any>   TYPE any.\n    FIELD-SYMBOLS <field> TYPE any.\n    FIELD-SYMBOLS <tab>   TYPE ANY TABLE.\n\n    lo_type = cl_abap_typedescr=>describe_by_data( iv_ref->* ).\n    CASE lo_type->kind.\n      WHEN cl_abap_typedescr=>kind_struct.\n        ASSERT ii_node->get_name( ) = ''object''.\n        ASSIGN iv_ref->* TO <any>.\n        li_iterator = ii_node->get_children( )->create_iterator( ).\n        DO.\n          li_child = li_iterator->get_next( ).\n          IF li_child IS INITIAL.\n            EXIT. \" current loop\n          ENDIF.\n          lv_name = get_field_name( li_child ).\n          ASSIGN COMPONENT lv_name OF STRUCTURE <any> TO <field>.\n          IF sy-subrc = 0.\n            GET REFERENCE OF <field> INTO lv_ref.\n            traverse( ii_node = li_child\n                      iv_ref  = lv_ref ).\n          ENDIF.\n        ENDDO.\n      WHEN cl_abap_typedescr=>kind_elem.\n        li_child = ii_node->get_first_child( ).\n        ASSERT li_child->get_name( ) = ''#text''.\n        ASSIGN iv_ref->* TO <any>.\n        <any> = li_child->get_value( ).\n\n        IF lo_type->type_kind = cl_abap_typedescr=>typekind_char\n            OR lo_type->type_kind = cl_abap_typedescr=>typekind_clike\n            OR lo_type->type_kind = cl_abap_typedescr=>typekind_string.\n          REPLACE ALL OCCURRENCES OF ''\\\\\"'' IN <any> WITH ''\"''.\n        ENDIF.\n      WHEN cl_abap_typedescr=>kind_table.\n        ASSERT ii_node->get_name( ) = ''array''.\n        ASSIGN iv_ref->* TO <tab>.\n        li_iterator = ii_node->get_children( )->create_iterator( ).\n        DO.\n          li_child = li_iterator->get_next( ).\n          IF li_child IS INITIAL.\n            EXIT. \" current loop\n          ENDIF.\n          CREATE DATA lv_ref LIKE LINE OF <tab>.\n          ASSIGN lv_ref->* TO <any>.\n          traverse( ii_node = li_child\n                  iv_ref  = lv_ref ).\n          INSERT <any> INTO TABLE <tab>.\n        ENDDO.\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(lo_type.get().kind.get());''.\n    ENDCASE.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_IXML_XML_TO_DATA                 ', 'CLASS kernel_ixml_xml_to_data DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS build\n      IMPORTING\n        iv_name TYPE string\n        iv_ref  TYPE REF TO data\n        ii_doc  TYPE REF TO if_ixml_document.\n  PRIVATE SECTION.\n    CLASS-METHODS traverse\n      IMPORTING\n        ii_node TYPE REF TO if_ixml_node\n        iv_ref  TYPE REF TO data.\nENDCLASS.\n\nCLASS kernel_ixml_xml_to_data IMPLEMENTATION.\n\n  METHOD build.\n\n    DATA li_first TYPE REF TO if_ixml_element.\n    DATA li_node TYPE REF TO if_ixml_node.\n    DATA lv_name TYPE string.\n    DATA li_iterator TYPE REF TO if_ixml_node_iterator.\n\n    li_first ?= ii_doc->get_root( )->get_first_child( ).\n\n    li_node = li_first->find_from_name_ns(\n      name      = iv_name\n      depth     = 0\n      namespace = '''' ).\n    IF li_node IS NOT INITIAL.\n*      WRITE ''@KERNEL console.dir(\"found\");''.\n      traverse( ii_node = li_node\n                iv_ref  = iv_ref ).\n*    ELSE.\n*      WRITE ''@KERNEL console.dir(\"nah\");''.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD traverse.\n\n    DATA lo_type TYPE REF TO cl_abap_typedescr.\n    DATA li_child TYPE REF TO if_ixml_node.\n    DATA lv_name TYPE string.\n    DATA li_iterator TYPE REF TO if_ixml_node_iterator.\n    DATA lv_ref TYPE REF TO data.\n    FIELD-SYMBOLS <any> TYPE any.\n    FIELD-SYMBOLS <field> TYPE any.\n    FIELD-SYMBOLS <tab> TYPE ANY TABLE.\n\n    lo_type = cl_abap_typedescr=>describe_by_data( iv_ref->* ).\n    CASE lo_type->kind.\n      WHEN cl_abap_typedescr=>kind_struct.\n        ASSIGN iv_ref->* TO <any>.\n        li_iterator = ii_node->get_children( )->create_iterator( ).\n        DO.\n          li_child = li_iterator->get_next( ).\n          IF li_child IS INITIAL.\n            EXIT. \" current loop\n          ENDIF.\n          lv_name = li_child->get_name( ).\n          ASSIGN COMPONENT lv_name OF STRUCTURE <any> TO <field>.\n          IF sy-subrc = 0.\n            GET REFERENCE OF <field> INTO lv_ref.\n            traverse( ii_node = li_child\n                      iv_ref  = lv_ref ).\n          ENDIF.\n        ENDDO.\n      WHEN cl_abap_typedescr=>kind_elem.\n        li_child = ii_node->get_first_child( ).\n        IF li_child IS NOT INITIAL.\n          ASSIGN iv_ref->* TO <any>.\n          <any> = li_child->get_value( ).\n        ENDIF.\n      WHEN cl_abap_typedescr=>kind_table.\n        ASSIGN iv_ref->* TO <tab>.\n        li_iterator = ii_node->get_children( )->create_iterator( ).\n        DO.\n          li_child = li_iterator->get_next( ).\n          IF li_child IS INITIAL.\n            EXIT. \" current loop\n          ENDIF.\n          CREATE DATA lv_ref LIKE LINE OF <tab>.\n          ASSIGN lv_ref->* TO <any>.\n          traverse( ii_node = li_child\n                  iv_ref  = lv_ref ).\n          INSERT <any> INTO TABLE <tab>.\n        ENDDO.\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(lo_type.get().kind.get());''.\n    ENDCASE.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_JSON_TO_IXML                     ', 'CLASS kernel_json_to_ixml DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS build\n      IMPORTING iv_json TYPE string\n      RETURNING VALUE(ri_doc) TYPE REF TO if_ixml_document.\nENDCLASS.\n\nCLASS kernel_json_to_ixml IMPLEMENTATION.\n\n  METHOD build.\n* build IXML by calling SXML json parser and then converting :)\n\n    DATA li_reader TYPE REF TO if_sxml_reader.\n    DATA li_node TYPE REF TO if_sxml_node.\n    DATA li_close TYPE REF TO if_sxml_close_element.\n    DATA li_open TYPE REF TO if_sxml_open_element.\n    DATA li_value TYPE REF TO if_sxml_value_node.\n    DATA lt_attributes TYPE if_sxml_attribute=>attributes.\n    DATA li_attribute TYPE REF TO if_sxml_attribute.\n    DATA li_current TYPE REF TO if_ixml_node.\n    DATA lv_name TYPE string.\n    DATA li_map TYPE REF TO if_ixml_named_node_map.\n    DATA li_new TYPE REF TO if_ixml_node.\n    DATA li_element TYPE REF TO if_ixml_element.\n\n    li_reader = cl_sxml_string_reader=>create( cl_abap_codepage=>convert_to( iv_json ) ).\n\n    ri_doc = cl_ixml=>create( )->create_document( ).\n    li_current = ri_doc->get_root( ).\n\n    DO.\n      li_node = li_reader->read_next_node( ).\n      IF li_node IS INITIAL.\n        EXIT.\n      ENDIF.\n\n      CASE li_node->type.\n        WHEN if_sxml_node=>co_nt_element_open.\n          li_open ?= li_node.\n*          WRITE: / ''open: '', li_open->qname-name.\n\n          CLEAR lv_name.\n          lt_attributes = li_open->get_attributes( ).\n          LOOP AT lt_attributes INTO li_attribute.\n*            WRITE / li_attribute->get_value( ).\n            lv_name = li_attribute->get_value( ).\n          ENDLOOP.\n\n          li_element = ri_doc->create_element_ns( li_open->qname-name ).\n          li_new ?= li_element.\n          li_current->append_child( li_new ).\n          li_current = li_new.\n*            WRITE ''@KERNEL console.dir(li_element);''.\n\n          IF lv_name IS NOT INITIAL.\n            li_element = ri_doc->create_element_ns( ''name'' ).\n            li_new ?= li_element.\n            li_new->set_value( lv_name ).\n\n            li_map = li_current->get_attributes( ).\n            li_map->set_named_item_ns( li_new ).\n          ENDIF.\n\n        WHEN if_sxml_node=>co_nt_element_close.\n          li_close ?= li_node.\n*          WRITE: / ''close: '', li_close->qname-name.\n*          IF li_close->qname-name = ''object'' OR li_close->qname-name = ''array''.\n          li_current = li_current->get_parent( ).\n*          ENDIF.\n        WHEN if_sxml_node=>co_nt_value.\n          li_value ?= li_node.\n*          WRITE / li_value->get_value( ).\n*          li_current->set_value( li_value->get_value( ) ).\n\n          li_element = ri_doc->create_element_ns( ''#text'' ).\n          li_element->set_value( li_value->get_value( ) ).\n          li_new ?= li_element.\n          li_current->append_child( li_new ).\n\n      ENDCASE.\n    ENDDO.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_AUTHORITY_CHECK                  ', 'CLASS kernel_authority_check DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS call.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS kernel_authority_check IMPLEMENTATION.\n\n  METHOD call.\n* add custom implementation here if needed\n    sy-subrc = 0.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_CALL                             ', 'CLASS kernel_call DEFINITION PUBLIC.\n* handling of ABAP statement CALL\n  PUBLIC SECTION.\n    CLASS-METHODS call\n      IMPORTING\n        input TYPE any.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS kernel_call IMPLEMENTATION.\n\n  METHOD call.\n\n    DATA uuid TYPE sysuuid_x16.\n    DATA name TYPE string.\n\n    WRITE ''@KERNEL name.set(INPUT.name);''.\n\n    IF name = ''RFCControl''.\n      uuid = cl_system_uuid=>if_system_uuid_static~create_uuid_x16( ).\n      WRITE ''@KERNEL INPUT.uuid.set(uuid);''.\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_CREATE_DATA_HANDLE               ', 'CLASS kernel_create_data_handle DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS call\n      IMPORTING\n        handle TYPE REF TO cl_abap_datadescr\n      CHANGING\n        dref   TYPE REF TO any.\n  PRIVATE SECTION.\n    CLASS-METHODS elem\n      IMPORTING\n        handle TYPE REF TO cl_abap_datadescr\n      CHANGING\n        dref   TYPE REF TO any.\n    CLASS-METHODS struct\n      IMPORTING\n        handle TYPE REF TO cl_abap_datadescr\n      CHANGING\n        dref   TYPE REF TO any.\n    CLASS-METHODS table\n      IMPORTING\n        handle TYPE REF TO cl_abap_datadescr\n      CHANGING\n        dref   TYPE REF TO any.\n    CLASS-METHODS ref\n      IMPORTING\n        handle TYPE REF TO cl_abap_datadescr\n      CHANGING\n        dref   TYPE REF TO any.\nENDCLASS.\n\nCLASS kernel_create_data_handle IMPLEMENTATION.\n\n  METHOD call.\n    ASSERT handle IS BOUND.\n\n    CASE handle->kind.\n      WHEN cl_abap_typedescr=>kind_elem.\n        elem( EXPORTING handle = handle\n              CHANGING dref = dref ).\n      WHEN cl_abap_typedescr=>kind_struct.\n        struct( EXPORTING handle = handle\n                CHANGING dref = dref ).\n      WHEN cl_abap_typedescr=>kind_table.\n        table( EXPORTING handle = handle\n               CHANGING dref = dref ).\n      WHEN cl_abap_typedescr=>kind_ref.\n        ref( EXPORTING handle = handle\n             CHANGING dref = dref ).\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(handle);''.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD ref.\n    DATA lo_ref  TYPE REF TO cl_abap_refdescr.\n    DATA lo_data TYPE REF TO cl_abap_datadescr.\n    DATA field   TYPE REF TO data.\n\n    lo_ref ?= handle.\n    lo_data ?= lo_ref->get_referenced_type( ).\n    call(\n      EXPORTING\n        handle = lo_data\n      CHANGING\n        dref   = field ).\n\n    WRITE ''@KERNEL dref.assign(new abap.types.DataReference(field.getPointer()));''.\n  ENDMETHOD.\n\n  METHOD struct.\n    DATA lo_struct     TYPE REF TO cl_abap_structdescr.\n    DATA lt_components TYPE cl_abap_structdescr=>component_table.\n    DATA ls_component  LIKE LINE OF lt_components.\n    DATA field         TYPE REF TO data.\n\n    lo_struct ?= handle.\n    lt_components = lo_struct->get_components( ).\n    WRITE ''@KERNEL let obj = {};''.\n    LOOP AT lt_components INTO ls_component.\n*      WRITE ''@KERNEL console.dir(ls_component.get().name);''.\n      call(\n        EXPORTING\n          handle = lo_struct->get_component_type( ls_component-name )\n        CHANGING\n          dref   = field ).\n      WRITE ''@KERNEL obj[ls_component.get().name.get().toLowerCase()] = field.getPointer();''.\n    ENDLOOP.\n    WRITE ''@KERNEL dref.assign(new abap.types.Structure(obj));''.\n  ENDMETHOD.\n\n  METHOD table.\n    DATA lo_table TYPE REF TO cl_abap_tabledescr.\n    DATA field    TYPE REF TO data.\n\n    lo_table ?= handle.\n\n    call(\n      EXPORTING\n        handle = lo_table->get_table_line_type( )\n      CHANGING\n        dref   = field ).\n\n    WRITE ''@KERNEL dref.assign(new abap.types.Table(field.getPointer()));''.\n  ENDMETHOD.\n\n  METHOD elem.\n    DATA lv_half TYPE i.\n    CASE handle->type_kind.\n      WHEN cl_abap_typedescr=>typekind_float.\n        CREATE DATA dref TYPE f.\n      WHEN cl_abap_typedescr=>typekind_string.\n        CREATE DATA dref TYPE string.\n      WHEN cl_abap_typedescr=>typekind_xstring.\n        CREATE DATA dref TYPE xstring.\n      WHEN cl_abap_typedescr=>typekind_int.\n        CREATE DATA dref TYPE i.\n      WHEN cl_abap_typedescr=>typekind_date.\n        CREATE DATA dref TYPE d.\n      WHEN cl_abap_typedescr=>typekind_hex.\n        CREATE DATA dref TYPE x LENGTH handle->length.\n      WHEN cl_abap_typedescr=>typekind_packed.\n        CREATE DATA dref TYPE p LENGTH handle->length DECIMALS handle->decimals.\n      WHEN cl_abap_typedescr=>typekind_char.\n        lv_half = handle->length / 2.\n        CREATE DATA dref TYPE c LENGTH lv_half.\n      WHEN cl_abap_typedescr=>typekind_num.\n        lv_half = handle->length / 2.\n        CREATE DATA dref TYPE n LENGTH lv_half.\n      WHEN cl_abap_typedescr=>typekind_time.\n        CREATE DATA dref TYPE t.\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(handle);''.\n        ASSERT 1 = ''todo''.\n    ENDCASE.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_LOCK                             ', 'CLASS kernel_lock DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS enqueue\n      IMPORTING\n        input TYPE any\n      EXCEPTIONS\n        foreign_lock\n        system_failure.\n    CLASS-METHODS dequeue\n      IMPORTING\n        input TYPE any.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS kernel_lock IMPLEMENTATION.\n\n  METHOD enqueue.\n* add custom implementation here if needed\n    sy-subrc = 0.\n  ENDMETHOD.\n\n  METHOD dequeue.\n* add custom implementation here if needed\n    sy-subrc = 0.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_PUSH_CHANNELS                    ', 'CLASS kernel_push_channels DEFINITION PUBLIC.\n* handling of ABAP statement WAIT FOR PUSH CHANNELS\n  PUBLIC SECTION.\n    CLASS-METHODS wait.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS kernel_push_channels IMPLEMENTATION.\n\n  METHOD wait.\n* todo, await up to some seconds\n    WRITE ''@KERNEL await new Promise(resolve => setTimeout(resolve, 1000));''.\n* todo, check condition\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_SCAN_ABAP_SOURCE                 ', 'CLASS kernel_scan_abap_source DEFINITION PUBLIC.\n* handling of ABAP statement SCAN ABAP-SOURCE\n  PUBLIC SECTION.\n    CLASS-METHODS call IMPORTING input TYPE any.\n  PRIVATE SECTION.\n    TYPES ty_stokesx TYPE STANDARD TABLE OF stokesx WITH DEFAULT KEY.\n    TYPES ty_sstmnt TYPE STANDARD TABLE OF sstmnt WITH DEFAULT KEY.\n\n    CLASS-METHODS call_internal\n      IMPORTING\n        source     TYPE string\n      EXPORTING\n        et_stokesx TYPE ty_stokesx\n        et_sstmnt  TYPE ty_sstmnt.\n\n    CONSTANTS: BEGIN OF gc_token,\n                 comment    TYPE c LENGTH 1 VALUE ''C'',\n                 identifier TYPE c LENGTH 1 VALUE ''I'',\n                 list       TYPE c LENGTH 1 VALUE ''L'',\n                 literal    TYPE c LENGTH 1 VALUE ''S'',\n                 pragma     TYPE c LENGTH 1 VALUE ''P'',\n               END OF gc_token.\n\n    CONSTANTS: BEGIN OF gc_statement,\n                 comment          TYPE c LENGTH 1 VALUE ''P'',\n                 comment_in_stmnt TYPE c LENGTH 1 VALUE ''S'',\n                 compute_direct   TYPE c LENGTH 1 VALUE ''C'',\n                 empty            TYPE c LENGTH 1 VALUE ''N'',\n                 macro_call       TYPE c LENGTH 1 VALUE ''D'',\n                 macro_definition TYPE c LENGTH 1 VALUE ''M'',\n                 method_direct    TYPE c LENGTH 1 VALUE ''A'',\n                 native_sql       TYPE c LENGTH 1 VALUE ''E'',\n                 pragma           TYPE c LENGTH 1 VALUE ''G'',\n                 standard         TYPE c LENGTH 1 VALUE ''K'',\n               END OF gc_statement.\n\n    CLASS-METHODS pass1\n      IMPORTING\n        source        TYPE string\n      EXPORTING\n        et_tokens     TYPE ty_stokesx\n        et_statements TYPE ty_sstmnt.\n\n    CLASS-METHODS pass2\n      CHANGING\n        ct_tokens     TYPE ty_stokesx\n        ct_statements TYPE ty_sstmnt.\nENDCLASS.\n\nCLASS kernel_scan_abap_source IMPLEMENTATION.\n\n  METHOD call.\n\n* non-goal: good performance\n\n    DATA lt_sstmnt  TYPE ty_sstmnt.\n    DATA lt_stokes  TYPE stokes_tab.\n    DATA ls_stokes  LIKE LINE OF lt_stokes.\n    DATA lt_stokesx TYPE ty_stokesx.\n    DATA ls_stokesx LIKE LINE OF lt_stokesx.\n    DATA lv_source  TYPE string.\n\n    WRITE ''@KERNEL lv_source.set(INPUT.scan_abap_source.array ? INPUT.scan_abap_source.array().map(e => e.get()).join(\"\\\\n\") : INPUT.scan_abap_source.get());''.\n\n    call_internal(\n      EXPORTING\n        source     = lv_source\n      IMPORTING\n        et_stokesx = lt_stokesx\n        et_sstmnt  = lt_sstmnt ).\n\n    LOOP AT lt_stokesx INTO ls_stokesx.\n      CLEAR ls_stokes.\n      MOVE-CORRESPONDING ls_stokesx TO ls_stokes.\n      APPEND ls_stokes TO lt_stokes.\n    ENDLOOP.\n\n    WRITE ''@KERNEL const len = Object.keys(INPUT.tokens_into.getRowType().get()).length;''.\n    WRITE ''@KERNEL INPUT.tokens_into.set(len == 4 ? lt_stokes : lt_stokesx);''.\n\n    WRITE ''@KERNEL INPUT.statements_into.set(lt_sstmnt);''.\n\n  ENDMETHOD.\n\n  METHOD call_internal.\n\n* build tokens in sequence of occurence in the source\n* take care of chained statements\n    pass1(\n      EXPORTING\n        source        = source\n      IMPORTING\n        et_tokens     = et_stokesx\n        et_statements = et_sstmnt ).\n\n* move comment tokens and add/change statements to comment type\n    pass2(\n      CHANGING\n        ct_tokens     = et_stokesx\n        ct_statements = et_sstmnt ).\n\n  ENDMETHOD.\n\n  METHOD pass1.\n    CONSTANTS: BEGIN OF c_mode,\n                 normal  TYPE i VALUE 1,\n                 comment TYPE i VALUE 2,\n               END OF c_mode.\n\n    DATA character    TYPE c LENGTH 1.\n    DATA row          TYPE i VALUE 1.\n    DATA column       TYPE i.\n    DATA index        TYPE i.\n    DATA sfrom        TYPE i VALUE 1.\n    DATA mode         TYPE i.\n    DATA chain_tokens TYPE ty_stokesx.\n\n    FIELD-SYMBOLS <trow> LIKE LINE OF et_tokens.\n    FIELD-SYMBOLS <srow> LIKE LINE OF et_statements.\n\n    mode = c_mode-normal.\n    WHILE source IS NOT INITIAL.\n      character = source(1).\n      source = source+1.\n\n      IF <trow> IS NOT ASSIGNED AND character <> '''' AND character <> |\\\\n|.\n        APPEND INITIAL LINE TO et_tokens ASSIGNING <trow>.\n        <trow>-row = row.\n        <trow>-col = column.\n        <trow>-type = gc_token-identifier.\n      ELSEIF mode = c_mode-normal AND ( character = '''' OR character CA |.,| ).\n        UNASSIGN <trow>.\n\"         IF character = '',''.\n\" *          WRITE ''@KERNEL console.dir(\"before\");''.\n\"           APPEND LINES OF chain_tokens TO et_tokens.\n\" *          WRITE ''@KERNEL console.dir(\"after\");''.\n\" *          WRITE lines( <tokens> ).\n\"         ENDIF.\n      ELSEIF mode = c_mode-normal AND character = '':''.\n        CLEAR chain_tokens.\n        APPEND LINES OF et_tokens FROM sfrom TO chain_tokens.\n        DELETE chain_tokens WHERE type = gc_token-comment.\n*        WRITE ''@KERNEL console.dir(chain_tokens);''.\n      ENDIF.\n\n      IF ( mode = c_mode-normal AND character CA |.,| )\n          OR source = ''''.\n        APPEND INITIAL LINE TO et_statements ASSIGNING <srow>.\n        <srow>-terminator = character.\n        <srow>-from = sfrom.\n        <srow>-to = lines( et_tokens ).\n        sfrom = <srow>-to + 1.\n\n        IF character = '',''.\n*          WRITE ''@KERNEL console.dir(\"before\");''.\n          APPEND LINES OF chain_tokens TO et_tokens.\n*          WRITE ''@KERNEL console.dir(\"after\");''.\n*          WRITE lines( <tokens> ).\n        ENDIF.\n      ENDIF.\n\n      IF character = |\\\\n|.\n        mode = c_mode-normal.\n        UNASSIGN <trow>.\n        row = row + 1.\n        column = 0.\n      ELSE.\n        IF <trow> IS ASSIGNED.\n          IF ( character = ''*'' AND column = 0 ) OR character = ''\"''.\n            mode = c_mode-comment.\n            <trow>-type = gc_token-comment.\n          ENDIF.\n          IF mode = c_mode-comment.\n            <trow>-type = gc_token-comment.\n            CONCATENATE <trow>-str character INTO <trow>-str RESPECTING BLANKS.\n          ELSEIF character <> '':''.\n            <trow>-str = <trow>-str && to_upper( |{ character }| ).\n          ENDIF.\n        ENDIF.\n        column = column + 1.\n      ENDIF.\n\n    ENDWHILE.\n\n  ENDMETHOD.\n\n  METHOD pass2.\n    FIELD-SYMBOLS <ls_statement> LIKE LINE OF ct_statements.\n    DATA ls_statement       LIKE LINE OF ct_statements.\n    DATA ls_token           LIKE LINE OF ct_tokens.\n    DATA contains_comment   TYPE abap_bool.\n    DATA contains_normal    TYPE abap_bool.\n    DATA lv_count           TYPE i.\n    DATA lv_statement_index TYPE i.\n    DATA lt_insert          LIKE ct_tokens.\n    DATA lt_delete          TYPE STANDARD TABLE OF i WITH DEFAULT KEY.\n    DATA lv_index           LIKE LINE OF lt_delete.\n\n    LOOP AT ct_statements ASSIGNING <ls_statement>.\n      lv_statement_index = sy-tabix.\n\n*      WRITE ''@KERNEL console.dir(\"statement\");''.\n      contains_comment = abap_false.\n      contains_normal = abap_false.\n      LOOP AT ct_tokens INTO ls_token FROM <ls_statement>-from TO <ls_statement>-to.\n        IF ls_token-type = gc_token-comment.\n          contains_comment = abap_true.\n        ELSE.\n          contains_normal = abap_true.\n        ENDIF.\n*        WRITE ''@KERNEL console.dir(ls_token.get().str.get());''.\n      ENDLOOP.\n\n      IF contains_comment = abap_true AND contains_normal = abap_true.\n* its a mix, move comments to the front as separate statement\n*        WRITE ''@KERNEL console.dir(\"from: \" + fs_ls_statement_.get().from.get());''.\n*        WRITE ''@KERNEL console.dir(\"to: \" + fs_ls_statement_.get().to.get());''.\n        lv_count = 0.\n        CLEAR lt_insert.\n        CLEAR lt_delete.\n        LOOP AT ct_tokens INTO ls_token FROM <ls_statement>-from TO <ls_statement>-to.\n*          WRITE ''@KERNEL console.dir(\"token: \" + ls_token.get().str.get() + \" \" + abap.builtin.sy.get().tabix.get());''.\n          IF ls_token-type = gc_token-comment.\n            INSERT sy-tabix INTO lt_delete INDEX 1.\n            INSERT ls_token INTO lt_insert INDEX 1.\n            lv_count = lv_count + 1.\n          ENDIF.\n        ENDLOOP.\n        LOOP AT lt_delete INTO lv_index.\n          DELETE ct_tokens INDEX lv_index.\n        ENDLOOP.\n        LOOP AT lt_insert INTO ls_token.\n          INSERT ls_token INTO ct_tokens INDEX <ls_statement>-from.\n        ENDLOOP.\n\n        CLEAR ls_statement.\n        ls_statement-from = <ls_statement>-from.\n        ls_statement-to = <ls_statement>-from + lv_count - 1.\n        ls_statement-type = gc_statement-comment.\n\n        <ls_statement>-from = <ls_statement>-from + lv_count.\n\n        INSERT ls_statement INTO ct_statements INDEX lv_statement_index.\n      ELSEIF contains_comment = abap_true.\n        <ls_statement>-type = gc_statement-comment.\n      ELSE.\n        <ls_statement>-type = gc_statement-standard.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_MATH                            ', 'CLASS cl_abap_math DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CONSTANTS min_int4 TYPE i VALUE -2147483648.\n    CONSTANTS max_int4 TYPE i VALUE 2147483647.\n\n    CONSTANTS round_ceiling   TYPE i VALUE 0.\n    CONSTANTS round_up        TYPE i VALUE 1.\n    CONSTANTS round_half_up   TYPE i VALUE 2.\n    CONSTANTS round_half_even TYPE i VALUE 3.\n    CONSTANTS round_half_down TYPE i VALUE 4.\n    CONSTANTS round_down      TYPE i VALUE 5.\n    CONSTANTS round_floor     TYPE i VALUE 6.\nENDCLASS.\n\nCLASS cl_abap_math IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_RANDOM                          ', 'CLASS cl_abap_random DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS create\n      IMPORTING\n        seed TYPE i OPTIONAL\n      RETURNING\n        VALUE(ro_random) TYPE REF TO cl_abap_random.\n    METHODS int RETURNING VALUE(rv_integer) TYPE i.\n    METHODS intinrange\n      IMPORTING\n        low  TYPE i\n        high TYPE i\n      RETURNING\n        VALUE(rv_integer) TYPE i.\n    CLASS-METHODS seed RETURNING VALUE(rv_seed) TYPE i.\n* todo, use \"crypto.\" instead, see cl_abap_hmac which also uses crypto\nENDCLASS.\n\nCLASS cl_abap_random IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT ro_random.\n  ENDMETHOD.\n\n  METHOD int.\n* todo, currently only positive integers are returned\n    WRITE ''@KERNEL rv_integer.set(Math.floor(Math.random() * 2147483647));''.\n  ENDMETHOD.\n\n  METHOD seed.\n    WRITE ''@KERNEL rv_seed.set(Math.floor(Math.random() * 2147483647));''.\n  ENDMETHOD.\n\n  METHOD intinrange.\n* including \"low\" and \"high\" numbers\n    DATA lv_interval TYPE i.\n    ASSERT high > low.\n    ASSERT low >= 0.\n    lv_interval = high - low + 1.\n    rv_integer = abs( int( ) ).\n    rv_integer = rv_integer MOD lv_interval.\n    rv_integer = rv_integer + low.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_RANDOM_INT                      ', 'CLASS cl_abap_random_int DEFINITION PUBLIC FINAL CREATE PRIVATE.\n  PUBLIC SECTION.\n    CLASS-METHODS create\n      IMPORTING\n        seed TYPE i OPTIONAL\n        min  TYPE i DEFAULT -2147483648\n        max  TYPE i DEFAULT 2147483647\n        PREFERRED PARAMETER seed\n      RETURNING\n        VALUE(prng) TYPE REF TO cl_abap_random_int\n      RAISING\n        cx_abap_random.\n\n    METHODS get_next\n      RETURNING\n        VALUE(value) TYPE i.\nENDCLASS.\n\nCLASS cl_abap_random_int IMPLEMENTATION.\n  METHOD create.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_next.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_ABAP_RANDOM                          ', 'CLASS cx_abap_random DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_abap_random IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_NUMBERRANGE_RUNTIME                  ', 'CLASS cl_numberrange_runtime DEFINITION PUBLIC.\n  PUBLIC SECTION.\n\n    TYPES nr_interval TYPE c LENGTH 2.\n    TYPES nr_object   TYPE c LENGTH 10.\n    TYPES nr_number   TYPE n LENGTH 20.\n\n    CLASS-METHODS number_get\n      IMPORTING\n        nr_range_nr TYPE nr_interval\n        object      TYPE nr_object\n      EXPORTING\n        number      TYPE nr_number\n      RAISING\n        cx_static_check.\nENDCLASS.\n\nCLASS cl_numberrange_runtime IMPLEMENTATION.\n\n  METHOD number_get.\n\n    CALL FUNCTION ''NUMBER_GET_NEXT''\n      EXPORTING\n        nr_range_nr             = nr_range_nr\n        object                  = object\n      IMPORTING\n        number                  = number\n      EXCEPTIONS\n        interval_not_found      = 1\n        number_range_not_intern = 2\n        object_not_found        = 3\n        quantity_is_0           = 4\n        quantity_is_not_1       = 5\n        interval_overflow       = 6\n        buffer_overflow         = 7\n        OTHERS                  = 8.\n    IF sy-subrc <> 0.\n      RETURN. \" todo\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_NUMBERRANGE                      ', 'CLASS kernel_numberrange DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS number_get\n      IMPORTING\n        nr_range_nr TYPE cl_numberrange_runtime=>nr_interval\n        object      TYPE cl_numberrange_runtime=>nr_object\n      EXPORTING\n        number      TYPE cl_numberrange_runtime=>nr_number\n      RAISING\n        cx_static_check.\n  PRIVATE SECTION.\n    TYPES: BEGIN OF ty_status,\n             nr_range_nr TYPE cl_numberrange_runtime=>nr_interval,\n             object      TYPE cl_numberrange_runtime=>nr_object,\n             number      TYPE cl_numberrange_runtime=>nr_number,\n           END OF ty_status.\n    CLASS-DATA status TYPE STANDARD TABLE OF ty_status WITH DEFAULT KEY.\nENDCLASS.\n\nCLASS kernel_numberrange IMPLEMENTATION.\n\n  METHOD number_get.\n* for now, only in memory for the current session\n    FIELD-SYMBOLS <row> LIKE LINE OF status.\n    READ TABLE status WITH KEY nr_range_nr = nr_range_nr object = object ASSIGNING <row>.\n    IF sy-subrc = 0.\n      <row>-number = <row>-number + 1.\n    ELSE.\n      APPEND INITIAL LINE TO status ASSIGNING <row>.\n      <row>-nr_range_nr = nr_range_nr.\n      <row>-object = object.\n      <row>-number = 1.\n    ENDIF.\n    number = <row>-number.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_OO_FACTORY                           ', 'CLASS cl_oo_factory DEFINITION PUBLIC CREATE PRIVATE.\n  PUBLIC SECTION.\n    INTERFACES if_oo_clif_source.\n\n    CLASS-METHODS create_instance\n      RETURNING\n        VALUE(result) TYPE REF TO cl_oo_factory.\n\n    METHODS create_clif_source\n      IMPORTING\n        clif_name     TYPE csequence\n      RETURNING\n        VALUE(result) TYPE REF TO if_oo_clif_source\n      RAISING\n        cx_oo_clif_not_exists.\n\n  PRIVATE SECTION.\n    DATA mv_name TYPE string.\nENDCLASS.\n\nCLASS cl_oo_factory IMPLEMENTATION.\n  METHOD create_instance.\n    CREATE OBJECT result.\n  ENDMETHOD.\n\n  METHOD create_clif_source.\n* todo, this not correct, should return a new instance, but will work for now\n    result = me.\n    mv_name = to_upper( clif_name ).\n  ENDMETHOD.\n\n  METHOD if_oo_clif_source~get_source.\n    DATA ls_data TYPE reposrc.\n    SELECT SINGLE * FROM reposrc INTO ls_data WHERE progname = mv_name.\n    SPLIT ls_data-data AT |\\\\n| INTO TABLE source.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_OO_CLIF_NOT_EXISTS                   ', 'CLASS cx_oo_clif_not_exists DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_oo_clif_not_exists IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_OO_CLIF_SOURCE                       ', 'INTERFACE if_oo_clif_source PUBLIC.\n  METHODS get_source\n    EXPORTING\n      source TYPE string_table.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_MATCHER                         ', 'CLASS cl_abap_matcher DEFINITION PUBLIC.\n\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        pattern TYPE clike\n        ignore_case TYPE abap_bool\n        text TYPE clike.\n\n    METHODS find_all\n      RETURNING\n        VALUE(rt_matches) TYPE match_result_tab.\n\n    METHODS find_next\n      RETURNING\n        VALUE(found) TYPE abap_bool.\n\n    METHODS get_submatch\n      IMPORTING\n        index TYPE i\n      RETURNING\n        VALUE(match) TYPE string.\n\n    METHODS get_offset\n      RETURNING\n        VALUE(offset) TYPE i.\n\n    METHODS match\n      RETURNING\n        VALUE(success) TYPE abap_bool.\n\n    METHODS get_length\n      RETURNING\n        VALUE(length) TYPE i.\n\n  PRIVATE SECTION.\n    DATA mt_matches TYPE match_result_tab.\n    DATA mv_index TYPE i.\n    DATA mv_text TYPE string.\n    DATA mv_pattern TYPE string.\n\nENDCLASS.\n\nCLASS cl_abap_matcher IMPLEMENTATION.\n\n  METHOD constructor.\n    IF ignore_case = abap_true.\n      FIND ALL OCCURRENCES OF REGEX pattern IN text RESULTS mt_matches IGNORING CASE.\n    ELSE.\n      FIND ALL OCCURRENCES OF REGEX pattern IN text RESULTS mt_matches.\n    ENDIF.\n    mv_pattern = pattern.\n    mv_text = text.\n  ENDMETHOD.\n\n  METHOD match.\n    FIND ALL OCCURRENCES OF REGEX |^{ mv_pattern }$| IN mv_text.\n    success = boolc( sy-subrc = 0 ).\n  ENDMETHOD.\n\n  METHOD find_all.\n    rt_matches = mt_matches.\n  ENDMETHOD.\n\n  METHOD find_next.\n    mv_index = mv_index + 1.\n    READ TABLE mt_matches INDEX mv_index TRANSPORTING NO FIELDS.\n    found = boolc( sy-subrc = 0 ).\n  ENDMETHOD.\n\n  METHOD get_submatch.\n    DATA ls_match LIKE LINE OF mt_matches.\n    DATA ls_submatch LIKE LINE OF ls_match-submatches.\n    READ TABLE mt_matches INDEX mv_index INTO ls_match.\n    READ TABLE ls_match-submatches INDEX index INTO ls_submatch.\n    IF sy-subrc = 0.\n      match = mv_text+ls_submatch-offset(ls_submatch-length).\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD get_offset.\n    DATA ls_match LIKE LINE OF mt_matches.\n    READ TABLE mt_matches INDEX mv_index INTO ls_match.\n    offset = ls_match-offset.\n  ENDMETHOD.\n\n  METHOD get_length.\n    DATA ls_match LIKE LINE OF mt_matches.\n    READ TABLE mt_matches INDEX mv_index INTO ls_match.\n    length = ls_match-length.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_REGEX                           ', 'CLASS cl_abap_regex DEFINITION PUBLIC.\n\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        pattern     TYPE clike\n        ignore_case TYPE abap_bool DEFAULT abap_false.\n\n    METHODS create_matcher\n      IMPORTING\n        text              TYPE clike\n      RETURNING\n        VALUE(ro_matcher) TYPE REF TO cl_abap_matcher.\n\n    CLASS-METHODS create_pcre\n      IMPORTING\n        pattern      TYPE clike\n        ignore_case  TYPE abap_bool DEFAULT abap_false\n      RETURNING\n        VALUE(regex) TYPE REF TO cl_abap_regex.\n\n  PRIVATE SECTION.\n    DATA mv_pattern     TYPE string.\n    DATA mv_ignore_case TYPE abap_bool.\n\nENDCLASS.\n\nCLASS cl_abap_regex IMPLEMENTATION.\n\n  METHOD constructor.\n    mv_pattern = pattern.\n    mv_ignore_case = ignore_case.\n  ENDMETHOD.\n\n  METHOD create_pcre.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD create_matcher.\n    CREATE OBJECT ro_matcher\n      EXPORTING\n        pattern     = mv_pattern\n        ignore_case = mv_ignore_case\n        text        = text.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_CLASSDESCR                      ', 'CLASS cl_abap_classdescr DEFINITION PUBLIC INHERITING FROM cl_abap_objectdescr.\n  PUBLIC SECTION.\n    CLASS-METHODS get_class_name\n      IMPORTING\n        p_object TYPE REF TO object\n      RETURNING\n        VALUE(p_name) TYPE abap_abstypename.\n\n    METHODS get_super_class_type\n      RETURNING\n        VALUE(p_descr_ref) TYPE REF TO cl_abap_classdescr\n      EXCEPTIONS\n        super_class_not_found.\n\n    METHODS constructor\n      IMPORTING\n        p_object TYPE any OPTIONAL.\nENDCLASS.\n\nCLASS cl_abap_classdescr IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( p_object ).\n  ENDMETHOD.\n\n  METHOD get_class_name.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_super_class_type.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_COMPLEXDESCR                    ', 'CLASS cl_abap_complexdescr DEFINITION PUBLIC INHERITING FROM cl_abap_datadescr.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cl_abap_complexdescr IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_DATADESCR                       ', 'CLASS cl_abap_datadescr DEFINITION PUBLIC INHERITING FROM cl_abap_typedescr.\n  PUBLIC SECTION.\n    CLASS-METHODS get_data_type_kind\n      IMPORTING\n        p_data             TYPE data\n      RETURNING\n        VALUE(p_type_kind) TYPE abap_typekind.\n\n    METHODS applies_to_data\n      IMPORTING\n        p_data TYPE data\n      RETURNING\n        VALUE(p_flag) TYPE abap_bool.\nENDCLASS.\n\nCLASS cl_abap_datadescr IMPLEMENTATION.\n\n  METHOD get_data_type_kind.\n    DATA descr TYPE REF TO cl_abap_typedescr.\n    descr = cl_abap_typedescr=>describe_by_data( p_data ).\n    p_type_kind = descr->type_kind.\n  ENDMETHOD.\n\n  METHOD applies_to_data.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_ELEMDESCR                       ', 'CLASS cl_abap_elemdescr DEFINITION PUBLIC INHERITING FROM cl_abap_datadescr.\n  PUBLIC SECTION.\n    TYPES:\n      BEGIN OF fixvalue,\n        low        TYPE c LENGTH 10,\n        high       TYPE c LENGTH 10,\n        option     TYPE c LENGTH 2,\n        ddlanguage TYPE c,\n        ddtext     TYPE c LENGTH 60,\n      END OF fixvalue.\n    TYPES fixvalues TYPE STANDARD TABLE OF fixvalue WITH DEFAULT KEY.\n\n    DATA output_length TYPE i READ-ONLY.\n    DATA edit_mask TYPE abap_editmask READ-ONLY.\n    DATA help_id TYPE abap_helpid READ-ONLY.\n\n    METHODS get_ddic_fixed_values\n      RETURNING\n        VALUE(p_fixed_values) TYPE fixvalues.\n\n    METHODS get_ddic_field\n      IMPORTING\n        p_langu TYPE sy-langu DEFAULT sy-langu\n      RETURNING\n        VALUE(p_flddescr) TYPE dfies\n      EXCEPTIONS\n        not_found\n        no_ddic_type.\n\n    CLASS-METHODS get_i RETURNING VALUE(r_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_f RETURNING VALUE(r_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_d RETURNING VALUE(r_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_t RETURNING VALUE(r_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_string RETURNING VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_c\n      IMPORTING\n        p_length TYPE i\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_p\n      IMPORTING\n        p_length   TYPE i\n        p_decimals TYPE i\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_n\n      IMPORTING\n        p_length TYPE i\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_x\n      IMPORTING\n        p_length TYPE i\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n    CLASS-METHODS get_xstring\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_elemdescr.\n\nENDCLASS.\n\nCLASS cl_abap_elemdescr IMPLEMENTATION.\n\n  METHOD get_p.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_n.\n    DATA foo TYPE REF TO data.\n    CREATE DATA foo TYPE n LENGTH p_length.\n    p_result ?= cl_abap_typedescr=>describe_by_data_ref( foo ).\n  ENDMETHOD.\n\n  METHOD get_x.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_xstring.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_ddic_field.\n    p_flddescr-tabname  = absolute_name.\n    p_flddescr-inttype  = type_kind.\n    p_flddescr-langu    = sy-langu.\n    p_flddescr-position = 1.\n    p_flddescr-leng     = length.\n    p_flddescr-decimals = decimals.\n\n    WRITE ''@KERNEL p_flddescr.get().domname.set(abap.DDIC[this.relative_name.get()]?.domain || \"\");''.\n\n* todo, dfies-convexit\n  ENDMETHOD.\n\n  METHOD get_i.\n    DATA foo TYPE i.\n    r_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\n\n  METHOD get_string.\n    DATA foo TYPE string.\n    p_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\n\n  METHOD get_f.\n    DATA foo TYPE f.\n    r_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\n\n  METHOD get_d.\n    DATA foo TYPE d.\n    r_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\n\n  METHOD get_t.\n    DATA foo TYPE t.\n    r_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\n\n  METHOD get_c.\n    DATA foo TYPE REF TO data.\n    CREATE DATA foo TYPE c LENGTH p_length.\n    p_result ?= cl_abap_typedescr=>describe_by_data_ref( foo ).\n  ENDMETHOD.\n\n  METHOD get_ddic_fixed_values.\n\n    DATA lv_dummy TYPE string.\n    DATA lv_name  TYPE string.\n    DATA ls_row   LIKE LINE OF p_fixed_values.\n\n    SPLIT absolute_name AT ''='' INTO lv_dummy lv_name.\n\n    WRITE ''@KERNEL for (const f of abap.DDIC[lv_name.get()]?.fixedValues || []) {''.\n    CLEAR ls_row.\n    WRITE ''@KERNEL   ls_row.get().low.set(f.low || \"\");''.\n    WRITE ''@KERNEL   ls_row.get().high.set(f.high || \"\");''.\n    WRITE ''@KERNEL   ls_row.get().option.set(f.option || \"\");''.\n    WRITE ''@KERNEL   ls_row.get().ddlanguage.set(f.ddlanguage || \"\");''.\n    WRITE ''@KERNEL   ls_row.get().ddtext.set(f.ddtext || \"\");''.\n    APPEND ls_row TO p_fixed_values.\n    WRITE ''@KERNEL }''.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_ENUMDESCR                       ', 'CLASS cl_abap_enumdescr DEFINITION PUBLIC INHERITING FROM cl_abap_elemdescr.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF member,\n             name  TYPE c LENGTH 30,\n             value TYPE string,\n           END OF member.\n    TYPES member_table TYPE STANDARD TABLE OF member WITH KEY name.\n    DATA members TYPE member_table READ-ONLY.\nENDCLASS.\n\nCLASS cl_abap_enumdescr IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_INTFDESCR                       ', 'CLASS cl_abap_intfdescr DEFINITION PUBLIC INHERITING FROM cl_abap_objectdescr.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cl_abap_intfdescr IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_OBJECTDESCR                     ', 'CLASS cl_abap_objectdescr DEFINITION PUBLIC INHERITING FROM cl_abap_typedescr.\n  PUBLIC SECTION.\n    CONSTANTS changing  TYPE abap_parmkind VALUE ''C''.\n    CONSTANTS exporting TYPE abap_parmkind VALUE ''E''.\n    CONSTANTS importing TYPE abap_parmkind VALUE ''I''.\n    CONSTANTS receiving TYPE abap_parmkind VALUE ''R''.\n    CONSTANTS returning TYPE abap_parmkind VALUE ''R''.\n\n    CONSTANTS private_   TYPE abap_visibility VALUE ''I''.\n    CONSTANTS protected TYPE abap_visibility VALUE ''O''.\n    CONSTANTS public_    TYPE abap_visibility VALUE ''U''.\n\n    DATA attributes TYPE abap_attrdescr_tab READ-ONLY.\n    DATA methods    TYPE abap_methdescr_tab READ-ONLY.\n    DATA interfaces TYPE abap_intfdescr_tab READ-ONLY.\n\n    METHODS constructor\n      IMPORTING\n        p_object TYPE any OPTIONAL.\n\n    METHODS get_attribute_type\n      IMPORTING\n        p_name             TYPE any\n      RETURNING\n        VALUE(p_descr_ref) TYPE REF TO cl_abap_datadescr\n      EXCEPTIONS\n        attribute_not_found.\n\n    METHODS get_method_parameter_type\n      IMPORTING\n        p_method_name      TYPE any\n        p_parameter_name   TYPE any\n      RETURNING\n        VALUE(p_descr_ref) TYPE REF TO cl_abap_datadescr\n      EXCEPTIONS\n        parameter_not_found\n        method_not_found.\n\n    METHODS get_interface_type\n      IMPORTING\n        p_name             TYPE any\n      RETURNING\n        VALUE(p_descr_ref) TYPE REF TO cl_abap_intfdescr\n      EXCEPTIONS\n        interface_not_found.\n\n  PROTECTED SECTION.\n    DATA mv_object_name TYPE string.\n    DATA mv_object_type TYPE string.\n    TYPES: BEGIN OF ty_types,\n             name TYPE abap_attrname,\n             type TYPE REF TO cl_abap_datadescr,\n           END OF ty_types.\n    DATA mt_types TYPE STANDARD TABLE OF ty_types WITH DEFAULT KEY.\nENDCLASS.\n\nCLASS cl_abap_objectdescr IMPLEMENTATION.\n\n  METHOD constructor.\n    DATA lv_name  TYPE abap_attrname.\n    DATA lv_char1 TYPE c LENGTH 1.\n    DATA lv_any   TYPE string.\n    FIELD-SYMBOLS <fs> TYPE abap_attrdescr.\n    FIELD-SYMBOLS <type> LIKE LINE OF mt_types.\n\n    WRITE ''@KERNEL for (const a in p_object.ATTRIBUTES || []) {''.\n\n    WRITE ''@KERNEL   lv_name.set(a)''.\n    APPEND INITIAL LINE TO attributes ASSIGNING <fs>.\n    APPEND INITIAL LINE TO mt_types ASSIGNING <type>.\n    <fs>-name = lv_name.\n    <type>-name = lv_name.\n\n    WRITE ''@KERNEL   lv_char1.set(p_object.ATTRIBUTES[a].is_constant);''.\n    <fs>-is_constant = lv_char1.\n    WRITE ''@KERNEL   lv_char1.set(p_object.ATTRIBUTES[a].visibility);''.\n    <fs>-visibility = lv_char1.\n\n    WRITE ''@KERNEL   lv_any = p_object.ATTRIBUTES[a].type();''.\n    <type>-type ?= describe_by_data( lv_any ).\n\n    WRITE ''@KERNEL }''.\n    SORT attributes BY name ASCENDING.\n\n    super->constructor( ).\n  ENDMETHOD.\n\n  METHOD get_method_parameter_type.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_interface_type.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_attribute_type.\n    DATA lv_name TYPE abap_attrname.\n    DATA ls_type LIKE LINE OF mt_types.\n\n    lv_name = to_upper( p_name ).\n    READ TABLE mt_types INTO ls_type WITH KEY name = lv_name.\n    IF sy-subrc <> 0.\n      RAISE attribute_not_found.\n    ENDIF.\n    p_descr_ref = ls_type-type.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_REFDESCR                        ', 'CLASS cl_abap_refdescr DEFINITION PUBLIC INHERITING FROM cl_abap_datadescr.\n  PUBLIC SECTION.\n    METHODS get_referenced_type\n      RETURNING VALUE(type) TYPE REF TO cl_abap_typedescr.\n\n    CLASS-METHODS get_ref_to_data\n      RETURNING\n        VALUE(p_result) TYPE REF TO cl_abap_refdescr.\n\n  PRIVATE SECTION.\n    DATA referenced TYPE REF TO cl_abap_typedescr.\nENDCLASS.\n\nCLASS cl_abap_refdescr IMPLEMENTATION.\n  METHOD get_referenced_type.\n    type = referenced.\n  ENDMETHOD.\n\n  METHOD get_ref_to_data.\n    DATA foo TYPE REF TO data.\n    p_result ?= cl_abap_typedescr=>describe_by_data( foo ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_STRUCTDESCR                     ', 'CLASS cl_abap_structdescr DEFINITION PUBLIC INHERITING FROM cl_abap_complexdescr.\n  PUBLIC SECTION.\n    CLASS-METHODS\n      construct_from_data\n        IMPORTING data TYPE any\n        RETURNING VALUE(descr) TYPE REF TO cl_abap_structdescr.\n\n    TYPES component       TYPE abap_componentdescr.\n    TYPES component_table TYPE abap_component_tab.\n    TYPES included_view   TYPE abap_component_view_tab.\n    TYPES symbol_table    TYPE abap_component_symbol_tab.\n\n    METHODS\n      get_components\n        RETURNING\n          VALUE(rt_components) TYPE component_table.\n\n    METHODS\n      get_ddic_field_list\n        IMPORTING\n          p_langu                  TYPE syst-langu DEFAULT sy-langu\n          p_including_substructres TYPE abap_bool DEFAULT abap_false\n        RETURNING\n          VALUE(rt_components)     TYPE ddfields\n        EXCEPTIONS\n          not_found\n          no_ddic_type.\n\n    METHODS is_ddic_type RETURNING VALUE(bool) TYPE abap_bool.\n\n    METHODS get_component_type\n      IMPORTING\n        p_name TYPE any\n      RETURNING\n        VALUE(p_descr_ref) TYPE REF TO cl_abap_datadescr\n      EXCEPTIONS\n        component_not_found\n        unsupported_input_type.\n\n    METHODS get_included_view\n      IMPORTING\n        p_level TYPE i OPTIONAL\n      RETURNING\n        VALUE(p_result) TYPE included_view.\n\n    CLASS-METHODS create\n      IMPORTING\n        p_components TYPE component_table\n        p_strict     TYPE abap_bool OPTIONAL\n      RETURNING\n        VALUE(ref)   TYPE REF TO cl_abap_structdescr.\n\n    METHODS get_symbols\n      RETURNING\n        VALUE(p_result) TYPE symbol_table.\n\n    DATA components TYPE abap_compdescr_tab.\n    DATA struct_kind TYPE abap_structkind READ-ONLY.\n\n  PRIVATE SECTION.\n    METHODS update_components.\n\n    TYPES: BEGIN OF ty_refs,\n             name      TYPE string,\n             ref       TYPE REF TO cl_abap_datadescr,\n           END OF ty_refs.\n    DATA mt_refs TYPE STANDARD TABLE OF ty_refs.\nENDCLASS.\n\nCLASS cl_abap_structdescr IMPLEMENTATION.\n\n  METHOD get_symbols.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD create.\n    DATA ls_component LIKE LINE OF p_components.\n    DATA ls_ref       LIKE LINE OF mt_refs.\n\n    IF lines( p_components ) = 0.\n      RAISE EXCEPTION TYPE cx_sy_struct_attributes.\n    ENDIF.\n\n    LOOP AT p_components INTO ls_component.\n      IF ls_component-name IS INITIAL.\n        RAISE EXCEPTION TYPE cx_sy_struct_comp_name.\n      ELSEIF ls_component-type IS INITIAL.\n        RAISE EXCEPTION TYPE cx_sy_struct_comp_type.\n      ELSEIF strlen( ls_component-name ) > 30. \" todo, use abap_max_comp_name_ln\n        RAISE EXCEPTION TYPE cx_sy_struct_comp_name.\n      ENDIF.\n    ENDLOOP.\n\n    CREATE OBJECT ref.\n    LOOP AT p_components INTO ls_component.\n      CLEAR ls_ref.\n      ls_ref-name = ls_component-name.\n      ls_ref-ref  = ls_component-type.\n      APPEND ls_ref TO ref->mt_refs.\n    ENDLOOP.\n    ref->update_components( ).\n\n    ref->type_kind = typekind_struct2.\n    ref->kind = kind_struct.\n  ENDMETHOD.\n\n  METHOD get_included_view.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_ddic_field_list.\n\n    DATA lt_components TYPE component_table.\n    DATA ls_component  LIKE LINE OF lt_components.\n    DATA ls_return     LIKE LINE OF rt_components.\n    DATA lv_name       TYPE string.\n    DATA lv_keyfield   TYPE string.\n    DATA lo_elemdescr  TYPE REF TO cl_abap_elemdescr.\n    FIELD-SYMBOLS <component> LIKE LINE OF rt_components.\n\n    lt_components = get_components( ).\n\n    ASSERT absolute_name CP ''+TYPE=*''.\n    lv_name = absolute_name+6.\n\n    LOOP AT lt_components INTO ls_component.\n      CLEAR ls_return.\n      ls_return-tabname = lv_name.\n      ls_return-fieldname = ls_component-name.\n      IF ls_component-type->kind = cl_abap_typedescr=>kind_elem.\n        lo_elemdescr ?= ls_component-type.\n        ls_return-leng = lo_elemdescr->output_length.\n      ENDIF.\n* todo, fill more fields in ls_return\n      APPEND ls_return TO rt_components.\n    ENDLOOP.\n\n*    WRITE ''@KERNEL console.dir(abap.DDIC[lv_name.get()]?.keyFields);''.\n    WRITE ''@KERNEL for (const keyfield of abap.DDIC[lv_name.get()]?.keyFields || [] ) {''.\n    WRITE ''@KERNEL lv_keyfield.set(keyfield);''.\n*    WRITE ''@KERNEL console.dir(rt_components.array()[0].get());''.\n    READ TABLE rt_components ASSIGNING <component> WITH KEY fieldname = lv_keyfield.\n    ASSERT sy-subrc = 0.\n    <component>-keyflag = abap_true.\n    WRITE ''@KERNEL }''.\n\n  ENDMETHOD.\n\n  METHOD is_ddic_type.\n    bool = ddic.\n  ENDMETHOD.\n\n  METHOD construct_from_data.\n* todo, this method should be private\n    DATA lv_name      TYPE string.\n    DATA ls_ref       LIKE LINE OF mt_refs.\n    DATA lo_datadescr TYPE REF TO cl_abap_datadescr.\n\n    FIELD-SYMBOLS <fs> TYPE any.\n\n    CREATE OBJECT descr.\n\n* todo, fail if input is not a structure?\n    WRITE ''@KERNEL for (const name of Object.keys(INPUT.data.value)) {''.\n    WRITE ''@KERNEL   lv_name.set(name.toUpperCase());''.\n    ASSIGN COMPONENT lv_name OF STRUCTURE data TO <fs>.\n    lo_datadescr ?= cl_abap_typedescr=>describe_by_data( <fs> ).\n    ls_ref-name = lv_name.\n    ls_ref-ref  = lo_datadescr.\n    APPEND ls_ref TO descr->mt_refs.\n    WRITE ''@KERNEL }''.\n\n    descr->update_components( ).\n  ENDMETHOD.\n\n  METHOD update_components.\n    DATA ls_component LIKE LINE OF components.\n    DATA ls_ref       LIKE LINE OF mt_refs.\n\n    CLEAR components.\n    LOOP AT mt_refs INTO ls_ref.\n      CLEAR ls_component.\n      ls_component-name = ls_ref-name.\n      ls_component-type_kind = ls_ref-ref->type_kind.\n      APPEND ls_component TO components.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD get_components.\n    DATA ls_component LIKE LINE OF components.\n    DATA ret          LIKE LINE OF rt_components.\n    DATA ls_ref       LIKE LINE OF mt_refs.\n\n    LOOP AT components INTO ls_component.\n      CLEAR ret.\n      ret-name = ls_component-name.\n      READ TABLE mt_refs INTO ls_ref WITH KEY name = ls_component-name.\n      IF sy-subrc = 0.\n        ret-type = ls_ref-ref.\n      ENDIF.\n      \" as_include type abap_bool,\n      \" suffix     type string,\n      APPEND ret TO rt_components.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD get_component_type.\n    DATA line LIKE LINE OF mt_refs.\n    READ TABLE mt_refs INTO line WITH KEY name = p_name.\n    IF sy-subrc <> 0.\n      RAISE component_not_found.\n    ELSE.\n      p_descr_ref = line-ref.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_TABLEDESCR                      ', 'CLASS cl_abap_tabledescr DEFINITION PUBLIC INHERITING FROM cl_abap_datadescr.\n  PUBLIC SECTION.\n    DATA has_unique_key TYPE abap_bool READ-ONLY.\n    DATA key            TYPE abap_keydescr_tab READ-ONLY.\n    DATA key_defkind    TYPE abap_keydefkind READ-ONLY.\n    DATA table_kind     TYPE abap_tablekind.\n\n    CONSTANTS tablekind_any TYPE c LENGTH 1 VALUE ''A''.\n    CONSTANTS tablekind_std TYPE c LENGTH 1 VALUE ''S''.\n    CONSTANTS tablekind_index TYPE c LENGTH 1 VALUE ''I''.\n    CONSTANTS tablekind_hashed TYPE c LENGTH 1 VALUE ''H''.\n    CONSTANTS tablekind_sorted TYPE c LENGTH 1 VALUE ''O''.\n\n    CONSTANTS keydefkind_default TYPE c LENGTH 1 VALUE ''D''.\n    CONSTANTS keydefkind_tableline TYPE c LENGTH 1 VALUE ''L''.\n    CONSTANTS keydefkind_user TYPE c LENGTH 1 VALUE ''U''.\n    CONSTANTS keydefkind_empty TYPE c LENGTH 1 VALUE ''E''.\n\n    CLASS-METHODS\n      construct_from_data\n        IMPORTING data TYPE any\n        RETURNING VALUE(descr) TYPE REF TO cl_abap_tabledescr.\n\n    METHODS get_table_line_type\n      RETURNING\n        VALUE(type) TYPE REF TO cl_abap_datadescr.\n\n    CLASS-METHODS get\n      IMPORTING type TYPE REF TO cl_abap_typedescr\n      RETURNING VALUE(val) TYPE REF TO cl_abap_tabledescr.\n\n    CLASS-METHODS get_with_keys\n      IMPORTING\n        p_line_type TYPE REF TO cl_abap_datadescr\n        p_keys      TYPE abap_table_keydescr_tab\n      RETURNING VALUE(p_result) TYPE REF TO cl_abap_tabledescr.\n\n    CLASS-METHODS create\n      IMPORTING\n        p_line_type  TYPE REF TO cl_abap_typedescr\n        p_table_kind TYPE abap_tablekind DEFAULT tablekind_std\n        p_unique     TYPE abap_bool DEFAULT abap_false\n        p_key        TYPE abap_keydescr_tab OPTIONAL\n        p_key_kind   TYPE abap_keydefkind DEFAULT keydefkind_default\n      RETURNING\n        VALUE(ref) TYPE REF TO cl_abap_tabledescr.\n\n  PRIVATE SECTION.\n    DATA mo_line_type TYPE REF TO cl_abap_typedescr.\nENDCLASS.\n\nCLASS cl_abap_tabledescr IMPLEMENTATION.\n\n  METHOD create.\n\n    CREATE OBJECT ref.\n    ref->has_unique_key = p_unique.\n    ref->mo_line_type   = p_line_type.\n    ref->key            = p_key.\n    ref->key_defkind    = p_key_kind.\n    ref->table_kind     = p_table_kind.\n\n    \" cl_abap_typedescr\n    ref->type_kind      = typekind_table.\n    ref->kind           = kind_table.\n\n  ENDMETHOD.\n\n  METHOD get_with_keys.\n\n    DATA ls_key LIKE LINE OF p_keys.\n\n    IF lines( p_keys ) <> 1.\n      ASSERT 1 = ''todo''.\n    ENDIF.\n    READ TABLE p_keys INDEX 1 INTO ls_key.\n    ASSERT sy-subrc = 0.\n\n    CREATE OBJECT p_result.\n    p_result->has_unique_key = ls_key-is_unique.\n    p_result->mo_line_type   = p_line_type.\n    p_result->key_defkind    = ls_key-key_kind.\n    p_result->table_kind     = ls_key-access_kind.\n\n    \" cl_abap_typedescr\n    p_result->type_kind      = typekind_table.\n    p_result->kind           = kind_table.\n\n  ENDMETHOD.\n\n  METHOD get.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD construct_from_data.\n* todo, this method should be private\n    DATA lv_dummy      TYPE i.\n    DATA lv_flag       TYPE abap_bool.\n    DATA lv_str        TYPE string.\n    DATA lv_type       TYPE string.\n    DATA lo_struct     TYPE REF TO cl_abap_structdescr.\n    DATA lt_components TYPE cl_abap_structdescr=>component_table.\n    DATA ls_component  LIKE LINE OF lt_components.\n    DATA ls_key        TYPE LINE OF abap_keydescr_tab.\n\n    CREATE OBJECT descr.\n\n    WRITE ''@KERNEL lv_flag.set(data.getOptions()?.primaryKey?.isUnique === true ? \"X\" : \"\");''.\n    descr->has_unique_key = lv_flag.\n\n    WRITE ''@KERNEL lv_type.set(data.getOptions()?.primaryKey?.type || \"\");''.\n    CASE lv_type.\n      WHEN ''STANDARD''.\n        descr->table_kind = tablekind_std.\n      WHEN ''SORTED''.\n        descr->table_kind = tablekind_sorted.\n      WHEN ''HASHED''.\n        descr->table_kind = tablekind_hashed.\n      WHEN OTHERS.\n        descr->table_kind = tablekind_std.\n    ENDCASE.\n\n    WRITE ''@KERNEL lv_dummy = data.getRowType();''.\n    descr->mo_line_type = cl_abap_typedescr=>describe_by_data( lv_dummy ).\n\n    WRITE ''@KERNEL lv_flag.set(data.getOptions()?.primaryKey?.keyFields.length > 0 ? \"X\" : \"\");''.\n    IF lv_flag = abap_true.\n      descr->key_defkind = keydefkind_user.\n\n      WRITE ''@KERNEL for (const k of data.getOptions()?.primaryKey?.keyFields) {''.\n      WRITE ''@KERNEL lv_str.set(k);''.\n      ls_key-name = lv_str.\n      APPEND ls_key TO descr->key.\n      WRITE ''@KERNEL }''.\n\n      IF lines( descr->key ) = 1 AND ls_key-name = ''TABLE_LINE''.\n        descr->key_defkind = keydefkind_tableline.\n      ENDIF.\n    ELSE.\n* EMPTY KEY currently not supported in open-abap\n      descr->key_defkind = keydefkind_default.\n      IF descr->mo_line_type->kind = kind_struct.\n        lo_struct ?= descr->mo_line_type.\n        lt_components = lo_struct->get_components( ).\n        LOOP AT lt_components INTO ls_component.\n          ls_key-name = ls_component-name.\n          APPEND ls_key TO descr->key.\n        ENDLOOP.\n      ENDIF.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD get_table_line_type.\n    type ?= mo_line_type.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_TYPEDESCR                       ', 'CLASS cl_abap_typedescr DEFINITION PUBLIC.\n* todo, this class should be ABSTRACT\n  PUBLIC SECTION.\n    CLASS-METHODS\n      describe_by_data\n        IMPORTING p_data TYPE any\n        RETURNING VALUE(type) TYPE REF TO cl_abap_typedescr.\n    CLASS-METHODS\n      describe_by_name\n        IMPORTING\n          p_name TYPE clike\n        RETURNING\n          VALUE(type) TYPE REF TO cl_abap_typedescr\n        EXCEPTIONS\n          type_not_found.\n    CLASS-METHODS\n      describe_by_data_ref\n        IMPORTING p_data_ref TYPE REF TO data\n        RETURNING VALUE(type) TYPE REF TO cl_abap_typedescr.\n    CLASS-METHODS\n      describe_by_object_ref\n        IMPORTING p_object_ref TYPE REF TO object\n        RETURNING VALUE(p_descr_ref) TYPE REF TO cl_abap_typedescr.\n    METHODS get_ddic_header\n      RETURNING\n        VALUE(p_header) TYPE abap_bool. \" hmm, todo\n    METHODS\n      get_relative_name\n        RETURNING\n          VALUE(name) TYPE string.\n    METHODS\n      is_ddic_type\n        RETURNING\n          VALUE(p_abap_bool) TYPE abap_bool.\n\n    METHODS is_instantiatable\n      RETURNING\n        VALUE(p_result) TYPE abap_bool.\n\n    METHODS get_ddic_object\n      RETURNING\n        VALUE(p_object) TYPE string_table\n      EXCEPTIONS\n        not_found\n        no_ddic_type.\n\n    DATA type_kind     TYPE abap_typekind.\n    DATA kind          TYPE c LENGTH 1.\n    DATA ddic          TYPE abap_bool.\n    DATA length        TYPE i.\n    DATA decimals      TYPE i.\n    DATA absolute_name TYPE string.\n    DATA relative_name TYPE string.\n\n    CONSTANTS typekind_any TYPE abap_typekind VALUE ''~''.\n    CONSTANTS typekind_char TYPE abap_typekind VALUE ''C''.\n    CONSTANTS typekind_class TYPE abap_typekind VALUE ''*''.\n    CONSTANTS typekind_clike TYPE abap_typekind VALUE ''&''.\n    CONSTANTS typekind_csequence TYPE abap_typekind VALUE ''?''.\n    CONSTANTS typekind_data TYPE abap_typekind VALUE ''#''.\n    CONSTANTS typekind_date TYPE abap_typekind VALUE ''D''.\n    CONSTANTS typekind_decfloat TYPE abap_typekind VALUE ''/''.\n    CONSTANTS typekind_decfloat16 TYPE abap_typekind VALUE ''a''.\n    CONSTANTS typekind_decfloat34 TYPE abap_typekind VALUE ''e''.\n    CONSTANTS typekind_dref TYPE abap_typekind VALUE ''l''.\n    CONSTANTS typekind_enum TYPE abap_typekind VALUE ''k''.\n    CONSTANTS typekind_float TYPE abap_typekind VALUE ''F''.\n    CONSTANTS typekind_hex TYPE abap_typekind VALUE ''X''.\n    CONSTANTS typekind_int TYPE abap_typekind VALUE ''I''.\n    CONSTANTS typekind_int1 TYPE abap_typekind VALUE ''b''.\n    CONSTANTS typekind_int2 TYPE abap_typekind VALUE ''s''.\n    CONSTANTS typekind_int8 TYPE abap_typekind VALUE ''8''.\n    CONSTANTS typekind_intf TYPE abap_typekind VALUE ''+''.\n    CONSTANTS typekind_num TYPE abap_typekind VALUE ''N''.\n    CONSTANTS typekind_numeric TYPE abap_typekind VALUE ''%''.\n    CONSTANTS typekind_oref TYPE abap_typekind VALUE ''r''.\n    CONSTANTS typekind_packed TYPE abap_typekind VALUE ''P''.\n    CONSTANTS typekind_simple TYPE abap_typekind VALUE ''$''.\n    CONSTANTS typekind_string TYPE abap_typekind VALUE ''g''.\n    CONSTANTS typekind_struct1 TYPE abap_typekind VALUE ''u''.\n    CONSTANTS typekind_struct2 TYPE abap_typekind VALUE ''v''.\n    CONSTANTS typekind_table TYPE abap_typekind VALUE ''h''.\n    CONSTANTS typekind_time TYPE abap_typekind VALUE ''T''.\n    CONSTANTS typekind_utclong TYPE abap_typekind VALUE ''p''.\n    CONSTANTS typekind_w TYPE abap_typekind VALUE ''w''.\n    CONSTANTS typekind_xstring TYPE abap_typekind VALUE ''y''.\n\n    CONSTANTS kind_elem   TYPE c LENGTH 1 VALUE ''E''.\n    CONSTANTS kind_struct TYPE c LENGTH 1 VALUE ''S''.\n    CONSTANTS kind_table  TYPE c LENGTH 1 VALUE ''T''.\n    CONSTANTS kind_ref    TYPE c LENGTH 1 VALUE ''R''.\n    CONSTANTS kind_class  TYPE c LENGTH 1 VALUE ''C''.\n    CONSTANTS kind_intf   TYPE c LENGTH 1 VALUE ''I''.\n\n  PRIVATE SECTION.\n    CLASS-DATA gv_counter TYPE n LENGTH 10.\n\n    CLASS-METHODS\n      describe_by_dashes\n        IMPORTING p_name TYPE clike\n        RETURNING VALUE(type) TYPE REF TO cl_abap_typedescr.\nENDCLASS.\n\nCLASS cl_abap_typedescr IMPLEMENTATION.\n\n  METHOD get_ddic_object.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD is_instantiatable.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD describe_by_dashes.\n    DATA lt_parts   TYPE STANDARD TABLE OF string.\n    DATA lv_part    LIKE LINE OF lt_parts.\n    DATA lo_current TYPE REF TO cl_abap_typedescr.\n    DATA lo_struct  TYPE REF TO cl_abap_structdescr.\n\n    SPLIT p_name AT ''-'' INTO TABLE lt_parts.\n\n    LOOP AT lt_parts INTO lv_part.\n      IF lo_current IS INITIAL.\n        lo_current = describe_by_name( lv_part ).\n      ELSEIF lo_current->kind = kind_struct.\n        lo_struct ?= lo_current.\n        lo_current = lo_struct->get_component_type( lv_part ).\n      ENDIF.\n    ENDLOOP.\n\n    type = lo_current.\n  ENDMETHOD.\n\n  METHOD describe_by_name.\n    DATA ref         TYPE REF TO data.\n    DATA objectdescr TYPE REF TO cl_abap_objectdescr.\n    DATA oo_type     TYPE string.\n    DATA lv_any      TYPE string.\n\n    IF p_name CA ''-''.\n      type = describe_by_dashes( p_name ).\n      RETURN.\n    ENDIF.\n\n    WRITE ''@KERNEL oo_type.set(abap.Classes[p_name.get().toUpperCase().trimEnd()]?.INTERNAL_TYPE || \"\");''.\n    WRITE ''@KERNEL lv_any = abap.Classes[p_name.get().toUpperCase().trimEnd()];''.\n\n    CASE oo_type.\n      WHEN ''INTF''.\n        CREATE OBJECT type TYPE cl_abap_intfdescr\n          EXPORTING\n            p_object = lv_any.\n        type->type_kind = typekind_intf.\n        type->kind = kind_intf.\n        type->relative_name = to_upper( p_name ).\n        type->absolute_name = ''\\\\CLASS='' && to_upper( p_name ).\n        objectdescr ?= type.\n        objectdescr->mv_object_name = to_upper( p_name ). \" todo, this should give syntax error, as they are not friends\n        objectdescr->mv_object_type = oo_type. \" todo, this should give syntax error, as they are not friends\n      WHEN ''CLAS''.\n        CREATE OBJECT type TYPE cl_abap_classdescr.\n        type->type_kind = typekind_class.\n        type->kind = kind_class.\n        type->relative_name = to_upper( p_name ).\n        type->absolute_name = ''\\\\CLASS='' && to_upper( p_name ).\n        objectdescr ?= type.\n        objectdescr->mv_object_name = to_upper( p_name ). \" todo, this should give syntax error, as they are not friends\n        objectdescr->mv_object_type = oo_type. \" todo, this should give syntax error, as they are not friends\n      WHEN OTHERS.\n        TRY.\n            CREATE DATA ref TYPE (p_name).\n          CATCH cx_sy_create_data_error.\n            RAISE type_not_found.\n        ENDTRY.\n        type = describe_by_data_ref( ref ).\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD get_relative_name.\n    name = relative_name.\n  ENDMETHOD.\n\n  METHOD get_ddic_header.\n    ASSERT 1 = 2.\n  ENDMETHOD.\n\n  METHOD is_ddic_type.\n    p_abap_bool = ddic.\n  ENDMETHOD.\n\n  METHOD describe_by_data_ref.\n    FIELD-SYMBOLS <ref> TYPE any.\n    ASSIGN p_data_ref->* TO <ref>.\n    type = describe_by_data( <ref> ).\n  ENDMETHOD.\n\n  METHOD describe_by_object_ref.\n    DATA lv_name   TYPE string.\n    DATA lo_cdescr TYPE REF TO cl_abap_classdescr.\n    DATA lv_any    TYPE string.\n\n    WRITE ''@KERNEL lv_any = p_object_ref.get().constructor;''.\n\n    CREATE OBJECT lo_cdescr TYPE cl_abap_classdescr\n      EXPORTING\n        p_object = lv_any.\n    lo_cdescr->type_kind = typekind_class.\n    lo_cdescr->kind = kind_class.\n\n    WRITE ''@KERNEL lv_name.set(p_object_ref.get().constructor.name.toUpperCase());''.\n\n    lo_cdescr->relative_name = lv_name.\n    lo_cdescr->absolute_name = ''\\\\CLASS='' && lv_name.\n\n    p_descr_ref = lo_cdescr.\n  ENDMETHOD.\n\n  METHOD describe_by_data.\n\n    DATA lo_elem      TYPE REF TO cl_abap_elemdescr.\n    DATA lo_ref       TYPE REF TO cl_abap_refdescr.\n    DATA lv_any       TYPE string.\n    DATA lv_convexit  TYPE string.\n    DATA lv_ddicname  TYPE string.\n    DATA lv_decimals  TYPE i.\n    DATA lv_length    TYPE i.\n    DATA lv_name      TYPE string.\n    DATA lv_prefix    TYPE string.\n    DATA lv_qualified TYPE string.\n\n    WRITE ''@KERNEL lv_name.set(p_data.constructor.name);''.\n    WRITE ''@KERNEL lv_length.set(p_data.getLength ? p_data.getLength() : 0);''.\n    WRITE ''@KERNEL lv_decimals.set(p_data.getDecimals ? p_data.getDecimals() : 0);''.\n\n* These are the constructor names from the js runtime\n    CASE lv_name.\n      WHEN ''Integer''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_int.\n        type->kind = kind_elem.\n        type->length = 4.\n        lo_elem ?= type.\n        lo_elem->output_length = 11.\n        type->absolute_name = ''I''.\n      WHEN ''Numc''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_num.\n        type->kind = kind_elem.\n        type->length = lv_length * 2.\n        lo_elem ?= type.\n        lo_elem->output_length = lv_length.\n      WHEN ''Hex''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_hex.\n        type->kind = kind_elem.\n        type->length = lv_length.\n        lo_elem ?= type.\n        lo_elem->output_length = lv_length * 2.\n      WHEN ''Date''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_date.\n        type->kind = kind_elem.\n        type->length = 16.\n        lo_elem ?= type.\n        lo_elem->output_length = 8.\n        type->absolute_name = ''D''.\n      WHEN ''Packed''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_packed.\n        type->kind = kind_elem.\n        type->length = lv_length.\n        type->decimals = lv_decimals.\n      WHEN ''Time''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_time.\n        type->kind = kind_elem.\n        type->length = 12.\n        lo_elem ?= type.\n        lo_elem->output_length = 6.\n        type->absolute_name = ''T''.\n      WHEN ''Float''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_float.\n        type->kind = kind_elem.\n        type->absolute_name = ''F''.\n      WHEN ''DecFloat34''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_decfloat34.\n        type->kind = kind_elem.\n      WHEN ''Structure''.\n        type ?= cl_abap_structdescr=>construct_from_data( p_data ).\n        type->type_kind = typekind_struct2.\n        type->kind = kind_struct.\n      WHEN ''Table'' OR ''HashedTable''.\n        type ?= cl_abap_tabledescr=>construct_from_data( p_data ).\n        type->type_kind = typekind_table.\n        type->kind = kind_table.\n      WHEN ''XString''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_xstring.\n        type->kind = kind_elem.\n        type->length = 8.\n        type->absolute_name = ''XSTRING''.\n      WHEN ''String''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_string.\n        type->kind = kind_elem.\n        type->length = 8.\n        type->absolute_name = ''STRING''.\n      WHEN ''Character''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_char.\n        type->kind = kind_elem.\n        type->length = lv_length * 2.\n        lo_elem ?= type.\n        lo_elem->output_length = lv_length.\n      WHEN ''FieldSymbol''.\n        WRITE ''@KERNEL lv_name = p_data.getPointer();''.\n        type = describe_by_data( lv_name ).\n        RETURN.\n      WHEN ''ABAPObject''.\n        CREATE OBJECT type TYPE cl_abap_refdescr.\n        type->type_kind = typekind_oref.\n        type->kind = kind_ref.\n\n        lo_ref ?= type.\n        WRITE ''@KERNEL lv_name.set(p_data.qualifiedName || \"\");''.\n        lo_ref->referenced = describe_by_name( lv_name ).\n      WHEN ''UTCLong''.\n        CREATE OBJECT type TYPE cl_abap_elemdescr.\n        type->type_kind = typekind_utclong.\n        type->kind = kind_elem.\n      WHEN ''DataReference''.\n        CREATE OBJECT type TYPE cl_abap_refdescr.\n        type->type_kind = typekind_dref.\n        type->kind = kind_ref.\n\n        lo_ref ?= type.\n        WRITE ''@KERNEL lv_any = p_data.type;''.\n        lo_ref->referenced = describe_by_data( lv_any ).\n      WHEN OTHERS.\n        WRITE / lv_name.\n        ASSERT 1 = ''todo_cl_abap_typedescr''.\n    ENDCASE.\n\n\n    WRITE ''@KERNEL lv_ddicname.set(p_data.getDDICName ? p_data.getDDICName() || \"\" : \"\");''.\n    WRITE ''@KERNEL lv_convexit.set(p_data.getConversionExit ? p_data.getConversionExit() || \"\" : \"\");''.\n    WRITE ''@KERNEL lv_qualified.set(p_data.getQualifiedName ? p_data.getQualifiedName() || \"\" : \"\");''.\n\n    IF lv_qualified NA ''-''.\n      type->absolute_name = lv_qualified.\n    ELSEIF lv_ddicname <> ''''.\n      type->absolute_name = lv_ddicname.\n    ENDIF.\n\n* this is not completely correct, local type names and ddic names might overlap, but will work for now,\n* todo: use/check getDDICName() in the future,\n    WRITE ''@KERNEL if(abap.DDIC[type.get().absolute_name.get().toUpperCase()]) { type.get().ddic.set(\"X\"); }''.\n\n    TRANSLATE type->absolute_name TO UPPER CASE.\n    TRANSLATE type->relative_name TO UPPER CASE.\n\n    IF type->absolute_name = ''ABAP_BOOL''.\n      type->relative_name = ''ABAP_BOOL''.\n      type->absolute_name = ''\\\\TYPE-POOL=ABAP\\\\TYPE=ABAP_BOOL''.\n    ELSEIF type->absolute_name IS INITIAL.\n      gv_counter = gv_counter + 1.\n      type->absolute_name = ''\\\\TYPE=%_T000000000000000'' && gv_counter.\n    ELSEIF type->absolute_name CS ''=>''.\n      SPLIT type->absolute_name AT ''=>'' INTO lv_prefix type->absolute_name.\n      type->relative_name = type->absolute_name.\n      type->absolute_name = ''\\\\CLASS='' && lv_prefix && ''\\\\TYPE='' && type->absolute_name.\n    ELSEIF type->type_kind = typekind_oref.\n      type->relative_name = type->absolute_name.\n      type->absolute_name = ''\\\\CLASS='' && type->absolute_name.\n    ELSE.\n      type->relative_name = type->absolute_name.\n      type->absolute_name = ''\\\\TYPE='' && type->absolute_name.\n    ENDIF.\n\n    IF lv_convexit <> ''''.\n      lo_elem->edit_mask = ''=='' && lv_convexit.\n    ENDIF.\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SHM_AREA                             ', 'CLASS cl_shm_area DEFINITION PUBLIC INHERITING FROM cx_shm_general_error ABSTRACT.\n  PUBLIC SECTION.\n    CONSTANTS default_instance TYPE shm_inst_name VALUE ''$DEFAULT_INSTANCE$''.\n    CONSTANTS invocation_mode_explicit TYPE shm_constr_invocation_mode VALUE 319200300.\n    CONSTANTS life_context_appserver TYPE shm_life_context VALUE 109200001.\n    CONSTANTS attach_mode_default TYPE shm_attach_mode VALUE 1302197000.\n    CONSTANTS attach_mode_wait TYPE shm_attach_mode VALUE 1302197002.\n    CONSTANTS affect_local_server TYPE shm_affect_server VALUE 281119720.\n\n    DATA properties TYPE shm_properties READ-ONLY.\n    DATA inst_name  TYPE shm_inst_name READ-ONLY.\n    DATA client     TYPE mandt READ-ONLY.\n\n    METHODS detach_commit\n      RAISING\n        cx_shm_wrong_handle\n        cx_shm_already_detached\n        cx_shm_secondary_commit\n        cx_shm_event_execution_failed\n        cx_shm_completion_error.\n\n    METHODS detach\n      RAISING\n        cx_shm_wrong_handle\n        cx_shm_already_detached.\n\n    METHODS get_root ABSTRACT\n      RETURNING\n        VALUE(root) TYPE REF TO object\n      RAISING\n        cx_shm_already_detached.\n\n    METHODS is_valid\n      RETURNING\n        VALUE(valid) TYPE abap_bool.\n\n  PROTECTED SECTION.\n    DATA inst_trace_active TYPE abap_bool VALUE abap_false.\n    DATA inst_trace_service TYPE REF TO if_shm_trace.\n    DATA _lock TYPE %_c_pointer.\n    CONSTANTS attach_mode_wait_2nd_try TYPE shm_attach_mode VALUE 1302197003.\n\n    METHODS _attach_read71\n      IMPORTING\n        sneak_mode   TYPE abap_bool DEFAULT abap_false\n        area_name    TYPE shm_area_name\n        life_context TYPE shm_life_context\n      EXPORTING\n        root         TYPE REF TO object\n      RAISING\n        cx_shm_inconsistent\n        cx_shm_no_active_version\n        cx_shm_read_lock_active\n        cx_shm_exclusive_lock_active\n        cx_shm_parameter_error\n        cx_shm_change_lock_active.\n\n    METHODS _attach_update70\n      IMPORTING\n        area_name TYPE shm_area_name\n        mode      TYPE shm_attach_mode\n      EXPORTING\n        root      TYPE REF TO object\n      CHANGING\n        wait_time TYPE i OPTIONAL\n      RAISING\n        cx_shm_inconsistent\n        cx_shm_exclusive_lock_active\n        cx_shm_change_lock_active\n        cx_shm_version_limit_exceeded\n        cx_shm_no_active_version\n        cx_shm_parameter_error\n        cx_shm_pending_lock_removed.\n\n    METHODS _attach_write70\n      IMPORTING\n        area_name TYPE shm_area_name\n        mode      TYPE shm_attach_mode\n      EXPORTING\n        root      TYPE REF TO object\n      CHANGING\n        wait_time TYPE i OPTIONAL\n      RAISING\n        cx_shm_version_limit_exceeded\n        cx_shm_exclusive_lock_active\n        cx_shm_change_lock_active\n        cx_shm_parameter_error\n        cx_shm_pending_lock_removed.\n\n    CLASS-METHODS _invalidate_area71\n      IMPORTING\n        area_name TYPE shm_area_name\n        client TYPE shm_client\n        client_supplied TYPE abap_bool DEFAULT abap_false\n        transactional TYPE abap_bool DEFAULT abap_false\n        client_dependent TYPE abap_bool DEFAULT abap_false\n        terminate_changer TYPE abap_bool\n        affect_server TYPE shm_affect_server\n        life_context TYPE shm_life_context DEFAULT life_context_appserver\n      RETURNING\n        VALUE(rc) TYPE shm_rc\n      RAISING\n        cx_shm_parameter_error.\n\n    CLASS-METHODS _invalidate_instance71\n      IMPORTING\n        area_name TYPE shm_area_name\n        inst_name TYPE shm_inst_name\n        client TYPE shm_client\n        client_supplied TYPE abap_bool DEFAULT abap_false\n        transactional TYPE abap_bool DEFAULT abap_false\n        client_dependent TYPE abap_bool DEFAULT abap_false\n        terminate_changer TYPE abap_bool\n        affect_server TYPE shm_affect_server\n        life_context TYPE shm_life_context DEFAULT life_context_appserver\n      RETURNING\n        VALUE(rc) TYPE shm_rc\n      RAISING\n        cx_shm_parameter_error.\n\n    METHODS _set_root\n      IMPORTING\n        root TYPE REF TO object\n      RAISING\n        cx_shm_wrong_handle\n        cx_shm_initial_reference.\n\n    CLASS-METHODS _detach_area71\n      IMPORTING\n        area_name        TYPE shm_area_name\n        client           TYPE shm_client\n        client_supplied  TYPE abap_bool\n        client_dependent TYPE abap_bool DEFAULT abap_false\n        life_context     TYPE shm_life_context\n      RETURNING\n        VALUE(rc)        TYPE shm_rc.\n\n    CLASS-METHODS _free_area71\n      IMPORTING\n        area_name TYPE shm_area_name\n        client TYPE shm_client\n        client_supplied TYPE abap_bool DEFAULT abap_false\n        transactional TYPE abap_bool DEFAULT abap_false\n        client_dependent TYPE abap_bool DEFAULT abap_false\n        terminate_changer TYPE abap_bool\n        affect_server TYPE shm_affect_server\n        life_context TYPE shm_life_context DEFAULT life_context_appserver\n      RETURNING\n        VALUE(rc) TYPE shm_rc\n      RAISING\n        cx_shm_parameter_error.\n\n    CLASS-METHODS _get_instance_infos71\n      IMPORTING\n        area_name        TYPE shm_area_name\n        client           TYPE shm_client\n        client_supplied  TYPE abap_bool DEFAULT abap_false\n        client_dependent TYPE abap_bool DEFAULT abap_false\n        life_context     TYPE shm_life_context\n      RETURNING\n        VALUE(infos)     TYPE shm_inst_infos.\n\n    CLASS-METHODS _free_instance71\n      IMPORTING\n        area_name         TYPE shm_area_name\n        inst_name         TYPE shm_inst_name\n        client            TYPE shm_client\n        client_supplied   TYPE abap_bool DEFAULT abap_false\n        transactional     TYPE abap_bool DEFAULT abap_false\n        client_dependent  TYPE abap_bool DEFAULT abap_false\n        terminate_changer TYPE abap_bool\n        affect_server     TYPE shm_affect_server\n        life_context      TYPE shm_life_context DEFAULT life_context_appserver\n      RETURNING\n        VALUE(rc)         TYPE shm_rc\n      RAISING\n        cx_shm_parameter_error.\n  PRIVATE SECTION.\n    CLASS-DATA mo_root TYPE REF TO object.\nENDCLASS.\n\nCLASS cl_shm_area IMPLEMENTATION.\n\n  METHOD is_valid.\n    valid = abap_true.\n  ENDMETHOD.\n\n  METHOD _free_instance71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD detach_commit.\n    RETURN.\n  ENDMETHOD.\n\n  METHOD detach.\n    RETURN.\n  ENDMETHOD.\n\n  METHOD _attach_read71.\n    DATA created TYPE REF TO object.\n    DATA lv_name TYPE string.\n\n    IF sneak_mode = abap_false AND mo_root IS INITIAL.\n      lv_name = area_name.\n* todo, this is an evil workaround\n      REPLACE FIRST OCCURRENCE OF ''_AREA'' IN lv_name WITH ''_ROOT''.\n      CREATE OBJECT created TYPE (lv_name).\n\n      _set_root( created ).\n    ENDIF.\n\n    root = mo_root.\n  ENDMETHOD.\n\n  METHOD _get_instance_infos71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD _detach_area71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD _free_area71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD _set_root.\n    mo_root = root.\n  ENDMETHOD.\n\n  METHOD _invalidate_instance71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD _invalidate_area71.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD _attach_update70.\n    DATA created TYPE REF TO object.\n    DATA lv_name TYPE string.\n\n    IF mo_root IS INITIAL.\n* todo, this should respect the auto build flag configuration from the SHMA area\n* todo, this is an evil workaround\n      REPLACE FIRST OCCURRENCE OF ''_AREA'' IN lv_name WITH ''_ROOT''.\n      CREATE OBJECT created TYPE (lv_name).\n\n      _set_root( created ).\n    ENDIF.\n* open-abap is currently single threaded, so no lock conflicts\n    root = mo_root.\n  ENDMETHOD.\n\n  METHOD _attach_write70.\n* open-abap is currently single threaded, so no lock conflicts\n    RETURN.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SHM_SERVICE                          ', 'CLASS cl_shm_service DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS initialize\n      IMPORTING\n        area_name  TYPE shm_area_name\n        client     TYPE shma_client OPTIONAL\n      EXPORTING\n        attributes TYPE shma_attributes.\n\n    CLASS-METHODS get_auto_build_class_name\n      IMPORTING\n        area_name TYPE shm_area_name\n      RETURNING\n        VALUE(auto_build_class_name) TYPE shm_auto_build_class_name\n      RAISING\n        cx_shma_not_configured\n        cx_shma_inconsistent.\n\n    CLASS-METHODS trace_get_service\n      IMPORTING\n        !area_name TYPE shm_area_name OPTIONAL\n      RETURNING\n        VALUE(trace_service) TYPE REF TO if_shm_trace.\n\n    CLASS-METHODS trace_is_variant_active\n      IMPORTING\n        service_name     TYPE shmm_trc_variant_name\n      RETURNING\n        VALUE(is_active) TYPE abap_bool.\n\nENDCLASS.\n\nCLASS cl_shm_service IMPLEMENTATION.\n\n  METHOD initialize.\n    RETURN.\n  ENDMETHOD.\n\n  METHOD get_auto_build_class_name.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD trace_get_service.\n* dont dump, this method is called from area CLASS_CONSTRUCTORs\n    RETURN.\n  ENDMETHOD.\n\n  METHOD trace_is_variant_active.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_ALREADY_DETACHED                 ', 'CLASS cx_shm_already_detached DEFINITION PUBLIC INHERITING FROM cx_shm_general_error.\n\nENDCLASS.\n\nCLASS cx_shm_already_detached IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_ATTACH_ERROR                     ', 'CLASS cx_shm_attach_error DEFINITION PUBLIC INHERITING FROM cx_shm_error.\n\nENDCLASS.\n\nCLASS cx_shm_attach_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_BUILD_FAILED                     ', 'CLASS cx_shm_build_failed DEFINITION PUBLIC INHERITING FROM cx_shm_general_error.\n\nENDCLASS.\n\nCLASS cx_shm_build_failed IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_CHANGE_LOCK_ACTIVE               ', 'CLASS cx_shm_change_lock_active DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_change_lock_active IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_COMPLETION_ERROR                 ', 'CLASS cx_shm_completion_error DEFINITION PUBLIC INHERITING FROM cx_shm_detach_error.\n\nENDCLASS.\n\nCLASS cx_shm_completion_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_DETACH_ERROR                     ', 'CLASS cx_shm_detach_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_shm_detach_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_ERROR                            ', 'CLASS cx_shm_error DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_shm_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_EVENT_EXECUTION_FAILED           ', 'CLASS cx_shm_event_execution_failed DEFINITION PUBLIC INHERITING FROM cx_shm_completion_error.\n\nENDCLASS.\n\nCLASS cx_shm_event_execution_failed IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_EXCLUSIVE_LOCK_ACTIVE            ', 'CLASS cx_shm_exclusive_lock_active DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_exclusive_lock_active IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_GENERAL_ERROR                    ', 'CLASS cx_shm_general_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_shm_general_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_INCONSISTENT                     ', 'CLASS cx_shm_inconsistent DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_inconsistent IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_INITIAL_REFERENCE                ', 'CLASS cx_shm_initial_reference DEFINITION PUBLIC INHERITING FROM cx_shm_general_error.\n\nENDCLASS.\n\nCLASS cx_shm_initial_reference IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_NO_ACTIVE_VERSION                ', 'CLASS cx_shm_no_active_version DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_no_active_version IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_PARAMETER_ERROR                  ', 'CLASS cx_shm_parameter_error DEFINITION PUBLIC INHERITING FROM cx_shm_general_error.\n\nENDCLASS.\n\nCLASS cx_shm_parameter_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_PENDING_LOCK_REMOVED             ', 'CLASS cx_shm_pending_lock_removed DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_pending_lock_removed IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_READ_LOCK_ACTIVE                 ', 'CLASS cx_shm_read_lock_active DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_read_lock_active IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_SECONDARY_COMMIT                 ', 'CLASS cx_shm_secondary_commit DEFINITION PUBLIC INHERITING FROM cx_shm_detach_error.\n\nENDCLASS.\n\nCLASS cx_shm_secondary_commit IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_VERSION_LIMIT_EXCEEDED           ', 'CLASS cx_shm_version_limit_exceeded DEFINITION PUBLIC INHERITING FROM cx_shm_attach_error.\n\nENDCLASS.\n\nCLASS cx_shm_version_limit_exceeded IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHM_WRONG_HANDLE                     ', 'CLASS cx_shm_wrong_handle DEFINITION PUBLIC INHERITING FROM cx_shm_general_error.\n\nENDCLASS.\n\nCLASS cx_shm_wrong_handle IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHMA_DYNAMIC                         ', 'CLASS cx_shma_dynamic DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_shma_dynamic IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHMA_INCONSISTENT                    ', 'CLASS cx_shma_inconsistent DEFINITION PUBLIC INHERITING FROM cx_shma_dynamic.\n\nENDCLASS.\n\nCLASS cx_shma_inconsistent IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SHMA_NOT_CONFIGURED                  ', 'CLASS cx_shma_not_configured DEFINITION PUBLIC INHERITING FROM cx_shma_dynamic.\n\nENDCLASS.\n\nCLASS cx_shma_not_configured IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SHM_BUILD_INSTANCE                   ', 'INTERFACE if_shm_build_instance PUBLIC.\n  CLASS-METHODS build\n    IMPORTING\n      inst_name       TYPE shm_inst_name              DEFAULT cl_shm_area=>default_instance\n      invocation_mode TYPE shm_constr_invocation_mode DEFAULT cl_shm_area=>invocation_mode_explicit\n    RAISING\n      cx_shm_build_failed.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SHM_TRACE                            ', 'INTERFACE if_shm_trace PUBLIC.\n\n  DATA: BEGIN OF variant,\n          def_name         TYPE shmm_trc_variant_name,\n          attach_for_upd   TYPE abap_bool,\n          attach_for_read  TYPE abap_bool,\n          free_area        TYPE abap_bool,\n          detach_area      TYPE abap_bool,\n          set_root         TYPE abap_bool,\n          invalidate_inst  TYPE abap_bool,\n          get_instance_inf TYPE abap_bool,\n          free_instance    TYPE abap_bool,\n          invalidate_area  TYPE abap_bool,\n          build            TYPE abap_bool,\n          attach_for_write TYPE abap_bool,\n          get_root         TYPE abap_bool,\n        END OF variant.\n\n  METHODS trin_attach_for_write\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt\n      mode      TYPE shm_attach_mode DEFAULT cl_shm_area=>attach_mode_default\n      wait_time TYPE i DEFAULT 0.\n\n  METHODS trcx_attach_for_write\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt\n      mode      TYPE shm_attach_mode DEFAULT cl_shm_area=>attach_mode_default\n      wait_time TYPE i DEFAULT 0\n      cx        TYPE REF TO cx_root.\n\n  METHODS trin_attach_for_update\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt\n      mode      TYPE shm_attach_mode DEFAULT cl_shm_area=>attach_mode_default\n      wait_time TYPE i DEFAULT 0.\n\n  METHODS trcx_attach_for_update\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt\n      mode      TYPE shm_attach_mode DEFAULT cl_shm_area=>attach_mode_default\n      wait_time TYPE i DEFAULT 0\n      cx        TYPE REF TO cx_root.\n\n  METHODS trin_attach_for_read\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt.\n\n  METHODS trcx_attach_for_read\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client    TYPE shm_client DEFAULT sy-mandt\n      cx        TYPE REF TO cx_root.\n\n  METHODS trin_build\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance.\n\n  METHODS trcx_build\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      cx TYPE REF TO cx_root.\n\n  METHODS trin_set_root\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name\n      root TYPE REF TO object.\n\n  METHODS trcx_set_root\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name\n      root TYPE REF TO object\n      cx TYPE REF TO cx_root.\n\n  METHODS trin_detach_area\n    IMPORTING\n      area_name TYPE shm_area_name\n      client TYPE shm_client DEFAULT sy-mandt\n      rc TYPE shm_rc.\n\n  METHODS trin_free_area\n    IMPORTING\n      area_name         TYPE shm_area_name\n      client            TYPE shm_client DEFAULT sy-mandt\n      terminate_changer TYPE abap_bool DEFAULT abap_true\n      affect_server     TYPE shm_affect_server OPTIONAL\n      rc                TYPE shm_rc.\n\n  METHODS trin_free_instance\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client TYPE shm_client DEFAULT sy-mandt\n      terminate_changer TYPE abap_bool DEFAULT abap_true\n      affect_server TYPE shm_affect_server OPTIONAL\n      rc TYPE shm_rc.\n\n  METHODS trin_get_instance_infos\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name OPTIONAL\n      client TYPE shm_client DEFAULT sy-mandt\n      infos TYPE shm_inst_infos.\n\n  METHODS trin_invalidate_area\n    IMPORTING\n      area_name TYPE shm_area_name\n      client TYPE shm_client DEFAULT sy-mandt\n      rc TYPE shm_rc\n      affect_server TYPE shm_affect_server OPTIONAL\n      terminate_changer TYPE abap_bool DEFAULT abap_true.\n\n  METHODS trin_invalidate_instance\n    IMPORTING\n      area_name TYPE shm_area_name\n      inst_name TYPE shm_inst_name DEFAULT cl_shm_area=>default_instance\n      client TYPE shm_client DEFAULT sy-mandt\n      terminate_changer TYPE abap_bool DEFAULT abap_true\n      affect_server TYPE shm_affect_server OPTIONAL\n      rc TYPE shm_rc.\n\n  METHODS trin_get_root\n    IMPORTING\n      area_name TYPE shm_area_name.\n\n  METHODS trcx_get_root\n    IMPORTING\n      area_name TYPE shm_area_name\n      cx        TYPE REF TO cx_root.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_MIME_REPOSITORY_API                  ', 'CLASS cl_mime_repository_api DEFINITION PUBLIC FINAL CREATE PRIVATE.\n\n  PUBLIC SECTION.\n    INTERFACES if_mr_api.\n    ALIASES get_api FOR if_mr_api~get_api.\nENDCLASS.\n\nCLASS cl_mime_repository_api IMPLEMENTATION.\n  METHOD if_mr_api~get_api.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~get.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~create_folder.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~put.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~delete.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~file_list.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~properties.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD if_mr_api~get_io_for_url.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_MR_API                               ', 'INTERFACE if_mr_api PUBLIC.\n\n  CLASS-METHODS get_api\n    IMPORTING\n      i_prefix        TYPE csequence DEFAULT space\n    RETURNING\n      VALUE(r_mr_api) TYPE REF TO if_mr_api.\n\n  METHODS get\n    IMPORTING\n      i_url             TYPE csequence\n      i_check_authority TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      e_is_folder       TYPE abap_bool\n      e_content         TYPE xstring\n      e_mime_type       TYPE csequence\n      e_loio            TYPE skwf_io\n    CHANGING\n      c_language        TYPE langu OPTIONAL\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      not_found\n      permission_failure.\n\n  METHODS create_folder\n    IMPORTING\n      i_url                     TYPE csequence\n      i_language                TYPE langu DEFAULT sy-langu\n      i_description             TYPE csequence OPTIONAL\n      i_check_authority         TYPE abap_bool DEFAULT abap_true\n      i_suppress_package_dialog TYPE abap_bool DEFAULT space\n      i_dev_package             TYPE devclass OPTIONAL\n      i_genflag                 TYPE abap_bool DEFAULT abap_false\n      i_corr_number             TYPE trkorr OPTIONAL\n      i_folder_loio             TYPE skwf_io OPTIONAL\n      i_suppress_dialogs        TYPE abap_bool OPTIONAL\n    EXPORTING\n      e_folder_io               TYPE skwf_io\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      cancelled\n      permission_failure\n      folder_exists.\n\n  METHODS put\n    IMPORTING\n      i_url                     TYPE csequence\n      i_content                 TYPE xstring\n      i_language                TYPE langu DEFAULT sy-langu\n      i_description             TYPE csequence OPTIONAL\n      i_check_authority         TYPE abap_bool DEFAULT abap_true\n      i_suppress_package_dialog TYPE abap_bool DEFAULT space\n      i_dev_package             TYPE devclass OPTIONAL\n      i_genflag                 TYPE abap_bool DEFAULT abap_false\n      i_corr_number             TYPE trkorr OPTIONAL\n      i_new_loio                TYPE skwf_io OPTIONAL\n      i_suppress_dialogs        TYPE abap_bool OPTIONAL\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      cancelled\n      permission_failure\n      data_inconsistency\n      new_loio_already_exists\n      is_folder.\n\n  METHODS delete\n    IMPORTING\n      i_url              TYPE csequence\n      i_delete_children  TYPE abap_bool DEFAULT abap_false\n      i_check_authority  TYPE abap_bool DEFAULT abap_true\n      i_corr_number      TYPE trkorr OPTIONAL\n      i_suppress_dialogs TYPE abap_bool OPTIONAL\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      cancelled\n      permission_failure\n      not_found.\n\n  METHODS file_list\n    IMPORTING\n      i_url             TYPE csequence\n      i_recursive_call  TYPE abap_bool DEFAULT abap_false\n      i_check_authority TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      e_files           TYPE string_table\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      not_found\n      permission_failure\n      is_not_folder.\n\n  METHODS properties\n    IMPORTING\n      i_url               TYPE csequence\n      i_check_authority   TYPE abap_bool DEFAULT abap_true\n    EXPORTING\n      e_is_folder         TYPE abap_bool\n      e_mime_type         TYPE csequence\n      e_name              TYPE string\n      e_size              TYPE i\n      e_bin_data          TYPE abap_bool\n      e_loio              TYPE skwf_io\n      e_phio              TYPE skwf_io\n      e_language          TYPE langu\n      e_phio_last_changed TYPE string \" wrong, delete parameter?\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      not_found\n      permission_failure.\n\n  METHODS get_io_for_url\n    IMPORTING\n      i_url       TYPE csequence\n    EXPORTING\n      e_is_folder TYPE abap_bool\n      e_loio      TYPE skwf_io\n    EXCEPTIONS\n      parameter_missing\n      error_occured\n      not_found.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SXML_STRING_READER                   ', 'CLASS cl_sxml_string_reader DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS create\n      IMPORTING data TYPE xstring\n      RETURNING VALUE(reader) TYPE REF TO if_sxml_reader.\nENDCLASS.\n\nCLASS cl_sxml_string_reader IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT reader TYPE lcl_reader\n      EXPORTING\n        iv_json = cl_abap_codepage=>convert_from( data ).\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SXML_STRING_WRITER                   ', 'CLASS cl_sxml_string_writer DEFINITION PUBLIC FINAL CREATE PRIVATE.\n\n  PUBLIC SECTION.\n    INTERFACES if_sxml_writer.\n\n    METHODS constructor\n      IMPORTING\n        type TYPE if_sxml=>xml_stream_type.\n\n    METHODS get_output\n      RETURNING\n        VALUE(output) TYPE xstring.\n\n    CLASS-METHODS create\n      IMPORTING\n        type                     TYPE if_sxml=>xml_stream_type DEFAULT if_sxml=>co_xt_xml10\n        ignore_conversion_errors TYPE abap_bool DEFAULT abap_false\n        normalizing              TYPE abap_bool DEFAULT abap_false\n        no_empty_elements        TYPE abap_bool DEFAULT abap_false\n        encoding                 TYPE string DEFAULT ''UTF-8''\n        PREFERRED PARAMETER type\n      RETURNING\n        VALUE(writer)            TYPE REF TO cl_sxml_string_writer\n      RAISING\n        cx_sxml_illegal_argument_error.\n\n  PRIVATE SECTION.\n    DATA mv_output TYPE xstring.\n    DATA mv_type TYPE if_sxml=>xml_stream_type.\n    DATA mt_stack TYPE STANDARD TABLE OF string WITH DEFAULT KEY.\n\n    METHODS append_text IMPORTING text TYPE string.\n    METHODS get_text RETURNING VALUE(text) TYPE string.\n\n* stack operations\n    METHODS peek RETURNING VALUE(rv_name) TYPE string.\n    METHODS remove RETURNING VALUE(rv_name) TYPE string.\nENDCLASS.\n\nCLASS cl_sxml_string_writer IMPLEMENTATION.\n\n  METHOD constructor.\n    mv_type = type.\n  ENDMETHOD.\n\n  METHOD create.\n    CREATE OBJECT writer\n      EXPORTING\n        type = type.\n  ENDMETHOD.\n\n  METHOD if_sxml_writer~set_option.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD get_output.\n    output = mv_output.\n  ENDMETHOD.\n\n  METHOD append_text.\n    DATA append TYPE xstring.\n    append = cl_abap_conv_codepage=>create_out( )->convert( text ).\n    CONCATENATE mv_output append INTO mv_output IN BYTE MODE.\n  ENDMETHOD.\n\n  METHOD get_text.\n    text = cl_abap_conv_codepage=>create_in( )->convert( mv_output ).\n  ENDMETHOD.\n\n  METHOD if_sxml_writer~open_element.\n    DATA parent TYPE string.\n    parent = peek( ).\n\n    IF parent = ''array'' AND get_text( ) NP ''*[''.\n      append_text( '','' ).\n    ENDIF.\n    IF parent = ''object'' AND get_text( ) NP ''*{''.\n      append_text( '','' ).\n    ENDIF.\n\n    APPEND name TO mt_stack.\n    CASE name.\n      WHEN ''object''.\n        append_text( ''{'' ).\n      WHEN ''array''.\n        append_text( ''['' ).\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD remove.\n    DATA index TYPE i.\n    index = lines( mt_stack ).\n    READ TABLE mt_stack INDEX index INTO rv_name.\n    DELETE mt_stack INDEX index.\n  ENDMETHOD.\n\n  METHOD if_sxml_writer~close_element.\n    DATA name TYPE string.\n    name = remove( ).\n    CASE name.\n      WHEN ''object''.\n        append_text( ''}'' ).\n      WHEN ''array''.\n        append_text( '']'' ).\n    ENDCASE.\n  ENDMETHOD.\n\n  METHOD if_sxml_writer~write_attribute.\n    append_text( ''\"'' ).\n    append_text( value ).\n    append_text( ''\":'' ).\n  ENDMETHOD.\n\n  METHOD peek.\n    DATA index TYPE i.\n    index = lines( mt_stack ).\n    READ TABLE mt_stack INDEX index INTO rv_name.\n  ENDMETHOD.\n\n  METHOD if_sxml_writer~write_value.\n    DATA name TYPE string.\n    name = peek( ).\n    CASE name.\n      WHEN ''str''.\n        append_text( ''\"'' ).\n        append_text( condense( value ) ).\n        append_text( ''\"'' ).\n      WHEN ''num''.\n        append_text( condense( value ) ).\n      WHEN OTHERS.\n        WRITE ''@KERNEL console.dir(name);''.\n        ASSERT 1 = ''todo_if_sxml_writer_write_value''.\n    ENDCASE.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SXML_ERROR                           ', 'CLASS cx_sxml_error DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n\nENDCLASS.\n\nCLASS cx_sxml_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SXML_ILLEGAL_ARGUMENT_ERROR          ', 'CLASS cx_sxml_illegal_argument_error DEFINITION PUBLIC INHERITING FROM cx_sxml_error.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cx_sxml_illegal_argument_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SXML_NAME_ERROR                      ', 'CLASS cx_sxml_name_error DEFINITION PUBLIC INHERITING FROM cx_sxml_error.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cx_sxml_name_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SXML_PARSE_ERROR                     ', 'CLASS cx_sxml_parse_error DEFINITION PUBLIC INHERITING FROM cx_sxml_error.\n  PUBLIC SECTION.\n    METHODS constructor IMPORTING xml_offset TYPE i.\n    DATA xml_offset TYPE i.\nENDCLASS.\n\nCLASS cx_sxml_parse_error IMPLEMENTATION.\n  METHOD constructor.\n    super->constructor( ).\n    me->xml_offset = xml_offset.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_SXML_STATE_ERROR                     ', 'CLASS cx_sxml_state_error DEFINITION PUBLIC INHERITING FROM cx_sxml_error.\n  PUBLIC SECTION.\nENDCLASS.\n\nCLASS cx_sxml_state_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML                                 ', 'INTERFACE if_sxml PUBLIC.\n\n  TYPES xml_stream_type TYPE i.\n\n  CONSTANTS co_xt_xml10 TYPE xml_stream_type VALUE 1.\n  CONSTANTS co_xt_binary TYPE xml_stream_type VALUE 2.\n  CONSTANTS co_xt_xop TYPE xml_stream_type VALUE 3.\n  CONSTANTS co_xt_json TYPE xml_stream_type VALUE 4.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_ATTRIBUTE                       ', 'INTERFACE if_sxml_attribute PUBLIC.\n  TYPES attributes TYPE STANDARD TABLE OF REF TO if_sxml_attribute WITH DEFAULT KEY.\n  DATA: BEGIN OF qname,\n          name TYPE string,\n        END OF qname.\n  DATA value_type TYPE if_sxml_value=>value_type.\n  METHODS get_value RETURNING VALUE(value) TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_CLOSE_ELEMENT                   ', 'INTERFACE if_sxml_close_element PUBLIC.\n  INTERFACES if_sxml_node.\n\n  DATA: BEGIN OF qname,\n          name TYPE string,\n        END OF qname.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_NODE                            ', 'INTERFACE if_sxml_node PUBLIC.\n  TYPES node_type TYPE i.\n  DATA type TYPE node_type.\n\n  CONSTANTS co_nt_element_open TYPE node_type VALUE 1.\n  CONSTANTS co_nt_element_close TYPE node_type VALUE 2.\n  CONSTANTS co_nt_value TYPE node_type VALUE 4.\n  CONSTANTS co_nt_attribute TYPE node_type VALUE 32.\n  CONSTANTS co_nt_final TYPE node_type VALUE 128.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_OPEN_ELEMENT                    ', 'INTERFACE if_sxml_open_element PUBLIC.\n  INTERFACES if_sxml_node.\n\n  DATA: BEGIN OF qname,\n          name TYPE string,\n        END OF qname.\n\n  METHODS get_attributes\n    RETURNING\n      VALUE(attr) TYPE if_sxml_attribute=>attributes.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_READER                          ', 'INTERFACE if_sxml_reader PUBLIC.\n  DATA node_type TYPE if_sxml_node=>node_type READ-ONLY.\n  DATA name TYPE string READ-ONLY.\n  DATA value TYPE string READ-ONLY.\n\n  METHODS\n    read_next_node\n      RETURNING VALUE(node) TYPE REF TO if_sxml_node.\n\n  METHODS\n    next_node\n      IMPORTING\n        value_type TYPE if_sxml_value=>value_type DEFAULT if_sxml_value=>co_vt_text\n      RAISING\n        cx_sxml_parse_error.\n\n  METHODS next_attribute\n    IMPORTING\n      value_type TYPE if_sxml_value=>value_type OPTIONAL.\n\n  METHODS\n    skip_node\n      IMPORTING\n        writer TYPE REF TO if_sxml_writer OPTIONAL\n      RAISING\n        cx_sxml_parse_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_VALUE                           ', 'INTERFACE if_sxml_value PUBLIC.\n\n  TYPES value_type TYPE i.\n  CONSTANTS co_vt_text TYPE value_type VALUE 2.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_VALUE_NODE                      ', 'INTERFACE if_sxml_value_node PUBLIC.\n  INTERFACES if_sxml_node.\n  METHODS get_value RETURNING VALUE(val) TYPE string.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXML_WRITER                          ', 'INTERFACE if_sxml_writer PUBLIC.\n\n  CONSTANTS co_opt_normalizing TYPE i VALUE 1.\n  CONSTANTS co_opt_no_empty TYPE i VALUE 2.\n  CONSTANTS co_opt_ignore_conv_errros TYPE i VALUE 3.\n  CONSTANTS co_opt_linebreaks TYPE i VALUE 4.\n  CONSTANTS co_opt_indent TYPE i VALUE 5.\n  CONSTANTS co_opt_illegal_char_reject TYPE i VALUE 6.\n  CONSTANTS co_opt_illegal_char_replace TYPE i VALUE 7.\n  CONSTANTS co_opt_illegal_char_replace_by TYPE i VALUE 8.\n  CONSTANTS co_opt_base64_no_lf TYPE i VALUE 9.\n\n  METHODS open_element\n    IMPORTING\n      name   TYPE string\n      nsuri  TYPE string OPTIONAL\n      prefix TYPE string OPTIONAL\n    RAISING\n      cx_sxml_state_error\n      cx_sxml_name_error.\n\n  METHODS close_element\n    RAISING\n      cx_sxml_state_error.\n\n  METHODS write_attribute\n    IMPORTING\n      name   TYPE string\n      nsuri  TYPE string OPTIONAL\n      prefix TYPE string OPTIONAL\n      value  TYPE string OPTIONAL\n    RAISING\n      cx_sxml_state_error\n      cx_sxml_name_error.\n\n  METHODS write_value\n    IMPORTING\n      value TYPE string\n    RAISING\n      cx_sxml_state_error.\n\n  METHODS set_option\n    IMPORTING\n      option TYPE i\n      value  TYPE abap_bool DEFAULT abap_true.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXMLP_FACTORY                        ', 'INTERFACE if_sxmlp_factory PUBLIC.\n  CLASS-METHODS create_list\n    IMPORTING\n      name        TYPE string\n      nsuri       TYPE string OPTIONAL\n      prefix      TYPE string OPTIONAL\n    RETURNING\n      VALUE(rval) TYPE REF TO if_sxmlp_list.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXMLP_LIST                           ', 'INTERFACE if_sxmlp_list PUBLIC.\n  INTERFACES if_sxmlp_part.\n\n  METHODS add_part\n    IMPORTING\n      part TYPE REF TO if_sxmlp_part.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXMLP_PART                           ', 'INTERFACE if_sxmlp_part PUBLIC.\n  METHODS serialize IMPORTING writer TYPE REF TO if_sxml_writer.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SXMLP_SIMPLE                         ', 'INTERFACE if_sxmlp_simple PUBLIC.\n\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_APC_TCP_CLIENT_MANAGER               ', 'CLASS cl_apc_tcp_client_manager DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS create\n      IMPORTING\n        i_host          TYPE string\n        i_port          TYPE string\n        i_frame         TYPE if_abap_channel_types=>ty_apc_tcp_frame\n        i_event_handler TYPE REF TO if_apc_wsp_event_handler\n      RETURNING\n        VALUE(ri_client) TYPE REF TO if_apc_wsp_client\n      RAISING\n        cx_apc_error.\nENDCLASS.\n\nCLASS cl_apc_tcp_client_manager IMPLEMENTATION.\n  METHOD create.\n    CREATE OBJECT ri_client TYPE lcl_client\n      EXPORTING\n        iv_host    = i_host\n        iv_port    = i_port\n        io_handler = i_event_handler.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_APC_WSP_EXT_STATELESS_BASE           ', 'CLASS cl_apc_wsp_ext_stateless_base DEFINITION PUBLIC ABSTRACT.\n  PUBLIC SECTION.\n    INTERFACES if_apc_wsp_extension.\nENDCLASS.\n\nCLASS cl_apc_wsp_ext_stateless_base IMPLEMENTATION.\n  METHOD if_apc_wsp_extension~on_start.\n    RETURN.\n  ENDMETHOD.\n\n  METHOD if_apc_wsp_extension~on_message.\n    RETURN.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_APC_ERROR                            ', 'CLASS cx_apc_error DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_apc_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_ABAP_CHANNEL_TYPES                   ', 'INTERFACE if_abap_channel_types PUBLIC.\n  TYPES: BEGIN OF ty_apc_tcp_frame,\n           frame_type          TYPE i,\n           fixed_length        TYPE i,\n           terminator          TYPE string,\n           length_field_length TYPE i,\n           length_field_offset TYPE i,\n           length_field_header TYPE i,\n         END OF ty_apc_tcp_frame.\n\n  TYPES ty_tihttpnvp TYPE tihttpnvp.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_TCP_FRAME_TYPES                  ', 'INTERFACE if_apc_tcp_frame_types PUBLIC.\n  CONSTANTS co_frame_type_fixed_length TYPE i VALUE 1.\n  CONSTANTS co_frame_type_terminator   TYPE i VALUE 2.\n  CONSTANTS co_frame_type_length_field TYPE i VALUE 3.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_BINDING_MANAGER              ', 'INTERFACE if_apc_wsp_binding_manager PUBLIC.\n  METHODS bind_amc_message_consumer\n    IMPORTING\n      i_application_id TYPE clike\n      i_channel_id     TYPE clike\n    RAISING\n      cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_CLIENT                       ', 'INTERFACE if_apc_wsp_client PUBLIC.\n  METHODS connect.\n  METHODS close.\n  METHODS get_message_manager\n    RETURNING\n      VALUE(ri_manager) TYPE REF TO if_apc_wsp_message_manager\n    RAISING\n      cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_EVENT_HANDLER                ', 'INTERFACE if_apc_wsp_event_handler PUBLIC.\n  METHODS on_open.\n  METHODS on_message\n    IMPORTING i_message TYPE REF TO if_apc_wsp_message.\n  METHODS on_close.\n  METHODS on_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_EXTENSION                    ', 'INTERFACE if_apc_wsp_extension PUBLIC.\n  METHODS on_start\n    IMPORTING\n      i_context         TYPE REF TO if_apc_wsp_server_context\n      i_message_manager TYPE REF TO if_apc_wsp_message_manager.\n\n  METHODS on_message\n    IMPORTING\n      i_message         TYPE REF TO if_apc_wsp_message\n      i_message_manager TYPE REF TO if_apc_wsp_message_manager\n      i_context         TYPE REF TO if_apc_wsp_server_context.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_INITIAL_REQUEST              ', 'INTERFACE if_apc_wsp_initial_request PUBLIC.\n  METHODS get_form_fields\n    IMPORTING\n      i_formfield_encoding TYPE i DEFAULT 0\n    CHANGING\n      c_fields             TYPE if_abap_channel_types=>ty_tihttpnvp\n    RAISING\n      cx_apc_error.\n\n  METHODS get_header_fields\n    CHANGING\n      c_fields TYPE if_abap_channel_types=>ty_tihttpnvp\n    RAISING\n      cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_MESSAGE                      ', 'INTERFACE if_apc_wsp_message PUBLIC.\n  METHODS get_binary\n    RETURNING VALUE(rv_binary) TYPE xstring\n    RAISING cx_apc_error.\n  METHODS set_binary\n    IMPORTING iv_binary TYPE xsequence\n    RAISING cx_apc_error.\n  METHODS get_text\n    RETURNING VALUE(r_message) TYPE string\n    RAISING cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_MESSAGE_MANAGER              ', 'INTERFACE if_apc_wsp_message_manager PUBLIC.\n  METHODS create_message\n    RETURNING\n      VALUE(ri_message) TYPE REF TO if_apc_wsp_message\n    RAISING\n      cx_apc_error.\n  METHODS send\n    IMPORTING\n      ii_message TYPE REF TO if_apc_wsp_message\n    RAISING\n      cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_APC_WSP_SERVER_CONTEXT               ', 'INTERFACE if_apc_wsp_server_context PUBLIC.\n  METHODS get_initial_request\n    RETURNING VALUE(r_initial_request) TYPE REF TO if_apc_wsp_initial_request\n    RAISING cx_apc_error.\n  METHODS get_binding_manager\n    RETURNING VALUE(r_binding_manager) TYPE REF TO if_apc_wsp_binding_manager\n    RAISING cx_apc_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ABAP_UNIT_ASSERT                     ', 'CLASS cl_abap_unit_assert DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS\n      assert_equals\n        IMPORTING\n          act   TYPE any\n          exp   TYPE any\n          msg   TYPE string OPTIONAL\n          tol   TYPE f OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS abort\n      IMPORTING\n        msg    TYPE csequence OPTIONAL\n        detail TYPE csequence OPTIONAL\n        quit   TYPE int1 DEFAULT 2 PREFERRED PARAMETER msg.\n\n    CLASS-METHODS\n      assert_differs\n        IMPORTING\n          act   TYPE any\n          exp   TYPE any\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_number_between\n        IMPORTING\n          lower  TYPE i\n          upper  TYPE i\n          number TYPE i\n          msg    TYPE string OPTIONAL\n          quit   TYPE i OPTIONAL\n          level  TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_not_initial\n        IMPORTING\n          act   TYPE any\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_initial\n        IMPORTING\n          act   TYPE any\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      skip\n        IMPORTING\n          msg    TYPE csequence\n          detail TYPE csequence OPTIONAL.\n\n    CLASS-METHODS\n      fail\n        IMPORTING\n          msg    TYPE csequence OPTIONAL\n          quit   TYPE i OPTIONAL\n          level  TYPE i OPTIONAL\n          detail TYPE csequence OPTIONAL\n        PREFERRED PARAMETER msg.\n\n    CLASS-METHODS\n      assert_subrc\n        IMPORTING\n          exp   TYPE i DEFAULT 0\n          act   TYPE i DEFAULT sy-subrc\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL\n        PREFERRED PARAMETER act.\n\n    CLASS-METHODS\n      assert_true\n        IMPORTING\n          act TYPE abap_bool\n          msg TYPE string OPTIONAL\n          quit TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_false\n        IMPORTING\n          act TYPE abap_bool\n          msg TYPE string OPTIONAL\n          quit TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_char_cp\n        IMPORTING\n          act   TYPE clike\n          exp   TYPE clike\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_char_np\n        IMPORTING\n          act   TYPE clike\n          exp   TYPE clike\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_bound\n        IMPORTING\n          act   TYPE any\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_not_bound\n        IMPORTING\n          act   TYPE any\n          msg   TYPE string OPTIONAL\n          quit  TYPE i OPTIONAL\n          level TYPE i OPTIONAL.\n\n    CLASS-METHODS\n      assert_text_matches\n        IMPORTING\n          pattern TYPE csequence\n          text    TYPE csequence\n          msg     TYPE csequence OPTIONAL\n          quit    TYPE i OPTIONAL\n          level   TYPE i OPTIONAL.\n\n  PRIVATE SECTION.\n    CLASS-METHODS\n      compare_tables\n        IMPORTING\n          act TYPE any\n          exp TYPE any.\n\nENDCLASS.\n\nCLASS cl_abap_unit_assert IMPLEMENTATION.\n\n  METHOD compare_tables.\n\n    DATA index    TYPE i.\n    DATA type1    TYPE REF TO cl_abap_tabledescr.\n    DATA type2    TYPE REF TO cl_abap_tabledescr.\n    DATA lv_match TYPE abap_bool.\n\n    FIELD-SYMBOLS <tab1> TYPE INDEX TABLE.\n    FIELD-SYMBOLS <row1> TYPE any.\n    FIELD-SYMBOLS <tab2> TYPE INDEX TABLE.\n    FIELD-SYMBOLS <row2> TYPE any.\n\n    IF lines( act ) <> lines( exp ).\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected table to contain { lines( exp ) } rows, got { lines( act ) }|.\n    ENDIF.\n\n    ASSIGN act TO <tab1>.\n    ASSIGN exp TO <tab2>.\n\n    type1 ?= cl_abap_typedescr=>describe_by_data( act ).\n    type2 ?= cl_abap_typedescr=>describe_by_data( exp ).\n*    WRITE ''@KERNEL console.dir(type1);''.\n    IF type1->table_kind = cl_abap_tabledescr=>tablekind_hashed\n        OR type2->table_kind = cl_abap_tabledescr=>tablekind_hashed.\n      LOOP AT <tab1> ASSIGNING <row1>.\n        lv_match = abap_false.\n        LOOP AT <tab2> ASSIGNING <row2>.\n          TRY.\n              assert_equals(\n                act = <row1>\n                exp = <row2> ).\n              lv_match = abap_true.\n              EXIT. \" current loop\n            CATCH kernel_cx_assert.\n          ENDTRY.\n        ENDLOOP.\n        IF lv_match = abap_false.\n          RAISE EXCEPTION TYPE kernel_cx_assert\n            EXPORTING\n              msg = |Hashed table contents differs|.\n        ENDIF.\n      ENDLOOP.\n    ELSE.\n      DO lines( act ) TIMES.\n        index = sy-index.\n        READ TABLE <tab1> INDEX index ASSIGNING <row1>.\n        assert_subrc( ).\n        READ TABLE <tab2> INDEX index ASSIGNING <row2>.\n        assert_subrc( ).\n        assert_equals(\n          act = <row1>\n          exp = <row2> ).\n      ENDDO.\n    ENDIF.\n\n  ENDMETHOD.\n\n  METHOD assert_text_matches.\n    DATA lv_match TYPE abap_bool.\n    lv_match = boolc( contains(\n      val   = text\n      regex = pattern ) ).\n    IF lv_match = abap_false.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          expected = pattern\n          actual   = text\n          msg      = msg.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD abort.\n    ASSERT 1 = ''todo''.\n  ENDMETHOD.\n\n  METHOD assert_bound.\n    IF act IS NOT BOUND.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected value to be bound|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_not_bound.\n    IF act IS BOUND.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected value to not be bound|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_char_cp.\n    IF act NP exp.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          expected = exp\n          actual   = act\n          msg      = msg.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_char_np.\n    IF act CP exp.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Actual: { act }|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD fail.\n    RAISE EXCEPTION TYPE kernel_cx_assert\n      EXPORTING\n        msg = msg.\n  ENDMETHOD.\n\n  METHOD skip.\n    RETURN.\n  ENDMETHOD.\n\n  METHOD assert_differs.\n    TRY.\n        assert_equals(\n          act = act\n          exp = exp ).\n        RAISE EXCEPTION TYPE kernel_cx_assert\n          EXPORTING\n            msg = |Expected different values|\n            act = act\n            exp = exp.\n      CATCH kernel_cx_assert.\n        RETURN.\n    ENDTRY.\n  ENDMETHOD.\n\n  METHOD assert_true.\n    IF act <> abap_true.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected abap_true|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_false.\n    IF act <> abap_false.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected abap_false|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_equals.\n    DATA type1  TYPE c LENGTH 1.\n    DATA type2  TYPE c LENGTH 1.\n    DATA diff   TYPE f.\n    DATA lv_exp TYPE string.\n    DATA lv_act TYPE string.\n    DATA lv_msg TYPE string.\n\n    DESCRIBE FIELD act TYPE type1.\n    DESCRIBE FIELD exp TYPE type2.\n*    WRITE ''@KERNEL console.dir(type1.get());''.\n*    WRITE ''@KERNEL console.dir(type2.get());''.\n    IF type1 CA ''CgyIFPDTXN''. \" basic types\n      IF type2 IS NOT INITIAL.\n        IF type2 NA ''CgyIFPDTXN''.\n          RAISE EXCEPTION TYPE kernel_cx_assert\n            EXPORTING\n              msg = |Unexpected types|.\n        ENDIF.\n      ENDIF.\n    ELSEIF type1 IS NOT INITIAL AND type2 IS NOT INITIAL.\n* else check the types are identical\n      IF type1 <> type2.\n        RAISE EXCEPTION TYPE kernel_cx_assert\n          EXPORTING\n            msg = |Unexpected types|.\n      ENDIF.\n    ENDIF.\n\n    IF type1 = ''h''.\n      compare_tables(\n        act = act\n        exp = exp ).\n    ELSEIF tol IS SUPPLIED.\n      diff = exp - act.\n*      WRITE ''@KERNEL console.dir(tol);''.\n*      WRITE ''@KERNEL console.dir(diff);''.\n      IF diff >= tol.\n        RAISE EXCEPTION TYPE kernel_cx_assert.\n      ENDIF.\n    ELSEIF act <> exp.\n      lv_act = lcl_dump=>to_string( act ).\n      lv_exp = lcl_dump=>to_string( exp ).\n      IF msg <> ''''.\n        lv_msg = msg.\n      ELSE.\n        lv_msg = |Expected ''{ lv_exp }'', got ''{ lv_act }''|.\n      ENDIF.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg      = lv_msg\n          actual   = lv_act\n          expected = lv_exp.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_not_initial.\n    DATA lv_msg TYPE string.\n    IF act IS INITIAL.\n      lv_msg = msg.\n      IF lv_msg IS INITIAL.\n        lv_msg = |Expected non initial value|.\n      ENDIF.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = lv_msg.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_initial.\n    DATA lv_msg TYPE string.\n    IF act IS NOT INITIAL.\n      lv_msg = msg.\n      IF lv_msg IS INITIAL.\n        lv_msg = |Expected initial value|.\n      ENDIF.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = lv_msg.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_subrc.\n    IF act <> exp.\n      RAISE EXCEPTION TYPE kernel_cx_assert\n        EXPORTING\n          msg = |Expected sy-subrc to equal { exp }, got { act }|.\n    ENDIF.\n  ENDMETHOD.\n\n  METHOD assert_number_between.\n    IF number < lower OR number > upper.\n      RAISE EXCEPTION TYPE kernel_cx_assert.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_ABAP_UNIT_CONSTANT                   ', 'INTERFACE if_abap_unit_constant PUBLIC.\n  CONSTANTS:\n    BEGIN OF severity,\n      low               TYPE int1 VALUE 0,\n      medium            TYPE int1 VALUE 1,\n      high              TYPE int1 VALUE 2,\n    END OF severity.\n  CONSTANTS:\n    BEGIN OF quit,\n      test   TYPE int1 VALUE 1,\n      no     TYPE int1 VALUE 5,\n    END OF quit.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_AUNIT_CONSTANTS                      ', 'INTERFACE if_aunit_constants PUBLIC.\n  CONSTANTS no        TYPE int1 VALUE 0.\n  CONSTANTS critical  TYPE int1 VALUE 1.\n  CONSTANTS fatal     TYPE int1 VALUE 1.\n  CONSTANTS tolerable TYPE int1 VALUE 1.\n  CONSTANTS method    TYPE int1 VALUE 1.\n  CONSTANTS class_     TYPE int1 VALUE 2.\n\n  CONSTANTS: BEGIN OF severity,\n               low    TYPE int1 VALUE 0,\n               medium TYPE int1 VALUE 1,\n               high   TYPE int1 VALUE 2,\n             END OF severity.\n\n  CONSTANTS: BEGIN OF quit,\n               no   TYPE int1 VALUE 0,\n               test TYPE int1 VALUE 1,\n             END OF quit.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_CX_ASSERT                        ', 'CLASS kernel_cx_assert DEFINITION PUBLIC INHERITING FROM cx_dynamic_check.\n  PUBLIC SECTION.\n    DATA actual TYPE string.\n    DATA expected TYPE string.\n    DATA msg TYPE string.\n\n    METHODS constructor\n      IMPORTING\n        msg      TYPE string\n        previous LIKE previous OPTIONAL\n        expected LIKE expected OPTIONAL\n        actual   LIKE actual OPTIONAL.\nENDCLASS.\n\nCLASS kernel_cx_assert IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor( previous = previous ).\n    me->expected = expected.\n    me->actual = actual.\n    me->msg = msg.\n    IF me->msg IS INITIAL.\n      me->msg = |Unit test assertion failed|.\n    ENDIF.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('KERNEL_UNIT_RUNNER                      ', 'CLASS kernel_unit_runner DEFINITION PUBLIC.\n  PUBLIC SECTION.\n* as of now, only global classes with local testclasses are supported\n    TYPES: BEGIN OF ty_input_item,\n             class_name     TYPE c LENGTH 30,\n             testclass_name TYPE c LENGTH 30,\n             method_name    TYPE c LENGTH 30,\n           END OF ty_input_item.\n    TYPES ty_input TYPE STANDARD TABLE OF ty_input_item WITH DEFAULT KEY.\n\n    TYPES ty_status TYPE string.\n    CONSTANTS: BEGIN OF gc_status,\n                success TYPE ty_status VALUE ''SUCCESS'',\n                failed  TYPE ty_status VALUE ''FAILED'',\n                skipped TYPE ty_status VALUE ''SKIPPED'',\n               END OF gc_status.\n\n    TYPES BEGIN OF ty_result_item.\n    INCLUDE TYPE ty_input_item.\n    TYPES: expected    TYPE string,\n             actual      TYPE string,\n             status      TYPE ty_status,\n             runtime     TYPE i,\n             message     TYPE string,\n             js_location TYPE string,\n             console     TYPE string,\n           END OF ty_result_item.\n    TYPES: BEGIN OF ty_result,\n             list TYPE STANDARD TABLE OF ty_result_item WITH DEFAULT KEY,\n             json TYPE string,\n           END OF ty_result.\n\n    CLASS-DATA mv_console TYPE string.\n\n    CLASS-METHODS run\n      IMPORTING\n        it_input TYPE ty_input\n      RETURNING\n        VALUE(rs_result) TYPE ty_result.\n  PRIVATE SECTION.\n    TYPES: BEGIN OF ty_class_item,\n             class_name     TYPE c LENGTH 30,\n             testclass_name TYPE c LENGTH 30,\n           END OF ty_class_item.\n    TYPES ty_classes TYPE STANDARD TABLE OF ty_class_item WITH DEFAULT KEY.\n\n    CLASS-METHODS unique_classes\n      IMPORTING\n       it_input TYPE ty_input\n      RETURNING\n        VALUE(rt_classes) TYPE ty_classes.\n\n    CLASS-METHODS to_json\n      IMPORTING it_list TYPE ty_result-list\n      RETURNING VALUE(rv_json) TYPE string.\n\n    CLASS-METHODS get_location\n      IMPORTING ix_error TYPE REF TO cx_root\n      RETURNING VALUE(rv_location) TYPE string.\nENDCLASS.\n\nCLASS kernel_unit_runner IMPLEMENTATION.\n\n  METHOD get_location.\n    DATA lv_stack TYPE string.\n    DATA lt_lines TYPE STANDARD TABLE OF string WITH DEFAULT KEY.\n    DATA lv_found TYPE abap_bool.\n    WRITE ''@KERNEL lv_stack.set(INPUT.ix_error.get().stack);''.\n    SPLIT lv_stack AT |\\\\n| INTO TABLE lt_lines.\n* find whatever comes after \"cl_abap_unit_assert\"\n    LOOP AT lt_lines INTO lv_stack.\n      IF lv_stack CP ''*cl_abap_unit_assert*''.\n        lv_found = abap_true.\n        CONTINUE.\n      ELSEIF lv_found = abap_true.\n        REPLACE FIRST OCCURRENCE OF |at | IN lv_stack WITH ''''.\n        rv_location = condense( lv_stack ).\n        EXIT.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD to_json.\n* would like to keep the dependencies of this class minimal,\n* so not using CALL TRANSFORMATION or any other ABAP classes\n\n    DATA ls_list    LIKE LINE OF it_list.\n    DATA lt_strings TYPE STANDARD TABLE OF string WITH DEFAULT KEY.\n    DATA lv_string  LIKE LINE OF lt_strings.\n    DATA lv_message TYPE string.\n\n\n    LOOP AT it_list INTO ls_list.\n      lv_message = ls_list-message.\n      REPLACE ALL OCCURRENCES OF |\"| IN lv_message WITH |\\\\\"|.\n      REPLACE ALL OCCURRENCES OF |\\\\n| IN lv_message WITH |\\\\\\\\n|.\n\n      REPLACE ALL OCCURRENCES OF |\"| IN ls_list-expected WITH |\\\\\"|.\n      REPLACE ALL OCCURRENCES OF |\\\\n| IN ls_list-expected WITH |\\\\\\\\n|.\n\n      REPLACE ALL OCCURRENCES OF |\"| IN ls_list-actual WITH |\\\\\"|.\n      REPLACE ALL OCCURRENCES OF |\\\\n| IN ls_list-actual WITH |\\\\\\\\n|.\n\n      REPLACE ALL OCCURRENCES OF |\"| IN ls_list-console WITH |\\\\\"|.\n      REPLACE ALL OCCURRENCES OF |\\\\n| IN ls_list-console WITH |\\\\\\\\n|.\n\n      lv_string = |\\\\{\"class_name\": \"{ ls_list-class_name\n        }\",\"testclass_name\": \"{ ls_list-testclass_name\n        }\",\"method_name\": \"{ ls_list-method_name\n        }\",\"expected\": \"{ ls_list-expected\n        }\",\"actual\": \"{ ls_list-actual\n        }\",\"status\": \"{ ls_list-status\n        }\",\"runtime\": { ls_list-runtime\n        },\"console\": \"{ ls_list-console\n        }\",\"message\": \"{ lv_message\n        }\",\"js_location\": \"{ ls_list-js_location }\"\\\\}|.\n      APPEND lv_string TO lt_strings.\n    ENDLOOP.\n    CONCATENATE LINES OF lt_strings INTO rv_json SEPARATED BY '',''.\n    rv_json = ''['' && rv_json && '']''.\n  ENDMETHOD.\n\n  METHOD unique_classes.\n    DATA ls_input LIKE LINE OF it_input.\n    DATA ls_class LIKE LINE OF rt_classes.\n    LOOP AT it_input INTO ls_input.\n      MOVE-CORRESPONDING ls_input TO ls_class.\n      INSERT ls_class INTO TABLE rt_classes.\n    ENDLOOP.\n    SORT rt_classes.\n    DELETE ADJACENT DUPLICATES FROM rt_classes.\n  ENDMETHOD.\n\n  METHOD run.\n\n    DATA ls_input   LIKE LINE OF it_input.\n    DATA lv_time    TYPE i.\n    DATA lo_obj     TYPE REF TO object.\n    DATA lv_name    TYPE string.\n    DATA lt_classes TYPE ty_classes.\n    DATA ls_class   LIKE LINE OF lt_classes.\n    DATA lx_root    TYPE REF TO cx_root.\n    DATA lx_assert  TYPE REF TO kernel_cx_assert.\n    FIELD-SYMBOLS <ls_result> LIKE LINE OF rs_result-list.\n\n* todo, respect quit level, default = method?\n\n    lt_classes = unique_classes( it_input ).\n\n    LOOP AT lt_classes INTO ls_class.\n* this is special, and must match the runtime:\n      lv_name = |CLAS-{ ls_class-class_name }-{ ls_class-testclass_name }|.\n      CREATE OBJECT lo_obj TYPE (lv_name).\n\n      TRY.\n          CALL METHOD lo_obj->(''CLASS_SETUP'').\n        CATCH cx_sy_dyn_call_illegal_method.\n      ENDTRY.\n\n      LOOP AT it_input INTO ls_input WHERE class_name = ls_class-class_name AND testclass_name = ls_class-testclass_name.\n        APPEND INITIAL LINE TO rs_result-list ASSIGNING <ls_result>.\n        MOVE-CORRESPONDING ls_input TO <ls_result>.\n\n        TRY.\n            CALL METHOD lo_obj->(''SETUP'').\n          CATCH cx_sy_dyn_call_illegal_method.\n        ENDTRY.\n\n        GET RUN TIME FIELD lv_time.\n        CLEAR mv_console.\n        TRY.\n            CALL METHOD lo_obj->(ls_input-method_name).\n            <ls_result>-status  = gc_status-success.\n            <ls_result>-console = mv_console.\n          CATCH kernel_cx_assert INTO lx_assert.\n            <ls_result>-status      = gc_status-failed.\n            <ls_result>-actual      = lx_assert->actual.\n            <ls_result>-expected    = lx_assert->expected.\n            <ls_result>-message     = lx_assert->msg.\n            <ls_result>-js_location = get_location( lx_assert ).\n            <ls_result>-console     = mv_console.\n          CATCH cx_root INTO lx_root.\n            <ls_result>-status      = gc_status-failed.\n            <ls_result>-message     = |Some exception raised|. \" todo, use RTTI to find the class name?\n            <ls_result>-js_location = get_location( lx_root ).\n            <ls_result>-console     = mv_console.\n        ENDTRY.\n        GET RUN TIME FIELD lv_time.\n        <ls_result>-runtime = lv_time.\n\n        TRY.\n            CALL METHOD lo_obj->(''TEARDOWN'').\n          CATCH cx_sy_dyn_call_illegal_method.\n        ENDTRY.\n      ENDLOOP.\n\n      TRY.\n          CALL METHOD lo_obj->(''CLASS_TEARDOWN'').\n        CATCH cx_sy_dyn_call_illegal_method.\n      ENDTRY.\n\n    ENDLOOP.\n\n    rs_result-json = to_json( rs_result-list ).\n\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_SYSTEM_UUID                          ', 'CLASS cl_system_uuid DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_system_uuid_rfc4122_static.\n    INTERFACES if_system_uuid_static.\nENDCLASS.\n\nCLASS cl_system_uuid IMPLEMENTATION.\n\n  METHOD if_system_uuid_static~create_uuid_x16.\n    WRITE ''@KERNEL if (cl_system_uuid.CRYPTO === undefined) cl_system_uuid.CRYPTO = await import(\"crypto\");''.\n    WRITE ''@KERNEL uuid.set(cl_system_uuid.CRYPTO.randomBytes(16).toString(\"hex\").toUpperCase());''.\n  ENDMETHOD.\n\n  METHOD if_system_uuid_rfc4122_static~create_uuid_c36_by_version.\n    ASSERT version = 4.\n    WRITE ''@KERNEL if (cl_system_uuid.CRYPTO === undefined) cl_system_uuid.CRYPTO = await import(\"crypto\");''.\n    WRITE ''@KERNEL uuid.set(cl_system_uuid.CRYPTO.randomUUID());''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CX_UUID_ERROR                           ', 'CLASS cx_uuid_error DEFINITION PUBLIC INHERITING FROM cx_static_check.\n\nENDCLASS.\n\nCLASS cx_uuid_error IMPLEMENTATION.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SYSTEM_UUID_RFC4122_STATIC           ', 'INTERFACE if_system_uuid_rfc4122_static PUBLIC.\n  CLASS-METHODS create_uuid_c36_by_version\n    IMPORTING\n      version TYPE i\n    RETURNING\n      VALUE(uuid) TYPE sysuuid_c36\n    RAISING\n      cx_uuid_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_SYSTEM_UUID_STATIC                   ', 'INTERFACE if_system_uuid_static PUBLIC.\n  CLASS-METHODS create_uuid_x16\n    RETURNING\n      VALUE(uuid) TYPE sysuuid_x16\n    RAISING\n      cx_uuid_error.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_EXPRESS_ICF_SHIM                     ', 'CLASS cl_express_icf_shim DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    CLASS-METHODS run\n      IMPORTING\n        res   TYPE any\n        req   TYPE any\n        base  TYPE string OPTIONAL.\n  PRIVATE SECTION.\n    CLASS-DATA mi_server TYPE REF TO if_http_server.\n    CLASS-METHODS response\n      IMPORTING\n        res     TYPE any ##NEEDED.\n    CLASS-METHODS request\n      IMPORTING\n        req  TYPE any\n        base TYPE string ##NEEDED.\nENDCLASS.\n\nCLASS cl_express_icf_shim IMPLEMENTATION.\n\n  METHOD run.\n    DATA lv_classname TYPE string.\n    DATA li_handler   TYPE REF TO if_http_extension.\n\n    WRITE ''@KERNEL lv_classname.set(INPUT.class);''.\n    TRANSLATE lv_classname TO UPPER CASE.\n    CREATE OBJECT li_handler TYPE (lv_classname).\n\n    IF mi_server IS INITIAL.\n      CREATE OBJECT mi_server TYPE lcl_server.\n    ENDIF.\n\n    CREATE OBJECT mi_server->request TYPE cl_http_entity.\n    request(\n      req  = req\n      base = base ).\n\n********************************************************\n\n    CREATE OBJECT mi_server->response TYPE cl_http_entity.\n    li_handler->handle_request( mi_server ).\n\n********************************************************\n\n    response( res ).\n  ENDMETHOD.\n\n  METHOD request.\n    DATA lv_xstr   TYPE xstring.\n    DATA lv_str    TYPE string.\n    DATA lv_name   TYPE string.\n    DATA lv_value  TYPE string.\n    DATA lt_fields TYPE tihttpnvp.\n\n    WRITE ''@KERNEL lv_xstr.set(INPUT.req.body.toString(\"hex\").toUpperCase());''.\n    mi_server->request->set_data( lv_xstr ).\n    WRITE ''@KERNEL lv_str.set(INPUT.req.method);''.\n    mi_server->request->set_method( lv_str ).\n    WRITE ''@KERNEL for (const h in INPUT.req.headers) {''.\n    WRITE ''@KERNEL   lv_name.set(h);''.\n    WRITE ''@KERNEL   lv_value.set(INPUT.req.headers[h]);''.\n    mi_server->request->set_header_field(\n      name  = lv_name\n      value = lv_value ).\n    WRITE ''@KERNEL }''.\n\n    WRITE ''@KERNEL lv_value.set(INPUT.req.url);''.\n    mi_server->request->set_header_field(\n      name  = ''~request_uri''\n      value = lv_value ).\n\n    SPLIT lv_value AT ''?'' INTO lv_value lv_value.\n    mi_server->request->set_header_field(\n      name  = ''~query_string''\n      value = lv_value ).\n\n    lt_fields = cl_http_utility=>string_to_fields( lv_value ).\n    mi_server->request->set_form_fields( lt_fields ).\n\n\n    WRITE ''@KERNEL lv_value.set(INPUT.req.path);''.\n    mi_server->request->set_header_field(\n      name  = ''~path''\n      value = lv_value ).\n    mi_server->request->set_header_field(\n      name  = ''~path_translated_expanded''\n      value = lv_value ).\n\n    REPLACE FIRST OCCURRENCE OF base IN lv_value WITH ''''.\n    mi_server->request->set_header_field(\n      name  = ''~path_info''\n      value = lv_value ).\n* path_info_expanded is without alias\n    mi_server->request->set_header_field(\n      name  = ''~path_info_expanded''\n      value = lv_value ).\n\n  ENDMETHOD.\n\n  METHOD response.\n    DATA lv_code          TYPE i.\n    DATA lv_xstr          TYPE xstring.\n    DATA lt_header_fields TYPE tihttpnvp.\n    DATA ls_field         LIKE LINE OF lt_header_fields.\n\n    mi_server->response->get_status( IMPORTING code = lv_code ).\n    IF lv_code IS INITIAL.\n      lv_code = 200.\n    ENDIF.\n\n    mi_server->response->get_header_fields( CHANGING fields = lt_header_fields ).\n    LOOP AT lt_header_fields INTO ls_field.\n      WRITE ''@KERNEL INPUT.res.append(ls_field.get().name.get(), ls_field.get().value.get());''.\n    ENDLOOP.\n\n    lv_xstr = mi_server->response->get_data( ).\n    WRITE ''@KERNEL INPUT.res.status(lv_code.get()).send(Buffer.from(lv_xstr.get(), \"hex\"));''.\n  ENDMETHOD.\n\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('CL_ICF_TREE                             ', 'CLASS cl_icf_tree DEFINITION PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES if_icf_tree.\nENDCLASS.\n\nCLASS cl_icf_tree IMPLEMENTATION.\n  METHOD if_icf_tree~service_from_url.\n* todo\n    RETURN.\n  ENDMETHOD.\nENDCLASS.');`);\n  insert.push(`INSERT INTO reposrc ('PROGNAME', 'DATA') VALUES ('IF_ICF_TREE                             ', 'INTERFACE if_icf_tree PUBLIC.\n  CLASS-METHODS service_from_url\n    IMPORTING\n      url             TYPE string DEFAULT ''/''\n      hostnumber      TYPE i\n      authority_check TYPE c DEFAULT ''X''\n    EXPORTING\n      urlsuffix       TYPE string\n      icfnodguid      TYPE char25\n      icf_name        TYPE char15\n      icfactive       TYPE abap_bool\n      icfaltnme       TYPE string\n    EXCEPTIONS\n      wrong_application\n      no_application\n      not_allow_application\n      wrong_url\n      no_authority.\nENDINTERFACE.');`);\n  insert.push(`INSERT INTO t000 ('MANDT', 'CCCATEGORY', 'CCNOCLIIND') VALUES ('123', '', '');`);\n  const {setup} = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_crypto-browserify_index_js\"), __webpack_require__.e(\"vendors-node_modules_path-browserify_index_js\"), __webpack_require__.e(\"vendors-node_modules_abaplint_database-sqlite_build_index_js\"), __webpack_require__.e(\"test_setup_mjs\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../test/setup.mjs */ \"./test/setup.mjs\"));\n  await setup(globalThis.abap, schemas, insert);\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://open-table-maintenance/./output/_init.mjs?");

/***/ }),

/***/ "./output/_top.mjs":
/*!*************************!*\
  !*** ./output/_top.mjs ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abaplint_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abaplint/runtime */ \"./node_modules/@abaplint/runtime/build/src/index.js\");\n\nglobalThis.abap = new _abaplint_runtime__WEBPACK_IMPORTED_MODULE_0__.ABAP();\n\n//# sourceURL=webpack://open-table-maintenance/./output/_top.mjs?");

/***/ }),

/***/ "./output/abap.type.mjs":
/*!******************************!*\
  !*** ./output/abap.type.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst pool = {};\npool['abap_max_comp_name_ln'] = new abap.types.Integer({qualifiedName: \"I\"});\npool['abap_max_comp_name_ln'].set(30);\npool['abap_func_exporting'] = new abap.types.Integer({qualifiedName: \"KIND\"});\npool['abap_func_exporting'].set(10);\npool['abap_func_importing'] = new abap.types.Integer({qualifiedName: \"KIND\"});\npool['abap_func_importing'].set(20);\npool['abap_func_tables'] = new abap.types.Integer({qualifiedName: \"KIND\"});\npool['abap_func_tables'].set(30);\npool['abap_func_changing'] = new abap.types.Integer({qualifiedName: \"KIND\"});\npool['abap_func_changing'].set(40);\npool['abap_trans_srcbind'] = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_trans_srcbind\");\npool['abap_encoding'] = new abap.types.Character(20, {\"qualifiedName\":\"abap_encoding\"});\npool['abap_trans_srcbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_trans_srcbind\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_trans_srcbind_tab\");\npool['abap_trans_resbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_trans_srcbind\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_trans_srcbind_tab\");\npool['abap_abstypename'] = new abap.types.Character(200, {\"qualifiedName\":\"abap_abstypename\"});\npool['abap_attrname'] = new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"});\npool['abap_classname'] = new abap.types.Character(30, {\"qualifiedName\":\"abap_classname\"});\npool['abap_compname'] = new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"});\npool['abap_editmask'] = new abap.types.Character(7, {\"qualifiedName\":\"abap_editmask\"});\npool['abap_evntname'] = new abap.types.Character(61, {\"qualifiedName\":\"abap_evntname\"});\npool['abap_excpname'] = new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"});\npool['abap_helpid'] = new abap.types.Character(62, {\"qualifiedName\":\"abap_helpid\"});\npool['abap_intfname'] = new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"});\npool['abap_keydefkind'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_keydefkind\"});\npool['abap_keyname'] = new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"});\npool['abap_methname'] = new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"});\npool['abap_parmkind'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\npool['abap_parmname'] = new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"});\npool['abap_structkind'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_structkind\"});\npool['abap_typekind'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\npool['abap_visibility'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});\npool['abap_tablekind'] = new abap.types.Character(1, {\"qualifiedName\":\"abap_tablekind\"});\npool['abap_componentdescr'] = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\npool['abap_component_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\npool['abap_compdescr'] = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\");\npool['abap_compdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_compdescr_tab\");\npool['abap_table_keycompdescr'] = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"})}, \"abap_table_keycompdescr\");\npool['abap_table_keydescr'] = new abap.types.Structure({\"components\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"})}, \"abap_table_keycompdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr-components\"), \"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"is_primary\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"access_kind\": new abap.types.String({qualifiedName: \"ACCESS_KIND\"}), \"is_unique\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"key_kind\": new abap.types.String({qualifiedName: \"KEY_KIND\"})}, \"abap_table_keydescr\");\npool['abap_table_keydescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"components\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"})}, \"abap_table_keycompdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr-components\"), \"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"is_primary\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"access_kind\": new abap.types.String({qualifiedName: \"ACCESS_KIND\"}), \"is_unique\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"key_kind\": new abap.types.String({qualifiedName: \"KEY_KIND\"})}, \"abap_table_keydescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr_tab\");\npool['abap_simple_componentdescr'] = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\");\npool['abap_component_view_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_view_tab\");\npool['abap_parmbind'] = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_parmbind\");\npool['abap_parmbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_parmbind\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmbind_tab\");\npool['abap_parmdescr'] = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\");\npool['abap_parmdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmdescr_tab\");\npool['abap_component_symbol_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_symbol_tab\");\npool['abap_func_parmbind'] = new abap.types.Structure({\"value\": new abap.types.DataReference(new abap.types.Character(4)), \"tables_wa\": new abap.types.DataReference(new abap.types.Character(4)), \"kind\": new abap.types.Integer({qualifiedName: \"KIND\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"})}, \"abap_func_parmbind\");\npool['abap_func_parmbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"value\": new abap.types.DataReference(new abap.types.Character(4)), \"tables_wa\": new abap.types.DataReference(new abap.types.Character(4)), \"kind\": new abap.types.Integer({qualifiedName: \"KIND\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"})}, \"abap_func_parmbind\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"SORTED\",\"isUnique\":true,\"keyFields\":[\"KIND\",\"NAME\"]},\"secondary\":[]}, \"abap_func_parmbind_tab\");\npool['abap_func_excpbind'] = new abap.types.Structure({\"message\": new abap.types.DataReference(new abap.types.Character(4)), \"value\": new abap.types.Integer({qualifiedName: \"VALUE\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"})}, \"abap_func_excpbind\");\npool['abap_func_excpbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"message\": new abap.types.DataReference(new abap.types.Character(4)), \"value\": new abap.types.Integer({qualifiedName: \"VALUE\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"})}, \"abap_func_excpbind\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_func_excpbind_tab\");\npool['abap_excpdescr'] = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\");\npool['abap_excpdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpdescr_tab\");\npool['abap_methdescr'] = new abap.types.Structure({\"parameters\": abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmdescr_tab\"), \"exceptions\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpdescr_tab\"), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"for_event\": new abap.types.Character(61, {\"qualifiedName\":\"abap_evntname\"}), \"of_class\": new abap.types.Character(30, {\"qualifiedName\":\"abap_classname\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_redefined\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_abstract\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_final\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"is_raising_excps\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_methdescr\");\npool['abap_methdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"parameters\": abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmdescr_tab\"), \"exceptions\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpdescr_tab\"), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"for_event\": new abap.types.Character(61, {\"qualifiedName\":\"abap_evntname\"}), \"of_class\": new abap.types.Character(30, {\"qualifiedName\":\"abap_classname\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_redefined\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_abstract\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_final\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"is_raising_excps\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_methdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_methdescr_tab\");\npool['abap_attrdescr'] = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\");\npool['abap_attrdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_attrdescr_tab\");\npool['abap_intfdescr'] = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_intfdescr\");\npool['abap_intfdescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_intfdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_intfdescr_tab\");\npool['abap_excpbind'] = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"value\": new abap.types.Integer({qualifiedName: \"VALUE\"})}, \"abap_excpbind\");\npool['abap_excpbind_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"value\": new abap.types.Integer({qualifiedName: \"VALUE\"})}, \"abap_excpbind\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpbind_tab\");\npool['abap_keydescr'] = new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\");\npool['abap_keydescr_tab'] = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_keydescr_tab\");\nabap.TypePools['ABAP'] = pool;\n//# sourceMappingURL=abap.type.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap.type.mjs?");

/***/ }),

/***/ "./output/abap_boolean.dtel.mjs":
/*!**************************************!*\
  !*** ./output/abap_boolean.dtel.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_BOOLEAN\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOLEAN\",\"ddicName\":\"ABAP_BOOLEAN\"}),\n  \"domain\": \"ABAP_BOOLEAN\",\n  \"fixedValues\": [{\"description\":\"False\",\"language\":\"E\"},{\"description\":\"True\",\"low\":\"X\",\"language\":\"E\"}],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_boolean.dtel.mjs?");

/***/ }),

/***/ "./output/abap_callstack.ttyp.mjs":
/*!****************************************!*\
  !*** ./output/abap_callstack.ttyp.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_CALLSTACK\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"mainprogram\": new abap.types.Character(40, {}), \"include\": new abap.types.Character(40, {}), \"line\": new abap.types.Integer(), \"blockname\": new abap.types.String()}, \"ABAP_CALLSTACK_LINE\", \"ABAP_CALLSTACK_LINE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"ABAP_CALLSTACK\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_callstack.ttyp.mjs?");

/***/ }),

/***/ "./output/abap_callstack_line.tabl.mjs":
/*!*********************************************!*\
  !*** ./output/abap_callstack_line.tabl.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_CALLSTACK_LINE\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"mainprogram\": new abap.types.Character(40, {}), \"include\": new abap.types.Character(40, {}), \"line\": new abap.types.Integer(), \"blockname\": new abap.types.String()}, \"ABAP_CALLSTACK_LINE\", \"ABAP_CALLSTACK_LINE\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_callstack_line.tabl.mjs?");

/***/ }),

/***/ "./output/abap_encod.dtel.mjs":
/*!************************************!*\
  !*** ./output/abap_encod.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_ENCOD\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"ABAP_ENCOD\",\"ddicName\":\"ABAP_ENCOD\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_encod.dtel.mjs?");

/***/ }),

/***/ "./output/abap_sortorder.tabl.mjs":
/*!****************************************!*\
  !*** ./output/abap_sortorder.tabl.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_SORTORDER\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"name\": new abap.types.String(), \"descending\": new abap.types.Character(1, {}), \"astext\": new abap.types.Character(1, {})}, \"ABAP_SORTORDER\", \"ABAP_SORTORDER\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_sortorder.tabl.mjs?");

/***/ }),

/***/ "./output/abap_sortorder_tab.ttyp.mjs":
/*!********************************************!*\
  !*** ./output/abap_sortorder_tab.ttyp.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ABAP_SORTORDER_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"descending\": new abap.types.Character(1, {}), \"astext\": new abap.types.Character(1, {})}, \"ABAP_SORTORDER\", \"ABAP_SORTORDER\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"ABAP_SORTORDER_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/abap_sortorder_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/balmnr.dtel.mjs":
/*!********************************!*\
  !*** ./output/balmnr.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BALMNR\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Numc({length: 6, qualifiedName: \"BALMNR\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/balmnr.dtel.mjs?");

/***/ }),

/***/ "./output/balognr.dtel.mjs":
/*!*********************************!*\
  !*** ./output/balognr.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BALOGNR\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"BALOGNR\",\"ddicName\":\"BALOGNR\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/balognr.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_fld.dtel.mjs":
/*!**********************************!*\
  !*** ./output/bapi_fld.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_FLD\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"BAPI_FLD\",\"ddicName\":\"BAPI_FLD\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_fld.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_line.dtel.mjs":
/*!***********************************!*\
  !*** ./output/bapi_line.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_LINE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"BAPI_LINE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_line.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_msg.dtel.mjs":
/*!**********************************!*\
  !*** ./output/bapi_msg.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_MSG\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(220, {\"qualifiedName\":\"BAPI_MSG\",\"ddicName\":\"BAPI_MSG\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_msg.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_mtype.dtel.mjs":
/*!************************************!*\
  !*** ./output/bapi_mtype.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_MTYPE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"BAPI_MTYPE\",\"ddicName\":\"BAPI_MTYPE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_mtype.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_param.dtel.mjs":
/*!************************************!*\
  !*** ./output/bapi_param.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_PARAM\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"BAPI_PARAM\",\"ddicName\":\"BAPI_PARAM\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_param.dtel.mjs?");

/***/ }),

/***/ "./output/bapi_rcode.dtel.mjs":
/*!************************************!*\
  !*** ./output/bapi_rcode.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPI_RCODE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(5, {\"qualifiedName\":\"BAPI_RCODE\",\"ddicName\":\"BAPI_RCODE\"}),\n  \"domain\": \"CHAR5\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapi_rcode.dtel.mjs?");

/***/ }),

/***/ "./output/bapilogsys.dtel.mjs":
/*!************************************!*\
  !*** ./output/bapilogsys.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPILOGSYS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(10, {\"qualifiedName\":\"BAPILOGSYS\",\"ddicName\":\"BAPILOGSYS\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapilogsys.dtel.mjs?");

/***/ }),

/***/ "./output/bapioption.dtel.mjs":
/*!************************************!*\
  !*** ./output/bapioption.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPIOPTION\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(2, {\"qualifiedName\":\"BAPIOPTION\",\"ddicName\":\"BAPIOPTION\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapioption.dtel.mjs?");

/***/ }),

/***/ "./output/bapiret2.tabl.mjs":
/*!**********************************!*\
  !*** ./output/bapiret2.tabl.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPIRET2\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"type\": new abap.types.Character(1, {\"qualifiedName\":\"BAPI_MTYPE\",\"ddicName\":\"BAPI_MTYPE\"}), \"id\": new abap.types.Character(20, {\"qualifiedName\":\"SYMSGID\",\"ddicName\":\"SYMSGID\"}), \"number\": new abap.types.Numc({length: 3, qualifiedName: \"SYMSGNO\"}), \"message\": new abap.types.Character(220, {\"qualifiedName\":\"BAPI_MSG\",\"ddicName\":\"BAPI_MSG\"}), \"log_no\": new abap.types.Character(20, {\"qualifiedName\":\"BALOGNR\",\"ddicName\":\"BALOGNR\"}), \"log_msg_no\": new abap.types.Numc({length: 6, qualifiedName: \"BALMNR\"}), \"message_v1\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v2\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v3\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v4\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"parameter\": new abap.types.Character(32, {\"qualifiedName\":\"BAPI_PARAM\",\"ddicName\":\"BAPI_PARAM\"}), \"row\": new abap.types.Integer({qualifiedName: \"BAPI_LINE\"}), \"field\": new abap.types.Character(30, {\"qualifiedName\":\"BAPI_FLD\",\"ddicName\":\"BAPI_FLD\"}), \"system\": new abap.types.Character(10, {\"qualifiedName\":\"BAPILOGSYS\",\"ddicName\":\"BAPILOGSYS\"})}, \"BAPIRET2\", \"BAPIRET2\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapiret2.tabl.mjs?");

/***/ }),

/***/ "./output/bapireturn.tabl.mjs":
/*!************************************!*\
  !*** ./output/bapireturn.tabl.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPIRETURN\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"type\": new abap.types.Character(1, {\"qualifiedName\":\"BAPI_MTYPE\",\"ddicName\":\"BAPI_MTYPE\"}), \"code\": new abap.types.Character(5, {\"qualifiedName\":\"BAPI_RCODE\",\"ddicName\":\"BAPI_RCODE\"}), \"message\": new abap.types.Character(220, {\"qualifiedName\":\"BAPI_MSG\",\"ddicName\":\"BAPI_MSG\"}), \"log_no\": new abap.types.Character(20, {\"qualifiedName\":\"BALOGNR\",\"ddicName\":\"BALOGNR\"}), \"log_msg_no\": new abap.types.Numc({length: 6, qualifiedName: \"BALMNR\"}), \"message_v1\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v2\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v3\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}), \"message_v4\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"})}, \"BAPIRETURN\", \"BAPIRETURN\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapireturn.tabl.mjs?");

/***/ }),

/***/ "./output/bapisign.dtel.mjs":
/*!**********************************!*\
  !*** ./output/bapisign.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BAPISIGN\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"BAPISIGN\",\"ddicName\":\"BAPISIGN\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/bapisign.dtel.mjs?");

/***/ }),

/***/ "./output/boolean.dtel.mjs":
/*!*********************************!*\
  !*** ./output/boolean.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"BOOLEAN\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/boolean.dtel.mjs?");

/***/ }),

/***/ "./output/char1.dtel.mjs":
/*!*******************************!*\
  !*** ./output/char1.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR1\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"CHAR1\",\"ddicName\":\"CHAR1\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char1.dtel.mjs?");

/***/ }),

/***/ "./output/char10.dtel.mjs":
/*!********************************!*\
  !*** ./output/char10.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR10\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(10, {\"qualifiedName\":\"CHAR10\",\"ddicName\":\"CHAR10\"}),\n  \"domain\": \"CHAR10\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char10.dtel.mjs?");

/***/ }),

/***/ "./output/char120.dtel.mjs":
/*!*********************************!*\
  !*** ./output/char120.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR120\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(120, {\"qualifiedName\":\"CHAR120\",\"ddicName\":\"CHAR120\"}),\n  \"domain\": \"CHAR120\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char120.dtel.mjs?");

/***/ }),

/***/ "./output/char15.dtel.mjs":
/*!********************************!*\
  !*** ./output/char15.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR15\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(15, {\"qualifiedName\":\"CHAR15\",\"ddicName\":\"CHAR15\"}),\n  \"domain\": \"CHAR15\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char15.dtel.mjs?");

/***/ }),

/***/ "./output/char20.dtel.mjs":
/*!********************************!*\
  !*** ./output/char20.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR20\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"CHAR20\",\"ddicName\":\"CHAR20\"}),\n  \"domain\": \"CHAR20\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char20.dtel.mjs?");

/***/ }),

/***/ "./output/char25.dtel.mjs":
/*!********************************!*\
  !*** ./output/char25.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR25\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(25, {\"qualifiedName\":\"CHAR25\",\"ddicName\":\"CHAR25\"}),\n  \"domain\": \"CHAR25\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char25.dtel.mjs?");

/***/ }),

/***/ "./output/char3.dtel.mjs":
/*!*******************************!*\
  !*** ./output/char3.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR3\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"CHAR3\",\"ddicName\":\"CHAR3\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char3.dtel.mjs?");

/***/ }),

/***/ "./output/char30.dtel.mjs":
/*!********************************!*\
  !*** ./output/char30.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR30\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"CHAR30\",\"ddicName\":\"CHAR30\"}),\n  \"domain\": \"CHAR30\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char30.dtel.mjs?");

/***/ }),

/***/ "./output/char32.dtel.mjs":
/*!********************************!*\
  !*** ./output/char32.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR32\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"CHAR32\",\"ddicName\":\"CHAR32\"}),\n  \"domain\": \"CHAR32\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char32.dtel.mjs?");

/***/ }),

/***/ "./output/char4.dtel.mjs":
/*!*******************************!*\
  !*** ./output/char4.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR4\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(4, {\"qualifiedName\":\"CHAR4\",\"ddicName\":\"CHAR4\"}),\n  \"domain\": \"CHAR4\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char4.dtel.mjs?");

/***/ }),

/***/ "./output/char6.dtel.mjs":
/*!*******************************!*\
  !*** ./output/char6.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR6\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(6, {\"qualifiedName\":\"CHAR6\",\"ddicName\":\"CHAR6\"}),\n  \"domain\": \"CHAR6\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char6.dtel.mjs?");

/***/ }),

/***/ "./output/char80.dtel.mjs":
/*!********************************!*\
  !*** ./output/char80.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"CHAR80\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(80, {\"qualifiedName\":\"CHAR80\",\"ddicName\":\"CHAR80\"}),\n  \"domain\": \"CHAR80\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/char80.dtel.mjs?");

/***/ }),

/***/ "./output/cl_abap_char_utilities.clas.mjs":
/*!************************************************!*\
  !*** ./output/cl_abap_char_utilities.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_char_utilities\": () => (/* binding */ cl_abap_char_utilities)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_char_utilities.clas.abap\nclass cl_abap_char_utilities {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"BYTE_ORDER_MARK_UTF8\": {\"type\": () => {return new abap.types.Hex({length: 3});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"BYTE_ORDER_MARK_BIG\": {\"type\": () => {return new abap.types.Hex({length: 2});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"BYTE_ORDER_MARK_LITTLE\": {\"type\": () => {return new abap.types.Hex({length: 2});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CR_LF\": {\"type\": () => {return new abap.types.Character(2, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CHARSIZE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"HORIZONTAL_TAB\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"VERTICAL_TAB\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"FORM_FEED\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"BACKSPACE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"MINCHAR\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"MAXCHAR\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"NEWLINE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.byte_order_mark_utf8 = cl_abap_char_utilities.byte_order_mark_utf8;\n    this.byte_order_mark_big = cl_abap_char_utilities.byte_order_mark_big;\n    this.byte_order_mark_little = cl_abap_char_utilities.byte_order_mark_little;\n    this.cr_lf = cl_abap_char_utilities.cr_lf;\n    this.charsize = cl_abap_char_utilities.charsize;\n    this.horizontal_tab = cl_abap_char_utilities.horizontal_tab;\n    this.vertical_tab = cl_abap_char_utilities.vertical_tab;\n    this.form_feed = cl_abap_char_utilities.form_feed;\n    this.backspace = cl_abap_char_utilities.backspace;\n    this.minchar = cl_abap_char_utilities.minchar;\n    this.maxchar = cl_abap_char_utilities.maxchar;\n    this.newline = cl_abap_char_utilities.newline;\n    return this;\n  }\n  async class_constructor() {\n    return cl_abap_char_utilities.class_constructor();\n  }\n  static async class_constructor() {\n    cl_abap_char_utilities.cr_lf.set(\"\\r\\n\");\n    cl_abap_char_utilities.horizontal_tab.set(\"\\t\");\n    cl_abap_char_utilities.vertical_tab.set(\"\\v\");\n    cl_abap_char_utilities.form_feed.set(\"\\f\");\n    cl_abap_char_utilities.backspace.set(\"\\b\");\n    cl_abap_char_utilities.newline.set(\"\\n\");\n    cl_abap_char_utilities.minchar.set(Buffer.from(\"0000\", \"hex\").toString());\n    cl_abap_char_utilities.maxchar.set(Buffer.from(\"FDFF\", \"hex\").toString());\n  }\n  async get_simple_spaces_for_cur_cp() {\n    return cl_abap_char_utilities.get_simple_spaces_for_cur_cp();\n  }\n  static async get_simple_spaces_for_cur_cp() {\n    let s_str = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.concatenate({source: [new abap.types.String().set(` `), cl_abap_char_utilities.horizontal_tab, cl_abap_char_utilities.vertical_tab, cl_abap_char_utilities.newline, cl_abap_char_utilities.cr_lf.getOffset({length: 1}), cl_abap_char_utilities.form_feed], target: s_str});\n    return s_str;\n  }\n}\nabap.Classes['CL_ABAP_CHAR_UTILITIES'] = cl_abap_char_utilities;\ncl_abap_char_utilities.byte_order_mark_utf8 = new abap.types.Hex({length: 3});\ncl_abap_char_utilities.byte_order_mark_utf8.set('EFBBBF');\ncl_abap_char_utilities.byte_order_mark_big = new abap.types.Hex({length: 2});\ncl_abap_char_utilities.byte_order_mark_big.set('FEFF');\ncl_abap_char_utilities.byte_order_mark_little = new abap.types.Hex({length: 2});\ncl_abap_char_utilities.byte_order_mark_little.set('FFFE');\ncl_abap_char_utilities.cr_lf = new abap.types.Character(2, {});\ncl_abap_char_utilities.cr_lf.set('__');\ncl_abap_char_utilities.charsize = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_char_utilities.charsize.set(2);\ncl_abap_char_utilities.horizontal_tab = new abap.types.Character(1, {});\ncl_abap_char_utilities.horizontal_tab.set('_');\ncl_abap_char_utilities.vertical_tab = new abap.types.Character(1, {});\ncl_abap_char_utilities.vertical_tab.set('_');\ncl_abap_char_utilities.form_feed = new abap.types.Character(1, {});\ncl_abap_char_utilities.form_feed.set('_');\ncl_abap_char_utilities.backspace = new abap.types.Character(1, {});\ncl_abap_char_utilities.backspace.set('_');\ncl_abap_char_utilities.minchar = new abap.types.Character(1, {});\ncl_abap_char_utilities.minchar.set('_');\ncl_abap_char_utilities.maxchar = new abap.types.Character(1, {});\ncl_abap_char_utilities.maxchar.set('_');\ncl_abap_char_utilities.newline = new abap.types.Character(1, {});\ncl_abap_char_utilities.newline.set('_');\nawait abap.Classes['CL_ABAP_CHAR_UTILITIES'].class_constructor();\n\n//# sourceMappingURL=cl_abap_char_utilities.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_char_utilities.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_classdescr.clas.mjs":
/*!********************************************!*\
  !*** ./output/cl_abap_classdescr.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_classdescr\": () => (/* binding */ cl_abap_classdescr)\n/* harmony export */ });\nconst {cl_abap_objectdescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_objectdescr.clas.mjs */ \"./output/cl_abap_objectdescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_classdescr.clas.abap\nclass cl_abap_classdescr extends cl_abap_objectdescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let p_object = new abap.types.Character(4);\n    if (INPUT && INPUT.p_object) {p_object = INPUT.p_object;}\n    await super.constructor_({p_object: p_object});\n    return this;\n  }\n  async get_class_name(INPUT) {\n    return cl_abap_classdescr.get_class_name(INPUT);\n  }\n  static async get_class_name(INPUT) {\n    let p_name = new abap.types.Character(200, {\"qualifiedName\":\"abap_abstypename\"});\n    let p_object = new abap.types.ABAPObject();\n    if (INPUT && INPUT.p_object) {p_object.set(INPUT.p_object);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_name;\n  }\n  async get_super_class_type() {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CLASSDESCR\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_descr_ref;\n  }\n}\nabap.Classes['CL_ABAP_CLASSDESCR'] = cl_abap_classdescr;\n\n//# sourceMappingURL=cl_abap_classdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_classdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_codepage.clas.mjs":
/*!******************************************!*\
  !*** ./output/cl_abap_codepage.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_codepage\": () => (/* binding */ cl_abap_codepage)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_codepage.clas.abap\nclass cl_abap_codepage {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async convert_to(INPUT) {\n    return cl_abap_codepage.convert_to(INPUT);\n  }\n  static async convert_to(INPUT) {\n    let output = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let codepage = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.codepage) {codepage.set(INPUT.codepage);}\n    let source = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.source) {source.set(INPUT.source);}\n    let conv = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_OUT_CE\"});\n    conv.set((await abap.Classes['CL_ABAP_CONV_OUT_CE'].create({encoding: new abap.types.Character(5).set('UTF-8')})));\n    await conv.get().convert({data: source, buffer: output});\n    return output;\n  }\n  async convert_from(INPUT) {\n    return cl_abap_codepage.convert_from(INPUT);\n  }\n  static async convert_from(INPUT) {\n    let output = new abap.types.String({qualifiedName: \"STRING\"});\n    let codepage = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.codepage) {codepage.set(INPUT.codepage);}\n    let source = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.source) {source.set(INPUT.source);}\n    let conv = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_IN_CE\"});\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    conv.set((await abap.Classes['CL_ABAP_CONV_IN_CE'].create({encoding: new abap.types.Character(5).set('UTF-8')})));\n    await conv.get().convert({input: source, data: output});\n    return output;\n  }\n  async sap_codepage(INPUT) {\n    return cl_abap_codepage.sap_codepage(INPUT);\n  }\n  static async sap_codepage(INPUT) {\n    let codepage = new abap.types.Character(20, {\"qualifiedName\":\"abap_encoding\"});\n    let encoding = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.encoding) {encoding.set(INPUT.encoding);}\n    abap.statements.assert(abap.compare.eq(encoding, new abap.types.Character(8).set('UTF-16LE')));\n    codepage.set(new abap.types.Character(4).set('4103'));\n    return codepage;\n  }\n}\nabap.Classes['CL_ABAP_CODEPAGE'] = cl_abap_codepage;\n\n//# sourceMappingURL=cl_abap_codepage.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_codepage.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_complexdescr.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cl_abap_complexdescr.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_complexdescr\": () => (/* binding */ cl_abap_complexdescr)\n/* harmony export */ });\nconst {cl_abap_datadescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_datadescr.clas.mjs */ \"./output/cl_abap_datadescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_complexdescr.clas.abap\nclass cl_abap_complexdescr extends cl_abap_datadescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CL_ABAP_COMPLEXDESCR'] = cl_abap_complexdescr;\n\n//# sourceMappingURL=cl_abap_complexdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_complexdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_conv_codepage.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cl_abap_conv_codepage.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_conv_codepage\": () => (/* binding */ cl_abap_conv_codepage)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_abap_conv_codepage_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_conv_codepage.clas.locals.mjs */ \"./output/cl_abap_conv_codepage.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_conv_codepage.clas.abap\nclass cl_abap_conv_codepage {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create_in() {\n    return cl_abap_conv_codepage.create_in();\n  }\n  static async create_in() {\n    let instance = new abap.types.ABAPObject({qualifiedName: \"IF_ABAP_CONV_IN\"});\n    instance.set(await (new abap.Classes['CLAS-CL_ABAP_CONV_CODEPAGE-LCL_IN']()).constructor_());\n    return instance;\n  }\n  async create_out() {\n    return cl_abap_conv_codepage.create_out();\n  }\n  static async create_out() {\n    let instance = new abap.types.ABAPObject({qualifiedName: \"IF_ABAP_CONV_OUT\"});\n    instance.set(await (new abap.Classes['CLAS-CL_ABAP_CONV_CODEPAGE-LCL_OUT']()).constructor_());\n    return instance;\n  }\n}\nabap.Classes['CL_ABAP_CONV_CODEPAGE'] = cl_abap_conv_codepage;\n\n//# sourceMappingURL=cl_abap_conv_codepage.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_conv_codepage.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_conv_in_ce.clas.mjs":
/*!********************************************!*\
  !*** ./output/cl_abap_conv_in_ce.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_conv_in_ce\": () => (/* binding */ cl_abap_conv_in_ce)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_conv_in_ce.clas.abap\nclass cl_abap_conv_in_ce {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_INPUT\": {\"type\": () => {return new abap.types.XString({qualifiedName: \"XSTRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_JS_ENCODING\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_IGNORE_CERR\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_input = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    this.mv_js_encoding = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_ignore_cerr = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    return this;\n  }\n  async create(INPUT) {\n    return cl_abap_conv_in_ce.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ret = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_IN_CE\"});\n    let encoding = new abap.types.Character(20, {\"qualifiedName\":\"abap_encoding\"});\n    if (INPUT && INPUT.encoding) {encoding.set(INPUT.encoding);}\n    if (INPUT === undefined || INPUT.encoding === undefined) {encoding = new abap.types.Character(5).set('UTF-8');}\n    let input = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.input) {input.set(INPUT.input);}\n    let replacement = new abap.types.Character(1, {\"qualifiedName\":\"CHAR1\",\"ddicName\":\"CHAR1\"});\n    if (INPUT && INPUT.replacement) {replacement.set(INPUT.replacement);}\n    if (INPUT === undefined || INPUT.replacement === undefined) {replacement = new abap.types.Character(1).set('#');}\n    let ignore_cerr = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_cerr) {ignore_cerr.set(INPUT.ignore_cerr);}\n    if (INPUT === undefined || INPUT.ignore_cerr === undefined) {ignore_cerr = abap.builtin.abap_false;}\n    let endian = new abap.types.Character(1, {\"qualifiedName\":\"CHAR1\",\"ddicName\":\"CHAR1\"});\n    if (INPUT && INPUT.endian) {endian.set(INPUT.endian);}\n    abap.statements.assert(abap.compare.eq(replacement, new abap.types.Character(1).set('#')));\n    abap.statements.assert(abap.compare.initial(endian));\n    ret.set(await (new abap.Classes['CL_ABAP_CONV_IN_CE']()).constructor_());\n    let unique18 = encoding;\n    if (abap.compare.eq(unique18, new abap.types.Character(5).set('UTF-8'))) {\n      ret.get().mv_js_encoding.set(new abap.types.Character(4).set('utf8'));\n    } else if (abap.compare.eq(unique18, new abap.types.Character(4).set('4103'))) {\n      ret.get().mv_js_encoding.set(new abap.types.Character(8).set('utf-16le'));\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(13).set('not supported')));\n    }\n    ret.get().mv_input.set(input);\n    ret.get().mv_ignore_cerr.set(ignore_cerr);\n    return ret;\n  }\n  async uccp(INPUT) {\n    return cl_abap_conv_in_ce.uccp(INPUT);\n  }\n  static async uccp(INPUT) {\n    let char_ = new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_conv_in_ce=>ty_char2\"});\n    let uccp = new abap.types.Character();\n    if (INPUT && INPUT.uccp) {uccp = INPUT.uccp;}\n    let int = new abap.types.Integer({qualifiedName: \"I\"});\n    let hex = new abap.types.Hex({length: 2});\n    hex.set(uccp);\n    int.set(hex);\n    try {\n      char_.set((await this.uccpi({value: int})));\n    } catch (e) {\n      if (e instanceof abap.Classes['CX_SY_CONVERSION_CODEPAGE']) {\n      } else {\n        throw e;\n      }\n    }\n    return char_;\n  }\n  async uccpi(INPUT) {\n    return cl_abap_conv_in_ce.uccpi(INPUT);\n  }\n  static async uccpi(INPUT) {\n    let ret = new abap.types.String({qualifiedName: \"STRING\"});\n    let value = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let lv_hex = new abap.types.Hex({length: 2});\n    let lo_in = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_IN_CE\"});\n    new abap.OffsetLength(lv_hex, {length: 1}).set(abap.operators.mod(value,new abap.types.Integer().set(255)));\n    new abap.OffsetLength(lv_hex, {offset: 1, length: 1}).set(abap.operators.div(value,new abap.types.Integer().set(255)));\n    lo_in.set((await this.create({encoding: new abap.types.Character(4).set('4103')})));\n    await lo_in.get().convert({input: lv_hex, data: ret});\n    return ret;\n  }\n  async convert(INPUT) {\n    let input = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.input) {input.set(INPUT.input);}\n    let n = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.n) {n.set(INPUT.n);}\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let lv_error = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (abap.compare.initial(input)) {\n      return;\n    }\n    abap.statements.assert(abap.compare.initial(this.mv_js_encoding) === false);\n    let buf = Buffer.from(input.get(), \"hex\");\n    const util= await __webpack_require__.e(/*! import() */ \"vendors-node_modules_util_util_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! util */ \"./node_modules/util/util.js\", 19));\n    const td = new util.TextDecoder(this.mv_js_encoding.get(), {fatal: this.mv_ignore_cerr.get() !== \"X\"});\n    try {\n        data.set(td.decode(buf));\n    } catch {\n      lv_error.set(abap.builtin.abap_true);\n    }\n    if (abap.compare.eq(lv_error, abap.builtin.abap_true)) {\n      throw await (new abap.Classes['CX_SY_CONVERSION_CODEPAGE']()).constructor_();\n    }\n  }\n  async read(INPUT) {\n    let n = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.n) {n.set(INPUT.n);}\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    await this.convert({input: this.mv_input, n: n, data: data});\n  }\n}\nabap.Classes['CL_ABAP_CONV_IN_CE'] = cl_abap_conv_in_ce;\ncl_abap_conv_in_ce.ty_char2 = new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_conv_in_ce=>ty_char2\"});\n\n//# sourceMappingURL=cl_abap_conv_in_ce.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_conv_in_ce.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_conv_out_ce.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_abap_conv_out_ce.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_conv_out_ce\": () => (/* binding */ cl_abap_conv_out_ce)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_conv_out_ce.clas.abap\nclass cl_abap_conv_out_ce {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_JS_ENCODING\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_BUFFER\": {\"type\": () => {return new abap.types.XString({qualifiedName: \"XSTRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_js_encoding = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_buffer = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    return this;\n  }\n  async create(INPUT) {\n    return cl_abap_conv_out_ce.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ret = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_OUT_CE\"});\n    let encoding = new abap.types.Character(20, {\"qualifiedName\":\"abap_encoding\"});\n    if (INPUT && INPUT.encoding) {encoding.set(INPUT.encoding);}\n    let ignore_cerr = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_cerr) {ignore_cerr.set(INPUT.ignore_cerr);}\n    if (INPUT === undefined || INPUT.ignore_cerr === undefined) {ignore_cerr = abap.builtin.abap_false;}\n    let endian = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.endian) {endian.set(INPUT.endian);}\n    let replacement = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.replacement) {replacement.set(INPUT.replacement);}\n    ret.set(await (new abap.Classes['CL_ABAP_CONV_OUT_CE']()).constructor_());\n    let unique19 = encoding;\n    if (abap.compare.eq(unique19, new abap.types.Character(5).set('UTF-8')) || abap.compare.eq(unique19, new abap.types.Character(1).set(''))) {\n      ret.get().mv_js_encoding.set(new abap.types.Character(4).set('utf8'));\n    } else if (abap.compare.eq(unique19, new abap.types.Character(4).set('4103'))) {\n      ret.get().mv_js_encoding.set(new abap.types.Character(7).set('utf16le'));\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(13).set('not supported')));\n    }\n    return ret;\n  }\n  async uccpi(INPUT) {\n    return cl_abap_conv_out_ce.uccpi(INPUT);\n  }\n  static async uccpi(INPUT) {\n    let ret = new abap.types.Integer({qualifiedName: \"I\"});\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let lo_out = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_OUT_CE\"});\n    let lv_hex = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    lo_out.set((await this.create({encoding: new abap.types.Character(4).set('4103')})));\n    await lo_out.get().convert({data: value, buffer: lv_hex});\n    abap.statements.assert(abap.compare.eq(abap.builtin.xstrlen({val: lv_hex}), new abap.types.Integer().set(2)));\n    ret.set(lv_hex.getOffset({length: 1}));\n    ret.set(abap.operators.add(ret,abap.operators.multiply(lv_hex.getOffset({offset: 1, length: 1}),new abap.types.Integer().set(255))));\n    return ret;\n  }\n  async write(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let res = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    await this.convert({data: data, buffer: res});\n    abap.statements.concatenate({source: [this.mv_buffer, res], target: this.mv_buffer});\n  }\n  async get_buffer() {\n    let buffer = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    buffer.set(this.mv_buffer);\n    return buffer;\n  }\n  async reset() {\n    abap.statements.clear(this.mv_buffer);\n  }\n  async convert(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let n = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.n) {n.set(INPUT.n);}\n    let buffer = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.buffer) {buffer = INPUT.buffer;}\n    let result = Buffer.from(data.get(), this.mv_js_encoding.get()).toString(\"hex\");\n    buffer.set(result.toUpperCase());\n  }\n}\nabap.Classes['CL_ABAP_CONV_OUT_CE'] = cl_abap_conv_out_ce;\n\n//# sourceMappingURL=cl_abap_conv_out_ce.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_conv_out_ce.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_datadescr.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_abap_datadescr.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_datadescr\": () => (/* binding */ cl_abap_datadescr)\n/* harmony export */ });\nconst {cl_abap_typedescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_typedescr.clas.mjs */ \"./output/cl_abap_typedescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_datadescr.clas.abap\nclass cl_abap_datadescr extends cl_abap_typedescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async get_data_type_kind(INPUT) {\n    return cl_abap_datadescr.get_data_type_kind(INPUT);\n  }\n  static async get_data_type_kind(INPUT) {\n    let p_type_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\n    let p_data = new abap.types.Character(4);\n    if (INPUT && INPUT.p_data) {p_data = INPUT.p_data;}\n    let descr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    descr.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: p_data})));\n    p_type_kind.set(descr.get().type_kind);\n    return p_type_kind;\n  }\n  async applies_to_data(INPUT) {\n    let p_flag = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let p_data = new abap.types.Character(4);\n    if (INPUT && INPUT.p_data) {p_data = INPUT.p_data;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_flag;\n  }\n}\nabap.Classes['CL_ABAP_DATADESCR'] = cl_abap_datadescr;\n\n//# sourceMappingURL=cl_abap_datadescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_datadescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_dyn_prg.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cl_abap_dyn_prg.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_dyn_prg\": () => (/* binding */ cl_abap_dyn_prg)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_dyn_prg.clas.abap\nclass cl_abap_dyn_prg {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async check_table_name_str(INPUT) {\n    return cl_abap_dyn_prg.check_table_name_str(INPUT);\n  }\n  static async check_table_name_str(INPUT) {\n    let val_str = new abap.types.String({qualifiedName: \"STRING\"});\n    let val = new abap.types.Character();\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    let packages = new abap.types.Character();\n    if (INPUT && INPUT.packages) {packages = INPUT.packages;}\n    val_str.set(val);\n    return val_str;\n  }\n  async check_whitelist_str(INPUT) {\n    return cl_abap_dyn_prg.check_whitelist_str(INPUT);\n  }\n  static async check_whitelist_str(INPUT) {\n    let val_str = new abap.types.String({qualifiedName: \"STRING\"});\n    let val = new abap.types.Character();\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    let whitelist = new abap.types.Character();\n    if (INPUT && INPUT.whitelist) {whitelist = INPUT.whitelist;}\n    val_str.set(val);\n    return val_str;\n  }\n}\nabap.Classes['CL_ABAP_DYN_PRG'] = cl_abap_dyn_prg;\n\n//# sourceMappingURL=cl_abap_dyn_prg.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_dyn_prg.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_elemdescr.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_abap_elemdescr.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_elemdescr\": () => (/* binding */ cl_abap_elemdescr)\n/* harmony export */ });\nconst {cl_abap_datadescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_datadescr.clas.mjs */ \"./output/cl_abap_datadescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_elemdescr.clas.abap\nclass cl_abap_elemdescr extends cl_abap_datadescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"OUTPUT_LENGTH\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"EDIT_MASK\": {\"type\": () => {return new abap.types.Character(7, {\"qualifiedName\":\"abap_editmask\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"HELP_ID\": {\"type\": () => {return new abap.types.Character(62, {\"qualifiedName\":\"abap_helpid\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.output_length = new abap.types.Integer({qualifiedName: \"I\"});\n    this.edit_mask = new abap.types.Character(7, {\"qualifiedName\":\"abap_editmask\"});\n    this.help_id = new abap.types.Character(62, {\"qualifiedName\":\"abap_helpid\"});\n    return this;\n  }\n  async get_p(INPUT) {\n    return cl_abap_elemdescr.get_p(INPUT);\n  }\n  static async get_p(INPUT) {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let p_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_length) {p_length.set(INPUT.p_length);}\n    let p_decimals = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_decimals) {p_decimals.set(INPUT.p_decimals);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async get_n(INPUT) {\n    return cl_abap_elemdescr.get_n(INPUT);\n  }\n  static async get_n(INPUT) {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let p_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_length) {p_length.set(INPUT.p_length);}\n    let foo = new abap.types.DataReference(new abap.types.Character(4));\n    abap.statements.createData(foo,{\"typeName\": \"N\",\"length\": p_length});\n    await abap.statements.cast(p_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data_ref({p_data_ref: foo})));\n    return p_result;\n  }\n  async get_x(INPUT) {\n    return cl_abap_elemdescr.get_x(INPUT);\n  }\n  static async get_x(INPUT) {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let p_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_length) {p_length.set(INPUT.p_length);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async get_xstring() {\n    return cl_abap_elemdescr.get_xstring();\n  }\n  static async get_xstring() {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async get_ddic_field(INPUT) {\n    let p_flddescr = new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\");\n    let p_langu = new abap.types.Character(1, {\"qualifiedName\":\"sy-langu\",\"conversionExit\":\"ISOLA\"});\n    if (INPUT && INPUT.p_langu) {p_langu.set(INPUT.p_langu);}\n    if (INPUT === undefined || INPUT.p_langu === undefined) {p_langu = abap.builtin.sy.get().langu;}\n    p_flddescr.get().tabname.set(this.absolute_name);\n    p_flddescr.get().inttype.set(this.type_kind);\n    p_flddescr.get().langu.set(abap.builtin.sy.get().langu);\n    p_flddescr.get().position.set(new abap.types.Integer().set(1));\n    p_flddescr.get().leng.set(this.length);\n    p_flddescr.get().decimals.set(this.decimals);\n    p_flddescr.get().domname.set(abap.DDIC[this.relative_name.get()]?.domain || \"\");\n    return p_flddescr;\n  }\n  async get_i() {\n    return cl_abap_elemdescr.get_i();\n  }\n  static async get_i() {\n    let r_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let foo = new abap.types.Integer({qualifiedName: \"I\"});\n    await abap.statements.cast(r_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return r_result;\n  }\n  async get_string() {\n    return cl_abap_elemdescr.get_string();\n  }\n  static async get_string() {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let foo = new abap.types.String({qualifiedName: \"STRING\"});\n    await abap.statements.cast(p_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return p_result;\n  }\n  async get_f() {\n    return cl_abap_elemdescr.get_f();\n  }\n  static async get_f() {\n    let r_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let foo = new abap.types.Float({qualifiedName: \"F\"});\n    await abap.statements.cast(r_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return r_result;\n  }\n  async get_d() {\n    return cl_abap_elemdescr.get_d();\n  }\n  static async get_d() {\n    let r_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let foo = new abap.types.Date({qualifiedName: \"D\"});\n    await abap.statements.cast(r_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return r_result;\n  }\n  async get_t() {\n    return cl_abap_elemdescr.get_t();\n  }\n  static async get_t() {\n    let r_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let foo = new abap.types.Time({qualifiedName: \"T\"});\n    await abap.statements.cast(r_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return r_result;\n  }\n  async get_c(INPUT) {\n    return cl_abap_elemdescr.get_c(INPUT);\n  }\n  static async get_c(INPUT) {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let p_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_length) {p_length.set(INPUT.p_length);}\n    let foo = new abap.types.DataReference(new abap.types.Character(4));\n    abap.statements.createData(foo,{\"typeName\": \"C\",\"length\": p_length});\n    await abap.statements.cast(p_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data_ref({p_data_ref: foo})));\n    return p_result;\n  }\n  async get_ddic_fixed_values() {\n    let p_fixed_values = abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddtext\"})}, \"cl_abap_elemdescr=>fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_abap_elemdescr=>fixvalues\");\n    let lv_dummy = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let ls_row = new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddtext\"})}, \"cl_abap_elemdescr=>fixvalue\");\n    abap.statements.split({source: this.absolute_name, at: new abap.types.Character(1).set('='), targets: [lv_dummy,lv_name]});\n    for (const f of abap.DDIC[lv_name.get()]?.fixedValues || []) {\n      abap.statements.clear(ls_row);\n        ls_row.get().low.set(f.low || \"\");\n        ls_row.get().high.set(f.high || \"\");\n        ls_row.get().option.set(f.option || \"\");\n        ls_row.get().ddlanguage.set(f.ddlanguage || \"\");\n        ls_row.get().ddtext.set(f.ddtext || \"\");\n      abap.statements.append({source: ls_row, target: p_fixed_values});\n    }\n    return p_fixed_values;\n  }\n}\nabap.Classes['CL_ABAP_ELEMDESCR'] = cl_abap_elemdescr;\ncl_abap_elemdescr.fixvalue = new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddtext\"})}, \"cl_abap_elemdescr=>fixvalue\");\ncl_abap_elemdescr.fixvalues = abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"cl_abap_elemdescr=>fixvalue-ddtext\"})}, \"cl_abap_elemdescr=>fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_abap_elemdescr=>fixvalues\");\n\n//# sourceMappingURL=cl_abap_elemdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_elemdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_enumdescr.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_abap_enumdescr.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_enumdescr\": () => (/* binding */ cl_abap_enumdescr)\n/* harmony export */ });\nconst {cl_abap_elemdescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_elemdescr.clas.mjs */ \"./output/cl_abap_elemdescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_enumdescr.clas.abap\nclass cl_abap_enumdescr extends cl_abap_elemdescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MEMBERS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"cl_abap_enumdescr=>member-name\"}), \"value\": new abap.types.String({qualifiedName: \"CL_ABAP_ENUMDESCR=>MEMBER-VALUE\"})}, \"cl_abap_enumdescr=>member\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"cl_abap_enumdescr=>member_table\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.members = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"cl_abap_enumdescr=>member-name\"}), \"value\": new abap.types.String({qualifiedName: \"CL_ABAP_ENUMDESCR=>MEMBER-VALUE\"})}, \"cl_abap_enumdescr=>member\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"cl_abap_enumdescr=>member_table\");\n    return this;\n  }\n}\nabap.Classes['CL_ABAP_ENUMDESCR'] = cl_abap_enumdescr;\ncl_abap_enumdescr.member = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"cl_abap_enumdescr=>member-name\"}), \"value\": new abap.types.String({qualifiedName: \"CL_ABAP_ENUMDESCR=>MEMBER-VALUE\"})}, \"cl_abap_enumdescr=>member\");\ncl_abap_enumdescr.member_table = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"cl_abap_enumdescr=>member-name\"}), \"value\": new abap.types.String({qualifiedName: \"CL_ABAP_ENUMDESCR=>MEMBER-VALUE\"})}, \"cl_abap_enumdescr=>member\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"cl_abap_enumdescr=>member_table\");\n\n//# sourceMappingURL=cl_abap_enumdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_enumdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_exceptional_values.clas.mjs":
/*!****************************************************!*\
  !*** ./output/cl_abap_exceptional_values.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_exceptional_values\": () => (/* binding */ cl_abap_exceptional_values)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_exceptional_values.clas.abap\nclass cl_abap_exceptional_values {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async get_max_value(INPUT) {\n    return cl_abap_exceptional_values.get_max_value(INPUT);\n  }\n  static async get_max_value(INPUT) {\n    let out = new abap.types.DataReference(new abap.types.Character(4));\n    let in_ = new abap.types.Character(4);\n    if (INPUT && INPUT.in_) {in_ = INPUT.in_;}\n    let lv_type = new abap.types.Character(1, {});\n    let lv_length = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_decimals = new abap.types.Integer({qualifiedName: \"I\"});\n    let fs_out_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    abap.statements.describe({field: in_, type: lv_type});\n    let unique3 = lv_type;\n    if (abap.compare.eq(unique3, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int)) {\n      out.assign(abap.Classes['CL_ABAP_MATH'].max_int4);\n    } else if (abap.compare.eq(unique3, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_packed)) {\n      abap.statements.describe({field: in_, length: lv_length, decimals: lv_decimals, mode: 'BYTE'});\n      abap.statements.createData(out,{\"typeName\": \"P\",\"length\": lv_length,\"decimals\": lv_decimals});\n      abap.statements.assign({target: fs_out_, source: (out).dereference()});\n      if (abap.compare.eq(lv_length, new abap.types.Integer().set(3)) && abap.compare.eq(lv_decimals, new abap.types.Integer().set(1))) {\n        fs_out_.set(new abap.types.Character(6).set('9999.9'));\n      } else if (abap.compare.eq(lv_length, new abap.types.Integer().set(4)) && abap.compare.eq(lv_decimals, new abap.types.Integer().set(1))) {\n        fs_out_.set(new abap.types.Character(8).set('999999.9'));\n      } else if (abap.compare.eq(lv_length, new abap.types.Integer().set(7)) && abap.compare.eq(lv_decimals, new abap.types.Integer().set(3))) {\n        fs_out_.set(new abap.types.Character(14).set('9999999999.999'));\n      } else {\n        abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n      }\n    } else {\n      console.dir(INPUT);\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n    return out;\n  }\n  async get_min_value(INPUT) {\n    return cl_abap_exceptional_values.get_min_value(INPUT);\n  }\n  static async get_min_value(INPUT) {\n    let out = new abap.types.DataReference(new abap.types.Character(4));\n    let in_ = new abap.types.Character(4);\n    if (INPUT && INPUT.in_) {in_ = INPUT.in_;}\n    let lv_type = new abap.types.Character(1, {});\n    let fs_out_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    abap.statements.describe({field: in_, type: lv_type});\n    let unique4 = lv_type;\n    if (abap.compare.eq(unique4, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int)) {\n      out.assign(abap.Classes['CL_ABAP_MATH'].min_int4);\n    } else if (abap.compare.eq(unique4, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_packed)) {\n      out.set((await this.get_max_value({in_: in_})));\n      abap.statements.assign({target: fs_out_, source: (out).dereference()});\n      fs_out_.set(abap.operators.multiply(fs_out_,new abap.types.Integer().set(-1)));\n    } else {\n      console.dir(INPUT);\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n    return out;\n  }\n}\nabap.Classes['CL_ABAP_EXCEPTIONAL_VALUES'] = cl_abap_exceptional_values;\n\n//# sourceMappingURL=cl_abap_exceptional_values.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_exceptional_values.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_format.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_abap_format.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_format\": () => (/* binding */ cl_abap_format)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_format.clas.abap\nclass cl_abap_format {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"E_HTML_ATTR\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"E_HTML_TEXT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"E_JSON_STRING\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"E_URL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.e_html_attr = cl_abap_format.e_html_attr;\n    this.e_html_text = cl_abap_format.e_html_text;\n    this.e_json_string = cl_abap_format.e_json_string;\n    this.e_url = cl_abap_format.e_url;\n    return this;\n  }\n}\nabap.Classes['CL_ABAP_FORMAT'] = cl_abap_format;\ncl_abap_format.e_html_attr = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_format.e_html_attr.set(5);\ncl_abap_format.e_html_text = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_format.e_html_text.set(4);\ncl_abap_format.e_json_string = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_format.e_json_string.set(24);\ncl_abap_format.e_url = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_format.e_url.set(12);\n\n//# sourceMappingURL=cl_abap_format.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_format.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_gzip.clas.mjs":
/*!**************************************!*\
  !*** ./output/cl_abap_gzip.clas.mjs ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_gzip\": () => (/* binding */ cl_abap_gzip)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_gzip.clas.abap\nclass cl_abap_gzip {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async decompress_binary_with_header(INPUT) {\n    return cl_abap_gzip.decompress_binary_with_header(INPUT);\n  }\n  static async decompress_binary_with_header(INPUT) {\n    let gzip_in = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.gzip_in) {gzip_in.set(INPUT.gzip_in);}\n    let raw_out = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.raw_out) {raw_out = INPUT.raw_out;}\n    const zlib = await __webpack_require__.e(/*! import() */ \"_7c68\").then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"?7c68\", 19));\n    const buf = Buffer.from(gzip_in.get(), \"hex\");\n    const decompress = zlib.gunzipSync(buf).toString(\"hex\").toUpperCase();\n    raw_out.set(decompress);\n  }\n  async decompress_text(INPUT) {\n    return cl_abap_gzip.decompress_text(INPUT);\n  }\n  static async decompress_text(INPUT) {\n    let gzip_in = new abap.types.Hex();\n    if (INPUT && INPUT.gzip_in) {gzip_in = INPUT.gzip_in;}\n    let gzip_in_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.gzip_in_len) {gzip_in_len.set(INPUT.gzip_in_len);}\n    if (INPUT === undefined || INPUT.gzip_in_len === undefined) {gzip_in_len = new abap.types.Integer().set(-1);}\n    let conversion = new abap.types.Character(20, {\"qualifiedName\":\"ABAP_ENCOD\",\"ddicName\":\"ABAP_ENCOD\"});\n    if (INPUT && INPUT.conversion) {conversion.set(INPUT.conversion);}\n    if (INPUT === undefined || INPUT.conversion === undefined) {conversion = new abap.types.Character(7).set('DEFAULT');}\n    let text_out = new abap.types.Character();\n    if (INPUT && INPUT.text_out) {text_out = INPUT.text_out;}\n    let text_out_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.text_out_len) {text_out_len = INPUT.text_out_len;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async compress_text(INPUT) {\n    return cl_abap_gzip.compress_text(INPUT);\n  }\n  static async compress_text(INPUT) {\n    let text_in = new abap.types.Character();\n    if (INPUT && INPUT.text_in) {text_in = INPUT.text_in;}\n    let text_in_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.text_in_len) {text_in_len.set(INPUT.text_in_len);}\n    if (INPUT === undefined || INPUT.text_in_len === undefined) {text_in_len = new abap.types.Integer().set(-1);}\n    let compress_level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.compress_level) {compress_level.set(INPUT.compress_level);}\n    if (INPUT === undefined || INPUT.compress_level === undefined) {compress_level = new abap.types.Integer().set(6);}\n    let conversion = new abap.types.Character(20, {\"qualifiedName\":\"ABAP_ENCOD\",\"ddicName\":\"ABAP_ENCOD\"});\n    if (INPUT && INPUT.conversion) {conversion.set(INPUT.conversion);}\n    if (INPUT === undefined || INPUT.conversion === undefined) {conversion = new abap.types.Character(7).set('DEFAULT');}\n    let gzip_out = new abap.types.Hex();\n    if (INPUT && INPUT.gzip_out) {gzip_out = INPUT.gzip_out;}\n    let gzip_out_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.gzip_out_len) {gzip_out_len = INPUT.gzip_out_len;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async decompress_binary(INPUT) {\n    return cl_abap_gzip.decompress_binary(INPUT);\n  }\n  static async decompress_binary(INPUT) {\n    let gzip_in = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.gzip_in) {gzip_in.set(INPUT.gzip_in);}\n    let raw_out = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.raw_out) {raw_out = INPUT.raw_out;}\n    let raw_out_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.raw_out_len) {raw_out_len = INPUT.raw_out_len;}\n    const zlib = await __webpack_require__.e(/*! import() */ \"_7c68\").then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"?7c68\", 19));\n    const buf = Buffer.from(gzip_in.get(), \"hex\");\n    const decompress = zlib.inflateRawSync(buf).toString(\"hex\").toUpperCase();\n    raw_out.set(decompress);\n    raw_out_len.set(abap.builtin.xstrlen({val: raw_out}));\n  }\n  async compress_binary(INPUT) {\n    return cl_abap_gzip.compress_binary(INPUT);\n  }\n  static async compress_binary(INPUT) {\n    let compress_level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.compress_level) {compress_level.set(INPUT.compress_level);}\n    let raw_in = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.raw_in) {raw_in.set(INPUT.raw_in);}\n    let gzip_out = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.gzip_out) {gzip_out = INPUT.gzip_out;}\n    let gzip_out_len = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.gzip_out_len) {gzip_out_len = INPUT.gzip_out_len;}\n    const zlib = await __webpack_require__.e(/*! import() */ \"_7c68\").then(__webpack_require__.t.bind(__webpack_require__, /*! zlib */ \"?7c68\", 19));\n    const buf = Buffer.from(raw_in.get(), \"hex\");\n    const gzi = zlib.deflateRawSync(buf).toString(\"hex\").toUpperCase();\n    gzip_out.set(gzi);\n    gzip_out_len.set(abap.builtin.xstrlen({val: gzip_out}));\n  }\n}\nabap.Classes['CL_ABAP_GZIP'] = cl_abap_gzip;\n\n//# sourceMappingURL=cl_abap_gzip.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_gzip.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_hmac.clas.mjs":
/*!**************************************!*\
  !*** ./output/cl_abap_hmac.clas.mjs ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_hmac\": () => (/* binding */ cl_abap_hmac)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_hmac.clas.abap\nclass cl_abap_hmac {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async calculate_hmac_for_raw(INPUT) {\n    return cl_abap_hmac.calculate_hmac_for_raw(INPUT);\n  }\n  static async calculate_hmac_for_raw(INPUT) {\n    let if_algorithm = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.if_algorithm) {if_algorithm.set(INPUT.if_algorithm);}\n    if (INPUT === undefined || INPUT.if_algorithm === undefined) {if_algorithm = new abap.types.Character(4).set('SHA1');}\n    let if_key = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.if_key) {if_key.set(INPUT.if_key);}\n    let if_data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.if_data) {if_data.set(INPUT.if_data);}\n    let ef_hmacstring = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.ef_hmacstring) {ef_hmacstring = INPUT.ef_hmacstring;}\n    let ef_hmacxstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.ef_hmacxstring) {ef_hmacxstring = INPUT.ef_hmacxstring;}\n    let lv_algorithm = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.clear(ef_hmacstring);\n    abap.statements.clear(ef_hmacxstring);\n    lv_algorithm.set(abap.builtin.to_lower({val: if_algorithm}));\n    abap.statements.assert(abap.compare.eq(lv_algorithm, new abap.types.Character(4).set('sha1')) || abap.compare.eq(lv_algorithm, new abap.types.Character(3).set('md5')) || abap.compare.eq(lv_algorithm, new abap.types.Character(6).set('sha256')));\n    const crypto = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_crypto-browserify_index_js\"), __webpack_require__.e(\"_d546-_8131-_3fc0-_cd53-_4068-_e7e4-_7bec-_0aec-_fbf1-_ed1b-_d17e\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"./node_modules/crypto-browserify/index.js\", 19));\n    if (abap.compare.initial(if_key)) {\n      var shasum = crypto.createHash(lv_algorithm.get());\n      shasum.update(if_data.get(), \"hex\");\n      ef_hmacstring.set(shasum.digest(\"hex\").toUpperCase());\n    } else {\n      let hmac = crypto.createHmac(lv_algorithm.get(), Buffer.from(if_key.get(), \"hex\")).update(if_data.get(), \"hex\").digest(\"hex\").toUpperCase();\n      ef_hmacstring.set(hmac);\n    }\n    ef_hmacxstring.set(ef_hmacstring);\n  }\n  async calculate_hmac_for_char(INPUT) {\n    return cl_abap_hmac.calculate_hmac_for_char(INPUT);\n  }\n  static async calculate_hmac_for_char(INPUT) {\n    let if_algorithm = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.if_algorithm) {if_algorithm.set(INPUT.if_algorithm);}\n    if (INPUT === undefined || INPUT.if_algorithm === undefined) {if_algorithm = new abap.types.Character(4).set('SHA1');}\n    let if_key = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.if_key) {if_key.set(INPUT.if_key);}\n    let if_data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.if_data) {if_data.set(INPUT.if_data);}\n    let ef_hmacstring = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.ef_hmacstring) {ef_hmacstring = INPUT.ef_hmacstring;}\n    let ef_hmacxstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.ef_hmacxstring) {ef_hmacxstring = INPUT.ef_hmacxstring;}\n    let ef_hmacb64string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.ef_hmacb64string) {ef_hmacb64string = INPUT.ef_hmacb64string;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_ABAP_HMAC'] = cl_abap_hmac;\n\n//# sourceMappingURL=cl_abap_hmac.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_hmac.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_intfdescr.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_abap_intfdescr.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_intfdescr\": () => (/* binding */ cl_abap_intfdescr)\n/* harmony export */ });\nconst {cl_abap_objectdescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_objectdescr.clas.mjs */ \"./output/cl_abap_objectdescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_intfdescr.clas.abap\nclass cl_abap_intfdescr extends cl_abap_objectdescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CL_ABAP_INTFDESCR'] = cl_abap_intfdescr;\n\n//# sourceMappingURL=cl_abap_intfdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_intfdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_matcher.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cl_abap_matcher.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_matcher\": () => (/* binding */ cl_abap_matcher)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_matcher.clas.abap\nclass cl_abap_matcher {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MT_MATCHES\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"MATCH_RESULT_TAB\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_INDEX\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_TEXT\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_PATTERN\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mt_matches = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"MATCH_RESULT_TAB\");\n    this.mv_index = new abap.types.Integer({qualifiedName: \"I\"});\n    this.mv_text = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_pattern = new abap.types.String({qualifiedName: \"STRING\"});\n    let pattern = new abap.types.Character();\n    if (INPUT && INPUT.pattern) {pattern = INPUT.pattern;}\n    let ignore_case = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_case) {ignore_case.set(INPUT.ignore_case);}\n    let text = new abap.types.Character();\n    if (INPUT && INPUT.text) {text = INPUT.text;}\n    if (abap.compare.eq(ignore_case, abap.builtin.abap_true)) {\n      abap.statements.find(text, {regex: pattern, first: false, ignoringCase: true, results: this.mt_matches});\n    } else {\n      abap.statements.find(text, {regex: pattern, first: false, results: this.mt_matches});\n    }\n    this.mv_pattern.set(pattern);\n    this.mv_text.set(text);\n    return this;\n  }\n  async match() {\n    let success = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    abap.statements.find(this.mv_text, {regex: new abap.types.String().set(`^${abap.templateFormatting(this.mv_pattern)}$`), first: false});\n    success.set(abap.builtin.boolc(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))));\n    return success;\n  }\n  async find_all() {\n    let rt_matches = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"MATCH_RESULT_TAB\");\n    rt_matches.set(this.mt_matches);\n    return rt_matches;\n  }\n  async find_next() {\n    let found = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    this.mv_index.set(abap.operators.add(this.mv_index,new abap.types.Integer().set(1)));\n    abap.statements.readTable(this.mt_matches,{index: this.mv_index});\n    found.set(abap.builtin.boolc(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))));\n    return found;\n  }\n  async get_submatch(INPUT) {\n    let match = new abap.types.String({qualifiedName: \"STRING\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.index) {index.set(INPUT.index);}\n    let ls_match = new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\");\n    let ls_submatch = new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\");\n    abap.statements.readTable(this.mt_matches,{index: this.mv_index,\n      into: ls_match});\n    abap.statements.readTable(ls_match.get().submatches,{index: index,\n      into: ls_submatch});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      match.set(this.mv_text.getOffset({offset: ls_submatch.get().offset, length: ls_submatch.get().length}));\n    }\n    return match;\n  }\n  async get_offset() {\n    let offset = new abap.types.Integer({qualifiedName: \"I\"});\n    let ls_match = new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\");\n    abap.statements.readTable(this.mt_matches,{index: this.mv_index,\n      into: ls_match});\n    offset.set(ls_match.get().offset);\n    return offset;\n  }\n  async get_length() {\n    let length = new abap.types.Integer({qualifiedName: \"I\"});\n    let ls_match = new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\");\n    abap.statements.readTable(this.mt_matches,{index: this.mv_index,\n      into: ls_match});\n    length.set(ls_match.get().length);\n    return length;\n  }\n}\nabap.Classes['CL_ABAP_MATCHER'] = cl_abap_matcher;\n\n//# sourceMappingURL=cl_abap_matcher.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_matcher.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_math.clas.mjs":
/*!**************************************!*\
  !*** ./output/cl_abap_math.clas.mjs ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_math\": () => (/* binding */ cl_abap_math)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_math.clas.abap\nclass cl_abap_math {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MIN_INT4\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"MAX_INT4\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_CEILING\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_UP\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_HALF_UP\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_HALF_EVEN\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_HALF_DOWN\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_DOWN\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROUND_FLOOR\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.min_int4 = cl_abap_math.min_int4;\n    this.max_int4 = cl_abap_math.max_int4;\n    this.round_ceiling = cl_abap_math.round_ceiling;\n    this.round_up = cl_abap_math.round_up;\n    this.round_half_up = cl_abap_math.round_half_up;\n    this.round_half_even = cl_abap_math.round_half_even;\n    this.round_half_down = cl_abap_math.round_half_down;\n    this.round_down = cl_abap_math.round_down;\n    this.round_floor = cl_abap_math.round_floor;\n    return this;\n  }\n}\nabap.Classes['CL_ABAP_MATH'] = cl_abap_math;\ncl_abap_math.min_int4 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.min_int4.set(-2147483648);\ncl_abap_math.max_int4 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.max_int4.set(2147483647);\ncl_abap_math.round_ceiling = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_ceiling.set(0);\ncl_abap_math.round_up = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_up.set(1);\ncl_abap_math.round_half_up = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_half_up.set(2);\ncl_abap_math.round_half_even = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_half_even.set(3);\ncl_abap_math.round_half_down = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_half_down.set(4);\ncl_abap_math.round_down = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_down.set(5);\ncl_abap_math.round_floor = new abap.types.Integer({qualifiedName: \"I\"});\ncl_abap_math.round_floor.set(6);\n\n//# sourceMappingURL=cl_abap_math.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_math.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_objectdescr.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_abap_objectdescr.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_objectdescr\": () => (/* binding */ cl_abap_objectdescr)\n/* harmony export */ });\nconst {cl_abap_typedescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_typedescr.clas.mjs */ \"./output/cl_abap_typedescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_objectdescr.clas.abap\nclass cl_abap_objectdescr extends cl_abap_typedescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"ATTRIBUTES\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_attrdescr_tab\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"METHODS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"parameters\": abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmdescr_tab\"), \"exceptions\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpdescr_tab\"), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"for_event\": new abap.types.Character(61, {\"qualifiedName\":\"abap_evntname\"}), \"of_class\": new abap.types.Character(30, {\"qualifiedName\":\"abap_classname\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_redefined\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_abstract\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_final\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"is_raising_excps\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_methdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_methdescr_tab\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"INTERFACES\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_intfdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_intfdescr_tab\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_OBJECT_NAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_OBJECT_TYPE\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_TYPES\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_objectdescr=>ty_types\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"CHANGING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"EXPORTING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"IMPORTING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"RECEIVING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"RETURNING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PRIVATE_\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PROTECTED\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PUBLIC_\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.attributes = abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_attrdescr_tab\");\n    this.methods = abap.types.TableFactory.construct(new abap.types.Structure({\"parameters\": abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_parmname\"}), \"parm_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"}), \"by_value\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_optional\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_parmdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_parmdescr_tab\"), \"exceptions\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_excpname\"}), \"is_resumable\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_excpdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_excpdescr_tab\"), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"for_event\": new abap.types.Character(61, {\"qualifiedName\":\"abap_evntname\"}), \"of_class\": new abap.types.Character(30, {\"qualifiedName\":\"abap_classname\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_redefined\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_abstract\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_final\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_methname\"}), \"is_raising_excps\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_methdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_methdescr_tab\");\n    this.interfaces = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_intfdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_intfdescr_tab\");\n    this.mv_object_name = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_object_type = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mt_types = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_objectdescr=>ty_types\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    this.changing = cl_abap_objectdescr.changing;\n    this.exporting = cl_abap_objectdescr.exporting;\n    this.importing = cl_abap_objectdescr.importing;\n    this.receiving = cl_abap_objectdescr.receiving;\n    this.returning = cl_abap_objectdescr.returning;\n    this.private_ = cl_abap_objectdescr.private_;\n    this.protected = cl_abap_objectdescr.protected;\n    this.public_ = cl_abap_objectdescr.public_;\n    let p_object = new abap.types.Character(4);\n    if (INPUT && INPUT.p_object) {p_object = INPUT.p_object;}\n    let lv_name = new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"});\n    let lv_char1 = new abap.types.Character(1, {});\n    let lv_any = new abap.types.String({qualifiedName: \"STRING\"});\n    let fs_fs_ = new abap.types.FieldSymbol(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\"));\n    let fs_type_ = new abap.types.FieldSymbol(new abap.types.Structure({\"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_objectdescr=>ty_types\"));\n    for (const a in p_object.ATTRIBUTES || []) {\n        lv_name.set(a)\n      fs_fs_.assign(this.attributes.appendInitial());\n      fs_type_.assign(this.mt_types.appendInitial());\n      fs_fs_.get().name.set(lv_name);\n      fs_type_.get().name.set(lv_name);\n        lv_char1.set(p_object.ATTRIBUTES[a].is_constant);\n      fs_fs_.get().is_constant.set(lv_char1);\n        lv_char1.set(p_object.ATTRIBUTES[a].visibility);\n      fs_fs_.get().visibility.set(lv_char1);\n        lv_any = p_object.ATTRIBUTES[a].type();\n      await abap.statements.cast(fs_type_.get().type, (await this.describe_by_data({p_data: lv_any})));\n    }\n    abap.statements.sort(this.attributes,{by: [{component: \"name\"}]});\n    await super.constructor_();\n    return this;\n  }\n  async get_method_parameter_type(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let p_method_name = new abap.types.Character(4);\n    if (INPUT && INPUT.p_method_name) {p_method_name = INPUT.p_method_name;}\n    let p_parameter_name = new abap.types.Character(4);\n    if (INPUT && INPUT.p_parameter_name) {p_parameter_name = INPUT.p_parameter_name;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_descr_ref;\n  }\n  async get_interface_type(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_INTFDESCR\"});\n    let p_name = new abap.types.Character(4);\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_descr_ref;\n  }\n  async get_attribute_type(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let p_name = new abap.types.Character(4);\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    let lv_name = new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"});\n    let ls_type = new abap.types.Structure({\"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_objectdescr=>ty_types\");\n    lv_name.set(abap.builtin.to_upper({val: p_name}));\n    abap.statements.readTable(this.mt_types,{into: ls_type,\n      withKey: (i) => {return abap.compare.eq(i.name, lv_name);},\n      withKeyValue: [{key: (i) => {return i.name}, value: lv_name}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": lv_name}});\n    if (abap.compare.ne(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      throw new abap.ClassicError({classic: \"attribute_not_found\"});\n    }\n    p_descr_ref.set(ls_type.get().type);\n    return p_descr_ref;\n  }\n}\nabap.Classes['CL_ABAP_OBJECTDESCR'] = cl_abap_objectdescr;\ncl_abap_objectdescr.changing = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\ncl_abap_objectdescr.changing.set('C');\ncl_abap_objectdescr.exporting = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\ncl_abap_objectdescr.exporting.set('E');\ncl_abap_objectdescr.importing = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\ncl_abap_objectdescr.importing.set('I');\ncl_abap_objectdescr.receiving = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\ncl_abap_objectdescr.receiving.set('R');\ncl_abap_objectdescr.returning = new abap.types.Character(1, {\"qualifiedName\":\"abap_parmkind\"});\ncl_abap_objectdescr.returning.set('R');\ncl_abap_objectdescr.private_ = new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});\ncl_abap_objectdescr.private_.set('I');\ncl_abap_objectdescr.protected = new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});\ncl_abap_objectdescr.protected.set('O');\ncl_abap_objectdescr.public_ = new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"});\ncl_abap_objectdescr.public_.set('U');\ncl_abap_objectdescr.ty_types = new abap.types.Structure({\"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_objectdescr=>ty_types\");\n\n//# sourceMappingURL=cl_abap_objectdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_objectdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_random.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_abap_random.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_random\": () => (/* binding */ cl_abap_random)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_random.clas.abap\nclass cl_abap_random {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create(INPUT) {\n    return cl_abap_random.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ro_random = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_RANDOM\"});\n    let seed = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.seed) {seed.set(INPUT.seed);}\n    ro_random.set(await (new abap.Classes['CL_ABAP_RANDOM']()).constructor_());\n    return ro_random;\n  }\n  async int() {\n    let rv_integer = new abap.types.Integer({qualifiedName: \"I\"});\n    rv_integer.set(Math.floor(Math.random() * 2147483647));\n    return rv_integer;\n  }\n  async seed() {\n    return cl_abap_random.seed();\n  }\n  static async seed() {\n    let rv_seed = new abap.types.Integer({qualifiedName: \"I\"});\n    rv_seed.set(Math.floor(Math.random() * 2147483647));\n    return rv_seed;\n  }\n  async intinrange(INPUT) {\n    let rv_integer = new abap.types.Integer({qualifiedName: \"I\"});\n    let low = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.low) {low.set(INPUT.low);}\n    let high = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.high) {high.set(INPUT.high);}\n    let lv_interval = new abap.types.Integer({qualifiedName: \"I\"});\n    abap.statements.assert(abap.compare.gt(high, low));\n    abap.statements.assert(abap.compare.ge(low, new abap.types.Integer().set(0)));\n    lv_interval.set(abap.operators.add(abap.operators.minus(high,low),new abap.types.Integer().set(1)));\n    rv_integer.set((abap.builtin.abs({val: (await this.int())})));\n    rv_integer.set(abap.operators.mod(rv_integer,lv_interval));\n    rv_integer.set(abap.operators.add(rv_integer,low));\n    return rv_integer;\n  }\n}\nabap.Classes['CL_ABAP_RANDOM'] = cl_abap_random;\n\n//# sourceMappingURL=cl_abap_random.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_random.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_random_int.clas.mjs":
/*!********************************************!*\
  !*** ./output/cl_abap_random_int.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_random_int\": () => (/* binding */ cl_abap_random_int)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_random_int.clas.abap\nclass cl_abap_random_int {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create(INPUT) {\n    return cl_abap_random_int.create(INPUT);\n  }\n  static async create(INPUT) {\n    let prng = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_RANDOM_INT\"});\n    let seed = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.seed) {seed.set(INPUT.seed);}\n    let min = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.min) {min.set(INPUT.min);}\n    if (INPUT === undefined || INPUT.min === undefined) {min = new abap.types.Integer().set(-2147483648);}\n    let max = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.max) {max.set(INPUT.max);}\n    if (INPUT === undefined || INPUT.max === undefined) {max = new abap.types.Integer().set(2147483647);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return prng;\n  }\n  async get_next() {\n    let value = new abap.types.Integer({qualifiedName: \"I\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n}\nabap.Classes['CL_ABAP_RANDOM_INT'] = cl_abap_random_int;\n\n//# sourceMappingURL=cl_abap_random_int.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_random_int.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_refdescr.clas.mjs":
/*!******************************************!*\
  !*** ./output/cl_abap_refdescr.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_refdescr\": () => (/* binding */ cl_abap_refdescr)\n/* harmony export */ });\nconst {cl_abap_datadescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_datadescr.clas.mjs */ \"./output/cl_abap_datadescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_refdescr.clas.abap\nclass cl_abap_refdescr extends cl_abap_datadescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"REFERENCED\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.referenced = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    return this;\n  }\n  async get_referenced_type() {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    type.set(this.referenced);\n    return type;\n  }\n  async get_ref_to_data() {\n    return cl_abap_refdescr.get_ref_to_data();\n  }\n  static async get_ref_to_data() {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_REFDESCR\"});\n    let foo = new abap.types.DataReference(new abap.types.Character(4));\n    await abap.statements.cast(p_result, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: foo})));\n    return p_result;\n  }\n}\nabap.Classes['CL_ABAP_REFDESCR'] = cl_abap_refdescr;\n\n//# sourceMappingURL=cl_abap_refdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_refdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_regex.clas.mjs":
/*!***************************************!*\
  !*** ./output/cl_abap_regex.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_regex\": () => (/* binding */ cl_abap_regex)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_regex.clas.abap\nclass cl_abap_regex {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_PATTERN\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_IGNORE_CASE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_pattern = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_ignore_case = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let pattern = new abap.types.Character();\n    if (INPUT && INPUT.pattern) {pattern = INPUT.pattern;}\n    let ignore_case = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_case) {ignore_case.set(INPUT.ignore_case);}\n    if (INPUT === undefined || INPUT.ignore_case === undefined) {ignore_case = abap.builtin.abap_false;}\n    this.mv_pattern.set(pattern);\n    this.mv_ignore_case.set(ignore_case);\n    return this;\n  }\n  async create_pcre(INPUT) {\n    return cl_abap_regex.create_pcre(INPUT);\n  }\n  static async create_pcre(INPUT) {\n    let regex = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_REGEX\"});\n    let pattern = new abap.types.Character();\n    if (INPUT && INPUT.pattern) {pattern = INPUT.pattern;}\n    let ignore_case = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_case) {ignore_case.set(INPUT.ignore_case);}\n    if (INPUT === undefined || INPUT.ignore_case === undefined) {ignore_case = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return regex;\n  }\n  async create_matcher(INPUT) {\n    let ro_matcher = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_MATCHER\"});\n    let text = new abap.types.Character();\n    if (INPUT && INPUT.text) {text = INPUT.text;}\n    ro_matcher.set(await (new abap.Classes['CL_ABAP_MATCHER']()).constructor_({pattern: this.mv_pattern, ignore_case: this.mv_ignore_case, text: text}));\n    return ro_matcher;\n  }\n}\nabap.Classes['CL_ABAP_REGEX'] = cl_abap_regex;\n\n//# sourceMappingURL=cl_abap_regex.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_regex.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_structdescr.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_abap_structdescr.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_structdescr\": () => (/* binding */ cl_abap_structdescr)\n/* harmony export */ });\nconst {cl_abap_complexdescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_complexdescr.clas.mjs */ \"./output/cl_abap_complexdescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_structdescr.clas.abap\nclass cl_abap_structdescr extends cl_abap_complexdescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"COMPONENTS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_compdescr_tab\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"STRUCT_KIND\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_structkind\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_REFS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.components = abap.types.TableFactory.construct(new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_compdescr_tab\");\n    this.struct_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_structkind\"});\n    this.mt_refs = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    return this;\n  }\n  async get_symbols() {\n    let p_result = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_symbol_tab\");\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async create(INPUT) {\n    return cl_abap_structdescr.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let p_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    if (INPUT && INPUT.p_components) {p_components.set(INPUT.p_components);}\n    let p_strict = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.p_strict) {p_strict.set(INPUT.p_strict);}\n    let ls_component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let ls_ref = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n    if (abap.compare.eq(abap.builtin.lines({val: p_components}), new abap.types.Integer().set(0))) {\n      throw await (new abap.Classes['CX_SY_STRUCT_ATTRIBUTES']()).constructor_();\n    }\n    for await (const unique81 of abap.statements.loop(p_components)) {\n      ls_component.set(unique81);\n      if (abap.compare.initial(ls_component.get().name)) {\n        throw await (new abap.Classes['CX_SY_STRUCT_COMP_NAME']()).constructor_();\n      } else if (abap.compare.initial(ls_component.get().type)) {\n        throw await (new abap.Classes['CX_SY_STRUCT_COMP_TYPE']()).constructor_();\n      } else if (abap.compare.gt(abap.builtin.strlen({val: ls_component.get().name}), new abap.types.Integer().set(30))) {\n        throw await (new abap.Classes['CX_SY_STRUCT_COMP_NAME']()).constructor_();\n      }\n    }\n    ref.set(await (new abap.Classes['CL_ABAP_STRUCTDESCR']()).constructor_());\n    for await (const unique82 of abap.statements.loop(p_components)) {\n      ls_component.set(unique82);\n      abap.statements.clear(ls_ref);\n      ls_ref.get().name.set(ls_component.get().name);\n      ls_ref.get().ref.set(ls_component.get().type);\n      abap.statements.append({source: ls_ref, target: ref.get().mt_refs});\n    }\n    await ref.get().update_components();\n    ref.get().type_kind.set(cl_abap_structdescr.typekind_struct2);\n    ref.get().kind.set(cl_abap_structdescr.kind_struct);\n    return ref;\n  }\n  async get_included_view(INPUT) {\n    let p_result = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_view_tab\");\n    let p_level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.p_level) {p_level.set(INPUT.p_level);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async get_ddic_field_list(INPUT) {\n    let rt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"DDFIELDS\");\n    let p_langu = new abap.types.Character(1, {\"qualifiedName\":\"sy-langu\",\"conversionExit\":\"ISOLA\"});\n    if (INPUT && INPUT.p_langu) {p_langu.set(INPUT.p_langu);}\n    if (INPUT === undefined || INPUT.p_langu === undefined) {p_langu = abap.builtin.sy.get().langu;}\n    let p_including_substructres = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.p_including_substructres) {p_including_substructres.set(INPUT.p_including_substructres);}\n    if (INPUT === undefined || INPUT.p_including_substructres === undefined) {p_including_substructres = abap.builtin.abap_false;}\n    let lt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let ls_return = new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\");\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_keyfield = new abap.types.String({qualifiedName: \"STRING\"});\n    let lo_elemdescr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let fs_component_ = new abap.types.FieldSymbol(new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\"));\n    lt_components.set((await this.get_components()));\n    abap.statements.assert(abap.compare.cp(this.absolute_name, new abap.types.Character(7).set('+TYPE=*')));\n    lv_name.set(this.absolute_name.getOffset({offset: 6}));\n    for await (const unique83 of abap.statements.loop(lt_components)) {\n      ls_component.set(unique83);\n      abap.statements.clear(ls_return);\n      ls_return.get().tabname.set(lv_name);\n      ls_return.get().fieldname.set(ls_component.get().name);\n      if (abap.compare.eq(ls_component.get().type.get().kind, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n        await abap.statements.cast(lo_elemdescr, ls_component.get().type);\n        ls_return.get().leng.set(lo_elemdescr.get().output_length);\n      }\n      abap.statements.append({source: ls_return, target: rt_components});\n    }\n    for (const keyfield of abap.DDIC[lv_name.get()]?.keyFields || [] ) {\n      lv_keyfield.set(keyfield);\n      abap.statements.readTable(rt_components,{assigning: fs_component_,\n        withKey: (i) => {return abap.compare.eq(i.fieldname, lv_keyfield);},\n        withKeyValue: [{key: (i) => {return i.fieldname}, value: lv_keyfield}],\n        usesTableLine: false,\n        withKeySimple: {\"fieldname\": lv_keyfield}});\n      abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n      fs_component_.get().keyflag.set(abap.builtin.abap_true);\n    }\n    return rt_components;\n  }\n  async is_ddic_type() {\n    let bool = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    bool.set(this.ddic);\n    return bool;\n  }\n  async construct_from_data(INPUT) {\n    return cl_abap_structdescr.construct_from_data(INPUT);\n  }\n  static async construct_from_data(INPUT) {\n    let descr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let ls_ref = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n    let lo_datadescr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let fs_fs_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    descr.set(await (new abap.Classes['CL_ABAP_STRUCTDESCR']()).constructor_());\n    for (const name of Object.keys(INPUT.data.value)) {\n        lv_name.set(name.toUpperCase());\n      abap.statements.assign({component: lv_name, target: fs_fs_, source: data});\n      await abap.statements.cast(lo_datadescr, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: fs_fs_})));\n      ls_ref.get().name.set(lv_name);\n      ls_ref.get().ref.set(lo_datadescr);\n      abap.statements.append({source: ls_ref, target: descr.get().mt_refs});\n    }\n    await descr.get().update_components();\n    return descr;\n  }\n  async update_components() {\n    let ls_component = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\");\n    let ls_ref = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n    abap.statements.clear(this.components);\n    for await (const unique84 of abap.statements.loop(this.mt_refs)) {\n      ls_ref.set(unique84);\n      abap.statements.clear(ls_component);\n      ls_component.get().name.set(ls_ref.get().name);\n      ls_component.get().type_kind.set(ls_ref.get().ref.get().type_kind);\n      abap.statements.append({source: ls_component, target: this.components});\n    }\n  }\n  async get_components() {\n    let rt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_component = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"})}, \"abap_compdescr\");\n    let ret = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let ls_ref = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n    for await (const unique85 of abap.statements.loop(this.components)) {\n      ls_component.set(unique85);\n      abap.statements.clear(ret);\n      ret.get().name.set(ls_component.get().name);\n      abap.statements.readTable(this.mt_refs,{into: ls_ref,\n        withKey: (i) => {return abap.compare.eq(i.name, ls_component.get().name);},\n        withKeyValue: [{key: (i) => {return i.name}, value: ls_component.get().name}],\n        usesTableLine: false,\n        withKeySimple: {\"name\": ls_component.get().name}});\n      if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n        ret.get().type.set(ls_ref.get().ref);\n      }\n      abap.statements.append({source: ret, target: rt_components});\n    }\n    return rt_components;\n  }\n  async get_component_type(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let p_name = new abap.types.Character(4);\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    let line = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n    abap.statements.readTable(this.mt_refs,{into: line,\n      withKey: (i) => {return abap.compare.eq(i.name, p_name);},\n      withKeyValue: [{key: (i) => {return i.name}, value: p_name}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": p_name}});\n    if (abap.compare.ne(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      throw new abap.ClassicError({classic: \"component_not_found\"});\n    } else {\n      p_descr_ref.set(line.get().ref);\n    }\n    return p_descr_ref;\n  }\n}\nabap.Classes['CL_ABAP_STRUCTDESCR'] = cl_abap_structdescr;\ncl_abap_structdescr.component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\ncl_abap_structdescr.component_table = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\ncl_abap_structdescr.included_view = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_view_tab\");\ncl_abap_structdescr.symbol_table = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"abap_simple_componentdescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"HASHED\",\"isUnique\":true,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_component_symbol_tab\");\ncl_abap_structdescr.ty_refs = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_STRUCTDESCR=>TY_REFS-NAME\"}), \"ref\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"})}, \"cl_abap_structdescr=>ty_refs\");\n\n//# sourceMappingURL=cl_abap_structdescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_structdescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_tabledescr.clas.mjs":
/*!********************************************!*\
  !*** ./output/cl_abap_tabledescr.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_tabledescr\": () => (/* binding */ cl_abap_tabledescr)\n/* harmony export */ });\nconst {cl_abap_datadescr} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_datadescr.clas.mjs */ \"./output/cl_abap_datadescr.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_tabledescr.clas.abap\nclass cl_abap_tabledescr extends cl_abap_datadescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"HAS_UNIQUE_KEY\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"KEY\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_keydescr_tab\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"KEY_DEFKIND\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_keydefkind\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"TABLE_KIND\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_tablekind\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MO_LINE_TYPE\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"TABLEKIND_ANY\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TABLEKIND_STD\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TABLEKIND_INDEX\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TABLEKIND_HASHED\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TABLEKIND_SORTED\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KEYDEFKIND_DEFAULT\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KEYDEFKIND_TABLELINE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KEYDEFKIND_USER\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KEYDEFKIND_EMPTY\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.has_unique_key = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    this.key = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_keydescr_tab\");\n    this.key_defkind = new abap.types.Character(1, {\"qualifiedName\":\"abap_keydefkind\"});\n    this.table_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_tablekind\"});\n    this.mo_line_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    this.tablekind_any = cl_abap_tabledescr.tablekind_any;\n    this.tablekind_std = cl_abap_tabledescr.tablekind_std;\n    this.tablekind_index = cl_abap_tabledescr.tablekind_index;\n    this.tablekind_hashed = cl_abap_tabledescr.tablekind_hashed;\n    this.tablekind_sorted = cl_abap_tabledescr.tablekind_sorted;\n    this.keydefkind_default = cl_abap_tabledescr.keydefkind_default;\n    this.keydefkind_tableline = cl_abap_tabledescr.keydefkind_tableline;\n    this.keydefkind_user = cl_abap_tabledescr.keydefkind_user;\n    this.keydefkind_empty = cl_abap_tabledescr.keydefkind_empty;\n    return this;\n  }\n  async create(INPUT) {\n    return cl_abap_tabledescr.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let p_line_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    if (INPUT && INPUT.p_line_type) {p_line_type.set(INPUT.p_line_type);}\n    let p_table_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_tablekind\"});\n    if (INPUT && INPUT.p_table_kind) {p_table_kind.set(INPUT.p_table_kind);}\n    if (INPUT === undefined || INPUT.p_table_kind === undefined) {p_table_kind = this.tablekind_std;}\n    let p_unique = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.p_unique) {p_unique.set(INPUT.p_unique);}\n    if (INPUT === undefined || INPUT.p_unique === undefined) {p_unique = abap.builtin.abap_false;}\n    let p_key = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\"), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[\"NAME\"]},\"secondary\":[]}, \"abap_keydescr_tab\");\n    if (INPUT && INPUT.p_key) {p_key.set(INPUT.p_key);}\n    let p_key_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_keydefkind\"});\n    if (INPUT && INPUT.p_key_kind) {p_key_kind.set(INPUT.p_key_kind);}\n    if (INPUT === undefined || INPUT.p_key_kind === undefined) {p_key_kind = this.keydefkind_default;}\n    ref.set(await (new abap.Classes['CL_ABAP_TABLEDESCR']()).constructor_());\n    ref.get().has_unique_key.set(p_unique);\n    ref.get().mo_line_type.set(p_line_type);\n    ref.get().key.set(p_key);\n    ref.get().key_defkind.set(p_key_kind);\n    ref.get().table_kind.set(p_table_kind);\n    ref.get().type_kind.set(cl_abap_tabledescr.typekind_table);\n    ref.get().kind.set(cl_abap_tabledescr.kind_table);\n    return ref;\n  }\n  async get_with_keys(INPUT) {\n    return cl_abap_tabledescr.get_with_keys(INPUT);\n  }\n  static async get_with_keys(INPUT) {\n    let p_result = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let p_line_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.p_line_type) {p_line_type.set(INPUT.p_line_type);}\n    let p_keys = abap.types.TableFactory.construct(new abap.types.Structure({\"components\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"})}, \"abap_table_keycompdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr-components\"), \"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"is_primary\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"access_kind\": new abap.types.String({qualifiedName: \"ACCESS_KIND\"}), \"is_unique\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"key_kind\": new abap.types.String({qualifiedName: \"KEY_KIND\"})}, \"abap_table_keydescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr_tab\");\n    if (INPUT && INPUT.p_keys) {p_keys.set(INPUT.p_keys);}\n    let ls_key = new abap.types.Structure({\"components\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"})}, \"abap_table_keycompdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_table_keydescr-components\"), \"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"is_primary\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"access_kind\": new abap.types.String({qualifiedName: \"ACCESS_KIND\"}), \"is_unique\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"key_kind\": new abap.types.String({qualifiedName: \"KEY_KIND\"})}, \"abap_table_keydescr\");\n    if (abap.compare.ne(abap.builtin.lines({val: p_keys}), new abap.types.Integer().set(1))) {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n    abap.statements.readTable(p_keys,{index: new abap.types.Integer().set(1),\n      into: ls_key});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n    p_result.set(await (new abap.Classes['CL_ABAP_TABLEDESCR']()).constructor_());\n    p_result.get().has_unique_key.set(ls_key.get().is_unique);\n    p_result.get().mo_line_type.set(p_line_type);\n    p_result.get().key_defkind.set(ls_key.get().key_kind);\n    p_result.get().table_kind.set(ls_key.get().access_kind);\n    p_result.get().type_kind.set(cl_abap_tabledescr.typekind_table);\n    p_result.get().kind.set(cl_abap_tabledescr.kind_table);\n    return p_result;\n  }\n  async get(INPUT) {\n    return cl_abap_tabledescr.get(INPUT);\n  }\n  static async get(INPUT) {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    if (INPUT && INPUT.type) {type.set(INPUT.type);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return val;\n  }\n  async construct_from_data(INPUT) {\n    return cl_abap_tabledescr.construct_from_data(INPUT);\n  }\n  static async construct_from_data(INPUT) {\n    let descr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let lv_dummy = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_flag = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let lv_str = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_type = new abap.types.String({qualifiedName: \"STRING\"});\n    let lo_struct = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let lt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let ls_key = new abap.types.Structure({\"name\": new abap.types.Character(255, {\"qualifiedName\":\"abap_keyname\"})}, \"abap_keydescr\");\n    descr.set(await (new abap.Classes['CL_ABAP_TABLEDESCR']()).constructor_());\n    lv_flag.set(data.getOptions()?.primaryKey?.isUnique === true ? \"X\" : \"\");\n    descr.get().has_unique_key.set(lv_flag);\n    lv_type.set(data.getOptions()?.primaryKey?.type || \"\");\n    let unique86 = lv_type;\n    if (abap.compare.eq(unique86, new abap.types.Character(8).set('STANDARD'))) {\n      descr.get().table_kind.set(cl_abap_tabledescr.tablekind_std);\n    } else if (abap.compare.eq(unique86, new abap.types.Character(6).set('SORTED'))) {\n      descr.get().table_kind.set(cl_abap_tabledescr.tablekind_sorted);\n    } else if (abap.compare.eq(unique86, new abap.types.Character(6).set('HASHED'))) {\n      descr.get().table_kind.set(cl_abap_tabledescr.tablekind_hashed);\n    } else {\n      descr.get().table_kind.set(cl_abap_tabledescr.tablekind_std);\n    }\n    lv_dummy = data.getRowType();\n    descr.get().mo_line_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: lv_dummy})));\n    lv_flag.set(data.getOptions()?.primaryKey?.keyFields.length > 0 ? \"X\" : \"\");\n    if (abap.compare.eq(lv_flag, abap.builtin.abap_true)) {\n      descr.get().key_defkind.set(cl_abap_tabledescr.keydefkind_user);\n      for (const k of data.getOptions()?.primaryKey?.keyFields) {\n        lv_str.set(k);\n        ls_key.get().name.set(lv_str);\n        abap.statements.append({source: ls_key, target: descr.get().key});\n      }\n      if (abap.compare.eq(abap.builtin.lines({val: descr.get().key}), new abap.types.Integer().set(1)) && abap.compare.eq(ls_key.get().name, new abap.types.Character(10).set('TABLE_LINE'))) {\n        descr.get().key_defkind.set(cl_abap_tabledescr.keydefkind_tableline);\n      }\n    } else {\n      descr.get().key_defkind.set(cl_abap_tabledescr.keydefkind_default);\n      if (abap.compare.eq(descr.get().mo_line_type.get().kind, cl_abap_tabledescr.kind_struct)) {\n        await abap.statements.cast(lo_struct, descr.get().mo_line_type);\n        lt_components.set((await lo_struct.get().get_components()));\n        for await (const unique87 of abap.statements.loop(lt_components)) {\n          ls_component.set(unique87);\n          ls_key.get().name.set(ls_component.get().name);\n          abap.statements.append({source: ls_key, target: descr.get().key});\n        }\n      }\n    }\n    return descr;\n  }\n  async get_table_line_type() {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    await abap.statements.cast(type, this.mo_line_type);\n    return type;\n  }\n}\nabap.Classes['CL_ABAP_TABLEDESCR'] = cl_abap_tabledescr;\ncl_abap_tabledescr.tablekind_any = new abap.types.Character(1, {});\ncl_abap_tabledescr.tablekind_any.set('A');\ncl_abap_tabledescr.tablekind_std = new abap.types.Character(1, {});\ncl_abap_tabledescr.tablekind_std.set('S');\ncl_abap_tabledescr.tablekind_index = new abap.types.Character(1, {});\ncl_abap_tabledescr.tablekind_index.set('I');\ncl_abap_tabledescr.tablekind_hashed = new abap.types.Character(1, {});\ncl_abap_tabledescr.tablekind_hashed.set('H');\ncl_abap_tabledescr.tablekind_sorted = new abap.types.Character(1, {});\ncl_abap_tabledescr.tablekind_sorted.set('O');\ncl_abap_tabledescr.keydefkind_default = new abap.types.Character(1, {});\ncl_abap_tabledescr.keydefkind_default.set('D');\ncl_abap_tabledescr.keydefkind_tableline = new abap.types.Character(1, {});\ncl_abap_tabledescr.keydefkind_tableline.set('L');\ncl_abap_tabledescr.keydefkind_user = new abap.types.Character(1, {});\ncl_abap_tabledescr.keydefkind_user.set('U');\ncl_abap_tabledescr.keydefkind_empty = new abap.types.Character(1, {});\ncl_abap_tabledescr.keydefkind_empty.set('E');\n\n//# sourceMappingURL=cl_abap_tabledescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_tabledescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_tstmp.clas.mjs":
/*!***************************************!*\
  !*** ./output/cl_abap_tstmp.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_tstmp\": () => (/* binding */ cl_abap_tstmp)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_tstmp.clas.abap\nclass cl_abap_tstmp {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async td_add(INPUT) {\n    return cl_abap_tstmp.td_add(INPUT);\n  }\n  static async td_add(INPUT) {\n    let date = new abap.types.Date({qualifiedName: \"D\"});\n    if (INPUT && INPUT.date) {date.set(INPUT.date);}\n    let time = new abap.types.Time({qualifiedName: \"T\"});\n    if (INPUT && INPUT.time) {time.set(INPUT.time);}\n    let secs = new abap.types.Packed({length: 8, decimals: 0});\n    if (INPUT && INPUT.secs) {secs = INPUT.secs;}\n    let res_date = new abap.types.Date({qualifiedName: \"D\"});\n    if (INPUT && INPUT.res_date) {res_date = INPUT.res_date;}\n    let res_time = new abap.types.Time({qualifiedName: \"T\"});\n    if (INPUT && INPUT.res_time) {res_time = INPUT.res_time;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async move(INPUT) {\n    return cl_abap_tstmp.move(INPUT);\n  }\n  static async move(INPUT) {\n    let tstmp_src = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp_src) {tstmp_src.set(INPUT.tstmp_src);}\n    let tstmp_tgt = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp_tgt) {tstmp_tgt = INPUT.tstmp_tgt;}\n    tstmp_tgt.set(tstmp_src);\n  }\n  async systemtstmp_syst2utc(INPUT) {\n    return cl_abap_tstmp.systemtstmp_syst2utc(INPUT);\n  }\n  static async systemtstmp_syst2utc(INPUT) {\n    let syst_date = new abap.types.Date({qualifiedName: \"D\"});\n    if (INPUT && INPUT.syst_date) {syst_date.set(INPUT.syst_date);}\n    let syst_time = new abap.types.Time({qualifiedName: \"T\"});\n    if (INPUT && INPUT.syst_time) {syst_time.set(INPUT.syst_time);}\n    let utc_tstmp = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.utc_tstmp) {utc_tstmp = INPUT.utc_tstmp;}\n    utc_tstmp.set(new abap.types.String().set(`${abap.templateFormatting(syst_date)}${abap.templateFormatting(syst_time)}`));\n  }\n  async subtract(INPUT) {\n    return cl_abap_tstmp.subtract(INPUT);\n  }\n  static async subtract(INPUT) {\n    let r_secs = new abap.types.Integer({qualifiedName: \"I\"});\n    let tstmp1 = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp1) {tstmp1.set(INPUT.tstmp1);}\n    let tstmp2 = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp2) {tstmp2.set(INPUT.tstmp2);}\n    let str = new abap.types.String({qualifiedName: \"STRING\"});\n    str.set(new abap.types.String().set(`${abap.templateFormatting(tstmp1,{\"timestamp\":\"iso\"})}`));\n    let t1 = Date.parse(str.get());\n    str.set(new abap.types.String().set(`${abap.templateFormatting(tstmp2,{\"timestamp\":\"iso\"})}`));\n    let t2 = Date.parse(str.get());\n    r_secs.set((t1 - t2)/1000);\n    return r_secs;\n  }\n  async add(INPUT) {\n    return cl_abap_tstmp.add(INPUT);\n  }\n  static async add(INPUT) {\n    let time = new abap.types.Packed({length: 15, decimals: 0, qualifiedName: \"TIMESTAMP\"});\n    let tstmp = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp) {tstmp.set(INPUT.tstmp);}\n    let secs = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.secs) {secs.set(INPUT.secs);}\n    let str = new abap.types.String({qualifiedName: \"STRING\"});\n    str.set(new abap.types.String().set(`${abap.templateFormatting(tstmp,{\"timestamp\":\"iso\"})}`));\n    let t1 = new Date(Date.parse(str.get() + \"Z\"));\n    t1.setSeconds( t1.getSeconds() + secs.get() );\n    time.set(t1.toISOString().slice(0, 19).replace(/-/g, \"\").replace(/:/g, \"\").replace(\"T\", \"\"));\n    return time;\n  }\n  async subtractsecs(INPUT) {\n    return cl_abap_tstmp.subtractsecs(INPUT);\n  }\n  static async subtractsecs(INPUT) {\n    let time = new abap.types.Packed({length: 15, decimals: 0, qualifiedName: \"TIMESTAMP\"});\n    let tstmp = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.tstmp) {tstmp.set(INPUT.tstmp);}\n    let secs = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.secs) {secs.set(INPUT.secs);}\n    let lv_secs = new abap.types.Integer({qualifiedName: \"I\"});\n    lv_secs.set(abap.operators.multiply(secs,new abap.types.Integer().set(-1)));\n    time.set((await this.add({tstmp: tstmp, secs: lv_secs})));\n    return time;\n  }\n}\nabap.Classes['CL_ABAP_TSTMP'] = cl_abap_tstmp;\n\n//# sourceMappingURL=cl_abap_tstmp.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_tstmp.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_typedescr.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_abap_typedescr.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_typedescr\": () => (/* binding */ cl_abap_typedescr)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_typedescr.clas.abap\nclass cl_abap_typedescr {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"GV_COUNTER\": {\"type\": () => {return new abap.types.Numc({length: 10});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"TYPE_KIND\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"KIND\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"DDIC\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"LENGTH\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"DECIMALS\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"ABSOLUTE_NAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"RELATIVE_NAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"TYPEKIND_ANY\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_CHAR\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_CLASS\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_CLIKE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_CSEQUENCE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DATA\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DATE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DECFLOAT\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DECFLOAT16\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DECFLOAT34\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_DREF\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_ENUM\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_FLOAT\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_HEX\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_INT\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_INT1\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_INT2\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_INT8\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_INTF\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_NUM\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_NUMERIC\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_OREF\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_PACKED\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_SIMPLE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_STRING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_STRUCT1\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_STRUCT2\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_TABLE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_TIME\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_UTCLONG\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_W\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TYPEKIND_XSTRING\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_ELEM\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_STRUCT\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_TABLE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_REF\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_CLASS\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"KIND_INTF\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.type_kind = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\n    this.kind = new abap.types.Character(1, {});\n    this.ddic = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    this.length = new abap.types.Integer({qualifiedName: \"I\"});\n    this.decimals = new abap.types.Integer({qualifiedName: \"I\"});\n    this.absolute_name = new abap.types.String({qualifiedName: \"STRING\"});\n    this.relative_name = new abap.types.String({qualifiedName: \"STRING\"});\n    this.typekind_any = cl_abap_typedescr.typekind_any;\n    this.typekind_char = cl_abap_typedescr.typekind_char;\n    this.typekind_class = cl_abap_typedescr.typekind_class;\n    this.typekind_clike = cl_abap_typedescr.typekind_clike;\n    this.typekind_csequence = cl_abap_typedescr.typekind_csequence;\n    this.typekind_data = cl_abap_typedescr.typekind_data;\n    this.typekind_date = cl_abap_typedescr.typekind_date;\n    this.typekind_decfloat = cl_abap_typedescr.typekind_decfloat;\n    this.typekind_decfloat16 = cl_abap_typedescr.typekind_decfloat16;\n    this.typekind_decfloat34 = cl_abap_typedescr.typekind_decfloat34;\n    this.typekind_dref = cl_abap_typedescr.typekind_dref;\n    this.typekind_enum = cl_abap_typedescr.typekind_enum;\n    this.typekind_float = cl_abap_typedescr.typekind_float;\n    this.typekind_hex = cl_abap_typedescr.typekind_hex;\n    this.typekind_int = cl_abap_typedescr.typekind_int;\n    this.typekind_int1 = cl_abap_typedescr.typekind_int1;\n    this.typekind_int2 = cl_abap_typedescr.typekind_int2;\n    this.typekind_int8 = cl_abap_typedescr.typekind_int8;\n    this.typekind_intf = cl_abap_typedescr.typekind_intf;\n    this.typekind_num = cl_abap_typedescr.typekind_num;\n    this.typekind_numeric = cl_abap_typedescr.typekind_numeric;\n    this.typekind_oref = cl_abap_typedescr.typekind_oref;\n    this.typekind_packed = cl_abap_typedescr.typekind_packed;\n    this.typekind_simple = cl_abap_typedescr.typekind_simple;\n    this.typekind_string = cl_abap_typedescr.typekind_string;\n    this.typekind_struct1 = cl_abap_typedescr.typekind_struct1;\n    this.typekind_struct2 = cl_abap_typedescr.typekind_struct2;\n    this.typekind_table = cl_abap_typedescr.typekind_table;\n    this.typekind_time = cl_abap_typedescr.typekind_time;\n    this.typekind_utclong = cl_abap_typedescr.typekind_utclong;\n    this.typekind_w = cl_abap_typedescr.typekind_w;\n    this.typekind_xstring = cl_abap_typedescr.typekind_xstring;\n    this.kind_elem = cl_abap_typedescr.kind_elem;\n    this.kind_struct = cl_abap_typedescr.kind_struct;\n    this.kind_table = cl_abap_typedescr.kind_table;\n    this.kind_ref = cl_abap_typedescr.kind_ref;\n    this.kind_class = cl_abap_typedescr.kind_class;\n    this.kind_intf = cl_abap_typedescr.kind_intf;\n    return this;\n  }\n  async get_ddic_object() {\n    let p_object = abap.types.TableFactory.construct(new abap.types.String(), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STRING_TABLE\");\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_object;\n  }\n  async is_instantiatable() {\n    let p_result = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return p_result;\n  }\n  async describe_by_dashes(INPUT) {\n    return cl_abap_typedescr.describe_by_dashes(INPUT);\n  }\n  static async describe_by_dashes(INPUT) {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let p_name = new abap.types.Character();\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    let lt_parts = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let lv_part = new abap.types.String({qualifiedName: \"STRING\"});\n    let lo_current = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let lo_struct = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    abap.statements.split({source: p_name, at: new abap.types.Character(1).set('-'), table: lt_parts});\n    for await (const unique88 of abap.statements.loop(lt_parts)) {\n      lv_part.set(unique88);\n      if (abap.compare.initial(lo_current)) {\n        lo_current.set((await this.describe_by_name({p_name: lv_part})));\n      } else if (abap.compare.eq(lo_current.get().kind, cl_abap_typedescr.kind_struct)) {\n        await abap.statements.cast(lo_struct, lo_current);\n        lo_current.set((await lo_struct.get().get_component_type({p_name: lv_part})));\n      }\n    }\n    type.set(lo_current);\n    return type;\n  }\n  async describe_by_name(INPUT) {\n    return cl_abap_typedescr.describe_by_name(INPUT);\n  }\n  static async describe_by_name(INPUT) {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let p_name = new abap.types.Character();\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    let ref = new abap.types.DataReference(new abap.types.Character(4));\n    let objectdescr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_OBJECTDESCR\"});\n    let oo_type = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_any = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.ca(p_name, new abap.types.Character(1).set('-'))) {\n      type.set((await this.describe_by_dashes({p_name: p_name})));\n      return type;\n    }\n    oo_type.set(abap.Classes[p_name.get().toUpperCase().trimEnd()]?.INTERNAL_TYPE || \"\");\n    lv_any = abap.Classes[p_name.get().toUpperCase().trimEnd()];\n    let unique89 = oo_type;\n    if (abap.compare.eq(unique89, new abap.types.Character(4).set('INTF'))) {\n      type.set(await (new abap.Classes['CL_ABAP_INTFDESCR']()).constructor_({p_object: lv_any}));\n      type.get().type_kind.set(cl_abap_typedescr.typekind_intf);\n      type.get().kind.set(cl_abap_typedescr.kind_intf);\n      type.get().relative_name.set(abap.builtin.to_upper({val: p_name}));\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(7).set('\\\\CLASS='),abap.builtin.to_upper({val: p_name})));\n      await abap.statements.cast(objectdescr, type);\n      objectdescr.get().mv_object_name.set(abap.builtin.to_upper({val: p_name}));\n      objectdescr.get().mv_object_type.set(oo_type);\n    } else if (abap.compare.eq(unique89, new abap.types.Character(4).set('CLAS'))) {\n      type.set(await (new abap.Classes['CL_ABAP_CLASSDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_class);\n      type.get().kind.set(cl_abap_typedescr.kind_class);\n      type.get().relative_name.set(abap.builtin.to_upper({val: p_name}));\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(7).set('\\\\CLASS='),abap.builtin.to_upper({val: p_name})));\n      await abap.statements.cast(objectdescr, type);\n      objectdescr.get().mv_object_name.set(abap.builtin.to_upper({val: p_name}));\n      objectdescr.get().mv_object_type.set(oo_type);\n    } else {\n      try {\n        abap.statements.createData(ref,{\"name\": p_name.get()});\n      } catch (e) {\n        if (e instanceof abap.Classes['CX_SY_CREATE_DATA_ERROR']) {\n          throw new abap.ClassicError({classic: \"type_not_found\"});\n        } else {\n          throw e;\n        }\n      }\n      type.set((await this.describe_by_data_ref({p_data_ref: ref})));\n    }\n    abap.builtin.sy.get().subrc.set(0);\n    return type;\n  }\n  async get_relative_name() {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    name.set(this.relative_name);\n    return name;\n  }\n  async get_ddic_header() {\n    let p_header = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Integer().set(2)));\n    return p_header;\n  }\n  async is_ddic_type() {\n    let p_abap_bool = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    p_abap_bool.set(this.ddic);\n    return p_abap_bool;\n  }\n  async describe_by_data_ref(INPUT) {\n    return cl_abap_typedescr.describe_by_data_ref(INPUT);\n  }\n  static async describe_by_data_ref(INPUT) {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let p_data_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.p_data_ref) {p_data_ref.set(INPUT.p_data_ref);}\n    let fs_ref_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    abap.statements.assign({target: fs_ref_, source: (p_data_ref).dereference()});\n    type.set((await this.describe_by_data({p_data: fs_ref_})));\n    return type;\n  }\n  async describe_by_object_ref(INPUT) {\n    return cl_abap_typedescr.describe_by_object_ref(INPUT);\n  }\n  static async describe_by_object_ref(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let p_object_ref = new abap.types.ABAPObject();\n    if (INPUT && INPUT.p_object_ref) {p_object_ref.set(INPUT.p_object_ref);}\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lo_cdescr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CLASSDESCR\"});\n    let lv_any = new abap.types.String({qualifiedName: \"STRING\"});\n    lv_any = p_object_ref.get().constructor;\n    lo_cdescr.set(await (new abap.Classes['CL_ABAP_CLASSDESCR']()).constructor_({p_object: lv_any}));\n    lo_cdescr.get().type_kind.set(cl_abap_typedescr.typekind_class);\n    lo_cdescr.get().kind.set(cl_abap_typedescr.kind_class);\n    lv_name.set(p_object_ref.get().constructor.name.toUpperCase());\n    lo_cdescr.get().relative_name.set(lv_name);\n    lo_cdescr.get().absolute_name.set(abap.operators.concat(new abap.types.Character(7).set('\\\\CLASS='),lv_name));\n    p_descr_ref.set(lo_cdescr);\n    return p_descr_ref;\n  }\n  async describe_by_data(INPUT) {\n    return cl_abap_typedescr.describe_by_data(INPUT);\n  }\n  static async describe_by_data(INPUT) {\n    let type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let p_data = new abap.types.Character(4);\n    if (INPUT && INPUT.p_data) {p_data = INPUT.p_data;}\n    let lo_elem = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let lo_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_REFDESCR\"});\n    let lv_any = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_convexit = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_ddicname = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_decimals = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_length = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_prefix = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_qualified = new abap.types.String({qualifiedName: \"STRING\"});\n    lv_name.set(p_data.constructor.name);\n    lv_length.set(p_data.getLength ? p_data.getLength() : 0);\n    lv_decimals.set(p_data.getDecimals ? p_data.getDecimals() : 0);\n    let unique90 = lv_name;\n    if (abap.compare.eq(unique90, new abap.types.Character(7).set('Integer'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_int);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(new abap.types.Integer().set(4));\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(new abap.types.Integer().set(11));\n      type.get().absolute_name.set(new abap.types.Character(1).set('I'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(4).set('Numc'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_num);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(abap.operators.multiply(lv_length,new abap.types.Integer().set(2)));\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(lv_length);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(3).set('Hex'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_hex);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(lv_length);\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(abap.operators.multiply(lv_length,new abap.types.Integer().set(2)));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(4).set('Date'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_date);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(new abap.types.Integer().set(16));\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(new abap.types.Integer().set(8));\n      type.get().absolute_name.set(new abap.types.Character(1).set('D'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(6).set('Packed'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_packed);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(lv_length);\n      type.get().decimals.set(lv_decimals);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(4).set('Time'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_time);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(new abap.types.Integer().set(12));\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(new abap.types.Integer().set(6));\n      type.get().absolute_name.set(new abap.types.Character(1).set('T'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(5).set('Float'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_float);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().absolute_name.set(new abap.types.Character(1).set('F'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(10).set('DecFloat34'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_decfloat34);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(9).set('Structure'))) {\n      await abap.statements.cast(type, (await abap.Classes['CL_ABAP_STRUCTDESCR'].construct_from_data({data: p_data})));\n      type.get().type_kind.set(cl_abap_typedescr.typekind_struct2);\n      type.get().kind.set(cl_abap_typedescr.kind_struct);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(5).set('Table')) || abap.compare.eq(unique90, new abap.types.Character(11).set('HashedTable'))) {\n      await abap.statements.cast(type, (await abap.Classes['CL_ABAP_TABLEDESCR'].construct_from_data({data: p_data})));\n      type.get().type_kind.set(cl_abap_typedescr.typekind_table);\n      type.get().kind.set(cl_abap_typedescr.kind_table);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(7).set('XString'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_xstring);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(new abap.types.Integer().set(8));\n      type.get().absolute_name.set(new abap.types.Character(7).set('XSTRING'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(6).set('String'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_string);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(new abap.types.Integer().set(8));\n      type.get().absolute_name.set(new abap.types.Character(6).set('STRING'));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(9).set('Character'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_char);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n      type.get().length.set(abap.operators.multiply(lv_length,new abap.types.Integer().set(2)));\n      await abap.statements.cast(lo_elem, type);\n      lo_elem.get().output_length.set(lv_length);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(11).set('FieldSymbol'))) {\n      lv_name = p_data.getPointer();\n      type.set((await this.describe_by_data({p_data: lv_name})));\n      return type;\n    } else if (abap.compare.eq(unique90, new abap.types.Character(10).set('ABAPObject'))) {\n      type.set(await (new abap.Classes['CL_ABAP_REFDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_oref);\n      type.get().kind.set(cl_abap_typedescr.kind_ref);\n      await abap.statements.cast(lo_ref, type);\n      lv_name.set(p_data.qualifiedName || \"\");\n      lo_ref.get().referenced.set((await this.describe_by_name({p_name: lv_name})));\n    } else if (abap.compare.eq(unique90, new abap.types.Character(7).set('UTCLong'))) {\n      type.set(await (new abap.Classes['CL_ABAP_ELEMDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_utclong);\n      type.get().kind.set(cl_abap_typedescr.kind_elem);\n    } else if (abap.compare.eq(unique90, new abap.types.Character(13).set('DataReference'))) {\n      type.set(await (new abap.Classes['CL_ABAP_REFDESCR']()).constructor_());\n      type.get().type_kind.set(cl_abap_typedescr.typekind_dref);\n      type.get().kind.set(cl_abap_typedescr.kind_ref);\n      await abap.statements.cast(lo_ref, type);\n      lv_any = p_data.type;\n      lo_ref.get().referenced.set((await this.describe_by_data({p_data: lv_any})));\n    } else {\n      abap.statements.write(lv_name,{newLine: true});\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(22).set('todo_cl_abap_typedescr')));\n    }\n    lv_ddicname.set(p_data.getDDICName ? p_data.getDDICName() || \"\" : \"\");\n    lv_convexit.set(p_data.getConversionExit ? p_data.getConversionExit() || \"\" : \"\");\n    lv_qualified.set(p_data.getQualifiedName ? p_data.getQualifiedName() || \"\" : \"\");\n    if (abap.compare.na(lv_qualified, new abap.types.Character(1).set('-'))) {\n      type.get().absolute_name.set(lv_qualified);\n    } else if (abap.compare.ne(lv_ddicname, new abap.types.Character(1).set(''))) {\n      type.get().absolute_name.set(lv_ddicname);\n    }\n    if(abap.DDIC[type.get().absolute_name.get().toUpperCase()]) { type.get().ddic.set(\"X\"); }\n    abap.statements.translate(type.get().absolute_name, \"UPPER\");\n    abap.statements.translate(type.get().relative_name, \"UPPER\");\n    if (abap.compare.eq(type.get().absolute_name, new abap.types.Character(9).set('ABAP_BOOL'))) {\n      type.get().relative_name.set(new abap.types.Character(9).set('ABAP_BOOL'));\n      type.get().absolute_name.set(new abap.types.Character(30).set('\\\\TYPE-POOL=ABAP\\\\TYPE=ABAP_BOOL'));\n    } else if (abap.compare.initial(type.get().absolute_name)) {\n      cl_abap_typedescr.gv_counter.set(abap.operators.add(cl_abap_typedescr.gv_counter,new abap.types.Integer().set(1)));\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(24).set('\\\\TYPE=%_T000000000000000'),cl_abap_typedescr.gv_counter));\n    } else if (abap.compare.cs(type.get().absolute_name, new abap.types.Character(2).set('=>'))) {\n      abap.statements.split({source: type.get().absolute_name, at: new abap.types.Character(2).set('=>'), targets: [lv_prefix,type.get().absolute_name]});\n      type.get().relative_name.set(type.get().absolute_name);\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(7).set('\\\\CLASS='),abap.operators.concat(lv_prefix,abap.operators.concat(new abap.types.Character(6).set('\\\\TYPE='),type.get().absolute_name))));\n    } else if (abap.compare.eq(type.get().type_kind, cl_abap_typedescr.typekind_oref)) {\n      type.get().relative_name.set(type.get().absolute_name);\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(7).set('\\\\CLASS='),type.get().absolute_name));\n    } else {\n      type.get().relative_name.set(type.get().absolute_name);\n      type.get().absolute_name.set(abap.operators.concat(new abap.types.Character(6).set('\\\\TYPE='),type.get().absolute_name));\n    }\n    if (abap.compare.ne(lv_convexit, new abap.types.Character(1).set(''))) {\n      lo_elem.get().edit_mask.set(abap.operators.concat(new abap.types.Character(2).set('=='),lv_convexit));\n    }\n    return type;\n  }\n}\nabap.Classes['CL_ABAP_TYPEDESCR'] = cl_abap_typedescr;\ncl_abap_typedescr.gv_counter = new abap.types.Numc({length: 10});\ncl_abap_typedescr.typekind_any = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_any.set('~');\ncl_abap_typedescr.typekind_char = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_char.set('C');\ncl_abap_typedescr.typekind_class = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_class.set('*');\ncl_abap_typedescr.typekind_clike = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_clike.set('&');\ncl_abap_typedescr.typekind_csequence = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_csequence.set('?');\ncl_abap_typedescr.typekind_data = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_data.set('#');\ncl_abap_typedescr.typekind_date = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_date.set('D');\ncl_abap_typedescr.typekind_decfloat = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_decfloat.set('/');\ncl_abap_typedescr.typekind_decfloat16 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_decfloat16.set('a');\ncl_abap_typedescr.typekind_decfloat34 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_decfloat34.set('e');\ncl_abap_typedescr.typekind_dref = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_dref.set('l');\ncl_abap_typedescr.typekind_enum = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_enum.set('k');\ncl_abap_typedescr.typekind_float = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_float.set('F');\ncl_abap_typedescr.typekind_hex = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_hex.set('X');\ncl_abap_typedescr.typekind_int = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_int.set('I');\ncl_abap_typedescr.typekind_int1 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_int1.set('b');\ncl_abap_typedescr.typekind_int2 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_int2.set('s');\ncl_abap_typedescr.typekind_int8 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_int8.set('8');\ncl_abap_typedescr.typekind_intf = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_intf.set('+');\ncl_abap_typedescr.typekind_num = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_num.set('N');\ncl_abap_typedescr.typekind_numeric = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_numeric.set('%');\ncl_abap_typedescr.typekind_oref = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_oref.set('r');\ncl_abap_typedescr.typekind_packed = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_packed.set('P');\ncl_abap_typedescr.typekind_simple = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_simple.set('$');\ncl_abap_typedescr.typekind_string = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_string.set('g');\ncl_abap_typedescr.typekind_struct1 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_struct1.set('u');\ncl_abap_typedescr.typekind_struct2 = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_struct2.set('v');\ncl_abap_typedescr.typekind_table = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_table.set('h');\ncl_abap_typedescr.typekind_time = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_time.set('T');\ncl_abap_typedescr.typekind_utclong = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_utclong.set('p');\ncl_abap_typedescr.typekind_w = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_w.set('w');\ncl_abap_typedescr.typekind_xstring = new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"});\ncl_abap_typedescr.typekind_xstring.set('y');\ncl_abap_typedescr.kind_elem = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_elem.set('E');\ncl_abap_typedescr.kind_struct = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_struct.set('S');\ncl_abap_typedescr.kind_table = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_table.set('T');\ncl_abap_typedescr.kind_ref = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_ref.set('R');\ncl_abap_typedescr.kind_class = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_class.set('C');\ncl_abap_typedescr.kind_intf = new abap.types.Character(1, {});\ncl_abap_typedescr.kind_intf.set('I');\n\n//# sourceMappingURL=cl_abap_typedescr.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_typedescr.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_unit_assert.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_abap_unit_assert.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_unit_assert\": () => (/* binding */ cl_abap_unit_assert)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_abap_unit_assert_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_unit_assert.clas.locals.mjs */ \"./output/cl_abap_unit_assert.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_unit_assert.clas.abap\nclass cl_abap_unit_assert {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async compare_tables(INPUT) {\n    return cl_abap_unit_assert.compare_tables(INPUT);\n  }\n  static async compare_tables(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let exp = new abap.types.Character(4);\n    if (INPUT && INPUT.exp) {exp = INPUT.exp;}\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    let type1 = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let type2 = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let lv_match = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let fs_tab1_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let fs_row1_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_tab2_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let fs_row2_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    if (abap.compare.ne(abap.builtin.lines({val: act}), abap.builtin.lines({val: exp}))) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected table to contain ${abap.templateFormatting(abap.builtin.lines({val: exp}))} rows, got ${abap.templateFormatting(abap.builtin.lines({val: act}))}`)});\n    }\n    abap.statements.assign({target: fs_tab1_, source: act});\n    abap.statements.assign({target: fs_tab2_, source: exp});\n    await abap.statements.cast(type1, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: act})));\n    await abap.statements.cast(type2, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: exp})));\n    if (abap.compare.eq(type1.get().table_kind, abap.Classes['CL_ABAP_TABLEDESCR'].tablekind_hashed) || abap.compare.eq(type2.get().table_kind, abap.Classes['CL_ABAP_TABLEDESCR'].tablekind_hashed)) {\n      for await (const unique104 of abap.statements.loop(fs_tab1_)) {\n        fs_row1_.assign(unique104);\n        lv_match.set(abap.builtin.abap_false);\n        for await (const unique105 of abap.statements.loop(fs_tab2_)) {\n          fs_row2_.assign(unique105);\n          try {\n            await this.assert_equals({act: fs_row1_, exp: fs_row2_});\n            lv_match.set(abap.builtin.abap_true);\n            break;\n          } catch (e) {\n            if (e instanceof abap.Classes['KERNEL_CX_ASSERT']) {\n            } else {\n              throw e;\n            }\n          }\n        }\n        if (abap.compare.eq(lv_match, abap.builtin.abap_false)) {\n          throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Hashed table contents differs`)});\n        }\n      }\n    } else {\n      const indexBackup1 = abap.builtin.sy.get().index.get();\n      const unique106 = abap.builtin.lines({val: act}).get();\n      for (let unique107 = 0; unique107 < unique106; unique107++) {\n        abap.builtin.sy.get().index.set(unique107 + 1);\n        index.set(abap.builtin.sy.get().index);\n        abap.statements.readTable(fs_tab1_,{index: index,\n          assigning: fs_row1_});\n        await this.assert_subrc();\n        abap.statements.readTable(fs_tab2_,{index: index,\n          assigning: fs_row2_});\n        await this.assert_subrc();\n        await this.assert_equals({act: fs_row1_, exp: fs_row2_});\n      }\n      abap.builtin.sy.get().index.set(indexBackup1);\n    }\n  }\n  async assert_text_matches(INPUT) {\n    return cl_abap_unit_assert.assert_text_matches(INPUT);\n  }\n  static async assert_text_matches(INPUT) {\n    let pattern = new abap.types.Character();\n    if (INPUT && INPUT.pattern) {pattern = INPUT.pattern;}\n    let text = new abap.types.Character();\n    if (INPUT && INPUT.text) {text = INPUT.text;}\n    let msg = new abap.types.Character();\n    if (INPUT && INPUT.msg) {msg = INPUT.msg;}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    let lv_match = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    lv_match.set(abap.builtin.boolc({val: abap.builtin.contains({val: text, regex: pattern})}));\n    if (abap.compare.eq(lv_match, abap.builtin.abap_false)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({expected: pattern, actual: text, msg: msg});\n    }\n  }\n  async abort(INPUT) {\n    return cl_abap_unit_assert.abort(INPUT);\n  }\n  static async abort(INPUT) {\n    let msg = new abap.types.Character();\n    if (INPUT && INPUT.msg) {msg = INPUT.msg;}\n    let detail = new abap.types.Character();\n    if (INPUT && INPUT.detail) {detail = INPUT.detail;}\n    let quit = new abap.types.Integer({qualifiedName: \"INT1\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    if (INPUT === undefined || INPUT.quit === undefined) {quit = new abap.types.Integer().set(2);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async assert_bound(INPUT) {\n    return cl_abap_unit_assert.assert_bound(INPUT);\n  }\n  static async assert_bound(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.initial(act)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected value to be bound`)});\n    }\n  }\n  async assert_not_bound(INPUT) {\n    return cl_abap_unit_assert.assert_not_bound(INPUT);\n  }\n  static async assert_not_bound(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.initial(act) === false) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected value to not be bound`)});\n    }\n  }\n  async assert_char_cp(INPUT) {\n    return cl_abap_unit_assert.assert_char_cp(INPUT);\n  }\n  static async assert_char_cp(INPUT) {\n    let act = new abap.types.Character();\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let exp = new abap.types.Character();\n    if (INPUT && INPUT.exp) {exp = INPUT.exp;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.np(act, exp)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({expected: exp, actual: act, msg: msg});\n    }\n  }\n  async assert_char_np(INPUT) {\n    return cl_abap_unit_assert.assert_char_np(INPUT);\n  }\n  static async assert_char_np(INPUT) {\n    let act = new abap.types.Character();\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let exp = new abap.types.Character();\n    if (INPUT && INPUT.exp) {exp = INPUT.exp;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.cp(act, exp)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Actual: ${abap.templateFormatting(act)}`)});\n    }\n  }\n  async fail(INPUT) {\n    return cl_abap_unit_assert.fail(INPUT);\n  }\n  static async fail(INPUT) {\n    let msg = new abap.types.Character();\n    if (INPUT && INPUT.msg) {msg = INPUT.msg;}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    let detail = new abap.types.Character();\n    if (INPUT && INPUT.detail) {detail = INPUT.detail;}\n    throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: msg});\n  }\n  async skip(INPUT) {\n    return cl_abap_unit_assert.skip(INPUT);\n  }\n  static async skip(INPUT) {\n    let msg = new abap.types.Character();\n    if (INPUT && INPUT.msg) {msg = INPUT.msg;}\n    let detail = new abap.types.Character();\n    if (INPUT && INPUT.detail) {detail = INPUT.detail;}\n    return;\n  }\n  async assert_differs(INPUT) {\n    return cl_abap_unit_assert.assert_differs(INPUT);\n  }\n  static async assert_differs(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let exp = new abap.types.Character(4);\n    if (INPUT && INPUT.exp) {exp = INPUT.exp;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    try {\n      await this.assert_equals({act: act, exp: exp});\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected different values`), act: act, exp: exp});\n    } catch (e) {\n      if (e instanceof abap.Classes['KERNEL_CX_ASSERT']) {\n        return;\n      } else {\n        throw e;\n      }\n    }\n  }\n  async assert_true(INPUT) {\n    return cl_abap_unit_assert.assert_true(INPUT);\n  }\n  static async assert_true(INPUT) {\n    let act = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.act) {act.set(INPUT.act);}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.ne(act, abap.builtin.abap_true)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected abap_true`)});\n    }\n  }\n  async assert_false(INPUT) {\n    return cl_abap_unit_assert.assert_false(INPUT);\n  }\n  static async assert_false(INPUT) {\n    let act = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.act) {act.set(INPUT.act);}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.ne(act, abap.builtin.abap_false)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected abap_false`)});\n    }\n  }\n  async assert_equals(INPUT) {\n    return cl_abap_unit_assert.assert_equals(INPUT);\n  }\n  static async assert_equals(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let exp = new abap.types.Character(4);\n    if (INPUT && INPUT.exp) {exp = INPUT.exp;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let tol = new abap.types.Float({qualifiedName: \"F\"});\n    if (INPUT && INPUT.tol) {tol.set(INPUT.tol);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    let type1 = new abap.types.Character(1, {});\n    let type2 = new abap.types.Character(1, {});\n    let diff = new abap.types.Float({qualifiedName: \"F\"});\n    let lv_exp = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_act = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_msg = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.describe({field: act, type: type1});\n    abap.statements.describe({field: exp, type: type2});\n    if (abap.compare.ca(type1, new abap.types.Character(10).set('CgyIFPDTXN'))) {\n      if (abap.compare.initial(type2) === false) {\n        if (abap.compare.na(type2, new abap.types.Character(10).set('CgyIFPDTXN'))) {\n          throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Unexpected types`)});\n        }\n      }\n    } else if (abap.compare.initial(type1) === false && abap.compare.initial(type2) === false) {\n      if (abap.compare.ne(type1, type2)) {\n        throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Unexpected types`)});\n      }\n    }\n    if (abap.compare.eq(type1, new abap.types.Character(1).set('h'))) {\n      await this.compare_tables({act: act, exp: exp});\n    } else if (INPUT && INPUT.tol) {\n      diff.set(abap.operators.minus(exp,act));\n      if (abap.compare.ge(diff, tol)) {\n        throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_();\n      }\n    } else if (abap.compare.ne(act, exp)) {\n      lv_act.set((await abap.Classes['CLAS-CL_ABAP_UNIT_ASSERT-LCL_DUMP'].to_string({iv_val: act})));\n      lv_exp.set((await abap.Classes['CLAS-CL_ABAP_UNIT_ASSERT-LCL_DUMP'].to_string({iv_val: exp})));\n      if (abap.compare.ne(msg, new abap.types.Character(1).set(''))) {\n        lv_msg.set(msg);\n      } else {\n        lv_msg.set(new abap.types.String().set(`Expected '${abap.templateFormatting(lv_exp)}', got '${abap.templateFormatting(lv_act)}'`));\n      }\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: lv_msg, actual: lv_act, expected: lv_exp});\n    }\n  }\n  async assert_not_initial(INPUT) {\n    return cl_abap_unit_assert.assert_not_initial(INPUT);\n  }\n  static async assert_not_initial(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    let lv_msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.initial(act)) {\n      lv_msg.set(msg);\n      if (abap.compare.initial(lv_msg)) {\n        lv_msg.set(new abap.types.String().set(`Expected non initial value`));\n      }\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: lv_msg});\n    }\n  }\n  async assert_initial(INPUT) {\n    return cl_abap_unit_assert.assert_initial(INPUT);\n  }\n  static async assert_initial(INPUT) {\n    let act = new abap.types.Character(4);\n    if (INPUT && INPUT.act) {act = INPUT.act;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    let lv_msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.initial(act) === false) {\n      lv_msg.set(msg);\n      if (abap.compare.initial(lv_msg)) {\n        lv_msg.set(new abap.types.String().set(`Expected initial value`));\n      }\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: lv_msg});\n    }\n  }\n  async assert_subrc(INPUT) {\n    return cl_abap_unit_assert.assert_subrc(INPUT);\n  }\n  static async assert_subrc(INPUT) {\n    let exp = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.exp) {exp.set(INPUT.exp);}\n    if (INPUT === undefined || INPUT.exp === undefined) {exp = new abap.types.Integer().set(0);}\n    let act = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.act) {act.set(INPUT.act);}\n    if (INPUT === undefined || INPUT.act === undefined) {act = abap.builtin.sy.get().subrc;}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.ne(act, exp)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_({msg: new abap.types.String().set(`Expected sy-subrc to equal ${abap.templateFormatting(exp)}, got ${abap.templateFormatting(act)}`)});\n    }\n  }\n  async assert_number_between(INPUT) {\n    return cl_abap_unit_assert.assert_number_between(INPUT);\n  }\n  static async assert_number_between(INPUT) {\n    let lower = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.lower) {lower.set(INPUT.lower);}\n    let upper = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.upper) {upper.set(INPUT.upper);}\n    let number = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.number) {number.set(INPUT.number);}\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let quit = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.quit) {quit.set(INPUT.quit);}\n    let level = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.level) {level.set(INPUT.level);}\n    if (abap.compare.lt(number, lower) || abap.compare.gt(number, upper)) {\n      throw await (new abap.Classes['KERNEL_CX_ASSERT']()).constructor_();\n    }\n  }\n}\nabap.Classes['CL_ABAP_UNIT_ASSERT'] = cl_abap_unit_assert;\n\n//# sourceMappingURL=cl_abap_unit_assert.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_unit_assert.clas.mjs?");

/***/ }),

/***/ "./output/cl_abap_zip.clas.mjs":
/*!*************************************!*\
  !*** ./output/cl_abap_zip.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_zip\": () => (/* binding */ cl_abap_zip)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_abap_zip_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_zip.clas.locals.mjs */ \"./output/cl_abap_zip.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_abap_zip.clas.abap\nclass cl_abap_zip {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"FILES\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-NAME\"}), \"size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-SIZE\"})}, \"cl_abap_zip=>t_file\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_abap_zip=>t_files\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_CONTENTS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.files = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-NAME\"}), \"size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-SIZE\"})}, \"cl_abap_zip=>t_file\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_abap_zip=>t_files\");\n    this.mt_contents = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    return this;\n  }\n  async crc32(INPUT) {\n    return cl_abap_zip.crc32(INPUT);\n  }\n  static async crc32(INPUT) {\n    let crc = new abap.types.Integer({qualifiedName: \"I\"});\n    let content = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.content) {content.set(INPUT.content);}\n    let lo_stream = new abap.types.ABAPObject({qualifiedName: \"LCL_STREAM\"});\n    lo_stream.set(await (new abap.Classes['CLAS-CL_ABAP_ZIP-LCL_STREAM']()).constructor_());\n    crc.set((await lo_stream.get().append_crc({iv_xstring: content})));\n    return crc;\n  }\n  async delete(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.index) {index.set(INPUT.index);}\n    if (INPUT === undefined || INPUT.index === undefined) {index = new abap.types.Integer().set(0);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async get(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let content = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.content) {content = INPUT.content;}\n    let ls_length = new abap.types.Integer({qualifiedName: \"I\"});\n    let ls_contents = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\");\n    abap.statements.readTable(this.mt_contents,{into: ls_contents,\n      withKey: (i) => {return abap.compare.eq(i.name, name);},\n      withKeyValue: [{key: (i) => {return i.name}, value: name}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": name}});\n    await abap.Classes['CL_ABAP_GZIP'].decompress_binary({gzip_in: ls_contents.get().compressed, raw_out: content, raw_out_len: ls_length});\n  }\n  async add(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let content = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.content) {content.set(INPUT.content);}\n    let ls_contents = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\");\n    ls_contents.get().name.set(name);\n    ls_contents.get().original_size.set(abap.builtin.xstrlen({val: content}));\n    ls_contents.get().content.set(content);\n    await abap.Classes['CL_ABAP_GZIP'].compress_binary({raw_in: content, gzip_out: ls_contents.get().compressed});\n    abap.statements.insertInternal({data: ls_contents, table: this.mt_contents});\n  }\n  async load(INPUT) {\n    let zip = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.zip) {zip.set(INPUT.zip);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async save() {\n    let val = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let lo_stream = new abap.types.ABAPObject({qualifiedName: \"LCL_STREAM\"});\n    let ls_contents = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\");\n    let lv_buffer = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let lo_conv = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CONV_OUT_CE\"});\n    lo_stream.set(await (new abap.Classes['CLAS-CL_ABAP_ZIP-LCL_STREAM']()).constructor_());\n    lo_conv.set((await abap.Classes['CL_ABAP_CONV_OUT_CE'].create()));\n    for await (const unique11 of abap.statements.loop(this.mt_contents)) {\n      ls_contents.set(unique11);\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(8).set('504B0304')});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('1400')});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('0000')});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('0800')});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('0000')});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('0000')});\n      await lo_stream.get().append_crc({iv_xstring: ls_contents.get().content});\n      await lo_stream.get().append_int4({iv_int: abap.builtin.xstrlen({val: ls_contents.get().compressed})});\n      await lo_stream.get().append_int4({iv_int: abap.builtin.xstrlen({val: ls_contents.get().content})});\n      await lo_stream.get().append_int2({iv_int: abap.builtin.strlen({val: ls_contents.get().name})});\n      await lo_stream.get().append({iv_xstr: new abap.types.Character(4).set('0000')});\n      await lo_conv.get().convert({data: ls_contents.get().name, buffer: lv_buffer});\n      await lo_stream.get().append({iv_xstr: lv_buffer});\n      await lo_stream.get().append({iv_xstr: ls_contents.get().compressed});\n    }\n    val.set((await lo_stream.get().get()));\n    return val;\n  }\n}\nabap.Classes['CL_ABAP_ZIP'] = cl_abap_zip;\ncl_abap_zip.t_file = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-NAME\"}), \"size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-SIZE\"})}, \"cl_abap_zip=>t_file\");\ncl_abap_zip.t_files = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-NAME\"}), \"size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>T_FILE-SIZE\"})}, \"cl_abap_zip=>t_file\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_abap_zip=>t_files\");\ncl_abap_zip.ty_contents = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-NAME\"}), \"original_size\": new abap.types.Integer({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-ORIGINAL_SIZE\"}), \"content\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-CONTENT\"}), \"compressed\": new abap.types.XString({qualifiedName: \"CL_ABAP_ZIP=>TY_CONTENTS-COMPRESSED\"})}, \"cl_abap_zip=>ty_contents\");\n\n//# sourceMappingURL=cl_abap_zip.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_abap_zip.clas.mjs?");

/***/ }),

/***/ "./output/cl_apc_tcp_client_manager.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cl_apc_tcp_client_manager.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_apc_tcp_client_manager\": () => (/* binding */ cl_apc_tcp_client_manager)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_apc_tcp_client_manager_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_apc_tcp_client_manager.clas.locals.mjs */ \"./output/cl_apc_tcp_client_manager.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_apc_tcp_client_manager.clas.abap\nclass cl_apc_tcp_client_manager {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create(INPUT) {\n    return cl_apc_tcp_client_manager.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ri_client = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_CLIENT\"});\n    let i_host = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_host) {i_host.set(INPUT.i_host);}\n    let i_port = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_port) {i_port.set(INPUT.i_port);}\n    let i_frame = new abap.types.Structure({\"frame_type\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-FRAME_TYPE\"}), \"fixed_length\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-FIXED_LENGTH\"}), \"terminator\": new abap.types.String({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-TERMINATOR\"}), \"length_field_length\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_LENGTH\"}), \"length_field_offset\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_OFFSET\"}), \"length_field_header\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_HEADER\"})}, \"if_abap_channel_types=>ty_apc_tcp_frame\");\n    if (INPUT && INPUT.i_frame) {i_frame.set(INPUT.i_frame);}\n    let i_event_handler = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_EVENT_HANDLER\"});\n    if (INPUT && INPUT.i_event_handler) {i_event_handler.set(INPUT.i_event_handler);}\n    ri_client.set(await (new abap.Classes['CLAS-CL_APC_TCP_CLIENT_MANAGER-LCL_CLIENT']()).constructor_({iv_host: i_host, iv_port: i_port, io_handler: i_event_handler}));\n    return ri_client;\n  }\n}\nabap.Classes['CL_APC_TCP_CLIENT_MANAGER'] = cl_apc_tcp_client_manager;\n\n//# sourceMappingURL=cl_apc_tcp_client_manager.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_apc_tcp_client_manager.clas.mjs?");

/***/ }),

/***/ "./output/cl_apc_wsp_ext_stateless_base.clas.mjs":
/*!*******************************************************!*\
  !*** ./output/cl_apc_wsp_ext_stateless_base.clas.mjs ***!
  \*******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_apc_wsp_ext_stateless_base\": () => (/* binding */ cl_apc_wsp_ext_stateless_base)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_apc_wsp_ext_stateless_base.clas.abap\nclass cl_apc_wsp_ext_stateless_base {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_APC_WSP_EXTENSION\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async if_apc_wsp_extension$on_start(INPUT) {\n    let i_context = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_SERVER_CONTEXT\"});\n    if (INPUT && INPUT.i_context) {i_context.set(INPUT.i_context);}\n    let i_message_manager = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE_MANAGER\"});\n    if (INPUT && INPUT.i_message_manager) {i_message_manager.set(INPUT.i_message_manager);}\n    return;\n  }\n  async if_apc_wsp_extension$on_message(INPUT) {\n    let i_message = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE\"});\n    if (INPUT && INPUT.i_message) {i_message.set(INPUT.i_message);}\n    let i_message_manager = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE_MANAGER\"});\n    if (INPUT && INPUT.i_message_manager) {i_message_manager.set(INPUT.i_message_manager);}\n    let i_context = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_SERVER_CONTEXT\"});\n    if (INPUT && INPUT.i_context) {i_context.set(INPUT.i_context);}\n    return;\n  }\n}\nabap.Classes['CL_APC_WSP_EXT_STATELESS_BASE'] = cl_apc_wsp_ext_stateless_base;\n\n//# sourceMappingURL=cl_apc_wsp_ext_stateless_base.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_apc_wsp_ext_stateless_base.clas.mjs?");

/***/ }),

/***/ "./output/cl_bcs.clas.mjs":
/*!********************************!*\
  !*** ./output/cl_bcs.clas.mjs ***!
  \********************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_bcs\": () => (/* binding */ cl_bcs)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_bcs.clas.abap\nclass cl_bcs {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async set_document(INPUT) {\n    let i_document = new abap.types.ABAPObject({qualifiedName: \"IF_DOCUMENT_BCS\"});\n    if (INPUT && INPUT.i_document) {i_document.set(INPUT.i_document);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_status_attributes(INPUT) {\n    let i_requested_status = new abap.types.Character(4);\n    if (INPUT && INPUT.i_requested_status) {i_requested_status = INPUT.i_requested_status;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_send_immediately(INPUT) {\n    let i_send_immediately = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_send_immediately) {i_send_immediately.set(INPUT.i_send_immediately);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_message_subject(INPUT) {\n    let ip_subject = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.ip_subject) {ip_subject.set(INPUT.ip_subject);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_sender(INPUT) {\n    let i_sender = new abap.types.ABAPObject({qualifiedName: \"IF_SENDER_BCS\"});\n    if (INPUT && INPUT.i_sender) {i_sender.set(INPUT.i_sender);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async send(INPUT) {\n    let result = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let i_with_error_screen = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_with_error_screen) {i_with_error_screen.set(INPUT.i_with_error_screen);}\n    if (INPUT === undefined || INPUT.i_with_error_screen === undefined) {i_with_error_screen = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return result;\n  }\n  async create_persistent() {\n    return cl_bcs.create_persistent();\n  }\n  static async create_persistent() {\n    let result = new abap.types.ABAPObject({qualifiedName: \"CL_BCS\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return result;\n  }\n  async add_recipient(INPUT) {\n    let i_recipient = new abap.types.ABAPObject({qualifiedName: \"IF_RECIPIENT_BCS\"});\n    if (INPUT && INPUT.i_recipient) {i_recipient.set(INPUT.i_recipient);}\n    let i_express = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_express) {i_express.set(INPUT.i_express);}\n    let i_copy = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_copy) {i_copy.set(INPUT.i_copy);}\n    let i_blind_copy = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_blind_copy) {i_blind_copy.set(INPUT.i_blind_copy);}\n    let i_no_forward = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_no_forward) {i_no_forward.set(INPUT.i_no_forward);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_BCS'] = cl_bcs;\n\n//# sourceMappingURL=cl_bcs.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_bcs.clas.mjs?");

/***/ }),

/***/ "./output/cl_bcs_convert.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_bcs_convert.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_bcs_convert\": () => (/* binding */ cl_bcs_convert)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_bcs_convert.clas.abap\nclass cl_bcs_convert {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async string_to_soli(INPUT) {\n    return cl_bcs_convert.string_to_soli(INPUT);\n  }\n  static async string_to_soli(INPUT) {\n    let et_soli = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Character(255, {\"qualifiedName\":\"SO_TEXT255\",\"ddicName\":\"SO_TEXT255\"})}, \"SOLI\", \"SOLI\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SOLI_TAB\");\n    let iv_string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_string) {iv_string.set(INPUT.iv_string);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return et_soli;\n  }\n  async xstring_to_solix(INPUT) {\n    return cl_bcs_convert.xstring_to_solix(INPUT);\n  }\n  static async xstring_to_solix(INPUT) {\n    let et_solix = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"SOLIX\", \"SOLIX\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SOLIX_TAB\");\n    let iv_xstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.iv_xstring) {iv_xstring.set(INPUT.iv_xstring);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return et_solix;\n  }\n}\nabap.Classes['CL_BCS_CONVERT'] = cl_bcs_convert;\n\n//# sourceMappingURL=cl_bcs_convert.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_bcs_convert.clas.mjs?");

/***/ }),

/***/ "./output/cl_cam_address_bcs.clas.mjs":
/*!********************************************!*\
  !*** ./output/cl_cam_address_bcs.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_cam_address_bcs\": () => (/* binding */ cl_cam_address_bcs)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_cam_address_bcs.clas.abap\nclass cl_cam_address_bcs {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_RECIPIENT_BCS\",\"IF_SENDER_BCS\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create_internet_address(INPUT) {\n    return cl_cam_address_bcs.create_internet_address(INPUT);\n  }\n  static async create_internet_address(INPUT) {\n    let result = new abap.types.ABAPObject({qualifiedName: \"CL_CAM_ADDRESS_BCS\"});\n    let i_address_string = new abap.types.Character();\n    if (INPUT && INPUT.i_address_string) {i_address_string = INPUT.i_address_string;}\n    let i_address_name = new abap.types.Character();\n    if (INPUT && INPUT.i_address_name) {i_address_name = INPUT.i_address_name;}\n    let i_incl_sapuser = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_incl_sapuser) {i_incl_sapuser.set(INPUT.i_incl_sapuser);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return result;\n  }\n}\nabap.Classes['CL_CAM_ADDRESS_BCS'] = cl_cam_address_bcs;\n\n//# sourceMappingURL=cl_cam_address_bcs.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_cam_address_bcs.clas.mjs?");

/***/ }),

/***/ "./output/cl_demo_output.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_demo_output.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_demo_output\": () => (/* binding */ cl_demo_output)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_demo_output.clas.abap\nclass cl_demo_output {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async write(INPUT) {\n    return cl_demo_output.write(INPUT);\n  }\n  static async write(INPUT) {\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(13).set('not supported')));\n  }\n  async clear() {\n    return cl_demo_output.clear();\n  }\n  static async clear() {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(13).set('not supported')));\n  }\n  async display(INPUT) {\n    return cl_demo_output.display(INPUT);\n  }\n  static async display(INPUT) {\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(13).set('not supported')));\n  }\n}\nabap.Classes['CL_DEMO_OUTPUT'] = cl_demo_output;\n\n//# sourceMappingURL=cl_demo_output.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_demo_output.clas.mjs?");

/***/ }),

/***/ "./output/cl_document_bcs.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cl_document_bcs.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_document_bcs\": () => (/* binding */ cl_document_bcs)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_document_bcs.clas.abap\nclass cl_document_bcs {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_DOCUMENT_BCS\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create_document(INPUT) {\n    return cl_document_bcs.create_document(INPUT);\n  }\n  static async create_document(INPUT) {\n    let result = new abap.types.ABAPObject({qualifiedName: \"CL_DOCUMENT_BCS\"});\n    let i_type = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_type) {i_type.set(INPUT.i_type);}\n    let i_subject = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_subject) {i_subject.set(INPUT.i_subject);}\n    let i_text = new abap.types.Character(4);\n    if (INPUT && INPUT.i_text) {i_text = INPUT.i_text;}\n    let i_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.i_length) {i_length.set(INPUT.i_length);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return result;\n  }\n  async add_attachment(INPUT) {\n    let i_attachment_type = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_attachment_type) {i_attachment_type.set(INPUT.i_attachment_type);}\n    let i_attachment_subject = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.i_attachment_subject) {i_attachment_subject.set(INPUT.i_attachment_subject);}\n    let i_attachment_size = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.i_attachment_size) {i_attachment_size.set(INPUT.i_attachment_size);}\n    let i_att_content_text = new abap.types.Character(4);\n    if (INPUT && INPUT.i_att_content_text) {i_att_content_text = INPUT.i_att_content_text;}\n    let i_att_content_hex = new abap.types.Character(4);\n    if (INPUT && INPUT.i_att_content_hex) {i_att_content_hex = INPUT.i_att_content_hex;}\n    let i_attachment_header = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Character(255, {\"qualifiedName\":\"SO_TEXT255\",\"ddicName\":\"SO_TEXT255\"})}, \"SOLI\", \"SOLI\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SOLI_TAB\");\n    if (INPUT && INPUT.i_attachment_header) {i_attachment_header.set(INPUT.i_attachment_header);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_DOCUMENT_BCS'] = cl_document_bcs;\n\n//# sourceMappingURL=cl_document_bcs.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_document_bcs.clas.mjs?");

/***/ }),

/***/ "./output/cl_express_icf_shim.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_express_icf_shim.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_express_icf_shim\": () => (/* binding */ cl_express_icf_shim)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nawait __webpack_require__.e(/*! import() */ \"output_cl_express_icf_shim_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_express_icf_shim.clas.locals.mjs */ \"./output/cl_express_icf_shim.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_express_icf_shim.clas.abap\nclass cl_express_icf_shim {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MI_SERVER\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_SERVER\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async run(INPUT) {\n    return cl_express_icf_shim.run(INPUT);\n  }\n  static async run(INPUT) {\n    let res = new abap.types.Character(4);\n    if (INPUT && INPUT.res) {res = INPUT.res;}\n    let req = new abap.types.Character(4);\n    if (INPUT && INPUT.req) {req = INPUT.req;}\n    let base = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.base) {base.set(INPUT.base);}\n    let lv_classname = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_handler = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_EXTENSION\"});\n    lv_classname.set(INPUT.class);\n    abap.statements.translate(lv_classname, \"UPPER\");\n    if (abap.Classes[lv_classname.get()] === undefined) { throw new abap.Classes['CX_SY_CREATE_OBJECT_ERROR']; }\n    li_handler.set(await (new abap.Classes[lv_classname.get()]()).constructor_());\n    if (abap.compare.initial(cl_express_icf_shim.mi_server)) {\n      cl_express_icf_shim.mi_server.set(await (new abap.Classes['CLAS-CL_EXPRESS_ICF_SHIM-LCL_SERVER']()).constructor_());\n    }\n    cl_express_icf_shim.mi_server.get().if_http_server$request.set(await (new abap.Classes['CL_HTTP_ENTITY']()).constructor_());\n    await this.request({req: req, base: base});\n    cl_express_icf_shim.mi_server.get().if_http_server$response.set(await (new abap.Classes['CL_HTTP_ENTITY']()).constructor_());\n    await li_handler.get().if_http_extension$handle_request({server: cl_express_icf_shim.mi_server});\n    await this.response({res: res});\n  }\n  async request(INPUT) {\n    return cl_express_icf_shim.request(INPUT);\n  }\n  static async request(INPUT) {\n    let req = new abap.types.Character(4);\n    if (INPUT && INPUT.req) {req = INPUT.req;}\n    let base = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.base) {base.set(INPUT.base);}\n    let lv_xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let lv_str = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_value = new abap.types.String({qualifiedName: \"STRING\"});\n    let lt_fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    lv_xstr.set(INPUT.req.body.toString(\"hex\").toUpperCase());\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_data({data: lv_xstr});\n    lv_str.set(INPUT.req.method);\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_request$set_method({method: lv_str});\n    for (const h in INPUT.req.headers) {\n        lv_name.set(h);\n        lv_value.set(INPUT.req.headers[h]);\n      await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: lv_name, value: lv_value});\n    }\n    lv_value.set(INPUT.req.url);\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(12).set('~request_uri'), value: lv_value});\n    abap.statements.split({source: lv_value, at: new abap.types.Character(1).set('?'), targets: [lv_value,lv_value]});\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(13).set('~query_string'), value: lv_value});\n    lt_fields.set((await abap.Classes['CL_HTTP_UTILITY'].if_http_utility$string_to_fields({string: lv_value})));\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_form_fields({fields: lt_fields});\n    lv_value.set(INPUT.req.path);\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(5).set('~path'), value: lv_value});\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(25).set('~path_translated_expanded'), value: lv_value});\n    abap.statements.replace({target: lv_value, all: false, with: new abap.types.Character(1).set(''), of: base});\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(10).set('~path_info'), value: lv_value});\n    await cl_express_icf_shim.mi_server.get().if_http_server$request.get().if_http_entity$set_header_field({name: new abap.types.Character(19).set('~path_info_expanded'), value: lv_value});\n  }\n  async response(INPUT) {\n    return cl_express_icf_shim.response(INPUT);\n  }\n  static async response(INPUT) {\n    let res = new abap.types.Character(4);\n    if (INPUT && INPUT.res) {res = INPUT.res;}\n    let lv_code = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let lt_header_fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    await cl_express_icf_shim.mi_server.get().if_http_server$response.get().if_http_response$get_status({code: lv_code});\n    if (abap.compare.initial(lv_code)) {\n      lv_code.set(new abap.types.Integer().set(200));\n    }\n    await cl_express_icf_shim.mi_server.get().if_http_server$response.get().if_http_entity$get_header_fields({fields: lt_header_fields});\n    for await (const unique114 of abap.statements.loop(lt_header_fields)) {\n      ls_field.set(unique114);\n      INPUT.res.append(ls_field.get().name.get(), ls_field.get().value.get());\n    }\n    lv_xstr.set((await cl_express_icf_shim.mi_server.get().if_http_server$response.get().if_http_entity$get_data()));\n    INPUT.res.status(lv_code.get()).send(Buffer.from(lv_xstr.get(), \"hex\"));\n  }\n}\nabap.Classes['CL_EXPRESS_ICF_SHIM'] = cl_express_icf_shim;\ncl_express_icf_shim.mi_server = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_SERVER\"});\n\n//# sourceMappingURL=cl_express_icf_shim.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_express_icf_shim.clas.mjs?");

/***/ }),

/***/ "./output/cl_gdt_conversion.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_gdt_conversion.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gdt_conversion\": () => (/* binding */ cl_gdt_conversion)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_gdt_conversion.clas.abap\nclass cl_gdt_conversion {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async amount_outbound(INPUT) {\n    return cl_gdt_conversion.amount_outbound(INPUT);\n  }\n  static async amount_outbound(INPUT) {\n    let im_value = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let im_currency_code = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.im_currency_code) {im_currency_code.set(INPUT.im_currency_code);}\n    let ex_value = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    let unique12 = im_currency_code;\n    if (abap.compare.eq(unique12, new abap.types.Character(3).set('DKK')) || abap.compare.eq(unique12, new abap.types.Character(3).set('EUR')) || abap.compare.eq(unique12, new abap.types.Character(3).set('USD'))) {\n      ex_value.set(im_value);\n    } else if (abap.compare.eq(unique12, new abap.types.Character(3).set('VND'))) {\n      ex_value.set(abap.operators.multiply(im_value,new abap.types.Integer().set(100)));\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n  }\n  async language_code_inbound(INPUT) {\n    return cl_gdt_conversion.language_code_inbound(INPUT);\n  }\n  static async language_code_inbound(INPUT) {\n    let im_value = new abap.types.Character();\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value = new abap.types.Character(1, {\"qualifiedName\":\"SPRAS\",\"ddicName\":\"SPRAS\"});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async unit_code_outbound(INPUT) {\n    return cl_gdt_conversion.unit_code_outbound(INPUT);\n  }\n  static async unit_code_outbound(INPUT) {\n    let im_value = new abap.types.Character(3, {\"qualifiedName\":\"MSEHI\",\"ddicName\":\"MSEHI\"});\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let ex_value = new abap.types.Character();\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async country_code_outbound(INPUT) {\n    return cl_gdt_conversion.country_code_outbound(INPUT);\n  }\n  static async country_code_outbound(INPUT) {\n    let im_value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let ex_value = new abap.types.Character();\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async date_time_inbound(INPUT) {\n    return cl_gdt_conversion.date_time_inbound(INPUT);\n  }\n  static async date_time_inbound(INPUT) {\n    let im_value = new abap.types.Character();\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value_short = new abap.types.Packed({length: 15, decimals: 0, qualifiedName: \"TIMESTAMP\"});\n    if (INPUT && INPUT.ex_value_short) {ex_value_short = INPUT.ex_value_short;}\n    let lv_str = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.np(im_value, new abap.types.Character(2).set('*Z'))) {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('todo, only handles UTC for now')));\n    }\n    lv_str.set(im_value);\n    abap.statements.replace({target: lv_str, all: true, with: new abap.types.Character(1).set(''), of: new abap.types.Character(1).set('-')});\n    abap.statements.replace({target: lv_str, all: true, with: new abap.types.Character(1).set(''), of: new abap.types.Character(1).set(':')});\n    abap.statements.replace({target: lv_str, all: true, with: new abap.types.Character(1).set(''), of: new abap.types.Character(1).set('T')});\n    abap.statements.replace({target: lv_str, all: true, with: new abap.types.Character(1).set(''), of: new abap.types.Character(1).set('Z')});\n    ex_value_short.set(lv_str);\n  }\n  async unit_code_inbound(INPUT) {\n    return cl_gdt_conversion.unit_code_inbound(INPUT);\n  }\n  static async unit_code_inbound(INPUT) {\n    let im_value = new abap.types.Character();\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value = new abap.types.Character(3, {\"qualifiedName\":\"MSEHI\",\"ddicName\":\"MSEHI\"});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    let unique13 = im_value;\n    if (abap.compare.eq(unique13, new abap.types.Character(3).set('MTR'))) {\n      ex_value.set(new abap.types.Character(1).set('M'));\n    } else if (abap.compare.eq(unique13, new abap.types.Character(3).set('PCE'))) {\n      ex_value.set(new abap.types.Character(2).set('PC'));\n    } else if (abap.compare.eq(unique13, new abap.types.Character(3).set('KGM'))) {\n      ex_value.set(new abap.types.Character(2).set('KG'));\n    } else if (abap.compare.eq(unique13, new abap.types.Character(3).set('LTR'))) {\n      ex_value.set(new abap.types.Character(1).set('L'));\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n  }\n  async language_code_outbound(INPUT) {\n    return cl_gdt_conversion.language_code_outbound(INPUT);\n  }\n  static async language_code_outbound(INPUT) {\n    let im_value = new abap.types.Character(1, {\"qualifiedName\":\"SPRAS\",\"ddicName\":\"SPRAS\"});\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let ex_value = new abap.types.Character(2, {\"qualifiedName\":\"LAISO\",\"ddicName\":\"LAISO\"});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    let unique14 = im_value;\n    if (abap.compare.eq(unique14, new abap.types.Character(1).set('E'))) {\n      ex_value.set(new abap.types.Character(2).set('en'));\n    } else if (abap.compare.eq(unique14, new abap.types.Character(1).set('K'))) {\n      ex_value.set(new abap.types.Character(2).set('da'));\n    } else if (abap.compare.eq(unique14, new abap.types.Character(1).set('D'))) {\n      ex_value.set(new abap.types.Character(2).set('de'));\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(0), new abap.types.Integer().set(1)));\n    }\n  }\n}\nabap.Classes['CL_GDT_CONVERSION'] = cl_gdt_conversion;\n\n//# sourceMappingURL=cl_gdt_conversion.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_gdt_conversion.clas.mjs?");

/***/ }),

/***/ "./output/cl_gui_cfw.clas.mjs":
/*!************************************!*\
  !*** ./output/cl_gui_cfw.clas.mjs ***!
  \************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gui_cfw\": () => (/* binding */ cl_gui_cfw)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_gui_cfw.clas.abap\nclass cl_gui_cfw {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async compute_pixel_from_metric(INPUT) {\n    return cl_gui_cfw.compute_pixel_from_metric(INPUT);\n  }\n  static async compute_pixel_from_metric(INPUT) {\n    let val = new abap.types.Integer({qualifiedName: \"I\"});\n    let x_or_y = new abap.types.Character(1, {});\n    if (INPUT && INPUT.x_or_y) {x_or_y = INPUT.x_or_y;}\n    let in_ = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.in_) {in_.set(INPUT.in_);}\n    val.set(new abap.types.Integer().set(1));\n    return val;\n  }\n  async flush() {\n    return cl_gui_cfw.flush();\n  }\n  static async flush() {\n    return;\n  }\n}\nabap.Classes['CL_GUI_CFW'] = cl_gui_cfw;\n\n//# sourceMappingURL=cl_gui_cfw.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_gui_cfw.clas.mjs?");

/***/ }),

/***/ "./output/cl_gui_container.clas.mjs":
/*!******************************************!*\
  !*** ./output/cl_gui_container.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gui_container\": () => (/* binding */ cl_gui_container)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_gui_container.clas.abap\nclass cl_gui_container {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"SCREEN0\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"CL_GUI_CONTAINER\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"DEFAULT_SCREEN\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"CL_GUI_CONTAINER\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"VISIBLE_TRUE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"VISIBLE_FALSE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.visible_true = cl_gui_container.visible_true;\n    this.visible_false = cl_gui_container.visible_false;\n    return this;\n  }\n}\nabap.Classes['CL_GUI_CONTAINER'] = cl_gui_container;\ncl_gui_container.screen0 = new abap.types.ABAPObject({qualifiedName: \"CL_GUI_CONTAINER\"});\ncl_gui_container.default_screen = new abap.types.ABAPObject({qualifiedName: \"CL_GUI_CONTAINER\"});\ncl_gui_container.visible_true = new abap.types.Character(1, {});\ncl_gui_container.visible_true.set('1');\ncl_gui_container.visible_false = new abap.types.Character(1, {});\ncl_gui_container.visible_false.set('0');\n\n//# sourceMappingURL=cl_gui_container.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_gui_container.clas.mjs?");

/***/ }),

/***/ "./output/cl_gui_frontend_services.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cl_gui_frontend_services.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gui_frontend_services\": () => (/* binding */ cl_gui_frontend_services)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_gui_frontend_services.clas.abap\nclass cl_gui_frontend_services {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"FILETYPE_ALL\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ACTION_CANCEL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ACTION_OK\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_NT351\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_NT40\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_NT50\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_WINDOWS95\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_WINDOWS98\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"PLATFORM_WINDOWSXP\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.filetype_all = cl_gui_frontend_services.filetype_all;\n    this.action_cancel = cl_gui_frontend_services.action_cancel;\n    this.action_ok = cl_gui_frontend_services.action_ok;\n    this.platform_nt351 = cl_gui_frontend_services.platform_nt351;\n    this.platform_nt40 = cl_gui_frontend_services.platform_nt40;\n    this.platform_nt50 = cl_gui_frontend_services.platform_nt50;\n    this.platform_windows95 = cl_gui_frontend_services.platform_windows95;\n    this.platform_windows98 = cl_gui_frontend_services.platform_windows98;\n    this.platform_windowsxp = cl_gui_frontend_services.platform_windowsxp;\n    return this;\n  }\n  async directory_exist(INPUT) {\n    return cl_gui_frontend_services.directory_exist(INPUT);\n  }\n  static async directory_exist(INPUT) {\n    let result = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.directory) {directory.set(INPUT.directory);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(29).set('directory_exist not supported')));\n    return result;\n  }\n  async get_sapgui_workdir(INPUT) {\n    return cl_gui_frontend_services.get_sapgui_workdir(INPUT);\n  }\n  static async get_sapgui_workdir(INPUT) {\n    let sapworkdir = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.sapworkdir) {sapworkdir = INPUT.sapworkdir;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(32).set('get_sapgui_workdir not supported')));\n  }\n  async file_exist(INPUT) {\n    return cl_gui_frontend_services.file_exist(INPUT);\n  }\n  static async file_exist(INPUT) {\n    let result = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let file = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.file) {file.set(INPUT.file);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(24).set('file_exist not supported')));\n    return result;\n  }\n  async file_delete(INPUT) {\n    return cl_gui_frontend_services.file_delete(INPUT);\n  }\n  static async file_delete(INPUT) {\n    let filename = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filename) {filename.set(INPUT.filename);}\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(25).set('file_delete not supported')));\n  }\n  async clipboard_import(INPUT) {\n    return cl_gui_frontend_services.clipboard_import(INPUT);\n  }\n  static async clipboard_import(INPUT) {\n    let data = abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"});\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.length) {length = INPUT.length;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('clipboard_import not supported')));\n  }\n  async directory_list_files(INPUT) {\n    return cl_gui_frontend_services.directory_list_files(INPUT);\n  }\n  static async directory_list_files(INPUT) {\n    let directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.directory) {directory.set(INPUT.directory);}\n    let file_table = new abap.types.Character(4);\n    if (INPUT && INPUT.file_table) {file_table = INPUT.file_table;}\n    let count = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.count) {count = INPUT.count;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(34).set('directory_list_files not supported')));\n  }\n  async directory_create(INPUT) {\n    return cl_gui_frontend_services.directory_create(INPUT);\n  }\n  static async directory_create(INPUT) {\n    let directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.directory) {directory.set(INPUT.directory);}\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('directory_create not supported')));\n  }\n  async gui_download(INPUT) {\n    return cl_gui_frontend_services.gui_download(INPUT);\n  }\n  static async gui_download(INPUT) {\n    let bin_filesize = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.bin_filesize) {bin_filesize.set(INPUT.bin_filesize);}\n    let filename = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filename) {filename.set(INPUT.filename);}\n    let filetype = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filetype) {filetype.set(INPUT.filetype);}\n    let write_lf = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.write_lf) {write_lf.set(INPUT.write_lf);}\n    let write_field_separator = new abap.types.Character(1, {\"qualifiedName\":\"CHAR1\",\"ddicName\":\"CHAR1\"});\n    if (INPUT && INPUT.write_field_separator) {write_field_separator.set(INPUT.write_field_separator);}\n    let data_tab = new abap.types.Character(4);\n    if (INPUT && INPUT.data_tab) {data_tab = INPUT.data_tab;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(26).set('gui_download not supported')));\n  }\n  async get_file_separator(INPUT) {\n    return cl_gui_frontend_services.get_file_separator(INPUT);\n  }\n  static async get_file_separator(INPUT) {\n    let file_separator = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.file_separator) {file_separator = INPUT.file_separator;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(32).set('get_file_separator not supported')));\n  }\n  async execute(INPUT) {\n    return cl_gui_frontend_services.execute(INPUT);\n  }\n  static async execute(INPUT) {\n    let document = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.document) {document.set(INPUT.document);}\n    let application = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.application) {application.set(INPUT.application);}\n    let parameter = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.parameter) {parameter.set(INPUT.parameter);}\n    let default_directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.default_directory) {default_directory.set(INPUT.default_directory);}\n    let maximized = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.maximized) {maximized.set(INPUT.maximized);}\n    let minimized = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.minimized) {minimized.set(INPUT.minimized);}\n    let synchronous = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.synchronous) {synchronous.set(INPUT.synchronous);}\n    let operation = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.operation) {operation.set(INPUT.operation);}\n    if (INPUT === undefined || INPUT.operation === undefined) {operation = new abap.types.Character(4).set('OPEN');}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(21).set('execute not supported')));\n  }\n  async directory_browse(INPUT) {\n    return cl_gui_frontend_services.directory_browse(INPUT);\n  }\n  static async directory_browse(INPUT) {\n    let window_title = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.window_title) {window_title.set(INPUT.window_title);}\n    let initial_folder = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.initial_folder) {initial_folder.set(INPUT.initial_folder);}\n    let selected_folder = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.selected_folder) {selected_folder = INPUT.selected_folder;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('directory_browse not supported')));\n  }\n  async gui_upload(INPUT) {\n    return cl_gui_frontend_services.gui_upload(INPUT);\n  }\n  static async gui_upload(INPUT) {\n    let filename = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filename) {filename.set(INPUT.filename);}\n    let filetype = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filetype) {filetype.set(INPUT.filetype);}\n    let codepage = new abap.types.Character(20, {\"qualifiedName\":\"abap_encoding\"});\n    if (INPUT && INPUT.codepage) {codepage.set(INPUT.codepage);}\n    if (INPUT === undefined || INPUT.codepage === undefined) {codepage = abap.builtin.space;}\n    let filelength = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.filelength) {filelength = INPUT.filelength;}\n    let data_tab = new abap.types.Character(4);\n    if (INPUT && INPUT.data_tab) {data_tab = INPUT.data_tab;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(24).set('gui_upload not supported')));\n  }\n  async file_open_dialog(INPUT) {\n    return cl_gui_frontend_services.file_open_dialog(INPUT);\n  }\n  static async file_open_dialog(INPUT) {\n    let window_title = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.window_title) {window_title.set(INPUT.window_title);}\n    let default_filename = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.default_filename) {default_filename.set(INPUT.default_filename);}\n    let default_extension = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.default_extension) {default_extension.set(INPUT.default_extension);}\n    let multiselection = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.multiselection) {multiselection.set(INPUT.multiselection);}\n    let file_filter = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.file_filter) {file_filter.set(INPUT.file_filter);}\n    let initial_directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.initial_directory) {initial_directory.set(INPUT.initial_directory);}\n    let file_table = abap.types.TableFactory.construct(new abap.types.Structure({\"filename\": new abap.types.Character(1024, {})}, \"FILE_TABLE\", \"FILE_TABLE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"FILETABLE\");\n    if (INPUT && INPUT.file_table) {file_table = INPUT.file_table;}\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    let user_action = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.user_action) {user_action = INPUT.user_action;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('file_open_dialog not supported')));\n  }\n  async file_save_dialog(INPUT) {\n    return cl_gui_frontend_services.file_save_dialog(INPUT);\n  }\n  static async file_save_dialog(INPUT) {\n    let window_title = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.window_title) {window_title.set(INPUT.window_title);}\n    let default_extension = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.default_extension) {default_extension.set(INPUT.default_extension);}\n    let default_file_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.default_file_name) {default_file_name.set(INPUT.default_file_name);}\n    let file_filter = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.file_filter) {file_filter.set(INPUT.file_filter);}\n    let filename = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.filename) {filename = INPUT.filename;}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path = INPUT.path;}\n    let fullpath = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.fullpath) {fullpath = INPUT.fullpath;}\n    let user_action = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.user_action) {user_action = INPUT.user_action;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('file_save_dialog not supported')));\n  }\n  async get_platform() {\n    return cl_gui_frontend_services.get_platform();\n  }\n  static async get_platform() {\n    let platform = new abap.types.Integer({qualifiedName: \"I\"});\n    platform.set(cl_gui_frontend_services.platform_windowsxp);\n    return platform;\n  }\n  async clipboard_export(INPUT) {\n    return cl_gui_frontend_services.clipboard_export(INPUT);\n  }\n  static async clipboard_export(INPUT) {\n    let no_auth_check = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.no_auth_check) {no_auth_check.set(INPUT.no_auth_check);}\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(30).set('clipboard_export not supported')));\n  }\n  async get_system_directory(INPUT) {\n    return cl_gui_frontend_services.get_system_directory(INPUT);\n  }\n  static async get_system_directory(INPUT) {\n    let system_directory = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.system_directory) {system_directory = INPUT.system_directory;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(34).set('get_system_directory not supported')));\n  }\n  async get_gui_version(INPUT) {\n    return cl_gui_frontend_services.get_gui_version(INPUT);\n  }\n  static async get_gui_version(INPUT) {\n    let version_table = abap.types.TableFactory.construct(new abap.types.Structure({\"filename\": new abap.types.Character(1024, {})}, \"FILE_TABLE\", \"FILE_TABLE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"FILETABLE\");\n    if (INPUT && INPUT.version_table) {version_table = INPUT.version_table;}\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(29).set('get_gui_verison not supported')));\n  }\n}\nabap.Classes['CL_GUI_FRONTEND_SERVICES'] = cl_gui_frontend_services;\ncl_gui_frontend_services.filetype_all = new abap.types.String({qualifiedName: \"STRING\"});\ncl_gui_frontend_services.filetype_all.set('abc');\ncl_gui_frontend_services.action_cancel = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.action_cancel.set(1);\ncl_gui_frontend_services.action_ok = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.action_ok.set(1);\ncl_gui_frontend_services.platform_nt351 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_nt351.set(1);\ncl_gui_frontend_services.platform_nt40 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_nt40.set(2);\ncl_gui_frontend_services.platform_nt50 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_nt50.set(3);\ncl_gui_frontend_services.platform_windows95 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_windows95.set(4);\ncl_gui_frontend_services.platform_windows98 = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_windows98.set(5);\ncl_gui_frontend_services.platform_windowsxp = new abap.types.Integer({qualifiedName: \"I\"});\ncl_gui_frontend_services.platform_windowsxp.set(6);\n\n//# sourceMappingURL=cl_gui_frontend_services.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_gui_frontend_services.clas.mjs?");

/***/ }),

/***/ "./output/cl_http_client.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_http_client.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_client\": () => (/* binding */ cl_http_client)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_http_client.clas.abap\nclass cl_http_client {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_HTTP_CLIENT\"];\n  static ATTRIBUTES = {\"MV_HOST\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_host = new abap.types.String({qualifiedName: \"STRING\"});\n    this.if_http_client$co_disabled = abap.Classes['IF_HTTP_CLIENT'].if_http_client$co_disabled;\n    this.if_http_client$co_enabled = abap.Classes['IF_HTTP_CLIENT'].if_http_client$co_enabled;\n    if (this.if_http_client$request === undefined) this.if_http_client$request = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});\n    if (this.if_http_client$response === undefined) this.if_http_client$response = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_RESPONSE\"});\n    if (this.if_http_client$propertytype_logon_popup === undefined) this.if_http_client$propertytype_logon_popup = new abap.types.Integer({qualifiedName: \"I\"});\n    if (this.if_http_client$propertytype_accept_cookie === undefined) this.if_http_client$propertytype_accept_cookie = new abap.types.Integer({qualifiedName: \"I\"});\n    let url = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    let lv_uri = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_query = new abap.types.String({qualifiedName: \"STRING\"});\n    this.if_http_client$response.set(await (new abap.Classes['CL_HTTP_ENTITY']()).constructor_());\n    abap.statements.find(url, {regex: new abap.types.Character(19).set('\\\\w(\\\\/[\\\\w\\\\d\\\\.\\\\-\\\\/]+)'), submatches: [lv_uri]});\n    this.mv_host.set(url);\n    abap.statements.replace({target: this.mv_host, all: false, with: new abap.types.Character(1).set(''), of: lv_uri});\n    this.if_http_client$request.set(await (new abap.Classes['CL_HTTP_ENTITY']()).constructor_());\n    await this.if_http_client$request.get().if_http_entity$set_header_field({name: new abap.types.Character(12).set('~request_uri'), value: lv_uri});\n    abap.statements.find(url, {regex: new abap.types.Character(6).set('\\\\?(.*)'), submatches: [lv_query]});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      await abap.Classes['CL_HTTP_UTILITY'].set_query({request: this.if_http_client$request, query: lv_query});\n    }\n    return this;\n  }\n  async create_by_url(INPUT) {\n    return cl_http_client.create_by_url(INPUT);\n  }\n  static async create_by_url(INPUT) {\n    let url = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    let ssl_id = new abap.types.Character(6, {\"qualifiedName\":\"SSFAPPLSSL\",\"ddicName\":\"SSFAPPLSSL\"});\n    if (INPUT && INPUT.ssl_id) {ssl_id.set(INPUT.ssl_id);}\n    let proxy_host = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.proxy_host) {proxy_host.set(INPUT.proxy_host);}\n    let proxy_service = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.proxy_service) {proxy_service.set(INPUT.proxy_service);}\n    let client = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_CLIENT\"});\n    if (INPUT && INPUT.client) {client = INPUT.client;}\n    client.set(await (new abap.Classes['CL_HTTP_CLIENT']()).constructor_({url: url}));\n    abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n  }\n  async if_http_client$authenticate(INPUT) {\n    let proxy_authentication = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.proxy_authentication) {proxy_authentication.set(INPUT.proxy_authentication);}\n    let username = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.username) {username.set(INPUT.username);}\n    let password = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.password) {password.set(INPUT.password);}\n    let lv_base64 = new abap.types.String({qualifiedName: \"STRING\"});\n    lv_base64.set((await abap.Classes['CL_HTTP_UTILITY'].if_http_utility$encode_base64({unencoded: new abap.types.String().set(`${abap.templateFormatting(username)}:${abap.templateFormatting(password)}`)})));\n    await this.if_http_client$request.get().if_http_entity$set_header_field({name: new abap.types.Character(13).set('authorization'), value: new abap.types.String().set(`Basic ${abap.templateFormatting(lv_base64)}`)});\n  }\n  async if_http_client$close() {\n    return;\n  }\n  async create_by_destination(INPUT) {\n    return cl_http_client.create_by_destination(INPUT);\n  }\n  static async create_by_destination(INPUT) {\n    let destination = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.destination) {destination.set(INPUT.destination);}\n    let client = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_CLIENT\"});\n    if (INPUT && INPUT.client) {client = INPUT.client;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_client$send() {\n    let lv_method = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_url = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_body = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_value = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_content_type = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let lt_form_fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    let lt_header_fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    lv_method.set((await this.if_http_client$request.get().if_http_request$get_method()));\n    if (abap.compare.initial(lv_method)) {\n      lv_method.set(new abap.types.Character(3).set('GET'));\n    }\n    if (abap.compare.initial((await this.if_http_client$request.get().if_http_entity$get_header_field({name: new abap.types.Character(10).set('user-agent')})))) {\n      await this.if_http_client$request.get().if_http_entity$set_header_field({name: new abap.types.Character(10).set('user-agent'), value: new abap.types.Character(14).set('open-abap-http')});\n    }\n    lv_url.set((await this.if_http_client$request.get().if_http_entity$get_header_field({name: new abap.types.Character(12).set('~request_uri')})));\n    abap.statements.replace({target: lv_url, all: false, with: new abap.types.Character(1).set(''), of: this.mv_host});\n    lv_url.set(abap.operators.concat(this.mv_host,lv_url));\n    await this.if_http_client$request.get().if_http_entity$get_form_fields({fields: lt_form_fields});\n    if (abap.compare.gt(abap.builtin.lines({val: lt_form_fields}), new abap.types.Integer().set(0))) {\n      let unique24 = lv_method;\n      if (abap.compare.eq(unique24, new abap.types.Character(3).set('GET'))) {\n        lv_url.set(abap.operators.concat(lv_url,abap.operators.concat(new abap.types.Character(1).set('?'),(await abap.Classes['CL_HTTP_UTILITY'].if_http_utility$fields_to_string({fields: lt_form_fields})))));\n      } else if (abap.compare.eq(unique24, new abap.types.Character(4).set('POST'))) {\n        await this.if_http_client$request.get().if_http_entity$set_cdata({data: (await abap.Classes['CL_HTTP_UTILITY'].if_http_utility$fields_to_string({fields: lt_form_fields}))});\n      }\n    }\n    await this.if_http_client$request.get().if_http_entity$get_header_fields({fields: lt_header_fields});\n    let headers = {};\n    for await (const unique25 of abap.statements.loop(lt_header_fields,{where: async (I) => {return abap.compare.ne(I.name, new abap.types.Character(12).set('~request_uri'));}})) {\n      ls_field.set(unique25);\n      headers[ls_field.get().name.get()] = ls_field.get().value.get();\n    }\n    lv_content_type.set((await this.if_http_client$request.get().if_http_entity$get_content_type()));\n    if (abap.compare.initial(lv_content_type) === false) {\n      headers[\"content-type\"] = lv_content_type.get();\n    }\n    headers[\"accept-encoding\"] = \"gzip\";\n    lv_body.set((await this.if_http_client$request.get().if_http_entity$get_cdata()));\n    if (abap.compare.gt(abap.builtin.strlen({val: lv_body}), new abap.types.Integer().set(0))) {\n      headers[\"content-length\"] = lv_body.get().length;\n    }\n    const https = await __webpack_require__.e(/*! import() */ \"_4854\").then(__webpack_require__.t.bind(__webpack_require__, /*! https */ \"?4854\", 19));\n    const http = await __webpack_require__.e(/*! import() */ \"_0eef\").then(__webpack_require__.t.bind(__webpack_require__, /*! http */ \"?0eef\", 19));\n    function postData(url, options, requestBody) {\n        return new Promise((resolve, reject) => {\n            const prot = url.startsWith(\"http://\") ? http : https;\n            const req = prot.request(url, options,\n              (res) => {\n                  let chunks = [];\n                  res.on(\"data\", (chunk) => {chunks.push(chunk);});\n                  res.on(\"error\", reject);\n                  res.on(\"end\", () => {\n                        resolve({statusCode: res.statusCode, headers: res.headers, body: Buffer.concat(chunks)});\n                    });\n                  });\n                req.on(\"error\", reject);\n                req.write(requestBody, \"binary\");\n                req.end();\n              });\n          }\n          const prot = lv_url.get().startsWith(\"http://\") ? http : https;\n          if (this.agent === undefined) {this.agent = new prot.Agent({keepAlive: true, maxSockets: 1});}\n          let response = await postData(lv_url.get(), {method: lv_method.get(), headers: headers, agent: this.agent}, lv_body.get());\n          for (const h in response.headers) {\n              lv_name.set(h);\n              if (Array.isArray(response.headers[h])) continue;\n              lv_value.set(response.headers[h]);\n            await this.if_http_client$response.get().if_http_entity$set_header_field({name: lv_name, value: lv_value});\n          }\n          this.if_http_client$response.get().mv_content_type.set(response.headers[\"content-type\"] || \"\");\n          this.if_http_client$response.get().mv_status.set(response.statusCode);\n          this.if_http_client$response.get().mv_data.set(response.body.toString(\"hex\").toUpperCase());\n          lv_value.set((await this.if_http_client$response.get().if_http_entity$get_header_field({name: new abap.types.Character(16).set('content-encoding')})));\n          if (abap.compare.eq(lv_value, new abap.types.Character(4).set('gzip'))) {\n            await abap.Classes['CL_ABAP_GZIP'].decompress_binary_with_header({gzip_in: (await this.if_http_client$response.get().if_http_entity$get_data()), raw_out: lv_xstr});\n            await this.if_http_client$response.get().if_http_entity$set_data({data: lv_xstr});\n          }\n          abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n        }\n        async if_http_client$receive() {\n          abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n        }\n        async if_http_client$get_last_error(INPUT) {\n          let code = new abap.types.Integer({qualifiedName: \"I\"});\n          if (INPUT && INPUT.code) {code = INPUT.code;}\n          let message = new abap.types.String({qualifiedName: \"STRING\"});\n          if (INPUT && INPUT.message) {message = INPUT.message;}\n          await this.if_http_client$response.get().if_http_response$get_status({code: code});\n          message.set(new abap.types.Character(14).set('todo_open_abap'));\n        }\n        async if_http_client$send_sap_logon_ticket() {\n          abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(2), new abap.types.Character(13).set('not supported')));\n        }\n      }\n      abap.Classes['CL_HTTP_CLIENT'] = cl_http_client;\n      cl_http_client.if_http_client$co_disabled = new abap.types.Integer({qualifiedName: \"I\"});\n      cl_http_client.if_http_client$co_disabled.set(0);\n      cl_http_client.if_http_client$co_enabled = new abap.types.Integer({qualifiedName: \"I\"});\n      cl_http_client.if_http_client$co_enabled.set(1);\n\n//# sourceMappingURL=cl_http_client.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_http_client.clas.mjs?");

/***/ }),

/***/ "./output/cl_http_entity.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_http_entity.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_entity\": () => (/* binding */ cl_http_entity)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_http_entity.clas.abap\nclass cl_http_entity {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_HTTP_RESPONSE\",\"IF_HTTP_REQUEST\",\"IF_HTTP_ENTITY\",\"IF_HTTP_ENTITY\"];\n  static ATTRIBUTES = {\"MV_STATUS\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_REASON\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_CONTENT_TYPE\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_METHOD\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_DATA\": {\"type\": () => {return new abap.types.XString({qualifiedName: \"XSTRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_HEADERS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_FORM_FIELDS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_status = new abap.types.Integer({qualifiedName: \"I\"});\n    this.mv_reason = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_content_type = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_method = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    this.mt_headers = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    this.mt_form_fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    this.if_http_entity$co_request_method_get = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_request_method_get;\n    this.if_http_entity$co_request_method_post = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_request_method_post;\n    this.if_http_entity$co_body_before_query_string = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_body_before_query_string;\n    this.if_http_request$co_protocol_version_1_1 = abap.Classes['IF_HTTP_REQUEST'].if_http_request$co_protocol_version_1_1;\n    this.if_http_request$co_protocol_version_1_0 = abap.Classes['IF_HTTP_REQUEST'].if_http_request$co_protocol_version_1_0;\n    this.if_http_request$co_request_method_get = abap.Classes['IF_HTTP_REQUEST'].if_http_request$co_request_method_get;\n    this.if_http_request$co_request_method_post = abap.Classes['IF_HTTP_REQUEST'].if_http_request$co_request_method_post;\n    this.if_http_entity$co_request_method_get = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_request_method_get;\n    this.if_http_entity$co_request_method_post = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_request_method_post;\n    this.if_http_entity$co_body_before_query_string = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_body_before_query_string;\n    return this;\n  }\n  async if_http_response$server_cache_expire_rel(INPUT) {\n    let expires_rel = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.expires_rel) {expires_rel.set(INPUT.expires_rel);}\n    let etag = new abap.types.Character(32, {\"qualifiedName\":\"CHAR32\",\"ddicName\":\"CHAR32\"});\n    if (INPUT && INPUT.etag) {etag.set(INPUT.etag);}\n    let browser_dependent = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.browser_dependent) {browser_dependent.set(INPUT.browser_dependent);}\n    if (INPUT === undefined || INPUT.browser_dependent === undefined) {browser_dependent = abap.builtin.abap_false;}\n    let no_ufo_cache = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.no_ufo_cache) {no_ufo_cache.set(INPUT.no_ufo_cache);}\n    if (INPUT === undefined || INPUT.no_ufo_cache === undefined) {no_ufo_cache = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_response$server_cache_expire_default(INPUT) {\n    let etag = new abap.types.Character(32, {\"qualifiedName\":\"CHAR32\",\"ddicName\":\"CHAR32\"});\n    if (INPUT && INPUT.etag) {etag.set(INPUT.etag);}\n    let browser_dependent = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.browser_dependent) {browser_dependent.set(INPUT.browser_dependent);}\n    if (INPUT === undefined || INPUT.browser_dependent === undefined) {browser_dependent = abap.builtin.abap_false;}\n    let no_ufo_cache = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.no_ufo_cache) {no_ufo_cache.set(INPUT.no_ufo_cache);}\n    if (INPUT === undefined || INPUT.no_ufo_cache === undefined) {no_ufo_cache = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_response$server_cache_expire_abs(INPUT) {\n    let expires_abs_date = new abap.types.Date({qualifiedName: \"D\"});\n    if (INPUT && INPUT.expires_abs_date) {expires_abs_date.set(INPUT.expires_abs_date);}\n    let expires_abs_time = new abap.types.Time({qualifiedName: \"T\"});\n    if (INPUT && INPUT.expires_abs_time) {expires_abs_time.set(INPUT.expires_abs_time);}\n    let etag = new abap.types.Character(32, {\"qualifiedName\":\"CHAR32\",\"ddicName\":\"CHAR32\"});\n    if (INPUT && INPUT.etag) {etag.set(INPUT.etag);}\n    let browser_dependent = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.browser_dependent) {browser_dependent.set(INPUT.browser_dependent);}\n    if (INPUT === undefined || INPUT.browser_dependent === undefined) {browser_dependent = abap.builtin.abap_false;}\n    let no_ufo_cache = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.no_ufo_cache) {no_ufo_cache.set(INPUT.no_ufo_cache);}\n    if (INPUT === undefined || INPUT.no_ufo_cache === undefined) {no_ufo_cache = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_response$server_cache_browser_dependent(INPUT) {\n    let dependent = new abap.types.Character(1, {\"qualifiedName\":\"BOOLEAN\",\"ddicName\":\"BOOLEAN\"});\n    if (INPUT && INPUT.dependent) {dependent.set(INPUT.dependent);}\n    if (INPUT === undefined || INPUT.dependent === undefined) {dependent = abap.builtin.abap_true;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_response$get_raw_message() {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return data;\n  }\n  async if_http_response$copy() {\n    let response = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_RESPONSE\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return response;\n  }\n  async if_http_request$get_user_agent(INPUT) {\n    let user_agent_type = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.user_agent_type) {user_agent_type = INPUT.user_agent_type;}\n    let user_agent_version = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.user_agent_version) {user_agent_version = INPUT.user_agent_version;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_request$get_uri_parameter(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async if_http_request$get_raw_message() {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return data;\n  }\n  async if_http_request$get_form_data(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let data = new abap.types.Character(4);\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_request$get_authorization(INPUT) {\n    let auth_type = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.auth_type) {auth_type = INPUT.auth_type;}\n    let username = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.username) {username = INPUT.username;}\n    let password = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.password) {password = INPUT.password;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_request$copy() {\n    let request = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return request;\n  }\n  async if_http_request$set_authorization(INPUT) {\n    let auth_type = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.auth_type) {auth_type.set(INPUT.auth_type);}\n    if (INPUT === undefined || INPUT.auth_type === undefined) {auth_type = new abap.types.Integer().set(1);}\n    let username = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.username) {username.set(INPUT.username);}\n    let password = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.password) {password.set(INPUT.password);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$add_multipart(INPUT) {\n    let entity = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_ENTITY\"});\n    let suppress_content_length = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.suppress_content_length) {suppress_content_length.set(INPUT.suppress_content_length);}\n    if (INPUT === undefined || INPUT.suppress_content_length === undefined) {suppress_content_length = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return entity;\n  }\n  async if_http_entity$get_cookie_field(INPUT) {\n    let field_value = new abap.types.String({qualifiedName: \"STRING\"});\n    let cookie_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.cookie_name) {cookie_name.set(INPUT.cookie_name);}\n    let cookie_path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.cookie_path) {cookie_path.set(INPUT.cookie_path);}\n    let field_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.field_name) {field_name.set(INPUT.field_name);}\n    let base64 = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.base64) {base64.set(INPUT.base64);}\n    if (INPUT === undefined || INPUT.base64 === undefined) {base64 = new abap.types.Integer().set(1);}\n    abap.statements.clear(field_value);\n    return field_value;\n  }\n  async if_http_entity$set_compression() {\n  }\n  async if_http_entity$append_cdata(INPUT) {\n    let data = new abap.types.Character();\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$append_cdata2(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let encoding = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.encoding) {encoding.set(INPUT.encoding);}\n    let offset = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.offset) {offset.set(INPUT.offset);}\n    let length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.length) {length.set(INPUT.length);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$add_cookie_field(INPUT) {\n    let cookie_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.cookie_name) {cookie_name.set(INPUT.cookie_name);}\n    let cookie_path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.cookie_path) {cookie_path.set(INPUT.cookie_path);}\n    let field_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.field_name) {field_name.set(INPUT.field_name);}\n    let field_value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.field_value) {field_value.set(INPUT.field_value);}\n    let base64 = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.base64) {base64.set(INPUT.base64);}\n    if (INPUT === undefined || INPUT.base64 === undefined) {base64 = new abap.types.Integer().set(1);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$append_data(INPUT) {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let offset = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.offset) {offset.set(INPUT.offset);}\n    let length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.length) {length.set(INPUT.length);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$to_xstring() {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return data;\n  }\n  async if_http_entity$delete_cookie_secure(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path.set(INPUT.path);}\n    if (INPUT === undefined || INPUT.path === undefined) {path = new abap.types.String().set(``);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_cookies(INPUT) {\n    let cookies = new abap.types.Character(4);\n    if (INPUT && INPUT.cookies) {cookies = INPUT.cookies;}\n    abap.statements.clear(cookies);\n  }\n  async if_http_entity$delete_form_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$delete_form_field_secure(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_cookie(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path.set(INPUT.path);}\n    if (INPUT === undefined || INPUT.path === undefined) {path = new abap.types.String().set(``);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value = INPUT.value;}\n    let domain = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.domain) {domain = INPUT.domain;}\n    let expires = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.expires) {expires = INPUT.expires;}\n    let secure = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.secure) {secure = INPUT.secure;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_data_length(INPUT) {\n    let data_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.data_length) {data_length = INPUT.data_length;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$from_xstring(INPUT) {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_form_field_cs(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let formfield_encoding = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.formfield_encoding) {formfield_encoding.set(INPUT.formfield_encoding);}\n    let search_option = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.search_option) {search_option.set(INPUT.search_option);}\n    if (INPUT === undefined || INPUT.search_option === undefined) {search_option = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_body_before_query_string;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async if_http_entity$get_last_error() {\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async if_http_entity$delete_header_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$delete_header_field_secure(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$delete_cookie(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path.set(INPUT.path);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$set_header_fields(INPUT) {\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields.set(INPUT.fields);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$suppress_content_type(INPUT) {\n    let suppress = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.suppress) {suppress.set(INPUT.suppress);}\n    if (INPUT === undefined || INPUT.suppress === undefined) {suppress = abap.builtin.abap_true;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$set_formfield_encoding(INPUT) {\n    let formfield_encoding = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.formfield_encoding) {formfield_encoding.set(INPUT.formfield_encoding);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$set_cookie(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path.set(INPUT.path);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let domain = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.domain) {domain.set(INPUT.domain);}\n    let expires = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.expires) {expires.set(INPUT.expires);}\n    let secure = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.secure) {secure.set(INPUT.secure);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_version() {\n    let version = new abap.types.Integer({qualifiedName: \"I\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return version;\n  }\n  async if_http_entity$get_serialized_message_length(INPUT) {\n    let body_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.body_length) {body_length = INPUT.body_length;}\n    let header_length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.header_length) {header_length = INPUT.header_length;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$get_header_field(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let ls_header = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    abap.statements.readTable(this.mt_headers,{into: ls_header,\n      withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));},\n      withKeyValue: [{key: (i) => {return i.name}, value: abap.builtin.to_lower({val: name})}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": abap.builtin.to_lower({val: name})}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      value.set(ls_header.get().value);\n    }\n    return value;\n  }\n  async if_http_entity$get_header_fields(INPUT) {\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    fields.set(this.mt_headers);\n  }\n  async if_http_response$get_status(INPUT) {\n    let code = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.code) {code = INPUT.code;}\n    let reason = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.reason) {reason = INPUT.reason;}\n    code.set(this.mv_status);\n    reason.set(this.mv_reason);\n  }\n  async if_http_entity$get_cdata() {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    await (await abap.Classes['CL_ABAP_CONV_IN_CE'].create({encoding: new abap.types.Character(5).set('UTF-8')})).get().convert({input: this.mv_data, data: data});\n    return data;\n  }\n  async if_http_response$set_status(INPUT) {\n    let code = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.code) {code.set(INPUT.code);}\n    let reason = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.reason) {reason.set(INPUT.reason);}\n    this.mv_status.set(code);\n    this.mv_reason.set(reason);\n  }\n  async if_http_entity$set_cdata(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let offset = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.offset) {offset.set(INPUT.offset);}\n    let length = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.length) {length.set(INPUT.length);}\n    await (await abap.Classes['CL_ABAP_CONV_OUT_CE'].create({encoding: new abap.types.Character(5).set('UTF-8')})).get().convert({data: data, buffer: this.mv_data});\n  }\n  async if_http_entity$get_content_type() {\n    let val = new abap.types.String({qualifiedName: \"STRING\"});\n    val.set((await this.if_http_entity$get_header_field({name: new abap.types.Character(12).set('content-type')})));\n    return val;\n  }\n  async if_http_entity$set_content_type(INPUT) {\n    let content_type = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.content_type) {content_type.set(INPUT.content_type);}\n    await this.if_http_entity$set_header_field({name: new abap.types.Character(12).set('content-type'), value: content_type});\n  }\n  async if_http_entity$get_data() {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    data.set(this.mv_data);\n    return data;\n  }\n  async if_http_entity$set_data(INPUT) {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    this.mv_data.set(data);\n  }\n  async if_http_response$delete_cookie_at_client(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let path = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.path) {path.set(INPUT.path);}\n    let domain = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.domain) {domain.set(INPUT.domain);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(2), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_response$redirect(INPUT) {\n    let url = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    let permanently = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.permanently) {permanently.set(INPUT.permanently);}\n    let protocol_dependent = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.protocol_dependent) {protocol_dependent.set(INPUT.protocol_dependent);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(2), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$num_multiparts() {\n    let num = new abap.types.Integer({qualifiedName: \"I\"});\n    num.set(new abap.types.Integer().set(0));\n    return num;\n  }\n  async if_http_entity$get_multipart(INPUT) {\n    let entity = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_ENTITY\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.index) {index.set(INPUT.index);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(2), new abap.types.Character(4).set('todo')));\n    return entity;\n  }\n  async if_http_entity$get_form_fields_cs(INPUT) {\n    let formfield_encoding = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.formfield_encoding) {formfield_encoding.set(INPUT.formfield_encoding);}\n    let search_option = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.search_option) {search_option.set(INPUT.search_option);}\n    if (INPUT === undefined || INPUT.search_option === undefined) {search_option = abap.Classes['IF_HTTP_ENTITY'].if_http_entity$co_body_before_query_string;}\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    fields.set(this.mt_form_fields);\n  }\n  async if_http_entity$set_form_fields(INPUT) {\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields.set(INPUT.fields);}\n    let multivalue = new abap.types.Integer({qualifiedName: \"INT4\"});\n    if (INPUT && INPUT.multivalue) {multivalue.set(INPUT.multivalue);}\n    this.mt_form_fields.set(fields);\n  }\n  async if_http_entity$get_form_fields(INPUT) {\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    for await (const unique26 of abap.statements.loop(this.mt_form_fields)) {\n      ls_field.set(unique26);\n      abap.statements.translate(ls_field.get().name, \"LOWER\");\n      abap.statements.append({source: ls_field, target: fields});\n    }\n  }\n  async if_http_entity$get_form_field(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    abap.statements.readTable(this.mt_form_fields,{into: ls_field,\n      withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));},\n      withKeyValue: [{key: (i) => {return i.name}, value: abap.builtin.to_lower({val: name})}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": abap.builtin.to_lower({val: name})}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      value.set(ls_field.get().value);\n    }\n    return value;\n  }\n  async if_http_entity$set_header_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let ls_header = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    let fs_ls_header_ = new abap.types.FieldSymbol(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"));\n    abap.statements.readTable(this.mt_headers,{assigning: fs_ls_header_,\n      withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));},\n      withKeyValue: [{key: (i) => {return i.name}, value: abap.builtin.to_lower({val: name})}],\n      usesTableLine: false,\n      withKeySimple: {\"name\": abap.builtin.to_lower({val: name})}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      fs_ls_header_.get().value.set(value);\n    } else {\n      ls_header.get().name.set(abap.builtin.to_lower({val: name}));\n      ls_header.get().value.set(value);\n      abap.statements.append({source: ls_header, target: this.mt_headers});\n    }\n    if (abap.compare.eq(name, new abap.types.Character(15).set('~request_method'))) {\n      await this.if_http_request$set_method({method: value});\n    }\n  }\n  async if_http_request$set_method(INPUT) {\n    let method = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.method) {method.set(INPUT.method);}\n    this.mv_method.set(method);\n  }\n  async if_http_request$get_method() {\n    let meth = new abap.types.String({qualifiedName: \"STRING\"});\n    meth.set(this.mv_method);\n    return meth;\n  }\n  async if_http_request$set_version(INPUT) {\n    let version = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.version) {version.set(INPUT.version);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(2), new abap.types.Character(4).set('todo')));\n  }\n  async if_http_entity$set_form_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    ls_field.get().name.set(name);\n    ls_field.get().value.set(value);\n    abap.statements.append({source: ls_field, target: this.mt_form_fields});\n  }\n}\nabap.Classes['CL_HTTP_ENTITY'] = cl_http_entity;\ncl_http_entity.if_http_request$co_protocol_version_1_1 = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_request$co_protocol_version_1_1.set('VER11');\ncl_http_entity.if_http_request$co_protocol_version_1_0 = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_request$co_protocol_version_1_0.set('VER10');\ncl_http_entity.if_http_request$co_request_method_get = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_request$co_request_method_get.set('GET');\ncl_http_entity.if_http_request$co_request_method_post = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_request$co_request_method_post.set('POST');\ncl_http_entity.if_http_entity$co_request_method_get = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_entity$co_request_method_get.set('GET');\ncl_http_entity.if_http_entity$co_request_method_post = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_entity$co_request_method_post.set('POST');\ncl_http_entity.if_http_entity$co_body_before_query_string = new abap.types.Integer({qualifiedName: \"I\"});\ncl_http_entity.if_http_entity$co_body_before_query_string.set(3);\ncl_http_entity.if_http_entity$co_request_method_get = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_entity$co_request_method_get.set('GET');\ncl_http_entity.if_http_entity$co_request_method_post = new abap.types.String({qualifiedName: \"STRING\"});\ncl_http_entity.if_http_entity$co_request_method_post.set('POST');\ncl_http_entity.if_http_entity$co_body_before_query_string = new abap.types.Integer({qualifiedName: \"I\"});\ncl_http_entity.if_http_entity$co_body_before_query_string.set(3);\n\n//# sourceMappingURL=cl_http_entity.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_http_entity.clas.mjs?");

/***/ }),

/***/ "./output/cl_http_server.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_http_server.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_server\": () => (/* binding */ cl_http_server)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_http_server.clas.abap\nclass cl_http_server {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async get_location(INPUT) {\n    return cl_http_server.get_location(INPUT);\n  }\n  static async get_location(INPUT) {\n    let application = new abap.types.Character();\n    if (INPUT && INPUT.application) {application = INPUT.application;}\n    let port = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.port) {port = INPUT.port;}\n    let out_protocol = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.out_protocol) {out_protocol = INPUT.out_protocol;}\n    let host = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.host) {host = INPUT.host;}\n    host.set(new abap.types.Character(13).set('open-abap.org'));\n  }\n}\nabap.Classes['CL_HTTP_SERVER'] = cl_http_server;\n\n//# sourceMappingURL=cl_http_server.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_http_server.clas.mjs?");

/***/ }),

/***/ "./output/cl_http_utility.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cl_http_utility.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_utility\": () => (/* binding */ cl_http_utility)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_http_utility.clas.abap\nclass cl_http_utility {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_HTTP_UTILITY\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.encode_base64 = this.if_http_utility$encode_base64;\n    this.escape_url = this.if_http_utility$escape_url;\n    this.get_last_error = this.if_http_utility$get_last_error;\n    this.string_to_fields = this.if_http_utility$string_to_fields;\n    this.unescape_url = this.if_http_utility$unescape_url;\n    this.fields_to_string = this.if_http_utility$fields_to_string;\n    return this;\n  }\n  async set_request_uri(INPUT) {\n    return cl_http_utility.set_request_uri(INPUT);\n  }\n  static async set_request_uri(INPUT) {\n    let request = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});\n    if (INPUT && INPUT.request) {request.set(INPUT.request);}\n    let uri = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.uri) {uri.set(INPUT.uri);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async escape_html(INPUT) {\n    return cl_http_utility.escape_html(INPUT);\n  }\n  static async escape_html(INPUT) {\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let unescaped = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.unescaped) {unescaped.set(INPUT.unescaped);}\n    let keep_num_char_ref = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.keep_num_char_ref) {keep_num_char_ref.set(INPUT.keep_num_char_ref);}\n    if (INPUT === undefined || INPUT.keep_num_char_ref === undefined) {keep_num_char_ref = abap.builtin.abap_undefined;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return escaped;\n  }\n  async escape_javascript(INPUT) {\n    return cl_http_utility.escape_javascript(INPUT);\n  }\n  static async escape_javascript(INPUT) {\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let unescaped = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.unescaped) {unescaped.set(INPUT.unescaped);}\n    let inside_html = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.inside_html) {inside_html.set(INPUT.inside_html);}\n    if (INPUT === undefined || INPUT.inside_html === undefined) {inside_html = abap.builtin.abap_false;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return escaped;\n  }\n  async escape_xml_attr_value(INPUT) {\n    return cl_http_utility.escape_xml_attr_value(INPUT);\n  }\n  static async escape_xml_attr_value(INPUT) {\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let unescaped = new abap.types.Character();\n    if (INPUT && INPUT.unescaped) {unescaped = INPUT.unescaped;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return escaped;\n  }\n  async if_http_utility$get_last_error() {\n    return cl_http_utility.if_http_utility$get_last_error();\n  }\n  static async if_http_utility$get_last_error() {\n    let rc = new abap.types.Integer({qualifiedName: \"I\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async if_http_utility$string_to_fields(INPUT) {\n    return cl_http_utility.if_http_utility$string_to_fields(INPUT);\n  }\n  static async if_http_utility$string_to_fields(INPUT) {\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.string) {string.set(INPUT.string);}\n    let tab = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let str = new abap.types.String({qualifiedName: \"STRING\"});\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    abap.statements.split({source: string, at: new abap.types.Character(1).set('&'), table: tab});\n    for await (const unique27 of abap.statements.loop(tab)) {\n      str.set(unique27);\n      abap.statements.split({source: str, at: new abap.types.Character(1).set('='), targets: [ls_field.get().name,ls_field.get().value]});\n      abap.statements.append({source: ls_field, target: fields});\n    }\n    return fields;\n  }\n  async set_query(INPUT) {\n    return cl_http_utility.set_query(INPUT);\n  }\n  static async set_query(INPUT) {\n    let request = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});\n    if (INPUT && INPUT.request) {request.set(INPUT.request);}\n    let query = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.query) {query.set(INPUT.query);}\n    await request.get().if_http_entity$set_form_fields({fields: (await this.if_http_utility$string_to_fields({string: query}))});\n  }\n  async if_http_utility$fields_to_string(INPUT) {\n    return cl_http_utility.if_http_utility$fields_to_string(INPUT);\n  }\n  static async if_http_utility$fields_to_string(INPUT) {\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    let fields = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields.set(INPUT.fields);}\n    let tab = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"USER\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let str = new abap.types.String({qualifiedName: \"STRING\"});\n    let ls_field = new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\");\n    for await (const unique28 of abap.statements.loop(fields)) {\n      ls_field.set(unique28);\n      abap.statements.replace({target: ls_field.get().value, all: true, with: new abap.types.Character(3).set('%3a'), of: new abap.types.Character(1).set(':')});\n      abap.statements.replace({target: ls_field.get().value, all: true, with: new abap.types.Character(3).set('%2f'), of: new abap.types.Character(1).set('/')});\n      str.set(abap.operators.concat(ls_field.get().name,abap.operators.concat(new abap.types.Character(1).set('='),ls_field.get().value)));\n      abap.statements.append({source: str, target: tab});\n    }\n    string.set(abap.builtin.concat_lines_of({table: tab, sep: new abap.types.Character(1).set('&')}));\n    return string;\n  }\n  async encode_x_base64(INPUT) {\n    return cl_http_utility.encode_x_base64(INPUT);\n  }\n  static async encode_x_base64(INPUT) {\n    let encoded = new abap.types.String({qualifiedName: \"STRING\"});\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    let buffer = Buffer.from(data.get(), \"hex\");\n    encoded.set(buffer.toString(\"base64\"));\n    return encoded;\n  }\n  async decode_x_base64(INPUT) {\n    return cl_http_utility.decode_x_base64(INPUT);\n  }\n  static async decode_x_base64(INPUT) {\n    let decoded = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let encoded = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.encoded) {encoded.set(INPUT.encoded);}\n    let buffer = Buffer.from(encoded.get(), \"base64\");\n    decoded.set(buffer.toString(\"hex\").toUpperCase());\n    return decoded;\n  }\n  async if_http_utility$unescape_url(INPUT) {\n    return cl_http_utility.if_http_utility$unescape_url(INPUT);\n  }\n  static async if_http_utility$unescape_url(INPUT) {\n    let unescaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.escaped) {escaped.set(INPUT.escaped);}\n    let options = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.options) {options.set(INPUT.options);}\n    let foo = escaped.get();\n    unescaped.set(decodeURIComponent(foo));\n    return unescaped;\n  }\n  async if_http_utility$escape_url(INPUT) {\n    return cl_http_utility.if_http_utility$escape_url(INPUT);\n  }\n  static async if_http_utility$escape_url(INPUT) {\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let unescaped = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.unescaped) {unescaped.set(INPUT.unescaped);}\n    escaped.set(encodeURIComponent(unescaped.get()));\n    return escaped;\n  }\n  async if_http_utility$encode_base64(INPUT) {\n    return cl_http_utility.if_http_utility$encode_base64(INPUT);\n  }\n  static async if_http_utility$encode_base64(INPUT) {\n    let encoded = new abap.types.String({qualifiedName: \"STRING\"});\n    let unencoded = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.unencoded) {unencoded.set(INPUT.unencoded);}\n    let buffer = Buffer.from(unencoded.get());\n    encoded.set(buffer.toString(\"base64\"));\n    return encoded;\n  }\n}\nabap.Classes['CL_HTTP_UTILITY'] = cl_http_utility;\n\n//# sourceMappingURL=cl_http_utility.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_http_utility.clas.mjs?");

/***/ }),

/***/ "./output/cl_i18n_languages.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_i18n_languages.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_i18n_languages\": () => (/* binding */ cl_i18n_languages)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_i18n_languages.clas.abap\nclass cl_i18n_languages {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async sap2_to_sap1(INPUT) {\n    return cl_i18n_languages.sap2_to_sap1(INPUT);\n  }\n  static async sap2_to_sap1(INPUT) {\n    let re_lang_sap1 = new abap.types.Character(1, {\"qualifiedName\":\"sy-langu\",\"conversionExit\":\"ISOLA\"});\n    let im_lang_sap2 = new abap.types.Character(2, {\"qualifiedName\":\"LAISO\",\"ddicName\":\"LAISO\"});\n    if (INPUT && INPUT.im_lang_sap2) {im_lang_sap2.set(INPUT.im_lang_sap2);}\n    let unique15 = abap.builtin.to_upper({val: im_lang_sap2});\n    if (abap.compare.eq(unique15, new abap.types.Character(2).set('SR'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('0'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('ZH'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('1'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('TH'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('2'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('KO'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('3'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('RO'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('4'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('SL'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('5'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('HR'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('6'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('MS'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('7'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('UK'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('8'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('ET'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('9'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('AR'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('A'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('HE'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('B'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('CS'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('C'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('DE'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('D'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('EN'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('E'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('FR'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('F'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('EL'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('G'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('HU'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('H'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('IT'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('I'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('JA'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('J'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('DA'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('K'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('PL'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('L'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('ZF'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('M'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('NL'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('N'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('NO'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('O'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('PT'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('P'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('SK'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('Q'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('RU'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('R'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('ES'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('S'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('TR'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('T'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('FI'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('U'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('SV'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('V'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('BG'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('W'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('LT'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('X'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('LV'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('Y'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('Z1'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('Z'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('AF'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('a'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('IS'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('b'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('CA'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('c'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('SH'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('d'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('ID'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set('i'));\n    } else if (abap.compare.eq(unique15, new abap.types.Character(2).set('1Q'))) {\n      re_lang_sap1.set(new abap.types.Character(1).set(''));\n    } else {\n      throw new abap.ClassicError({classic: \"no_assignment\"});\n    }\n    abap.builtin.sy.get().subrc.set(0);\n    return re_lang_sap1;\n  }\n  async sap1_to_sap2(INPUT) {\n    return cl_i18n_languages.sap1_to_sap2(INPUT);\n  }\n  static async sap1_to_sap2(INPUT) {\n    let re_lang_sap2 = new abap.types.String({qualifiedName: \"STRING\"});\n    let im_lang_sap1 = new abap.types.Character(1, {\"qualifiedName\":\"sy-langu\",\"conversionExit\":\"ISOLA\"});\n    if (INPUT && INPUT.im_lang_sap1) {im_lang_sap1.set(INPUT.im_lang_sap1);}\n    let unique16 = im_lang_sap1;\n    if (abap.compare.eq(unique16, new abap.types.Character(1).set('0'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('SR'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('1'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('ZH'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('2'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('TH'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('3'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('KO'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('4'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('RO'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('5'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('SL'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('6'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('HR'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('7'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('MS'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('8'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('UK'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('9'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('ET'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('A'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('AR'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('B'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('HE'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('C'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('CS'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('D'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('DE'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('E'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('EN'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('F'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('FR'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('G'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('EL'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('H'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('HU'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('I'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('IT'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('J'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('JA'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('K'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('DA'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('L'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('PL'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('M'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('ZF'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('N'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('NL'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('O'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('NO'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('P'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('PT'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('Q'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('SK'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('R'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('RU'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('S'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('ES'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('T'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('TR'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('U'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('FI'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('V'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('SV'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('W'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('BG'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('X'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('LT'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('Y'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('LV'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('Z'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('Z1'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('a'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('AF'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('b'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('IS'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('c'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('CA'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('d'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('SH'));\n    } else if (abap.compare.eq(unique16, new abap.types.Character(1).set('i'))) {\n      re_lang_sap2.set(new abap.types.Character(2).set('ID'));\n    } else {\n      throw new abap.ClassicError({classic: \"no_assignment\"});\n    }\n    abap.builtin.sy.get().subrc.set(0);\n    return re_lang_sap2;\n  }\n  async sap2_to_iso639_1(INPUT) {\n    return cl_i18n_languages.sap2_to_iso639_1(INPUT);\n  }\n  static async sap2_to_iso639_1(INPUT) {\n    let im_lang_sap2 = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.im_lang_sap2) {im_lang_sap2.set(INPUT.im_lang_sap2);}\n    let ex_lang_iso639 = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.ex_lang_iso639) {ex_lang_iso639 = INPUT.ex_lang_iso639;}\n    let ex_country = new abap.types.Character(3, {\"qualifiedName\":\"LAND1\",\"ddicName\":\"LAND1\"});\n    if (INPUT && INPUT.ex_country) {ex_country = INPUT.ex_country;}\n    let unique17 = im_lang_sap2;\n    if (abap.compare.eq(unique17, new abap.types.Character(2).set('SR'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('sr'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('ZH'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('zh'));\n      ex_country.set(new abap.types.Character(2).set('CN'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('TH'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('th'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('KO'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ko'));\n      ex_country.set(new abap.types.Character(2).set('KR'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('RO'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ro'));\n      ex_country.set(new abap.types.Character(2).set('RO'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('SL'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('sl'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('HR'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('hr'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('MS'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ms'));\n      ex_country.set(new abap.types.Character(2).set('MY'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('UK'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('uk'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('ET'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('et'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('AR'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ar'));\n      ex_country.set(new abap.types.Character(2).set('SA'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('HE'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('he'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('CS'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('cs'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('DE'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('de'));\n      ex_country.set(new abap.types.Character(2).set('DE'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('EN'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('en'));\n      ex_country.set(new abap.types.Character(2).set('US'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('FR'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('fr'));\n      ex_country.set(new abap.types.Character(2).set('FR'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('EL'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('el'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('HU'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('hu'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('IT'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('it'));\n      ex_country.set(new abap.types.Character(2).set('IT'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('JA'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ja'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('DA'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('da'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('PL'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('pl'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('ZF'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('zh'));\n      ex_country.set(new abap.types.Character(2).set('TW'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('NL'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('nl'));\n      ex_country.set(new abap.types.Character(2).set('NL'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('NO'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('no'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('PT'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('pt'));\n      ex_country.set(new abap.types.Character(2).set('BR'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('SK'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('sk'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('RU'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ru'));\n      ex_country.set(new abap.types.Character(2).set('RU'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('ES'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('es'));\n      ex_country.set(new abap.types.Character(2).set('ES'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('TR'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('tr'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('FI'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('fi'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('SV'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('sv'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('BG'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('bg'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('LT'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('lt'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('LV'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('lv'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('AF'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('af'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('IS'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('is'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('CA'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('ca'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('SH'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('sr'));\n    } else if (abap.compare.eq(unique17, new abap.types.Character(2).set('ID'))) {\n      ex_lang_iso639.set(new abap.types.Character(2).set('id'));\n    } else {\n      throw new abap.ClassicError({classic: \"no_assignment\"});\n    }\n    abap.builtin.sy.get().subrc.set(0);\n  }\n}\nabap.Classes['CL_I18N_LANGUAGES'] = cl_i18n_languages;\n\n//# sourceMappingURL=cl_i18n_languages.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_i18n_languages.clas.mjs?");

/***/ }),

/***/ "./output/cl_icf_tree.clas.mjs":
/*!*************************************!*\
  !*** ./output/cl_icf_tree.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_icf_tree\": () => (/* binding */ cl_icf_tree)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_icf_tree.clas.abap\nclass cl_icf_tree {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_ICF_TREE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async if_icf_tree$service_from_url(INPUT) {\n    return cl_icf_tree.if_icf_tree$service_from_url(INPUT);\n  }\n  static async if_icf_tree$service_from_url(INPUT) {\n    let url = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    if (INPUT === undefined || INPUT.url === undefined) {url = new abap.types.Character(1).set('/');}\n    let hostnumber = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.hostnumber) {hostnumber.set(INPUT.hostnumber);}\n    let authority_check = new abap.types.Character(1, {});\n    if (INPUT && INPUT.authority_check) {authority_check = INPUT.authority_check;}\n    if (INPUT === undefined || INPUT.authority_check === undefined) {authority_check = new abap.types.Character(1).set('X');}\n    let urlsuffix = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.urlsuffix) {urlsuffix = INPUT.urlsuffix;}\n    let icfnodguid = new abap.types.Character(25, {\"qualifiedName\":\"CHAR25\",\"ddicName\":\"CHAR25\"});\n    if (INPUT && INPUT.icfnodguid) {icfnodguid = INPUT.icfnodguid;}\n    let icf_name = new abap.types.Character(15, {\"qualifiedName\":\"CHAR15\",\"ddicName\":\"CHAR15\"});\n    if (INPUT && INPUT.icf_name) {icf_name = INPUT.icf_name;}\n    let icfactive = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.icfactive) {icfactive = INPUT.icfactive;}\n    let icfaltnme = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.icfaltnme) {icfaltnme = INPUT.icfaltnme;}\n    return;\n    abap.builtin.sy.get().subrc.set(0);\n  }\n}\nabap.Classes['CL_ICF_TREE'] = cl_icf_tree;\n\n//# sourceMappingURL=cl_icf_tree.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_icf_tree.clas.mjs?");

/***/ }),

/***/ "./output/cl_ixml.clas.mjs":
/*!*********************************!*\
  !*** ./output/cl_ixml.clas.mjs ***!
  \*********************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_ixml\": () => (/* binding */ cl_ixml)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_ixml_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_ixml.clas.locals.mjs */ \"./output/cl_ixml.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_ixml.clas.abap\nclass cl_ixml {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_IXML\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create() {\n    return cl_ixml.create();\n  }\n  static async create() {\n    let xml = new abap.types.ABAPObject({qualifiedName: \"IF_IXML\"});\n    xml.set(await (new abap.Classes['CL_IXML']()).constructor_());\n    return xml;\n  }\n  async if_ixml$create_encoding(INPUT) {\n    let rval = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ENCODING\"});\n    let byte_order = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.byte_order) {byte_order.set(INPUT.byte_order);}\n    let character_set = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.character_set) {character_set.set(INPUT.character_set);}\n    rval.set(await (new abap.Classes['CLAS-CL_IXML-LCL_ENCODING']()).constructor_());\n    return rval;\n  }\n  async if_ixml$create_document() {\n    let doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    doc.set(await (new abap.Classes['CLAS-CL_IXML-LCL_DOCUMENT']()).constructor_());\n    return doc;\n  }\n  async if_ixml$create_stream_factory() {\n    let stream = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_STREAM_FACTORY\"});\n    stream.set(await (new abap.Classes['CLAS-CL_IXML-LCL_STREAM_FACTORY']()).constructor_());\n    return stream;\n  }\n  async if_ixml$create_renderer(INPUT) {\n    let renderer = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_RENDERER\"});\n    let ostream = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_OSTREAM\"});\n    if (INPUT && INPUT.ostream) {ostream.set(INPUT.ostream);}\n    let document = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    if (INPUT && INPUT.document) {document.set(INPUT.document);}\n    renderer.set(await (new abap.Classes['CLAS-CL_IXML-LCL_RENDERER']()).constructor_({ostream: ostream, document: document}));\n    return renderer;\n  }\n  async if_ixml$create_parser(INPUT) {\n    let parser = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_PARSER\"});\n    let stream_factory = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_STREAM_FACTORY\"});\n    if (INPUT && INPUT.stream_factory) {stream_factory.set(INPUT.stream_factory);}\n    let istream = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ISTREAM\"});\n    if (INPUT && INPUT.istream) {istream.set(INPUT.istream);}\n    let document = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    if (INPUT && INPUT.document) {document.set(INPUT.document);}\n    parser.set(await (new abap.Classes['CLAS-CL_IXML-LCL_PARSER']()).constructor_({istream: istream, document: document}));\n    return parser;\n  }\n}\nabap.Classes['CL_IXML'] = cl_ixml;\n\n//# sourceMappingURL=cl_ixml.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_ixml.clas.mjs?");

/***/ }),

/***/ "./output/cl_message_helper.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_message_helper.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_message_helper\": () => (/* binding */ cl_message_helper)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_message_helper.clas.abap\nclass cl_message_helper {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"GC_FALLBACK\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.gc_fallback = cl_message_helper.gc_fallback;\n    return this;\n  }\n  async get_text_for_message(INPUT) {\n    return cl_message_helper.get_text_for_message(INPUT);\n  }\n  static async get_text_for_message(INPUT) {\n    let result = new abap.types.String({qualifiedName: \"STRING\"});\n    let text = new abap.types.ABAPObject({qualifiedName: \"IF_MESSAGE\"});\n    if (INPUT && INPUT.text) {text.set(INPUT.text);}\n    let lv_msgid = new abap.types.Character(20, {\"qualifiedName\":\"sy-msgid\"});\n    let lv_msgno = new abap.types.Numc({length: 3, qualifiedName: \"sy-msgno\"});\n    let lv_msgv1 = new abap.types.Character(50, {\"qualifiedName\":\"sy-msgv1\"});\n    let lv_msgv2 = new abap.types.Character(50, {\"qualifiedName\":\"sy-msgv2\"});\n    let lv_msgv3 = new abap.types.Character(50, {\"qualifiedName\":\"sy-msgv3\"});\n    let lv_msgv4 = new abap.types.Character(50, {\"qualifiedName\":\"sy-msgv4\"});\n    if (text.get()?.if_t100_message$t100key === undefined) { result.set(this.gc_fallback); return result; };\n    lv_msgid.set(text.get().if_t100_message$t100key.get().msgid);\n    lv_msgno.set(text.get().if_t100_message$t100key.get().msgno);\n    lv_msgv1.set(text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");\n    lv_msgv2.set(text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");\n    lv_msgv3.set(text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");\n    lv_msgv4.set(text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\").trimEnd()] ? text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\").trimEnd()].get() : \"\");\n    await abap.statements.message({into: result, id: lv_msgid, type: new abap.types.Character(1).set('I'), number: lv_msgno, with: [lv_msgv1,lv_msgv2,lv_msgv3,lv_msgv4]});\n    return result;\n  }\n  async set_msg_vars_for_if_msg(INPUT) {\n    return cl_message_helper.set_msg_vars_for_if_msg(INPUT);\n  }\n  static async set_msg_vars_for_if_msg(INPUT) {\n    let text = new abap.types.ABAPObject({qualifiedName: \"IF_MESSAGE\"});\n    if (INPUT && INPUT.text) {text.set(INPUT.text);}\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.string) {string = INPUT.string;}\n    if (abap.compare.initial(text)) {\n      throw await (new abap.Classes['CX_SY_MESSAGE_ILLEGAL_TEXT']()).constructor_();\n    }\n    string.set((await this.get_text_for_message({text: text})));\n    if (abap.compare.ne(string, cl_message_helper.gc_fallback)) {\n      abap.statements.clear(abap.builtin.sy.get().msgty);\n      return;\n    }\n    string.set((await text.get().if_message$get_text()));\n    if (abap.compare.initial(string)) {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n    await this.set_msg_vars_for_clike({text: string});\n  }\n  async set_msg_vars_for_clike(INPUT) {\n    return cl_message_helper.set_msg_vars_for_clike(INPUT);\n  }\n  static async set_msg_vars_for_clike(INPUT) {\n    let text = new abap.types.Character();\n    if (INPUT && INPUT.text) {text = INPUT.text;}\n    abap.builtin.sy.get().msgid.set(new abap.types.Character(2).set('00'));\n    abap.builtin.sy.get().msgno.set(new abap.types.Character(3).set('001'));\n    abap.builtin.sy.get().msgv1.set(text);\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), new abap.types.Integer().set(50))) {\n      abap.builtin.sy.get().msgv2.set(text.getOffset({offset: 50}));\n    }\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), new abap.types.Integer().set(100))) {\n      abap.builtin.sy.get().msgv3.set(text.getOffset({offset: 100}));\n    }\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), new abap.types.Integer().set(150))) {\n      abap.builtin.sy.get().msgv4.set(text.getOffset({offset: 150}));\n    }\n  }\n}\nabap.Classes['CL_MESSAGE_HELPER'] = cl_message_helper;\ncl_message_helper.gc_fallback = new abap.types.String({qualifiedName: \"STRING\"});\ncl_message_helper.gc_fallback.set('An exception was raised.');\n\n//# sourceMappingURL=cl_message_helper.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_message_helper.clas.mjs?");

/***/ }),

/***/ "./output/cl_mime_repository_api.clas.mjs":
/*!************************************************!*\
  !*** ./output/cl_mime_repository_api.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_mime_repository_api\": () => (/* binding */ cl_mime_repository_api)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_mime_repository_api.clas.abap\nclass cl_mime_repository_api {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MR_API\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.get_api = this.if_mr_api$get_api;\n    return this;\n  }\n  async if_mr_api$get_api(INPUT) {\n    return cl_mime_repository_api.if_mr_api$get_api(INPUT);\n  }\n  static async if_mr_api$get_api(INPUT) {\n    let r_mr_api = new abap.types.ABAPObject({qualifiedName: \"IF_MR_API\"});\n    let i_prefix = new abap.types.Character();\n    if (INPUT && INPUT.i_prefix) {i_prefix = INPUT.i_prefix;}\n    if (INPUT === undefined || INPUT.i_prefix === undefined) {i_prefix = abap.builtin.space;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return r_mr_api;\n  }\n  async if_mr_api$get(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let e_is_folder = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.e_is_folder) {e_is_folder = INPUT.e_is_folder;}\n    let e_content = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.e_content) {e_content = INPUT.e_content;}\n    let e_mime_type = new abap.types.Character();\n    if (INPUT && INPUT.e_mime_type) {e_mime_type = INPUT.e_mime_type;}\n    let e_loio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.e_loio) {e_loio = INPUT.e_loio;}\n    let c_language = new abap.types.Character(1, {\"qualifiedName\":\"LANGU\",\"ddicName\":\"LANGU\"});\n    if (INPUT && INPUT.c_language) {c_language = INPUT.c_language;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$create_folder(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_language = new abap.types.Character(1, {\"qualifiedName\":\"LANGU\",\"ddicName\":\"LANGU\"});\n    if (INPUT && INPUT.i_language) {i_language.set(INPUT.i_language);}\n    if (INPUT === undefined || INPUT.i_language === undefined) {i_language = abap.builtin.sy.get().langu;}\n    let i_description = new abap.types.Character();\n    if (INPUT && INPUT.i_description) {i_description = INPUT.i_description;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let i_suppress_package_dialog = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_suppress_package_dialog) {i_suppress_package_dialog.set(INPUT.i_suppress_package_dialog);}\n    if (INPUT === undefined || INPUT.i_suppress_package_dialog === undefined) {i_suppress_package_dialog = abap.builtin.space;}\n    let i_dev_package = new abap.types.Character(30, {\"qualifiedName\":\"DEVCLASS\",\"ddicName\":\"DEVCLASS\"});\n    if (INPUT && INPUT.i_dev_package) {i_dev_package.set(INPUT.i_dev_package);}\n    let i_genflag = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_genflag) {i_genflag.set(INPUT.i_genflag);}\n    if (INPUT === undefined || INPUT.i_genflag === undefined) {i_genflag = abap.builtin.abap_false;}\n    let i_corr_number = new abap.types.Character(20, {\"qualifiedName\":\"TRKORR\",\"ddicName\":\"TRKORR\"});\n    if (INPUT && INPUT.i_corr_number) {i_corr_number.set(INPUT.i_corr_number);}\n    let i_folder_loio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.i_folder_loio) {i_folder_loio.set(INPUT.i_folder_loio);}\n    let i_suppress_dialogs = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_suppress_dialogs) {i_suppress_dialogs.set(INPUT.i_suppress_dialogs);}\n    let e_folder_io = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.e_folder_io) {e_folder_io = INPUT.e_folder_io;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$put(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_content = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.i_content) {i_content.set(INPUT.i_content);}\n    let i_language = new abap.types.Character(1, {\"qualifiedName\":\"LANGU\",\"ddicName\":\"LANGU\"});\n    if (INPUT && INPUT.i_language) {i_language.set(INPUT.i_language);}\n    if (INPUT === undefined || INPUT.i_language === undefined) {i_language = abap.builtin.sy.get().langu;}\n    let i_description = new abap.types.Character();\n    if (INPUT && INPUT.i_description) {i_description = INPUT.i_description;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let i_suppress_package_dialog = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_suppress_package_dialog) {i_suppress_package_dialog.set(INPUT.i_suppress_package_dialog);}\n    if (INPUT === undefined || INPUT.i_suppress_package_dialog === undefined) {i_suppress_package_dialog = abap.builtin.space;}\n    let i_dev_package = new abap.types.Character(30, {\"qualifiedName\":\"DEVCLASS\",\"ddicName\":\"DEVCLASS\"});\n    if (INPUT && INPUT.i_dev_package) {i_dev_package.set(INPUT.i_dev_package);}\n    let i_genflag = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_genflag) {i_genflag.set(INPUT.i_genflag);}\n    if (INPUT === undefined || INPUT.i_genflag === undefined) {i_genflag = abap.builtin.abap_false;}\n    let i_corr_number = new abap.types.Character(20, {\"qualifiedName\":\"TRKORR\",\"ddicName\":\"TRKORR\"});\n    if (INPUT && INPUT.i_corr_number) {i_corr_number.set(INPUT.i_corr_number);}\n    let i_new_loio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.i_new_loio) {i_new_loio.set(INPUT.i_new_loio);}\n    let i_suppress_dialogs = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_suppress_dialogs) {i_suppress_dialogs.set(INPUT.i_suppress_dialogs);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$delete(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_delete_children = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_delete_children) {i_delete_children.set(INPUT.i_delete_children);}\n    if (INPUT === undefined || INPUT.i_delete_children === undefined) {i_delete_children = abap.builtin.abap_false;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let i_corr_number = new abap.types.Character(20, {\"qualifiedName\":\"TRKORR\",\"ddicName\":\"TRKORR\"});\n    if (INPUT && INPUT.i_corr_number) {i_corr_number.set(INPUT.i_corr_number);}\n    let i_suppress_dialogs = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_suppress_dialogs) {i_suppress_dialogs.set(INPUT.i_suppress_dialogs);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$file_list(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_recursive_call = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_recursive_call) {i_recursive_call.set(INPUT.i_recursive_call);}\n    if (INPUT === undefined || INPUT.i_recursive_call === undefined) {i_recursive_call = abap.builtin.abap_false;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let e_files = abap.types.TableFactory.construct(new abap.types.String(), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STRING_TABLE\");\n    if (INPUT && INPUT.e_files) {e_files = INPUT.e_files;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$properties(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let i_check_authority = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_check_authority) {i_check_authority.set(INPUT.i_check_authority);}\n    if (INPUT === undefined || INPUT.i_check_authority === undefined) {i_check_authority = abap.builtin.abap_true;}\n    let e_is_folder = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.e_is_folder) {e_is_folder = INPUT.e_is_folder;}\n    let e_mime_type = new abap.types.Character();\n    if (INPUT && INPUT.e_mime_type) {e_mime_type = INPUT.e_mime_type;}\n    let e_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.e_name) {e_name = INPUT.e_name;}\n    let e_size = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.e_size) {e_size = INPUT.e_size;}\n    let e_bin_data = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.e_bin_data) {e_bin_data = INPUT.e_bin_data;}\n    let e_loio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.e_loio) {e_loio = INPUT.e_loio;}\n    let e_phio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.e_phio) {e_phio = INPUT.e_phio;}\n    let e_language = new abap.types.Character(1, {\"qualifiedName\":\"LANGU\",\"ddicName\":\"LANGU\"});\n    if (INPUT && INPUT.e_language) {e_language = INPUT.e_language;}\n    let e_phio_last_changed = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.e_phio_last_changed) {e_phio_last_changed = INPUT.e_phio_last_changed;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async if_mr_api$get_io_for_url(INPUT) {\n    let i_url = new abap.types.Character();\n    if (INPUT && INPUT.i_url) {i_url = INPUT.i_url;}\n    let e_is_folder = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.e_is_folder) {e_is_folder = INPUT.e_is_folder;}\n    let e_loio = new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\");\n    if (INPUT && INPUT.e_loio) {e_loio = INPUT.e_loio;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_MIME_REPOSITORY_API'] = cl_mime_repository_api;\n\n//# sourceMappingURL=cl_mime_repository_api.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_mime_repository_api.clas.mjs?");

/***/ }),

/***/ "./output/cl_numberrange_runtime.clas.mjs":
/*!************************************************!*\
  !*** ./output/cl_numberrange_runtime.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_numberrange_runtime\": () => (/* binding */ cl_numberrange_runtime)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_numberrange_runtime.clas.abap\nclass cl_numberrange_runtime {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async number_get(INPUT) {\n    return cl_numberrange_runtime.number_get(INPUT);\n  }\n  static async number_get(INPUT) {\n    let nr_range_nr = new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"});\n    if (INPUT && INPUT.nr_range_nr) {nr_range_nr.set(INPUT.nr_range_nr);}\n    let object = new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"});\n    if (INPUT && INPUT.object) {object.set(INPUT.object);}\n    let number = new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"});\n    if (INPUT && INPUT.number) {number = INPUT.number;}\n    await abap.FunctionModules['NUMBER_GET_NEXT']({exporting: {nr_range_nr: nr_range_nr, object: object}, importing: {number: number}});\n    if (abap.compare.ne(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      return;\n    }\n  }\n}\nabap.Classes['CL_NUMBERRANGE_RUNTIME'] = cl_numberrange_runtime;\ncl_numberrange_runtime.nr_interval = new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"});\ncl_numberrange_runtime.nr_object = new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"});\ncl_numberrange_runtime.nr_number = new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"});\n\n//# sourceMappingURL=cl_numberrange_runtime.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_numberrange_runtime.clas.mjs?");

/***/ }),

/***/ "./output/cl_oo_factory.clas.mjs":
/*!***************************************!*\
  !*** ./output/cl_oo_factory.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_oo_factory\": () => (/* binding */ cl_oo_factory)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_oo_factory.clas.abap\nclass cl_oo_factory {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_OO_CLIF_SOURCE\"];\n  static ATTRIBUTES = {\"MV_NAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    return this;\n  }\n  async create_instance() {\n    return cl_oo_factory.create_instance();\n  }\n  static async create_instance() {\n    let result = new abap.types.ABAPObject({qualifiedName: \"CL_OO_FACTORY\"});\n    result.set(await (new abap.Classes['CL_OO_FACTORY']()).constructor_());\n    return result;\n  }\n  async create_clif_source(INPUT) {\n    let result = new abap.types.ABAPObject({qualifiedName: \"IF_OO_CLIF_SOURCE\"});\n    let clif_name = new abap.types.Character();\n    if (INPUT && INPUT.clif_name) {clif_name = INPUT.clif_name;}\n    result.set(this.me);\n    this.mv_name.set(abap.builtin.to_upper({val: clif_name}));\n    return result;\n  }\n  async if_oo_clif_source$get_source(INPUT) {\n    let source = abap.types.TableFactory.construct(new abap.types.String(), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STRING_TABLE\");\n    if (INPUT && INPUT.source) {source = INPUT.source;}\n    let ls_data = new abap.types.Structure({\"progname\": new abap.types.Character(40, {}), \"data\": new abap.types.String(), \"unam\": new abap.types.Character(12, {}), \"udat\": new abap.types.Date(), \"utime\": new abap.types.Time()}, \"REPOSRC\", \"REPOSRC\");\n    await abap.statements.select(ls_data, {select: \"SELECT * FROM reposrc WHERE progname = '\" + this.mv_name.get() + \"' UP TO 1 ROWS\", primaryKey: [\"progname\"]});\n    abap.statements.split({source: ls_data.get().data, at: new abap.types.String().set(`\\n`), table: source});\n  }\n}\nabap.Classes['CL_OO_FACTORY'] = cl_oo_factory;\n\n//# sourceMappingURL=cl_oo_factory.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_oo_factory.clas.mjs?");

/***/ }),

/***/ "./output/cl_progress_indicator.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cl_progress_indicator.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_progress_indicator\": () => (/* binding */ cl_progress_indicator)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_progress_indicator.clas.abap\nclass cl_progress_indicator {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async progress_indicate(INPUT) {\n    return cl_progress_indicator.progress_indicate(INPUT);\n  }\n  static async progress_indicate(INPUT) {\n    let i_text = new abap.types.Character(4);\n    if (INPUT && INPUT.i_text) {i_text = INPUT.i_text;}\n    let i_processed = new abap.types.Integer();\n    if (INPUT && INPUT.i_processed) {i_processed.set(INPUT.i_processed);}\n    let i_total = new abap.types.Integer();\n    if (INPUT && INPUT.i_total) {i_total.set(INPUT.i_total);}\n    let i_output_immediately = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.i_output_immediately) {i_output_immediately.set(INPUT.i_output_immediately);}\n    let e_progress_sent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.e_progress_sent) {e_progress_sent = INPUT.e_progress_sent;}\n    return;\n  }\n}\nabap.Classes['CL_PROGRESS_INDICATOR'] = cl_progress_indicator;\n\n//# sourceMappingURL=cl_progress_indicator.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_progress_indicator.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_aggregations.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cl_salv_aggregations.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_aggregations\": () => (/* binding */ cl_salv_aggregations)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_aggregations.clas.abap\nclass cl_salv_aggregations {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CL_SALV_AGGREGATIONS'] = cl_salv_aggregations;\n\n//# sourceMappingURL=cl_salv_aggregations.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_aggregations.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_column.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_salv_column.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_column\": () => (/* binding */ cl_salv_column)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_column.clas.abap\nclass cl_salv_column {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async set_technical(INPUT) {\n    let value = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    if (INPUT === undefined || INPUT.value === undefined) {value = abap.builtin.abap_true;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_short_text(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_medium_text(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_long_text(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_SALV_COLUMN'] = cl_salv_column;\n\n//# sourceMappingURL=cl_salv_column.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_column.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_columns_table.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cl_salv_columns_table.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_columns_table\": () => (/* binding */ cl_salv_columns_table)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_columns_table.clas.abap\nclass cl_salv_columns_table {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async get_column(INPUT) {\n    let value = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_COLUMN\"});\n    let columnname = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.columnname) {columnname.set(INPUT.columnname);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async set_cell_type_column(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_optimize(INPUT) {\n    let value = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    if (INPUT === undefined || INPUT.value === undefined) {value = abap.builtin.abap_true;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async get() {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async set_color_column(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n}\nabap.Classes['CL_SALV_COLUMNS_TABLE'] = cl_salv_columns_table;\n\n//# sourceMappingURL=cl_salv_columns_table.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_columns_table.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_events_table.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cl_salv_events_table.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_events_table\": () => (/* binding */ cl_salv_events_table)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_events_table.clas.abap\nclass cl_salv_events_table {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CL_SALV_EVENTS_TABLE'] = cl_salv_events_table;\n\n//# sourceMappingURL=cl_salv_events_table.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_events_table.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_filters.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cl_salv_filters.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_filters\": () => (/* binding */ cl_salv_filters)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_filters.clas.abap\nclass cl_salv_filters {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CL_SALV_FILTERS'] = cl_salv_filters;\n\n//# sourceMappingURL=cl_salv_filters.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_filters.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_functions_list.clas.mjs":
/*!************************************************!*\
  !*** ./output/cl_salv_functions_list.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_functions_list\": () => (/* binding */ cl_salv_functions_list)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_functions_list.clas.abap\nclass cl_salv_functions_list {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async set_all(INPUT) {\n    let flag = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.flag) {flag.set(INPUT.flag);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async get_functions() {\n    let sdf = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return sdf;\n  }\n}\nabap.Classes['CL_SALV_FUNCTIONS_LIST'] = cl_salv_functions_list;\n\n//# sourceMappingURL=cl_salv_functions_list.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_functions_list.clas.mjs?");

/***/ }),

/***/ "./output/cl_salv_table.clas.mjs":
/*!***************************************!*\
  !*** ./output/cl_salv_table.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_table\": () => (/* binding */ cl_salv_table)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_table.clas.abap\nclass cl_salv_table {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"C_FUNCTIONS_ALL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.c_functions_all = cl_salv_table.c_functions_all;\n    return this;\n  }\n  async set_selected_rows(INPUT) {\n    let val = new abap.types.Character(4);\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async get_filters() {\n    let foo = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_FILTERS\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return foo;\n  }\n  async get_aggregations() {\n    let value = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_AGGREGATIONS\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async get_functions() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_FUNCTIONS_LIST\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return val;\n  }\n  async get_selected_rows() {\n    let rows = abap.types.TableFactory.construct(new abap.types.Integer({qualifiedName: \"I\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_salv_table=>ty_rows\");\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rows;\n  }\n  async get_metadata() {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_selection_mode(INPUT) {\n    let val = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.val) {val.set(INPUT.val);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_striped_pattern(INPUT) {\n    let val = new abap.types.Character(4);\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_list_header(INPUT) {\n    let val = new abap.types.Character(4);\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async factory(INPUT) {\n    return cl_salv_table.factory(INPUT);\n  }\n  static async factory(INPUT) {\n    let r_container = new abap.types.Character(4);\n    if (INPUT && INPUT.r_container) {r_container = INPUT.r_container;}\n    let r_salv_table = new abap.types.Character(4);\n    if (INPUT && INPUT.r_salv_table) {r_salv_table = INPUT.r_salv_table;}\n    let t_table = new abap.types.Character(4);\n    if (INPUT && INPUT.t_table) {t_table = INPUT.t_table;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async is_offline() {\n    let value = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return value;\n  }\n  async get_selections() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_TABLE\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return val;\n  }\n  async close_screen() {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async refresh() {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async display() {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async set_screen_status(INPUT) {\n    let pfstatus = new abap.types.Character(4);\n    if (INPUT && INPUT.pfstatus) {pfstatus = INPUT.pfstatus;}\n    let set_functions = new abap.types.Character(4);\n    if (INPUT && INPUT.set_functions) {set_functions = INPUT.set_functions;}\n    let report = new abap.types.Character(4);\n    if (INPUT && INPUT.report) {report = INPUT.report;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n  }\n  async set_screen_popup(INPUT) {\n    let start_column = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.start_column) {start_column.set(INPUT.start_column);}\n    let end_column = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.end_column) {end_column.set(INPUT.end_column);}\n    let start_line = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.start_line) {start_line.set(INPUT.start_line);}\n    let end_line = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.end_line) {end_line.set(INPUT.end_line);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n  }\n  async get_event() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_EVENTS_TABLE\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n    return val;\n  }\n  async get_display_settings() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_TABLE\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n    return val;\n  }\n  async set_top_of_list(INPUT) {\n    let val = new abap.types.Character(4);\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n  }\n  async get_columns() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_COLUMNS_TABLE\"});\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('TODO')));\n    return val;\n  }\n}\nabap.Classes['CL_SALV_TABLE'] = cl_salv_table;\ncl_salv_table.c_functions_all = new abap.types.Integer({qualifiedName: \"I\"});\ncl_salv_table.c_functions_all.set(1);\ncl_salv_table.ty_rows = abap.types.TableFactory.construct(new abap.types.Integer({qualifiedName: \"I\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"cl_salv_table=>ty_rows\");\n\n//# sourceMappingURL=cl_salv_table.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_table.clas.mjs?");

/***/ }),

/***/ "./output/cl_shm_area.clas.mjs":
/*!*************************************!*\
  !*** ./output/cl_shm_area.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_shm_area\": () => (/* binding */ cl_shm_area)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_shm_area.clas.abap\nclass cl_shm_area extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"MO_ROOT\": {\"type\": () => {return new abap.types.ABAPObject();}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"PROPERTIES\": {\"type\": () => {return new abap.types.Structure({\"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHM_PROPERTIES\", \"SHM_PROPERTIES\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"INST_NAME\": {\"type\": () => {return new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"CLIENT\": {\"type\": () => {return new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"INST_TRACE_ACTIVE\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"INST_TRACE_SERVICE\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_SHM_TRACE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"_LOCK\": {\"type\": () => {return new abap.types.Hex({length: 8});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"DEFAULT_INSTANCE\": {\"type\": () => {return new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"INVOCATION_MODE_EXPLICIT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_CONSTR_INVOCATION_MODE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"LIFE_CONTEXT_APPSERVER\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ATTACH_MODE_DEFAULT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ATTACH_MODE_WAIT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"AFFECT_LOCAL_SERVER\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ATTACH_MODE_WAIT_2ND_TRY\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.properties = new abap.types.Structure({\"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHM_PROPERTIES\", \"SHM_PROPERTIES\");\n    this.inst_name = new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});\n    this.client = new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"});\n    this.inst_trace_active = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    this.inst_trace_active.set(' ');\n    this.inst_trace_service = new abap.types.ABAPObject({qualifiedName: \"IF_SHM_TRACE\"});\n    this._lock = new abap.types.Hex({length: 8});\n    this.default_instance = cl_shm_area.default_instance;\n    this.invocation_mode_explicit = cl_shm_area.invocation_mode_explicit;\n    this.life_context_appserver = cl_shm_area.life_context_appserver;\n    this.attach_mode_default = cl_shm_area.attach_mode_default;\n    this.attach_mode_wait = cl_shm_area.attach_mode_wait;\n    this.affect_local_server = cl_shm_area.affect_local_server;\n    this.attach_mode_wait_2nd_try = cl_shm_area.attach_mode_wait_2nd_try;\n    return this;\n  }\n  async is_valid() {\n    let valid = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    valid.set(abap.builtin.abap_true);\n    return valid;\n  }\n  async _free_instance71(INPUT) {\n    return cl_shm_area._free_instance71(INPUT);\n  }\n  static async _free_instance71(INPUT) {\n    let rc = new abap.types.Integer({qualifiedName: \"SHM_RC\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let inst_name = new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});\n    if (INPUT && INPUT.inst_name) {inst_name.set(INPUT.inst_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async detach_commit() {\n    return;\n  }\n  async detach() {\n    return;\n  }\n  async _attach_read71(INPUT) {\n    let sneak_mode = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.sneak_mode) {sneak_mode.set(INPUT.sneak_mode);}\n    if (INPUT === undefined || INPUT.sneak_mode === undefined) {sneak_mode = abap.builtin.abap_false;}\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    let created = new abap.types.ABAPObject();\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.eq(sneak_mode, abap.builtin.abap_false) && abap.compare.initial(cl_shm_area.mo_root)) {\n      lv_name.set(area_name);\n      abap.statements.replace({target: lv_name, all: false, with: new abap.types.Character(5).set('_ROOT'), of: new abap.types.Character(5).set('_AREA')});\n      if (abap.Classes[lv_name.get()] === undefined) { throw new abap.Classes['CX_SY_CREATE_OBJECT_ERROR']; }\n      created.set(await (new abap.Classes[lv_name.get()]()).constructor_());\n      await this._set_root({root: created});\n    }\n    root.set(cl_shm_area.mo_root);\n  }\n  async _get_instance_infos71(INPUT) {\n    return cl_shm_area._get_instance_infos71(INPUT);\n  }\n  static async _get_instance_infos71(INPUT) {\n    let infos = abap.types.TableFactory.construct(new abap.types.Structure({\"client\": new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"}), \"name\": new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"})}, \"SHM_INST_INFO\", \"SHM_INST_INFO\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SHM_INST_INFOS\");\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return infos;\n  }\n  async _detach_area71(INPUT) {\n    return cl_shm_area._detach_area71(INPUT);\n  }\n  static async _detach_area71(INPUT) {\n    let rc = new abap.types.Integer({qualifiedName: \"SHM_RC\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async _free_area71(INPUT) {\n    return cl_shm_area._free_area71(INPUT);\n  }\n  static async _free_area71(INPUT) {\n    let rc = new abap.types.Integer({qualifiedName: \"SHM_RC\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async _set_root(INPUT) {\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root.set(INPUT.root);}\n    cl_shm_area.mo_root.set(root);\n  }\n  async _invalidate_instance71(INPUT) {\n    return cl_shm_area._invalidate_instance71(INPUT);\n  }\n  static async _invalidate_instance71(INPUT) {\n    let rc = new abap.types.Integer({qualifiedName: \"SHM_RC\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let inst_name = new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});\n    if (INPUT && INPUT.inst_name) {inst_name.set(INPUT.inst_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async _invalidate_area71(INPUT) {\n    return cl_shm_area._invalidate_area71(INPUT);\n  }\n  static async _invalidate_area71(INPUT) {\n    let rc = new abap.types.Integer({qualifiedName: \"SHM_RC\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let client_supplied = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_supplied) {client_supplied.set(INPUT.client_supplied);}\n    if (INPUT === undefined || INPUT.client_supplied === undefined) {client_supplied = abap.builtin.abap_false;}\n    let transactional = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.transactional) {transactional.set(INPUT.transactional);}\n    if (INPUT === undefined || INPUT.transactional === undefined) {transactional = abap.builtin.abap_false;}\n    let client_dependent = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.client_dependent) {client_dependent.set(INPUT.client_dependent);}\n    if (INPUT === undefined || INPUT.client_dependent === undefined) {client_dependent = abap.builtin.abap_false;}\n    let terminate_changer = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.terminate_changer) {terminate_changer.set(INPUT.terminate_changer);}\n    let affect_server = new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});\n    if (INPUT && INPUT.affect_server) {affect_server.set(INPUT.affect_server);}\n    let life_context = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\n    if (INPUT && INPUT.life_context) {life_context.set(INPUT.life_context);}\n    if (INPUT === undefined || INPUT.life_context === undefined) {life_context = this.life_context_appserver;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return rc;\n  }\n  async _attach_update70(INPUT) {\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let mode = new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});\n    if (INPUT && INPUT.mode) {mode.set(INPUT.mode);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    let wait_time = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.wait_time) {wait_time = INPUT.wait_time;}\n    let created = new abap.types.ABAPObject();\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.initial(cl_shm_area.mo_root)) {\n      abap.statements.replace({target: lv_name, all: false, with: new abap.types.Character(5).set('_ROOT'), of: new abap.types.Character(5).set('_AREA')});\n      if (abap.Classes[lv_name.get()] === undefined) { throw new abap.Classes['CX_SY_CREATE_OBJECT_ERROR']; }\n      created.set(await (new abap.Classes[lv_name.get()]()).constructor_());\n      await this._set_root({root: created});\n    }\n    root.set(cl_shm_area.mo_root);\n  }\n  async _attach_write70(INPUT) {\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let mode = new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});\n    if (INPUT && INPUT.mode) {mode.set(INPUT.mode);}\n    let root = new abap.types.ABAPObject();\n    if (INPUT && INPUT.root) {root = INPUT.root;}\n    let wait_time = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.wait_time) {wait_time = INPUT.wait_time;}\n    return;\n  }\n}\nabap.Classes['CL_SHM_AREA'] = cl_shm_area;\ncl_shm_area.mo_root = new abap.types.ABAPObject();\ncl_shm_area.default_instance = new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"});\ncl_shm_area.default_instance.set('$DEFAULT_INSTANCE$');\ncl_shm_area.invocation_mode_explicit = new abap.types.Integer({qualifiedName: \"SHM_CONSTR_INVOCATION_MODE\"});\ncl_shm_area.invocation_mode_explicit.set(319200300);\ncl_shm_area.life_context_appserver = new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"});\ncl_shm_area.life_context_appserver.set(109200001);\ncl_shm_area.attach_mode_default = new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});\ncl_shm_area.attach_mode_default.set(1302197000);\ncl_shm_area.attach_mode_wait = new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});\ncl_shm_area.attach_mode_wait.set(1302197002);\ncl_shm_area.affect_local_server = new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"});\ncl_shm_area.affect_local_server.set(281119720);\ncl_shm_area.attach_mode_wait_2nd_try = new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"});\ncl_shm_area.attach_mode_wait_2nd_try.set(1302197003);\n\n//# sourceMappingURL=cl_shm_area.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_shm_area.clas.mjs?");

/***/ }),

/***/ "./output/cl_shm_service.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_shm_service.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_shm_service\": () => (/* binding */ cl_shm_service)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_shm_service.clas.abap\nclass cl_shm_service {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async initialize(INPUT) {\n    return cl_shm_service.initialize(INPUT);\n  }\n  static async initialize(INPUT) {\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character(3, {\"qualifiedName\":\"SHMA_CLIENT\",\"ddicName\":\"SHMA_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let attributes = new abap.types.Structure({\"area_name\": new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"}), \"properties\": new abap.types.Structure({\"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHM_PROPERTIES\", \"SHM_PROPERTIES\"), \"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHMA_ATTRIBUTES\", \"SHMA_ATTRIBUTES\");\n    if (INPUT && INPUT.attributes) {attributes = INPUT.attributes;}\n    return;\n  }\n  async get_auto_build_class_name(INPUT) {\n    return cl_shm_service.get_auto_build_class_name(INPUT);\n  }\n  static async get_auto_build_class_name(INPUT) {\n    let auto_build_class_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AUTO_BUILD_CLASS_NAME\",\"ddicName\":\"SHM_AUTO_BUILD_CLASS_NAME\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return auto_build_class_name;\n  }\n  async trace_get_service(INPUT) {\n    return cl_shm_service.trace_get_service(INPUT);\n  }\n  static async trace_get_service(INPUT) {\n    let trace_service = new abap.types.ABAPObject({qualifiedName: \"IF_SHM_TRACE\"});\n    let area_name = new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    return trace_service;\n    return trace_service;\n  }\n  async trace_is_variant_active(INPUT) {\n    return cl_shm_service.trace_is_variant_active(INPUT);\n  }\n  static async trace_is_variant_active(INPUT) {\n    let is_active = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let service_name = new abap.types.Character(32, {\"qualifiedName\":\"SHMM_TRC_VARIANT_NAME\",\"ddicName\":\"SHMM_TRC_VARIANT_NAME\"});\n    if (INPUT && INPUT.service_name) {service_name.set(INPUT.service_name);}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    return is_active;\n  }\n}\nabap.Classes['CL_SHM_SERVICE'] = cl_shm_service;\n\n//# sourceMappingURL=cl_shm_service.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_shm_service.clas.mjs?");

/***/ }),

/***/ "./output/cl_sxml_string_reader.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cl_sxml_string_reader.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_sxml_string_reader\": () => (/* binding */ cl_sxml_string_reader)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_sxml_string_reader_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_sxml_string_reader.clas.locals.mjs */ \"./output/cl_sxml_string_reader.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_sxml_string_reader.clas.abap\nclass cl_sxml_string_reader {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async create(INPUT) {\n    return cl_sxml_string_reader.create(INPUT);\n  }\n  static async create(INPUT) {\n    let reader = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_READER\"});\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    reader.set(await (new abap.Classes['CLAS-CL_SXML_STRING_READER-LCL_READER']()).constructor_({iv_json: (await abap.Classes['CL_ABAP_CODEPAGE'].convert_from({source: data}))}));\n    return reader;\n  }\n}\nabap.Classes['CL_SXML_STRING_READER'] = cl_sxml_string_reader;\n\n//# sourceMappingURL=cl_sxml_string_reader.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_sxml_string_reader.clas.mjs?");

/***/ }),

/***/ "./output/cl_sxml_string_writer.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cl_sxml_string_writer.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_sxml_string_writer\": () => (/* binding */ cl_sxml_string_writer)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_sxml_string_writer.clas.abap\nclass cl_sxml_string_writer {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_SXML_WRITER\"];\n  static ATTRIBUTES = {\"MV_OUTPUT\": {\"type\": () => {return new abap.types.XString({qualifiedName: \"XSTRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MV_TYPE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MT_STACK\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_output = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    this.mv_type = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\n    this.mt_stack = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    this.if_sxml_writer$co_opt_normalizing = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_normalizing;\n    this.if_sxml_writer$co_opt_no_empty = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_no_empty;\n    this.if_sxml_writer$co_opt_ignore_conv_errros = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_ignore_conv_errros;\n    this.if_sxml_writer$co_opt_linebreaks = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_linebreaks;\n    this.if_sxml_writer$co_opt_indent = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_indent;\n    this.if_sxml_writer$co_opt_illegal_char_reject = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_illegal_char_reject;\n    this.if_sxml_writer$co_opt_illegal_char_replace = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_illegal_char_replace;\n    this.if_sxml_writer$co_opt_illegal_char_replace_by = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_illegal_char_replace_by;\n    this.if_sxml_writer$co_opt_base64_no_lf = abap.Classes['IF_SXML_WRITER'].if_sxml_writer$co_opt_base64_no_lf;\n    let type = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\n    if (INPUT && INPUT.type) {type.set(INPUT.type);}\n    this.mv_type.set(type);\n    return this;\n  }\n  async create(INPUT) {\n    return cl_sxml_string_writer.create(INPUT);\n  }\n  static async create(INPUT) {\n    let writer = new abap.types.ABAPObject({qualifiedName: \"CL_SXML_STRING_WRITER\"});\n    let type = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\n    if (INPUT && INPUT.type) {type.set(INPUT.type);}\n    if (INPUT === undefined || INPUT.type === undefined) {type = abap.Classes['IF_SXML'].if_sxml$co_xt_xml10;}\n    let ignore_conversion_errors = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.ignore_conversion_errors) {ignore_conversion_errors.set(INPUT.ignore_conversion_errors);}\n    if (INPUT === undefined || INPUT.ignore_conversion_errors === undefined) {ignore_conversion_errors = abap.builtin.abap_false;}\n    let normalizing = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.normalizing) {normalizing.set(INPUT.normalizing);}\n    if (INPUT === undefined || INPUT.normalizing === undefined) {normalizing = abap.builtin.abap_false;}\n    let no_empty_elements = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.no_empty_elements) {no_empty_elements.set(INPUT.no_empty_elements);}\n    if (INPUT === undefined || INPUT.no_empty_elements === undefined) {no_empty_elements = abap.builtin.abap_false;}\n    let encoding = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.encoding) {encoding.set(INPUT.encoding);}\n    if (INPUT === undefined || INPUT.encoding === undefined) {encoding = new abap.types.Character(5).set('UTF-8');}\n    writer.set(await (new abap.Classes['CL_SXML_STRING_WRITER']()).constructor_({type: type}));\n    return writer;\n  }\n  async if_sxml_writer$set_option(INPUT) {\n    let option = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.option) {option.set(INPUT.option);}\n    let value = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    if (INPUT === undefined || INPUT.value === undefined) {value = abap.builtin.abap_true;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  async get_output() {\n    let output = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    output.set(this.mv_output);\n    return output;\n  }\n  async append_text(INPUT) {\n    let text = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.text) {text.set(INPUT.text);}\n    let append = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    append.set((await (await abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_out()).get().if_abap_conv_out$convert({source: text})));\n    abap.statements.concatenate({source: [this.mv_output, append], target: this.mv_output});\n  }\n  async get_text() {\n    let text = new abap.types.String({qualifiedName: \"STRING\"});\n    text.set((await (await abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_in()).get().if_abap_conv_in$convert({source: this.mv_output})));\n    return text;\n  }\n  async if_sxml_writer$open_element(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let nsuri = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.nsuri) {nsuri.set(INPUT.nsuri);}\n    let prefix = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.prefix) {prefix.set(INPUT.prefix);}\n    let parent = new abap.types.String({qualifiedName: \"STRING\"});\n    parent.set((await this.peek()));\n    if (abap.compare.eq(parent, new abap.types.Character(5).set('array')) && abap.compare.np((await this.get_text()), new abap.types.Character(2).set('*['))) {\n      await this.append_text({text: new abap.types.Character(1).set(',')});\n    }\n    if (abap.compare.eq(parent, new abap.types.Character(6).set('object')) && abap.compare.np((await this.get_text()), new abap.types.Character(2).set('*{'))) {\n      await this.append_text({text: new abap.types.Character(1).set(',')});\n    }\n    abap.statements.append({source: name, target: this.mt_stack});\n    let unique99 = name;\n    if (abap.compare.eq(unique99, new abap.types.Character(6).set('object'))) {\n      await this.append_text({text: new abap.types.Character(1).set('{')});\n    } else if (abap.compare.eq(unique99, new abap.types.Character(5).set('array'))) {\n      await this.append_text({text: new abap.types.Character(1).set('[')});\n    }\n  }\n  async remove() {\n    let rv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    index.set(abap.builtin.lines({val: this.mt_stack}));\n    abap.statements.readTable(this.mt_stack,{index: index,\n      into: rv_name});\n    await abap.statements.deleteInternal(this.mt_stack,{index: index});\n    return rv_name;\n  }\n  async if_sxml_writer$close_element() {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    name.set((await this.remove()));\n    let unique100 = name;\n    if (abap.compare.eq(unique100, new abap.types.Character(6).set('object'))) {\n      await this.append_text({text: new abap.types.Character(1).set('}')});\n    } else if (abap.compare.eq(unique100, new abap.types.Character(5).set('array'))) {\n      await this.append_text({text: new abap.types.Character(1).set(']')});\n    }\n  }\n  async if_sxml_writer$write_attribute(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let nsuri = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.nsuri) {nsuri.set(INPUT.nsuri);}\n    let prefix = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.prefix) {prefix.set(INPUT.prefix);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    await this.append_text({text: new abap.types.Character(1).set('\"')});\n    await this.append_text({text: value});\n    await this.append_text({text: new abap.types.Character(2).set('\":')});\n  }\n  async peek() {\n    let rv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    index.set(abap.builtin.lines({val: this.mt_stack}));\n    abap.statements.readTable(this.mt_stack,{index: index,\n      into: rv_name});\n    return rv_name;\n  }\n  async if_sxml_writer$write_value(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    name.set((await this.peek()));\n    let unique101 = name;\n    if (abap.compare.eq(unique101, new abap.types.Character(3).set('str'))) {\n      await this.append_text({text: new abap.types.Character(1).set('\"')});\n      await this.append_text({text: abap.builtin.condense({val: value})});\n      await this.append_text({text: new abap.types.Character(1).set('\"')});\n    } else if (abap.compare.eq(unique101, new abap.types.Character(3).set('num'))) {\n      await this.append_text({text: abap.builtin.condense({val: value})});\n    } else {\n      console.dir(name);\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(31).set('todo_if_sxml_writer_write_value')));\n    }\n  }\n}\nabap.Classes['CL_SXML_STRING_WRITER'] = cl_sxml_string_writer;\ncl_sxml_string_writer.if_sxml_writer$co_opt_normalizing = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_normalizing.set(1);\ncl_sxml_string_writer.if_sxml_writer$co_opt_no_empty = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_no_empty.set(2);\ncl_sxml_string_writer.if_sxml_writer$co_opt_ignore_conv_errros = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_ignore_conv_errros.set(3);\ncl_sxml_string_writer.if_sxml_writer$co_opt_linebreaks = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_linebreaks.set(4);\ncl_sxml_string_writer.if_sxml_writer$co_opt_indent = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_indent.set(5);\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_reject = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_reject.set(6);\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_replace = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_replace.set(7);\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_replace_by = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_illegal_char_replace_by.set(8);\ncl_sxml_string_writer.if_sxml_writer$co_opt_base64_no_lf = new abap.types.Integer({qualifiedName: \"I\"});\ncl_sxml_string_writer.if_sxml_writer$co_opt_base64_no_lf.set(9);\n\n//# sourceMappingURL=cl_sxml_string_writer.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_sxml_string_writer.clas.mjs?");

/***/ }),

/***/ "./output/cl_system_uuid.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_system_uuid.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_system_uuid\": () => (/* binding */ cl_system_uuid)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_system_uuid.clas.abap\nclass cl_system_uuid {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_SYSTEM_UUID_RFC4122_STATIC\",\"IF_SYSTEM_UUID_STATIC\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async if_system_uuid_static$create_uuid_x16() {\n    return cl_system_uuid.if_system_uuid_static$create_uuid_x16();\n  }\n  static async if_system_uuid_static$create_uuid_x16() {\n    let uuid = new abap.types.Hex({length: 16});\n    if (cl_system_uuid.CRYPTO === undefined) cl_system_uuid.CRYPTO = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_crypto-browserify_index_js\"), __webpack_require__.e(\"_d546-_8131-_3fc0-_cd53-_4068-_e7e4-_7bec-_0aec-_fbf1-_ed1b-_d17e\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"./node_modules/crypto-browserify/index.js\", 19));\n    uuid.set(cl_system_uuid.CRYPTO.randomBytes(16).toString(\"hex\").toUpperCase());\n    return uuid;\n  }\n  async if_system_uuid_rfc4122_static$create_uuid_c36_by_version(INPUT) {\n    return cl_system_uuid.if_system_uuid_rfc4122_static$create_uuid_c36_by_version(INPUT);\n  }\n  static async if_system_uuid_rfc4122_static$create_uuid_c36_by_version(INPUT) {\n    let uuid = new abap.types.Character(36, {\"qualifiedName\":\"SYSUUID_C36\",\"ddicName\":\"SYSUUID_C36\"});\n    let version = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.version) {version.set(INPUT.version);}\n    abap.statements.assert(abap.compare.eq(version, new abap.types.Integer().set(4)));\n    if (cl_system_uuid.CRYPTO === undefined) cl_system_uuid.CRYPTO = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_crypto-browserify_index_js\"), __webpack_require__.e(\"_d546-_8131-_3fc0-_cd53-_4068-_e7e4-_7bec-_0aec-_fbf1-_ed1b-_d17e\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"./node_modules/crypto-browserify/index.js\", 19));\n    uuid.set(cl_system_uuid.CRYPTO.randomUUID());\n    return uuid;\n  }\n}\nabap.Classes['CL_SYSTEM_UUID'] = cl_system_uuid;\n\n//# sourceMappingURL=cl_system_uuid.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_system_uuid.clas.mjs?");

/***/ }),

/***/ "./output/cl_web_http_utility.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cl_web_http_utility.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_web_http_utility\": () => (/* binding */ cl_web_http_utility)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_web_http_utility.clas.abap\nclass cl_web_http_utility {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async unescape_url(INPUT) {\n    return cl_web_http_utility.unescape_url(INPUT);\n  }\n  static async unescape_url(INPUT) {\n    let unescaped = new abap.types.String({qualifiedName: \"STRING\"});\n    let escaped = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.escaped) {escaped.set(INPUT.escaped);}\n    let options = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.options) {options.set(INPUT.options);}\n    unescaped.set((await abap.Classes['CL_HTTP_UTILITY'].if_http_utility$unescape_url({escaped: escaped, options: options})));\n    return unescaped;\n  }\n}\nabap.Classes['CL_WEB_HTTP_UTILITY'] = cl_web_http_utility;\n\n//# sourceMappingURL=cl_web_http_utility.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_web_http_utility.clas.mjs?");

/***/ }),

/***/ "./output/cx_abap_message_digest.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_abap_message_digest.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_abap_message_digest\": () => (/* binding */ cx_abap_message_digest)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_abap_message_digest.clas.abap\nclass cx_abap_message_digest extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_ABAP_MESSAGE_DIGEST'] = cx_abap_message_digest;\n\n//# sourceMappingURL=cx_abap_message_digest.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_abap_message_digest.clas.mjs?");

/***/ }),

/***/ "./output/cx_abap_not_a_table.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_abap_not_a_table.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_abap_not_a_table\": () => (/* binding */ cx_abap_not_a_table)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_abap_not_a_table.clas.abap\nclass cx_abap_not_a_table extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_ABAP_NOT_A_TABLE'] = cx_abap_not_a_table;\n\n//# sourceMappingURL=cx_abap_not_a_table.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_abap_not_a_table.clas.mjs?");

/***/ }),

/***/ "./output/cx_abap_not_in_package.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_abap_not_in_package.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_abap_not_in_package\": () => (/* binding */ cx_abap_not_in_package)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_abap_not_in_package.clas.abap\nclass cx_abap_not_in_package extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_ABAP_NOT_IN_PACKAGE'] = cx_abap_not_in_package;\n\n//# sourceMappingURL=cx_abap_not_in_package.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_abap_not_in_package.clas.mjs?");

/***/ }),

/***/ "./output/cx_abap_not_in_whitelist.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cx_abap_not_in_whitelist.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_abap_not_in_whitelist\": () => (/* binding */ cx_abap_not_in_whitelist)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_abap_not_in_whitelist.clas.abap\nclass cx_abap_not_in_whitelist extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_ABAP_NOT_IN_WHITELIST'] = cx_abap_not_in_whitelist;\n\n//# sourceMappingURL=cx_abap_not_in_whitelist.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_abap_not_in_whitelist.clas.mjs?");

/***/ }),

/***/ "./output/cx_abap_random.clas.mjs":
/*!****************************************!*\
  !*** ./output/cx_abap_random.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_abap_random\": () => (/* binding */ cx_abap_random)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_abap_random.clas.abap\nclass cx_abap_random extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_ABAP_RANDOM'] = cx_abap_random;\n\n//# sourceMappingURL=cx_abap_random.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_abap_random.clas.mjs?");

/***/ }),

/***/ "./output/cx_apc_error.clas.mjs":
/*!**************************************!*\
  !*** ./output/cx_apc_error.clas.mjs ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_apc_error\": () => (/* binding */ cx_apc_error)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_apc_error.clas.abap\nclass cx_apc_error extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_APC_ERROR'] = cx_apc_error;\n\n//# sourceMappingURL=cx_apc_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_apc_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_bcs.clas.mjs":
/*!********************************!*\
  !*** ./output/cx_bcs.clas.mjs ***!
  \********************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_bcs\": () => (/* binding */ cx_bcs)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_bcs.clas.abap\nclass cx_bcs extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_BCS'] = cx_bcs;\n\n//# sourceMappingURL=cx_bcs.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_bcs.clas.mjs?");

/***/ }),

/***/ "./output/cx_dynamic_check.clas.mjs":
/*!******************************************!*\
  !*** ./output/cx_dynamic_check.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_dynamic_check\": () => (/* binding */ cx_dynamic_check)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_dynamic_check.clas.abap\nclass cx_dynamic_check extends cx_root {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_DYNAMIC_CHECK'] = cx_dynamic_check;\n\n//# sourceMappingURL=cx_dynamic_check.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_dynamic_check.clas.mjs?");

/***/ }),

/***/ "./output/cx_gdt_conversion.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cx_gdt_conversion.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_gdt_conversion\": () => (/* binding */ cx_gdt_conversion)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_gdt_conversion.clas.abap\nclass cx_gdt_conversion extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_GDT_CONVERSION'] = cx_gdt_conversion;\n\n//# sourceMappingURL=cx_gdt_conversion.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_gdt_conversion.clas.mjs?");

/***/ }),

/***/ "./output/cx_no_check.clas.mjs":
/*!*************************************!*\
  !*** ./output/cx_no_check.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_no_check\": () => (/* binding */ cx_no_check)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_no_check.clas.abap\nclass cx_no_check extends cx_root {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    await super.constructor_({previous: previous});\n    return this;\n  }\n}\nabap.Classes['CX_NO_CHECK'] = cx_no_check;\n\n//# sourceMappingURL=cx_no_check.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_no_check.clas.mjs?");

/***/ }),

/***/ "./output/cx_oo_clif_not_exists.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cx_oo_clif_not_exists.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_oo_clif_not_exists\": () => (/* binding */ cx_oo_clif_not_exists)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_oo_clif_not_exists.clas.abap\nclass cx_oo_clif_not_exists extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_OO_CLIF_NOT_EXISTS'] = cx_oo_clif_not_exists;\n\n//# sourceMappingURL=cx_oo_clif_not_exists.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_oo_clif_not_exists.clas.mjs?");

/***/ }),

/***/ "./output/cx_parameter_invalid.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_parameter_invalid.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_parameter_invalid\": () => (/* binding */ cx_parameter_invalid)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_parameter_invalid.clas.abap\nclass cx_parameter_invalid extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_PARAMETER_INVALID'] = cx_parameter_invalid;\n\n//# sourceMappingURL=cx_parameter_invalid.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_parameter_invalid.clas.mjs?");

/***/ }),

/***/ "./output/cx_parameter_invalid_range.clas.mjs":
/*!****************************************************!*\
  !*** ./output/cx_parameter_invalid_range.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_parameter_invalid_range\": () => (/* binding */ cx_parameter_invalid_range)\n/* harmony export */ });\nconst {cx_parameter_invalid} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_parameter_invalid.clas.mjs */ \"./output/cx_parameter_invalid.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_parameter_invalid_range.clas.abap\nclass cx_parameter_invalid_range extends cx_parameter_invalid {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_PARAMETER_INVALID_RANGE'] = cx_parameter_invalid_range;\n\n//# sourceMappingURL=cx_parameter_invalid_range.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_parameter_invalid_range.clas.mjs?");

/***/ }),

/***/ "./output/cx_parameter_invalid_type.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_parameter_invalid_type.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_parameter_invalid_type\": () => (/* binding */ cx_parameter_invalid_type)\n/* harmony export */ });\nconst {cx_parameter_invalid} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_parameter_invalid.clas.mjs */ \"./output/cx_parameter_invalid.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_parameter_invalid_type.clas.abap\nclass cx_parameter_invalid_type extends cx_parameter_invalid {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_PARAMETER_INVALID_TYPE'] = cx_parameter_invalid_type;\n\n//# sourceMappingURL=cx_parameter_invalid_type.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_parameter_invalid_type.clas.mjs?");

/***/ }),

/***/ "./output/cx_root.clas.mjs":
/*!*********************************!*\
  !*** ./output/cx_root.clas.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_root\": () => (/* binding */ cx_root)\n/* harmony export */ });\n// cx_root.clas.abap\nclass cx_root extends Error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"PREVIOUS\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"TEXTID\": {\"type\": () => {return new abap.types.Character(32, {});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    this.textid = new abap.types.Character(32, {});\n    this.get_longtext = this.if_message$get_longtext;\n    this.get_text = this.if_message$get_text;\n    let textid = new abap.types.Character(32, {});\n    if (INPUT && INPUT.textid) {textid.set(INPUT.textid);}\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    this.me.get().previous.set(previous);\n    this.me.get().textid.set(textid);\n    return this;\n  }\n  async get_source_position(INPUT) {\n    let program_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.program_name) {program_name = INPUT.program_name;}\n    let include_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.include_name) {include_name = INPUT.include_name;}\n    let source_line = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.source_line) {source_line = INPUT.source_line;}\n    abap.statements.assert(abap.compare.eq(new abap.types.Character(4).set('todo'), new abap.types.Integer().set(1)));\n  }\n  async if_message$get_longtext(INPUT) {\n    let result = new abap.types.String({qualifiedName: \"STRING\"});\n    let preserve_newlines = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    if (INPUT && INPUT.preserve_newlines) {preserve_newlines.set(INPUT.preserve_newlines);}\n    result.set(new abap.types.Character(29).set('OpenAbapGetLongtextDummyValue'));\n    return result;\n  }\n  async if_message$get_text() {\n    let result = new abap.types.String({qualifiedName: \"STRING\"});\n    result.set((await abap.Classes['CL_MESSAGE_HELPER'].get_text_for_message({text: this.me})));\n    return result;\n  }\n}\nabap.Classes['CX_ROOT'] = cx_root;\n\n//# sourceMappingURL=cx_root.clas.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_root.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_access_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_salv_access_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_access_error\": () => (/* binding */ cx_salv_access_error)\n/* harmony export */ });\nconst {cx_salv_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_salv_static_check.clas.mjs */ \"./output/cx_salv_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_access_error.clas.abap\nclass cx_salv_access_error extends cx_salv_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_ACCESS_ERROR'] = cx_salv_access_error;\n\n//# sourceMappingURL=cx_salv_access_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_access_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_data_error.clas.mjs":
/*!********************************************!*\
  !*** ./output/cx_salv_data_error.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_data_error\": () => (/* binding */ cx_salv_data_error)\n/* harmony export */ });\nconst {cx_salv_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_salv_static_check.clas.mjs */ \"./output/cx_salv_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_data_error.clas.abap\nclass cx_salv_data_error extends cx_salv_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_DATA_ERROR'] = cx_salv_data_error;\n\n//# sourceMappingURL=cx_salv_data_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_data_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_error.clas.mjs":
/*!***************************************!*\
  !*** ./output/cx_salv_error.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_error\": () => (/* binding */ cx_salv_error)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_error.clas.abap\nclass cx_salv_error extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_ERROR'] = cx_salv_error;\n\n//# sourceMappingURL=cx_salv_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_msg.clas.mjs":
/*!*************************************!*\
  !*** ./output/cx_salv_msg.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_msg\": () => (/* binding */ cx_salv_msg)\n/* harmony export */ });\nconst {cx_salv_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_salv_error.clas.mjs */ \"./output/cx_salv_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_msg.clas.abap\nclass cx_salv_msg extends cx_salv_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_MSG'] = cx_salv_msg;\n\n//# sourceMappingURL=cx_salv_msg.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_msg.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_not_found.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cx_salv_not_found.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_not_found\": () => (/* binding */ cx_salv_not_found)\n/* harmony export */ });\nconst {cx_salv_access_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_salv_access_error.clas.mjs */ \"./output/cx_salv_access_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_not_found.clas.abap\nclass cx_salv_not_found extends cx_salv_access_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_NOT_FOUND'] = cx_salv_not_found;\n\n//# sourceMappingURL=cx_salv_not_found.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_not_found.clas.mjs?");

/***/ }),

/***/ "./output/cx_salv_static_check.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_salv_static_check.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_salv_static_check\": () => (/* binding */ cx_salv_static_check)\n/* harmony export */ });\nconst {cx_salv_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_salv_error.clas.mjs */ \"./output/cx_salv_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_salv_static_check.clas.abap\nclass cx_salv_static_check extends cx_salv_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SALV_STATIC_CHECK'] = cx_salv_static_check;\n\n//# sourceMappingURL=cx_salv_static_check.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_salv_static_check.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_already_detached.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_shm_already_detached.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_already_detached\": () => (/* binding */ cx_shm_already_detached)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_already_detached.clas.abap\nclass cx_shm_already_detached extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_ALREADY_DETACHED'] = cx_shm_already_detached;\n\n//# sourceMappingURL=cx_shm_already_detached.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_already_detached.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_attach_error.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_shm_attach_error.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_attach_error\": () => (/* binding */ cx_shm_attach_error)\n/* harmony export */ });\nconst {cx_shm_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_error.clas.mjs */ \"./output/cx_shm_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_attach_error.clas.abap\nclass cx_shm_attach_error extends cx_shm_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_ATTACH_ERROR'] = cx_shm_attach_error;\n\n//# sourceMappingURL=cx_shm_attach_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_attach_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_build_failed.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_shm_build_failed.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_build_failed\": () => (/* binding */ cx_shm_build_failed)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_build_failed.clas.abap\nclass cx_shm_build_failed extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_BUILD_FAILED'] = cx_shm_build_failed;\n\n//# sourceMappingURL=cx_shm_build_failed.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_build_failed.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_change_lock_active.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_shm_change_lock_active.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_change_lock_active\": () => (/* binding */ cx_shm_change_lock_active)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_change_lock_active.clas.abap\nclass cx_shm_change_lock_active extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_CHANGE_LOCK_ACTIVE'] = cx_shm_change_lock_active;\n\n//# sourceMappingURL=cx_shm_change_lock_active.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_change_lock_active.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_completion_error.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_shm_completion_error.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_completion_error\": () => (/* binding */ cx_shm_completion_error)\n/* harmony export */ });\nconst {cx_shm_detach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_detach_error.clas.mjs */ \"./output/cx_shm_detach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_completion_error.clas.abap\nclass cx_shm_completion_error extends cx_shm_detach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_COMPLETION_ERROR'] = cx_shm_completion_error;\n\n//# sourceMappingURL=cx_shm_completion_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_completion_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_detach_error.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_shm_detach_error.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_detach_error\": () => (/* binding */ cx_shm_detach_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_detach_error.clas.abap\nclass cx_shm_detach_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_DETACH_ERROR'] = cx_shm_detach_error;\n\n//# sourceMappingURL=cx_shm_detach_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_detach_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_error.clas.mjs":
/*!**************************************!*\
  !*** ./output/cx_shm_error.clas.mjs ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_error\": () => (/* binding */ cx_shm_error)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_error.clas.abap\nclass cx_shm_error extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_ERROR'] = cx_shm_error;\n\n//# sourceMappingURL=cx_shm_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_event_execution_failed.clas.mjs":
/*!*******************************************************!*\
  !*** ./output/cx_shm_event_execution_failed.clas.mjs ***!
  \*******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_event_execution_failed\": () => (/* binding */ cx_shm_event_execution_failed)\n/* harmony export */ });\nconst {cx_shm_completion_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_completion_error.clas.mjs */ \"./output/cx_shm_completion_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_event_execution_failed.clas.abap\nclass cx_shm_event_execution_failed extends cx_shm_completion_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_EVENT_EXECUTION_FAILED'] = cx_shm_event_execution_failed;\n\n//# sourceMappingURL=cx_shm_event_execution_failed.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_event_execution_failed.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_exclusive_lock_active.clas.mjs":
/*!******************************************************!*\
  !*** ./output/cx_shm_exclusive_lock_active.clas.mjs ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_exclusive_lock_active\": () => (/* binding */ cx_shm_exclusive_lock_active)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_exclusive_lock_active.clas.abap\nclass cx_shm_exclusive_lock_active extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_EXCLUSIVE_LOCK_ACTIVE'] = cx_shm_exclusive_lock_active;\n\n//# sourceMappingURL=cx_shm_exclusive_lock_active.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_exclusive_lock_active.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_general_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_shm_general_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_general_error\": () => (/* binding */ cx_shm_general_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_general_error.clas.abap\nclass cx_shm_general_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_GENERAL_ERROR'] = cx_shm_general_error;\n\n//# sourceMappingURL=cx_shm_general_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_general_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_inconsistent.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_shm_inconsistent.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_inconsistent\": () => (/* binding */ cx_shm_inconsistent)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_inconsistent.clas.abap\nclass cx_shm_inconsistent extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_INCONSISTENT'] = cx_shm_inconsistent;\n\n//# sourceMappingURL=cx_shm_inconsistent.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_inconsistent.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_initial_reference.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cx_shm_initial_reference.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_initial_reference\": () => (/* binding */ cx_shm_initial_reference)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_initial_reference.clas.abap\nclass cx_shm_initial_reference extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_INITIAL_REFERENCE'] = cx_shm_initial_reference;\n\n//# sourceMappingURL=cx_shm_initial_reference.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_initial_reference.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_no_active_version.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cx_shm_no_active_version.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_no_active_version\": () => (/* binding */ cx_shm_no_active_version)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_no_active_version.clas.abap\nclass cx_shm_no_active_version extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_NO_ACTIVE_VERSION'] = cx_shm_no_active_version;\n\n//# sourceMappingURL=cx_shm_no_active_version.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_no_active_version.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_parameter_error.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_shm_parameter_error.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_parameter_error\": () => (/* binding */ cx_shm_parameter_error)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_parameter_error.clas.abap\nclass cx_shm_parameter_error extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_PARAMETER_ERROR'] = cx_shm_parameter_error;\n\n//# sourceMappingURL=cx_shm_parameter_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_parameter_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_pending_lock_removed.clas.mjs":
/*!*****************************************************!*\
  !*** ./output/cx_shm_pending_lock_removed.clas.mjs ***!
  \*****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_pending_lock_removed\": () => (/* binding */ cx_shm_pending_lock_removed)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_pending_lock_removed.clas.abap\nclass cx_shm_pending_lock_removed extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_PENDING_LOCK_REMOVED'] = cx_shm_pending_lock_removed;\n\n//# sourceMappingURL=cx_shm_pending_lock_removed.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_pending_lock_removed.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_read_lock_active.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_shm_read_lock_active.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_read_lock_active\": () => (/* binding */ cx_shm_read_lock_active)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_read_lock_active.clas.abap\nclass cx_shm_read_lock_active extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_READ_LOCK_ACTIVE'] = cx_shm_read_lock_active;\n\n//# sourceMappingURL=cx_shm_read_lock_active.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_read_lock_active.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_secondary_commit.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_shm_secondary_commit.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_secondary_commit\": () => (/* binding */ cx_shm_secondary_commit)\n/* harmony export */ });\nconst {cx_shm_detach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_detach_error.clas.mjs */ \"./output/cx_shm_detach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_secondary_commit.clas.abap\nclass cx_shm_secondary_commit extends cx_shm_detach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_SECONDARY_COMMIT'] = cx_shm_secondary_commit;\n\n//# sourceMappingURL=cx_shm_secondary_commit.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_secondary_commit.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_version_limit_exceeded.clas.mjs":
/*!*******************************************************!*\
  !*** ./output/cx_shm_version_limit_exceeded.clas.mjs ***!
  \*******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_version_limit_exceeded\": () => (/* binding */ cx_shm_version_limit_exceeded)\n/* harmony export */ });\nconst {cx_shm_attach_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_attach_error.clas.mjs */ \"./output/cx_shm_attach_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_version_limit_exceeded.clas.abap\nclass cx_shm_version_limit_exceeded extends cx_shm_attach_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_VERSION_LIMIT_EXCEEDED'] = cx_shm_version_limit_exceeded;\n\n//# sourceMappingURL=cx_shm_version_limit_exceeded.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_version_limit_exceeded.clas.mjs?");

/***/ }),

/***/ "./output/cx_shm_wrong_handle.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_shm_wrong_handle.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shm_wrong_handle\": () => (/* binding */ cx_shm_wrong_handle)\n/* harmony export */ });\nconst {cx_shm_general_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shm_general_error.clas.mjs */ \"./output/cx_shm_general_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shm_wrong_handle.clas.abap\nclass cx_shm_wrong_handle extends cx_shm_general_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHM_WRONG_HANDLE'] = cx_shm_wrong_handle;\n\n//# sourceMappingURL=cx_shm_wrong_handle.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shm_wrong_handle.clas.mjs?");

/***/ }),

/***/ "./output/cx_shma_dynamic.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cx_shma_dynamic.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shma_dynamic\": () => (/* binding */ cx_shma_dynamic)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shma_dynamic.clas.abap\nclass cx_shma_dynamic extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHMA_DYNAMIC'] = cx_shma_dynamic;\n\n//# sourceMappingURL=cx_shma_dynamic.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shma_dynamic.clas.mjs?");

/***/ }),

/***/ "./output/cx_shma_inconsistent.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_shma_inconsistent.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shma_inconsistent\": () => (/* binding */ cx_shma_inconsistent)\n/* harmony export */ });\nconst {cx_shma_dynamic} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shma_dynamic.clas.mjs */ \"./output/cx_shma_dynamic.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shma_inconsistent.clas.abap\nclass cx_shma_inconsistent extends cx_shma_dynamic {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHMA_INCONSISTENT'] = cx_shma_inconsistent;\n\n//# sourceMappingURL=cx_shma_inconsistent.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shma_inconsistent.clas.mjs?");

/***/ }),

/***/ "./output/cx_shma_not_configured.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_shma_not_configured.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_shma_not_configured\": () => (/* binding */ cx_shma_not_configured)\n/* harmony export */ });\nconst {cx_shma_dynamic} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_shma_dynamic.clas.mjs */ \"./output/cx_shma_dynamic.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_shma_not_configured.clas.abap\nclass cx_shma_not_configured extends cx_shma_dynamic {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SHMA_NOT_CONFIGURED'] = cx_shma_not_configured;\n\n//# sourceMappingURL=cx_shma_not_configured.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_shma_not_configured.clas.mjs?");

/***/ }),

/***/ "./output/cx_static_check.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cx_static_check.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_static_check\": () => (/* binding */ cx_static_check)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_static_check.clas.abap\nclass cx_static_check extends cx_root {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let textid = new abap.types.Structure({\"msgid\": new abap.types.Character(20, {}), \"msgno\": new abap.types.Numc({length: 3}), \"attr1\": new abap.types.Character(255, {}), \"attr2\": new abap.types.Character(255, {}), \"attr3\": new abap.types.Character(255, {}), \"attr4\": new abap.types.Character(255, {})}, \"SCX_T100KEY\", \"SCX_T100KEY\");\n    if (INPUT && INPUT.textid) {textid.set(INPUT.textid);}\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    let msgv1 = new abap.types.Character(1, {});\n    if (INPUT && INPUT.msgv1) {msgv1 = INPUT.msgv1;}\n    let msgv2 = new abap.types.Character(1, {});\n    if (INPUT && INPUT.msgv2) {msgv2 = INPUT.msgv2;}\n    let msgv3 = new abap.types.Character(1, {});\n    if (INPUT && INPUT.msgv3) {msgv3 = INPUT.msgv3;}\n    let msgv4 = new abap.types.Character(1, {});\n    if (INPUT && INPUT.msgv4) {msgv4 = INPUT.msgv4;}\n    await super.constructor_({textid: textid, previous: previous});\n    return this;\n  }\n}\nabap.Classes['CX_STATIC_CHECK'] = cx_static_check;\n\n//# sourceMappingURL=cx_static_check.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_static_check.clas.mjs?");

/***/ }),

/***/ "./output/cx_sxml_error.clas.mjs":
/*!***************************************!*\
  !*** ./output/cx_sxml_error.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sxml_error\": () => (/* binding */ cx_sxml_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sxml_error.clas.abap\nclass cx_sxml_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SXML_ERROR'] = cx_sxml_error;\n\n//# sourceMappingURL=cx_sxml_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sxml_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sxml_illegal_argument_error.clas.mjs":
/*!********************************************************!*\
  !*** ./output/cx_sxml_illegal_argument_error.clas.mjs ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sxml_illegal_argument_error\": () => (/* binding */ cx_sxml_illegal_argument_error)\n/* harmony export */ });\nconst {cx_sxml_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sxml_error.clas.mjs */ \"./output/cx_sxml_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sxml_illegal_argument_error.clas.abap\nclass cx_sxml_illegal_argument_error extends cx_sxml_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SXML_ILLEGAL_ARGUMENT_ERROR'] = cx_sxml_illegal_argument_error;\n\n//# sourceMappingURL=cx_sxml_illegal_argument_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sxml_illegal_argument_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sxml_name_error.clas.mjs":
/*!********************************************!*\
  !*** ./output/cx_sxml_name_error.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sxml_name_error\": () => (/* binding */ cx_sxml_name_error)\n/* harmony export */ });\nconst {cx_sxml_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sxml_error.clas.mjs */ \"./output/cx_sxml_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sxml_name_error.clas.abap\nclass cx_sxml_name_error extends cx_sxml_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SXML_NAME_ERROR'] = cx_sxml_name_error;\n\n//# sourceMappingURL=cx_sxml_name_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sxml_name_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sxml_parse_error.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_sxml_parse_error.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sxml_parse_error\": () => (/* binding */ cx_sxml_parse_error)\n/* harmony export */ });\nconst {cx_sxml_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sxml_error.clas.mjs */ \"./output/cx_sxml_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sxml_parse_error.clas.abap\nclass cx_sxml_parse_error extends cx_sxml_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"XML_OFFSET\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.xml_offset = new abap.types.Integer({qualifiedName: \"I\"});\n    let xml_offset = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.xml_offset) {xml_offset.set(INPUT.xml_offset);}\n    await super.constructor_();\n    this.me.get().xml_offset.set(xml_offset);\n    return this;\n  }\n}\nabap.Classes['CX_SXML_PARSE_ERROR'] = cx_sxml_parse_error;\n\n//# sourceMappingURL=cx_sxml_parse_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sxml_parse_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sxml_state_error.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_sxml_state_error.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sxml_state_error\": () => (/* binding */ cx_sxml_state_error)\n/* harmony export */ });\nconst {cx_sxml_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sxml_error.clas.mjs */ \"./output/cx_sxml_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sxml_state_error.clas.abap\nclass cx_sxml_state_error extends cx_sxml_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SXML_STATE_ERROR'] = cx_sxml_state_error;\n\n//# sourceMappingURL=cx_sxml_state_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sxml_state_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_arithmetic_error.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_sy_arithmetic_error.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_arithmetic_error\": () => (/* binding */ cx_sy_arithmetic_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_arithmetic_error.clas.abap\nclass cx_sy_arithmetic_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_ARITHMETIC_ERROR'] = cx_sy_arithmetic_error;\n\n//# sourceMappingURL=cx_sy_arithmetic_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_arithmetic_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_buffer_overflow.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cx_sy_buffer_overflow.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_buffer_overflow\": () => (/* binding */ cx_sy_buffer_overflow)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_buffer_overflow.clas.abap\nclass cx_sy_buffer_overflow extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_BUFFER_OVERFLOW'] = cx_sy_buffer_overflow;\n\n//# sourceMappingURL=cx_sy_buffer_overflow.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_buffer_overflow.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_codepage_converter_init.clas.mjs":
/*!*******************************************************!*\
  !*** ./output/cx_sy_codepage_converter_init.clas.mjs ***!
  \*******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_codepage_converter_init\": () => (/* binding */ cx_sy_codepage_converter_init)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_codepage_converter_init.clas.abap\nclass cx_sy_codepage_converter_init extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CODEPAGE_CONVERTER_INIT'] = cx_sy_codepage_converter_init;\n\n//# sourceMappingURL=cx_sy_codepage_converter_init.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_codepage_converter_init.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_compression_error.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_sy_compression_error.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_compression_error\": () => (/* binding */ cx_sy_compression_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_compression_error.clas.abap\nclass cx_sy_compression_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_COMPRESSION_ERROR'] = cx_sy_compression_error;\n\n//# sourceMappingURL=cx_sy_compression_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_compression_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_conversion_codepage.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_sy_conversion_codepage.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_conversion_codepage\": () => (/* binding */ cx_sy_conversion_codepage)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_conversion_codepage.clas.abap\nclass cx_sy_conversion_codepage extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"SOURCE_EXTRACT\": {\"type\": () => {return new abap.types.XString({qualifiedName: \"XSTRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.source_extract = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    return this;\n  }\n}\nabap.Classes['CX_SY_CONVERSION_CODEPAGE'] = cx_sy_conversion_codepage;\n\n//# sourceMappingURL=cx_sy_conversion_codepage.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_conversion_codepage.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_conversion_data_loss.clas.mjs":
/*!****************************************************!*\
  !*** ./output/cx_sy_conversion_data_loss.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_conversion_data_loss\": () => (/* binding */ cx_sy_conversion_data_loss)\n/* harmony export */ });\nconst {cx_sy_conversion_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_conversion_error.clas.mjs */ \"./output/cx_sy_conversion_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_conversion_data_loss.clas.abap\nclass cx_sy_conversion_data_loss extends cx_sy_conversion_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CONVERSION_DATA_LOSS'] = cx_sy_conversion_data_loss;\n\n//# sourceMappingURL=cx_sy_conversion_data_loss.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_conversion_data_loss.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_conversion_error.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_sy_conversion_error.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_conversion_error\": () => (/* binding */ cx_sy_conversion_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_conversion_error.clas.abap\nclass cx_sy_conversion_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CONVERSION_ERROR'] = cx_sy_conversion_error;\n\n//# sourceMappingURL=cx_sy_conversion_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_conversion_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_conversion_no_number.clas.mjs":
/*!****************************************************!*\
  !*** ./output/cx_sy_conversion_no_number.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_conversion_no_number\": () => (/* binding */ cx_sy_conversion_no_number)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_conversion_no_number.clas.abap\nclass cx_sy_conversion_no_number extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CONVERSION_NO_NUMBER'] = cx_sy_conversion_no_number;\n\n//# sourceMappingURL=cx_sy_conversion_no_number.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_conversion_no_number.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_conversion_overflow.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_sy_conversion_overflow.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_conversion_overflow\": () => (/* binding */ cx_sy_conversion_overflow)\n/* harmony export */ });\nconst {cx_sy_conversion_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_conversion_error.clas.mjs */ \"./output/cx_sy_conversion_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_conversion_overflow.clas.abap\nclass cx_sy_conversion_overflow extends cx_sy_conversion_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CONVERSION_OVERFLOW'] = cx_sy_conversion_overflow;\n\n//# sourceMappingURL=cx_sy_conversion_overflow.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_conversion_overflow.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_create_data_error.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_sy_create_data_error.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_create_data_error\": () => (/* binding */ cx_sy_create_data_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_create_data_error.clas.abap\nclass cx_sy_create_data_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_CREATE_DATA_ERROR'] = cx_sy_create_data_error;\n\n//# sourceMappingURL=cx_sy_create_data_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_create_data_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_create_object_error.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_sy_create_object_error.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_create_object_error\": () => (/* binding */ cx_sy_create_object_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_create_object_error.clas.abap\nclass cx_sy_create_object_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"CLASSNAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.classname = new abap.types.String({qualifiedName: \"STRING\"});\n    let textid = new abap.types.Character(32, {});\n    if (INPUT && INPUT.textid) {textid.set(INPUT.textid);}\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    let classname = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.classname) {classname.set(INPUT.classname);}\n    await super.constructor_({textid: textid, previous: previous});\n    this.me.get().classname.set(classname);\n    return this;\n  }\n  async if_message$get_text() {\n    let result = new abap.types.String({qualifiedName: \"STRING\"});\n    result.set(new abap.types.Character(62).set('The object could not be created: The class ??? does not exist.'));\n    return result;\n  }\n}\nabap.Classes['CX_SY_CREATE_OBJECT_ERROR'] = cx_sy_create_object_error;\n\n//# sourceMappingURL=cx_sy_create_object_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_create_object_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_data_access_error.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_sy_data_access_error.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_data_access_error\": () => (/* binding */ cx_sy_data_access_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_data_access_error.clas.abap\nclass cx_sy_data_access_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DATA_ACCESS_ERROR'] = cx_sy_data_access_error;\n\n//# sourceMappingURL=cx_sy_data_access_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_data_access_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_duplicate_key.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_sy_duplicate_key.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_duplicate_key\": () => (/* binding */ cx_sy_duplicate_key)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_duplicate_key.clas.abap\nclass cx_sy_duplicate_key extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DUPLICATE_KEY'] = cx_sy_duplicate_key;\n\n//# sourceMappingURL=cx_sy_duplicate_key.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_duplicate_key.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_sy_dyn_call_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_error\": () => (/* binding */ cx_sy_dyn_call_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_error.clas.abap\nclass cx_sy_dyn_call_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_ERROR'] = cx_sy_dyn_call_error;\n\n//# sourceMappingURL=cx_sy_dyn_call_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_illegal_class.clas.mjs":
/*!******************************************************!*\
  !*** ./output/cx_sy_dyn_call_illegal_class.clas.mjs ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_illegal_class\": () => (/* binding */ cx_sy_dyn_call_illegal_class)\n/* harmony export */ });\nconst {cx_sy_dyn_call_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_illegal_class.clas.abap\nclass cx_sy_dyn_call_illegal_class extends cx_sy_dyn_call_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] = cx_sy_dyn_call_illegal_class;\n\n//# sourceMappingURL=cx_sy_dyn_call_illegal_class.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_illegal_class.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_illegal_form.clas.mjs":
/*!*****************************************************!*\
  !*** ./output/cx_sy_dyn_call_illegal_form.clas.mjs ***!
  \*****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_illegal_form\": () => (/* binding */ cx_sy_dyn_call_illegal_form)\n/* harmony export */ });\nconst {cx_sy_dyn_call_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_illegal_form.clas.abap\nclass cx_sy_dyn_call_illegal_form extends cx_sy_dyn_call_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_ILLEGAL_FORM'] = cx_sy_dyn_call_illegal_form;\n\n//# sourceMappingURL=cx_sy_dyn_call_illegal_form.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_illegal_form.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_illegal_func.clas.mjs":
/*!*****************************************************!*\
  !*** ./output/cx_sy_dyn_call_illegal_func.clas.mjs ***!
  \*****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_illegal_func\": () => (/* binding */ cx_sy_dyn_call_illegal_func)\n/* harmony export */ });\nconst {cx_sy_dyn_call_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_illegal_func.clas.abap\nclass cx_sy_dyn_call_illegal_func extends cx_sy_dyn_call_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_ILLEGAL_FUNC'] = cx_sy_dyn_call_illegal_func;\n\n//# sourceMappingURL=cx_sy_dyn_call_illegal_func.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_illegal_func.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_illegal_method.clas.mjs":
/*!*******************************************************!*\
  !*** ./output/cx_sy_dyn_call_illegal_method.clas.mjs ***!
  \*******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_illegal_method\": () => (/* binding */ cx_sy_dyn_call_illegal_method)\n/* harmony export */ });\nconst {cx_sy_dyn_call_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_illegal_method.clas.abap\nclass cx_sy_dyn_call_illegal_method extends cx_sy_dyn_call_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"PRIVATE_METHOD\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.private_method = cx_sy_dyn_call_illegal_method.private_method;\n    let textid = new abap.types.Character(32, {});\n    if (INPUT && INPUT.textid) {textid.set(INPUT.textid);}\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    let classname = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.classname) {classname.set(INPUT.classname);}\n    let methodname = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.methodname) {methodname.set(INPUT.methodname);}\n    await super.constructor_({previous: previous});\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] = cx_sy_dyn_call_illegal_method;\ncx_sy_dyn_call_illegal_method.private_method = new abap.types.Character(1, {});\ncx_sy_dyn_call_illegal_method.private_method.set('1');\n\n//# sourceMappingURL=cx_sy_dyn_call_illegal_method.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_illegal_method.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_param_not_found.clas.mjs":
/*!********************************************************!*\
  !*** ./output/cx_sy_dyn_call_param_not_found.clas.mjs ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_param_not_found\": () => (/* binding */ cx_sy_dyn_call_param_not_found)\n/* harmony export */ });\nconst {cx_sy_dyn_call_parameter_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_parameter_error.clas.mjs */ \"./output/cx_sy_dyn_call_parameter_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_param_not_found.clas.abap\nclass cx_sy_dyn_call_param_not_found extends cx_sy_dyn_call_parameter_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_PARAM_NOT_FOUND'] = cx_sy_dyn_call_param_not_found;\n\n//# sourceMappingURL=cx_sy_dyn_call_param_not_found.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_param_not_found.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dyn_call_parameter_error.clas.mjs":
/*!********************************************************!*\
  !*** ./output/cx_sy_dyn_call_parameter_error.clas.mjs ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dyn_call_parameter_error\": () => (/* binding */ cx_sy_dyn_call_parameter_error)\n/* harmony export */ });\nconst {cx_sy_dyn_call_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dyn_call_error.clas.mjs */ \"./output/cx_sy_dyn_call_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dyn_call_parameter_error.clas.abap\nclass cx_sy_dyn_call_parameter_error extends cx_sy_dyn_call_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"PARAMETER\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.parameter = new abap.types.String({qualifiedName: \"STRING\"});\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYN_CALL_PARAMETER_ERROR'] = cx_sy_dyn_call_parameter_error;\n\n//# sourceMappingURL=cx_sy_dyn_call_parameter_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dyn_call_parameter_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dynamic_osql_error.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cx_sy_dynamic_osql_error.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dynamic_osql_error\": () => (/* binding */ cx_sy_dynamic_osql_error)\n/* harmony export */ });\nconst {cx_sy_open_sql_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_open_sql_error.clas.mjs */ \"./output/cx_sy_open_sql_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dynamic_osql_error.clas.abap\nclass cx_sy_dynamic_osql_error extends cx_sy_open_sql_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let sqlmsg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.sqlmsg) {sqlmsg.set(INPUT.sqlmsg);}\n    await super.constructor_({sqlmsg: sqlmsg});\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYNAMIC_OSQL_ERROR'] = cx_sy_dynamic_osql_error;\n\n//# sourceMappingURL=cx_sy_dynamic_osql_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dynamic_osql_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_dynamic_osql_semantics.clas.mjs":
/*!******************************************************!*\
  !*** ./output/cx_sy_dynamic_osql_semantics.clas.mjs ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_dynamic_osql_semantics\": () => (/* binding */ cx_sy_dynamic_osql_semantics)\n/* harmony export */ });\nconst {cx_sy_dynamic_osql_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_dynamic_osql_error.clas.mjs */ \"./output/cx_sy_dynamic_osql_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_dynamic_osql_semantics.clas.abap\nclass cx_sy_dynamic_osql_semantics extends cx_sy_dynamic_osql_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let sqlmsg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.sqlmsg) {sqlmsg.set(INPUT.sqlmsg);}\n    await super.constructor_({sqlmsg: sqlmsg});\n    return this;\n  }\n}\nabap.Classes['CX_SY_DYNAMIC_OSQL_SEMANTICS'] = cx_sy_dynamic_osql_semantics;\n\n//# sourceMappingURL=cx_sy_dynamic_osql_semantics.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_dynamic_osql_semantics.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_itab_duplicate_key.clas.mjs":
/*!**************************************************!*\
  !*** ./output/cx_sy_itab_duplicate_key.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_itab_duplicate_key\": () => (/* binding */ cx_sy_itab_duplicate_key)\n/* harmony export */ });\nconst {cx_sy_itab_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_itab_error.clas.mjs */ \"./output/cx_sy_itab_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_itab_duplicate_key.clas.abap\nclass cx_sy_itab_duplicate_key extends cx_sy_itab_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_ITAB_DUPLICATE_KEY'] = cx_sy_itab_duplicate_key;\n\n//# sourceMappingURL=cx_sy_itab_duplicate_key.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_itab_duplicate_key.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_itab_error.clas.mjs":
/*!******************************************!*\
  !*** ./output/cx_sy_itab_error.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_itab_error\": () => (/* binding */ cx_sy_itab_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_itab_error.clas.abap\nclass cx_sy_itab_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_ITAB_ERROR'] = cx_sy_itab_error;\n\n//# sourceMappingURL=cx_sy_itab_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_itab_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_itab_line_not_found.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_sy_itab_line_not_found.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_itab_line_not_found\": () => (/* binding */ cx_sy_itab_line_not_found)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_itab_line_not_found.clas.abap\nclass cx_sy_itab_line_not_found extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_ITAB_LINE_NOT_FOUND'] = cx_sy_itab_line_not_found;\n\n//# sourceMappingURL=cx_sy_itab_line_not_found.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_itab_line_not_found.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_message_illegal_text.clas.mjs":
/*!****************************************************!*\
  !*** ./output/cx_sy_message_illegal_text.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_message_illegal_text\": () => (/* binding */ cx_sy_message_illegal_text)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_message_illegal_text.clas.abap\nclass cx_sy_message_illegal_text extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_MESSAGE_ILLEGAL_TEXT'] = cx_sy_message_illegal_text;\n\n//# sourceMappingURL=cx_sy_message_illegal_text.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_message_illegal_text.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_move_cast_error.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cx_sy_move_cast_error.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_move_cast_error\": () => (/* binding */ cx_sy_move_cast_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_move_cast_error.clas.abap\nclass cx_sy_move_cast_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_MOVE_CAST_ERROR'] = cx_sy_move_cast_error;\n\n//# sourceMappingURL=cx_sy_move_cast_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_move_cast_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_open_sql_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_sy_open_sql_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_open_sql_error\": () => (/* binding */ cx_sy_open_sql_error)\n/* harmony export */ });\nconst {cx_sy_sql_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_sql_error.clas.mjs */ \"./output/cx_sy_sql_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_open_sql_error.clas.abap\nclass cx_sy_open_sql_error extends cx_sy_sql_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    let sqlmsg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.sqlmsg) {sqlmsg.set(INPUT.sqlmsg);}\n    await super.constructor_({sqlmsg: sqlmsg});\n    return this;\n  }\n}\nabap.Classes['CX_SY_OPEN_SQL_ERROR'] = cx_sy_open_sql_error;\n\n//# sourceMappingURL=cx_sy_open_sql_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_open_sql_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_range_out_of_bounds.clas.mjs":
/*!***************************************************!*\
  !*** ./output/cx_sy_range_out_of_bounds.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_range_out_of_bounds\": () => (/* binding */ cx_sy_range_out_of_bounds)\n/* harmony export */ });\nconst {cx_sy_data_access_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_data_access_error.clas.mjs */ \"./output/cx_sy_data_access_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_range_out_of_bounds.clas.abap\nclass cx_sy_range_out_of_bounds extends cx_sy_data_access_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_RANGE_OUT_OF_BOUNDS'] = cx_sy_range_out_of_bounds;\n\n//# sourceMappingURL=cx_sy_range_out_of_bounds.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_range_out_of_bounds.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_ref_is_initial.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_sy_ref_is_initial.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_ref_is_initial\": () => (/* binding */ cx_sy_ref_is_initial)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_ref_is_initial.clas.abap\nclass cx_sy_ref_is_initial extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_REF_IS_INITIAL'] = cx_sy_ref_is_initial;\n\n//# sourceMappingURL=cx_sy_ref_is_initial.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_ref_is_initial.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_sql_error.clas.mjs":
/*!*****************************************!*\
  !*** ./output/cx_sy_sql_error.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_sql_error\": () => (/* binding */ cx_sy_sql_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_sql_error.clas.abap\nclass cx_sy_sql_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"SQLMSG\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.sqlmsg = new abap.types.String({qualifiedName: \"STRING\"});\n    let sqlmsg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.sqlmsg) {sqlmsg.set(INPUT.sqlmsg);}\n    await super.constructor_();\n    this.me.get().sqlmsg.set(sqlmsg);\n    return this;\n  }\n}\nabap.Classes['CX_SY_SQL_ERROR'] = cx_sy_sql_error;\n\n//# sourceMappingURL=cx_sy_sql_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_sql_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_strg_par_val.clas.mjs":
/*!********************************************!*\
  !*** ./output/cx_sy_strg_par_val.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_strg_par_val\": () => (/* binding */ cx_sy_strg_par_val)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_strg_par_val.clas.abap\nclass cx_sy_strg_par_val extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_STRG_PAR_VAL'] = cx_sy_strg_par_val;\n\n//# sourceMappingURL=cx_sy_strg_par_val.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_strg_par_val.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_struct_attributes.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_sy_struct_attributes.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_struct_attributes\": () => (/* binding */ cx_sy_struct_attributes)\n/* harmony export */ });\nconst {cx_sy_struct_creation} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_struct_creation.clas.mjs */ \"./output/cx_sy_struct_creation.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_struct_attributes.clas.abap\nclass cx_sy_struct_attributes extends cx_sy_struct_creation {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_STRUCT_ATTRIBUTES'] = cx_sy_struct_attributes;\n\n//# sourceMappingURL=cx_sy_struct_attributes.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_struct_attributes.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_struct_comp_name.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_sy_struct_comp_name.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_struct_comp_name\": () => (/* binding */ cx_sy_struct_comp_name)\n/* harmony export */ });\nconst {cx_sy_struct_creation} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_struct_creation.clas.mjs */ \"./output/cx_sy_struct_creation.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_struct_comp_name.clas.abap\nclass cx_sy_struct_comp_name extends cx_sy_struct_creation {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_STRUCT_COMP_NAME'] = cx_sy_struct_comp_name;\n\n//# sourceMappingURL=cx_sy_struct_comp_name.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_struct_comp_name.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_struct_comp_type.clas.mjs":
/*!************************************************!*\
  !*** ./output/cx_sy_struct_comp_type.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_struct_comp_type\": () => (/* binding */ cx_sy_struct_comp_type)\n/* harmony export */ });\nconst {cx_sy_struct_creation} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_struct_creation.clas.mjs */ \"./output/cx_sy_struct_creation.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_struct_comp_type.clas.abap\nclass cx_sy_struct_comp_type extends cx_sy_struct_creation {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_STRUCT_COMP_TYPE'] = cx_sy_struct_comp_type;\n\n//# sourceMappingURL=cx_sy_struct_comp_type.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_struct_comp_type.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_struct_creation.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cx_sy_struct_creation.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_struct_creation\": () => (/* binding */ cx_sy_struct_creation)\n/* harmony export */ });\nconst {cx_sy_type_creation} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_type_creation.clas.mjs */ \"./output/cx_sy_type_creation.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_struct_creation.clas.abap\nclass cx_sy_struct_creation extends cx_sy_type_creation {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_STRUCT_CREATION'] = cx_sy_struct_creation;\n\n//# sourceMappingURL=cx_sy_struct_creation.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_struct_creation.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_type_creation.clas.mjs":
/*!*********************************************!*\
  !*** ./output/cx_sy_type_creation.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_type_creation\": () => (/* binding */ cx_sy_type_creation)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_type_creation.clas.abap\nclass cx_sy_type_creation extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_TYPE_CREATION'] = cx_sy_type_creation;\n\n//# sourceMappingURL=cx_sy_type_creation.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_type_creation.clas.mjs?");

/***/ }),

/***/ "./output/cx_sy_zerodivide.clas.mjs":
/*!******************************************!*\
  !*** ./output/cx_sy_zerodivide.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_sy_zerodivide\": () => (/* binding */ cx_sy_zerodivide)\n/* harmony export */ });\nconst {cx_sy_arithmetic_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_sy_arithmetic_error.clas.mjs */ \"./output/cx_sy_arithmetic_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_sy_zerodivide.clas.abap\nclass cx_sy_zerodivide extends cx_sy_arithmetic_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_SY_ZERODIVIDE'] = cx_sy_zerodivide;\n\n//# sourceMappingURL=cx_sy_zerodivide.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_sy_zerodivide.clas.mjs?");

/***/ }),

/***/ "./output/cx_transformation_error.clas.mjs":
/*!*************************************************!*\
  !*** ./output/cx_transformation_error.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_transformation_error\": () => (/* binding */ cx_transformation_error)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_transformation_error.clas.abap\nclass cx_transformation_error extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_TRANSFORMATION_ERROR'] = cx_transformation_error;\n\n//# sourceMappingURL=cx_transformation_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_transformation_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_uuid_error.clas.mjs":
/*!***************************************!*\
  !*** ./output/cx_uuid_error.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_uuid_error\": () => (/* binding */ cx_uuid_error)\n/* harmony export */ });\nconst {cx_static_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_static_check.clas.mjs */ \"./output/cx_static_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_uuid_error.clas.abap\nclass cx_uuid_error extends cx_static_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_UUID_ERROR'] = cx_uuid_error;\n\n//# sourceMappingURL=cx_uuid_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_uuid_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_xslt_exception.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cx_xslt_exception.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_xslt_exception\": () => (/* binding */ cx_xslt_exception)\n/* harmony export */ });\nconst {cx_transformation_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_transformation_error.clas.mjs */ \"./output/cx_transformation_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_xslt_exception.clas.abap\nclass cx_xslt_exception extends cx_transformation_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_XSLT_EXCEPTION'] = cx_xslt_exception;\n\n//# sourceMappingURL=cx_xslt_exception.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_xslt_exception.clas.mjs?");

/***/ }),

/***/ "./output/cx_xslt_format_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_xslt_format_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_xslt_format_error\": () => (/* binding */ cx_xslt_format_error)\n/* harmony export */ });\nconst {cx_xslt_system_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_xslt_system_error.clas.mjs */ \"./output/cx_xslt_system_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_xslt_format_error.clas.abap\nclass cx_xslt_format_error extends cx_xslt_system_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_XSLT_FORMAT_ERROR'] = cx_xslt_format_error;\n\n//# sourceMappingURL=cx_xslt_format_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_xslt_format_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_xslt_runtime_error.clas.mjs":
/*!***********************************************!*\
  !*** ./output/cx_xslt_runtime_error.clas.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_xslt_runtime_error\": () => (/* binding */ cx_xslt_runtime_error)\n/* harmony export */ });\nconst {cx_transformation_error} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_transformation_error.clas.mjs */ \"./output/cx_transformation_error.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_xslt_runtime_error.clas.abap\nclass cx_xslt_runtime_error extends cx_transformation_error {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_XSLT_RUNTIME_ERROR'] = cx_xslt_runtime_error;\n\n//# sourceMappingURL=cx_xslt_runtime_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_xslt_runtime_error.clas.mjs?");

/***/ }),

/***/ "./output/cx_xslt_system_error.clas.mjs":
/*!**********************************************!*\
  !*** ./output/cx_xslt_system_error.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cx_xslt_system_error\": () => (/* binding */ cx_xslt_system_error)\n/* harmony export */ });\nconst {cx_xslt_exception} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_xslt_exception.clas.mjs */ \"./output/cx_xslt_exception.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cx_xslt_system_error.clas.abap\nclass cx_xslt_system_error extends cx_xslt_exception {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['CX_XSLT_SYSTEM_ERROR'] = cx_xslt_system_error;\n\n//# sourceMappingURL=cx_xslt_system_error.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cx_xslt_system_error.clas.mjs?");

/***/ }),

/***/ "./output/dats.dtel.mjs":
/*!******************************!*\
  !*** ./output/dats.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DATS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Date({qualifiedName: \"DATS\"}),\n  \"domain\": \"DATS\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/dats.dtel.mjs?");

/***/ }),

/***/ "./output/ddfields.ttyp.mjs":
/*!**********************************!*\
  !*** ./output/ddfields.ttyp.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DDFIELDS\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"DDFIELDS\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/ddfields.ttyp.mjs?");

/***/ }),

/***/ "./output/ddoption.dtel.mjs":
/*!**********************************!*\
  !*** ./output/ddoption.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DDOPTION\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(2, {\"qualifiedName\":\"DDOPTION\",\"ddicName\":\"DDOPTION\"}),\n  \"domain\": \"DDOPTION\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/ddoption.dtel.mjs?");

/***/ }),

/***/ "./output/ddsign.dtel.mjs":
/*!********************************!*\
  !*** ./output/ddsign.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DDSIGN\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"DDSIGN\",\"ddicName\":\"DDSIGN\"}),\n  \"domain\": \"DDSIGN\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/ddsign.dtel.mjs?");

/***/ }),

/***/ "./output/devclass.dtel.mjs":
/*!**********************************!*\
  !*** ./output/devclass.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DEVCLASS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"DEVCLASS\",\"ddicName\":\"DEVCLASS\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/devclass.dtel.mjs?");

/***/ }),

/***/ "./output/dfies.tabl.mjs":
/*!*******************************!*\
  !*** ./output/dfies.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DFIES\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"tabname\": new abap.types.Character(30, {}), \"fieldname\": new abap.types.Character(30, {}), \"langu\": new abap.types.Character(1, {}), \"position\": new abap.types.Numc({length: 4}), \"offset\": new abap.types.Numc({length: 6}), \"domname\": new abap.types.Character(30, {}), \"rollname\": new abap.types.Character(30, {}), \"checktable\": new abap.types.Character(1, {}), \"leng\": new abap.types.Numc({length: 6}), \"intlen\": new abap.types.Numc({length: 6}), \"outputlen\": new abap.types.Numc({length: 6}), \"decimals\": new abap.types.Numc({length: 6}), \"datatype\": new abap.types.Character(1, {}), \"inttype\": new abap.types.Character(1, {}), \"reftable\": new abap.types.Character(1, {}), \"reffield\": new abap.types.Character(1, {}), \"precfield\": new abap.types.Character(1, {}), \"authorid\": new abap.types.Character(1, {}), \"memoryid\": new abap.types.Character(1, {}), \"logflag\": new abap.types.Character(1, {}), \"mask\": new abap.types.Character(1, {}), \"masklen\": new abap.types.Character(1, {}), \"convexit\": new abap.types.Character(1, {}), \"headlen\": new abap.types.Character(1, {}), \"scrlen1\": new abap.types.Character(1, {}), \"scrlen2\": new abap.types.Character(1, {}), \"scrlen3\": new abap.types.Character(1, {}), \"fieldtext\": new abap.types.Character(1, {}), \"reptext\": new abap.types.Character(1, {}), \"scrtext_s\": new abap.types.Character(1, {}), \"scrtext_m\": new abap.types.Character(1, {}), \"scrtext_l\": new abap.types.Character(1, {}), \"keyflag\": new abap.types.Character(1, {}), \"lowercase\": new abap.types.Character(1, {}), \"mac\": new abap.types.Character(1, {}), \"genkey\": new abap.types.Character(1, {}), \"noforkey\": new abap.types.Character(1, {}), \"valexi\": new abap.types.Character(1, {}), \"noauthch\": new abap.types.Character(1, {}), \"sign\": new abap.types.Character(1, {}), \"dynpfld\": new abap.types.Character(1, {}), \"f4availabl\": new abap.types.Character(1, {}), \"comptype\": new abap.types.Character(1, {}), \"outputstyle\": new abap.types.Character(1, {}), \"lfieldname\": new abap.types.Character(132, {})}, \"DFIES\", \"DFIES\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/dfies.tabl.mjs?");

/***/ }),

/***/ "./output/doku_obj.dtel.mjs":
/*!**********************************!*\
  !*** ./output/doku_obj.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DOKU_OBJ\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(60, {\"qualifiedName\":\"DOKU_OBJ\",\"ddicName\":\"DOKU_OBJ\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/doku_obj.dtel.mjs?");

/***/ }),

/***/ "./output/dynprofld.dtel.mjs":
/*!***********************************!*\
  !*** ./output/dynprofld.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"DYNPROFLD\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"DYNPROFLD\",\"ddicName\":\"DYNPROFLD\"}),\n  \"domain\": \"ABAP_BOOLEAN\",\n  \"fixedValues\": [{\"description\":\"False\",\"language\":\"E\"},{\"description\":\"True\",\"low\":\"X\",\"language\":\"E\"}],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/dynprofld.dtel.mjs?");

/***/ }),

/***/ "./output/file_table.tabl.mjs":
/*!************************************!*\
  !*** ./output/file_table.tabl.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"FILE_TABLE\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"filename\": new abap.types.Character(1024, {})}, \"FILE_TABLE\", \"FILE_TABLE\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/file_table.tabl.mjs?");

/***/ }),

/***/ "./output/filetable.ttyp.mjs":
/*!***********************************!*\
  !*** ./output/filetable.ttyp.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"FILETABLE\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"filename\": new abap.types.Character(1024, {})}, \"FILE_TABLE\", \"FILE_TABLE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"FILETABLE\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/filetable.ttyp.mjs?");

/***/ }),

/***/ "./output/flag.dtel.mjs":
/*!******************************!*\
  !*** ./output/flag.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"FLAG\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"FLAG\",\"ddicName\":\"FLAG\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/flag.dtel.mjs?");

/***/ }),

/***/ "./output/funcname.dtel.mjs":
/*!**********************************!*\
  !*** ./output/funcname.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"FUNCNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"FUNCNAME\",\"ddicName\":\"FUNCNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/funcname.dtel.mjs?");

/***/ }),

/***/ "./output/guid.dtel.mjs":
/*!******************************!*\
  !*** ./output/guid.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"GUID\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Hex({length: 16}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/guid.dtel.mjs?");

/***/ }),

/***/ "./output/icon.type.mjs":
/*!******************************!*\
  !*** ./output/icon.type.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst pool = {};\npool['icon_abap'] = new abap.types.Character(4, {});\npool['icon_abap'].set('ICON');\npool['icon_address'] = new abap.types.Character(4, {});\npool['icon_address'].set('ICON');\npool['icon_adopt'] = new abap.types.Character(4, {});\npool['icon_adopt'].set('ICON');\npool['icon_ben_current_benefits'] = new abap.types.Character(4, {});\npool['icon_ben_current_benefits'].set('ICON');\npool['icon_biw_report'] = new abap.types.Character(4, {});\npool['icon_biw_report'].set('ICON');\npool['icon_biw_source_sys_r3'] = new abap.types.Character(4, {});\npool['icon_biw_source_sys_r3'].set('ICON');\npool['icon_change'] = new abap.types.Character(4, {});\npool['icon_change'].set('ICON');\npool['icon_compare'] = new abap.types.Character(4, {});\npool['icon_compare'].set('ICON');\npool['icon_complete'] = new abap.types.Character(4, {});\npool['icon_complete'].set('ICON');\npool['icon_connect'] = new abap.types.Character(4, {});\npool['icon_connect'].set('ICON');\npool['icon_copy_object'] = new abap.types.Character(4, {});\npool['icon_copy_object'].set('ICON');\npool['icon_create'] = new abap.types.Character(4, {});\npool['icon_create'].set('ICON');\npool['icon_database_table'] = new abap.types.Character(4, {});\npool['icon_database_table'].set('ICON');\npool['icon_delete'] = new abap.types.Character(4, {});\npool['icon_delete'].set('ICON');\npool['icon_delete_row'] = new abap.types.Character(4, {});\npool['icon_delete_row'].set('ICON');\npool['icon_delete_template'] = new abap.types.Character(4, {});\npool['icon_delete_template'].set('ICON');\npool['icon_delivery_inbound'] = new abap.types.Character(4, {});\npool['icon_delivery_inbound'].set('ICON');\npool['icon_deselect_all'] = new abap.types.Character(4, {});\npool['icon_deselect_all'].set('ICON');\npool['icon_detail'] = new abap.types.Character(4, {});\npool['icon_detail'].set('ICON');\npool['icon_display'] = new abap.types.Character(4, {});\npool['icon_display'].set('ICON');\npool['icon_element'] = new abap.types.Character(4, {});\npool['icon_element'].set('ICON');\npool['icon_execute_object'] = new abap.types.Character(4, {});\npool['icon_execute_object'].set('ICON');\npool['icon_generate'] = new abap.types.Character(4, {});\npool['icon_generate'].set('ICON');\npool['icon_green_light'] = new abap.types.Character(4, {});\npool['icon_green_light'].set('ICON');\npool['icon_hint'] = new abap.types.Character(4, {});\npool['icon_hint'].set('ICON');\npool['icon_host'] = new abap.types.Character(4, {});\npool['icon_host'].set('ICON');\npool['icon_incoming_object'] = new abap.types.Character(4, {});\npool['icon_incoming_object'].set('ICON');\npool['icon_insert_row'] = new abap.types.Character(4, {});\npool['icon_insert_row'].set('ICON');\npool['icon_led_green'] = new abap.types.Character(4, {});\npool['icon_led_green'].set('ICON');\npool['icon_led_inactive'] = new abap.types.Character(4, {});\npool['icon_led_inactive'].set('ICON');\npool['icon_led_red'] = new abap.types.Character(4, {});\npool['icon_led_red'].set('ICON');\npool['icon_led_yellow'] = new abap.types.Character(4, {});\npool['icon_led_yellow'].set('ICON');\npool['icon_list'] = new abap.types.Character(4, {});\npool['icon_list'].set('ICON');\npool['icon_message_critical'] = new abap.types.Character(4, {});\npool['icon_message_critical'].set('ICON');\npool['icon_message_information'] = new abap.types.Character(4, {});\npool['icon_message_information'].set('ICON');\npool['icon_message_question'] = new abap.types.Character(4, {});\npool['icon_message_question'].set('ICON');\npool['icon_okay'] = new abap.types.Character(4, {});\npool['icon_okay'].set('ICON');\npool['icon_outgoing_object'] = new abap.types.Character(4, {});\npool['icon_outgoing_object'].set('ICON');\npool['icon_package_standard'] = new abap.types.Character(4, {});\npool['icon_package_standard'].set('ICON');\npool['icon_parameter_result'] = new abap.types.Character(4, {});\npool['icon_parameter_result'].set('ICON');\npool['icon_plant'] = new abap.types.Character(4, {});\npool['icon_plant'].set('ICON');\npool['icon_pm_insert'] = new abap.types.Character(4, {});\npool['icon_pm_insert'].set('ICON');\npool['icon_pm_press'] = new abap.types.Character(4, {});\npool['icon_pm_press'].set('ICON');\npool['icon_profit_center'] = new abap.types.Character(4, {});\npool['icon_profit_center'].set('ICON');\npool['icon_question'] = new abap.types.Character(4, {});\npool['icon_question'].set('ICON');\npool['icon_red_light'] = new abap.types.Character(4, {});\npool['icon_red_light'].set('ICON');\npool['icon_refresh'] = new abap.types.Character(4, {});\npool['icon_refresh'].set('ICON');\npool['icon_release'] = new abap.types.Character(4, {});\npool['icon_release'].set('ICON');\npool['icon_set_state'] = new abap.types.Character(4, {});\npool['icon_set_state'].set('ICON');\npool['icon_simulate'] = new abap.types.Character(4, {});\npool['icon_simulate'].set('ICON');\npool['icon_space'] = new abap.types.Character(4, {});\npool['icon_space'].set('ICON');\npool['icon_stack'] = new abap.types.Character(4, {});\npool['icon_stack'].set('ICON');\npool['icon_store_location'] = new abap.types.Character(4, {});\npool['icon_store_location'].set('ICON');\npool['icon_structure'] = new abap.types.Character(4, {});\npool['icon_structure'].set('ICON');\npool['icon_sym_log_server'] = new abap.types.Character(4, {});\npool['icon_sym_log_server'].set('ICON');\npool['icon_system_help'] = new abap.types.Character(4, {});\npool['icon_system_help'].set('ICON');\npool['icon_system_local_paste'] = new abap.types.Character(4, {});\npool['icon_system_local_paste'].set('ICON');\npool['icon_terminated_org_unit'] = new abap.types.Character(4, {});\npool['icon_terminated_org_unit'].set('ICON');\npool['icon_test'] = new abap.types.Character(4, {});\npool['icon_test'].set('ICON');\npool['icon_total_left'] = new abap.types.Character(4, {});\npool['icon_total_left'].set('ICON');\npool['icon_transport'] = new abap.types.Character(4, {});\npool['icon_transport'].set('ICON');\npool['icon_warehouse'] = new abap.types.Character(4, {});\npool['icon_warehouse'].set('ICON');\npool['icon_wd_context'] = new abap.types.Character(4, {});\npool['icon_wd_context'].set('ICON');\npool['icon_wd_table'] = new abap.types.Character(4, {});\npool['icon_wd_table'].set('ICON');\npool['icon_wf_workitem_completed'] = new abap.types.Character(4, {});\npool['icon_wf_workitem_completed'].set('ICON');\npool['icon_yellow_light'] = new abap.types.Character(4, {});\npool['icon_yellow_light'].set('ICON');\nabap.TypePools['ICON'] = pool;\n//# sourceMappingURL=icon.type.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/icon.type.mjs?");

/***/ }),

/***/ "./output/icon_d.dtel.mjs":
/*!********************************!*\
  !*** ./output/icon_d.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ICON_D\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(4, {\"qualifiedName\":\"ICON_D\",\"ddicName\":\"ICON_D\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/icon_d.dtel.mjs?");

/***/ }),

/***/ "./output/if_abap_channel_types.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_abap_channel_types.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_abap_channel_types\": () => (/* binding */ if_abap_channel_types)\n/* harmony export */ });\n// if_abap_channel_types.intf.abap\nclass if_abap_channel_types {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_ABAP_CHANNEL_TYPES'] = if_abap_channel_types;if_abap_channel_types.ty_apc_tcp_frame = new abap.types.Structure({\"frame_type\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-FRAME_TYPE\"}), \"fixed_length\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-FIXED_LENGTH\"}), \"terminator\": new abap.types.String({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-TERMINATOR\"}), \"length_field_length\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_LENGTH\"}), \"length_field_offset\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_OFFSET\"}), \"length_field_header\": new abap.types.Integer({qualifiedName: \"IF_ABAP_CHANNEL_TYPES=>TY_APC_TCP_FRAME-LENGTH_FIELD_HEADER\"})}, \"if_abap_channel_types=>ty_apc_tcp_frame\");\nif_abap_channel_types.ty_tihttpnvp = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\");\n\n//# sourceMappingURL=if_abap_channel_types.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_abap_channel_types.intf.mjs?");

/***/ }),

/***/ "./output/if_abap_conv_in.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_abap_conv_in.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_abap_conv_in\": () => (/* binding */ if_abap_conv_in)\n/* harmony export */ });\n// if_abap_conv_in.intf.abap\nclass if_abap_conv_in {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_ABAP_CONV_IN'] = if_abap_conv_in;\n\n//# sourceMappingURL=if_abap_conv_in.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_abap_conv_in.intf.mjs?");

/***/ }),

/***/ "./output/if_abap_conv_out.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_abap_conv_out.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_abap_conv_out\": () => (/* binding */ if_abap_conv_out)\n/* harmony export */ });\n// if_abap_conv_out.intf.abap\nclass if_abap_conv_out {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_ABAP_CONV_OUT'] = if_abap_conv_out;\n\n//# sourceMappingURL=if_abap_conv_out.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_abap_conv_out.intf.mjs?");

/***/ }),

/***/ "./output/if_abap_unit_constant.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_abap_unit_constant.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_abap_unit_constant\": () => (/* binding */ if_abap_unit_constant)\n/* harmony export */ });\n// if_abap_unit_constant.intf.abap\nclass if_abap_unit_constant {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"SEVERITY\": {\"type\": () => {return new abap.types.Structure({\"low\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"medium\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"high\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"QUIT\": {\"type\": () => {return new abap.types.Structure({\"test\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"no\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_ABAP_UNIT_CONSTANT'] = if_abap_unit_constant;\nif_abap_unit_constant.if_abap_unit_constant$severity = new abap.types.Structure({\"low\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"medium\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"high\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);\nif_abap_unit_constant.if_abap_unit_constant$severity.get().low.set(0);\nif_abap_unit_constant.if_abap_unit_constant$severity.get().medium.set(1);\nif_abap_unit_constant.if_abap_unit_constant$severity.get().high.set(2);\nif_abap_unit_constant.if_abap_unit_constant$quit = new abap.types.Structure({\"test\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"no\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);\nif_abap_unit_constant.if_abap_unit_constant$quit.get().test.set(1);\nif_abap_unit_constant.if_abap_unit_constant$quit.get().no.set(5);\n\n//# sourceMappingURL=if_abap_unit_constant.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_abap_unit_constant.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_tcp_frame_types.intf.mjs":
/*!************************************************!*\
  !*** ./output/if_apc_tcp_frame_types.intf.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_tcp_frame_types\": () => (/* binding */ if_apc_tcp_frame_types)\n/* harmony export */ });\n// if_apc_tcp_frame_types.intf.abap\nclass if_apc_tcp_frame_types {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_FRAME_TYPE_FIXED_LENGTH\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_FRAME_TYPE_TERMINATOR\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_FRAME_TYPE_LENGTH_FIELD\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_APC_TCP_FRAME_TYPES'] = if_apc_tcp_frame_types;\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_fixed_length = new abap.types.Integer({qualifiedName: \"I\"});\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_fixed_length.set(1);\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_terminator = new abap.types.Integer({qualifiedName: \"I\"});\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_terminator.set(2);\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_length_field = new abap.types.Integer({qualifiedName: \"I\"});\nif_apc_tcp_frame_types.if_apc_tcp_frame_types$co_frame_type_length_field.set(3);\n\n//# sourceMappingURL=if_apc_tcp_frame_types.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_tcp_frame_types.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_binding_manager.intf.mjs":
/*!****************************************************!*\
  !*** ./output/if_apc_wsp_binding_manager.intf.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_binding_manager\": () => (/* binding */ if_apc_wsp_binding_manager)\n/* harmony export */ });\n// if_apc_wsp_binding_manager.intf.abap\nclass if_apc_wsp_binding_manager {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_BINDING_MANAGER'] = if_apc_wsp_binding_manager;\n\n//# sourceMappingURL=if_apc_wsp_binding_manager.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_binding_manager.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_client.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_apc_wsp_client.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_client\": () => (/* binding */ if_apc_wsp_client)\n/* harmony export */ });\n// if_apc_wsp_client.intf.abap\nclass if_apc_wsp_client {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_CLIENT'] = if_apc_wsp_client;\n\n//# sourceMappingURL=if_apc_wsp_client.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_client.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_event_handler.intf.mjs":
/*!**************************************************!*\
  !*** ./output/if_apc_wsp_event_handler.intf.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_event_handler\": () => (/* binding */ if_apc_wsp_event_handler)\n/* harmony export */ });\n// if_apc_wsp_event_handler.intf.abap\nclass if_apc_wsp_event_handler {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_EVENT_HANDLER'] = if_apc_wsp_event_handler;\n\n//# sourceMappingURL=if_apc_wsp_event_handler.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_event_handler.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_extension.intf.mjs":
/*!**********************************************!*\
  !*** ./output/if_apc_wsp_extension.intf.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_extension\": () => (/* binding */ if_apc_wsp_extension)\n/* harmony export */ });\n// if_apc_wsp_extension.intf.abap\nclass if_apc_wsp_extension {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_EXTENSION'] = if_apc_wsp_extension;\n\n//# sourceMappingURL=if_apc_wsp_extension.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_extension.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_initial_request.intf.mjs":
/*!****************************************************!*\
  !*** ./output/if_apc_wsp_initial_request.intf.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_initial_request\": () => (/* binding */ if_apc_wsp_initial_request)\n/* harmony export */ });\n// if_apc_wsp_initial_request.intf.abap\nclass if_apc_wsp_initial_request {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_INITIAL_REQUEST'] = if_apc_wsp_initial_request;\n\n//# sourceMappingURL=if_apc_wsp_initial_request.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_initial_request.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_message.intf.mjs":
/*!********************************************!*\
  !*** ./output/if_apc_wsp_message.intf.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_message\": () => (/* binding */ if_apc_wsp_message)\n/* harmony export */ });\n// if_apc_wsp_message.intf.abap\nclass if_apc_wsp_message {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_MESSAGE'] = if_apc_wsp_message;\n\n//# sourceMappingURL=if_apc_wsp_message.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_message.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_message_manager.intf.mjs":
/*!****************************************************!*\
  !*** ./output/if_apc_wsp_message_manager.intf.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_message_manager\": () => (/* binding */ if_apc_wsp_message_manager)\n/* harmony export */ });\n// if_apc_wsp_message_manager.intf.abap\nclass if_apc_wsp_message_manager {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_MESSAGE_MANAGER'] = if_apc_wsp_message_manager;\n\n//# sourceMappingURL=if_apc_wsp_message_manager.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_message_manager.intf.mjs?");

/***/ }),

/***/ "./output/if_apc_wsp_server_context.intf.mjs":
/*!***************************************************!*\
  !*** ./output/if_apc_wsp_server_context.intf.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_apc_wsp_server_context\": () => (/* binding */ if_apc_wsp_server_context)\n/* harmony export */ });\n// if_apc_wsp_server_context.intf.abap\nclass if_apc_wsp_server_context {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_APC_WSP_SERVER_CONTEXT'] = if_apc_wsp_server_context;\n\n//# sourceMappingURL=if_apc_wsp_server_context.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_apc_wsp_server_context.intf.mjs?");

/***/ }),

/***/ "./output/if_aunit_constants.intf.mjs":
/*!********************************************!*\
  !*** ./output/if_aunit_constants.intf.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_aunit_constants\": () => (/* binding */ if_aunit_constants)\n/* harmony export */ });\n// if_aunit_constants.intf.abap\nclass if_aunit_constants {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"NO\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CRITICAL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"FATAL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"TOLERABLE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"METHOD\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CLASS_\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"INT1\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"SEVERITY\": {\"type\": () => {return new abap.types.Structure({\"low\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"medium\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"high\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"QUIT\": {\"type\": () => {return new abap.types.Structure({\"no\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"test\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_AUNIT_CONSTANTS'] = if_aunit_constants;\nif_aunit_constants.if_aunit_constants$no = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$no.set(0);\nif_aunit_constants.if_aunit_constants$critical = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$critical.set(1);\nif_aunit_constants.if_aunit_constants$fatal = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$fatal.set(1);\nif_aunit_constants.if_aunit_constants$tolerable = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$tolerable.set(1);\nif_aunit_constants.if_aunit_constants$method = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$method.set(1);\nif_aunit_constants.if_aunit_constants$class_ = new abap.types.Integer({qualifiedName: \"INT1\"});\nif_aunit_constants.if_aunit_constants$class_.set(2);\nif_aunit_constants.if_aunit_constants$severity = new abap.types.Structure({\"low\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"medium\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"high\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);\nif_aunit_constants.if_aunit_constants$severity.get().low.set(0);\nif_aunit_constants.if_aunit_constants$severity.get().medium.set(1);\nif_aunit_constants.if_aunit_constants$severity.get().high.set(2);\nif_aunit_constants.if_aunit_constants$quit = new abap.types.Structure({\"no\": new abap.types.Integer({qualifiedName: \"INT1\"}), \"test\": new abap.types.Integer({qualifiedName: \"INT1\"})}, undefined);\nif_aunit_constants.if_aunit_constants$quit.get().no.set(0);\nif_aunit_constants.if_aunit_constants$quit.get().test.set(1);\n\n//# sourceMappingURL=if_aunit_constants.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_aunit_constants.intf.mjs?");

/***/ }),

/***/ "./output/if_document_bcs.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_document_bcs.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_document_bcs\": () => (/* binding */ if_document_bcs)\n/* harmony export */ });\n// if_document_bcs.intf.abap\nclass if_document_bcs {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_DOCUMENT_BCS'] = if_document_bcs;\n\n//# sourceMappingURL=if_document_bcs.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_document_bcs.intf.mjs?");

/***/ }),

/***/ "./output/if_http_client.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_http_client.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_client\": () => (/* binding */ if_http_client)\n/* harmony export */ });\n// if_http_client.intf.abap\nclass if_http_client {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"REQUEST\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"RESPONSE\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_RESPONSE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"PROPERTYTYPE_LOGON_POPUP\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"PROPERTYTYPE_ACCEPT_COOKIE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"CO_DISABLED\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_ENABLED\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_HTTP_CLIENT'] = if_http_client;\nif_http_client.if_http_client$co_disabled = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_client.if_http_client$co_disabled.set(0);\nif_http_client.if_http_client$co_enabled = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_client.if_http_client$co_enabled.set(1);\n\n//# sourceMappingURL=if_http_client.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_client.intf.mjs?");

/***/ }),

/***/ "./output/if_http_entity.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_http_entity.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_entity\": () => (/* binding */ if_http_entity)\n/* harmony export */ });\n// if_http_entity.intf.abap\nclass if_http_entity {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_REQUEST_METHOD_GET\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_REQUEST_METHOD_POST\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_BODY_BEFORE_QUERY_STRING\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_HTTP_ENTITY'] = if_http_entity;\nif_http_entity.if_http_entity$co_request_method_get = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_entity.if_http_entity$co_request_method_get.set('GET');\nif_http_entity.if_http_entity$co_request_method_post = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_entity.if_http_entity$co_request_method_post.set('POST');\nif_http_entity.if_http_entity$co_body_before_query_string = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_entity.if_http_entity$co_body_before_query_string.set(3);\n\n//# sourceMappingURL=if_http_entity.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_entity.intf.mjs?");

/***/ }),

/***/ "./output/if_http_extension.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_http_extension.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_extension\": () => (/* binding */ if_http_extension)\n/* harmony export */ });\n// if_http_extension.intf.abap\nclass if_http_extension {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"FLOW_RC\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"CO_FLOW_OK\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_FLOW_OK_OTHERS_MAND\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_HTTP_EXTENSION'] = if_http_extension;\nif_http_extension.if_http_extension$co_flow_ok = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_extension.if_http_extension$co_flow_ok.set(0);\nif_http_extension.if_http_extension$co_flow_ok_others_mand = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_extension.if_http_extension$co_flow_ok_others_mand.set(2);\n\n//# sourceMappingURL=if_http_extension.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_extension.intf.mjs?");

/***/ }),

/***/ "./output/if_http_request.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_http_request.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_request\": () => (/* binding */ if_http_request)\n/* harmony export */ });\n// if_http_request.intf.abap\nclass if_http_request {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_PROTOCOL_VERSION_1_1\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_PROTOCOL_VERSION_1_0\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_REQUEST_METHOD_GET\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_REQUEST_METHOD_POST\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_HTTP_REQUEST'] = if_http_request;\nif_http_request.if_http_request$co_protocol_version_1_1 = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_request.if_http_request$co_protocol_version_1_1.set('VER11');\nif_http_request.if_http_request$co_protocol_version_1_0 = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_request.if_http_request$co_protocol_version_1_0.set('VER10');\nif_http_request.if_http_request$co_request_method_get = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_request.if_http_request$co_request_method_get.set('GET');\nif_http_request.if_http_request$co_request_method_post = new abap.types.String({qualifiedName: \"STRING\"});\nif_http_request.if_http_request$co_request_method_post.set('POST');\n\n//# sourceMappingURL=if_http_request.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_request.intf.mjs?");

/***/ }),

/***/ "./output/if_http_response.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_http_response.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_response\": () => (/* binding */ if_http_response)\n/* harmony export */ });\n// if_http_response.intf.abap\nclass if_http_response {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_HTTP_RESPONSE'] = if_http_response;\n\n//# sourceMappingURL=if_http_response.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_response.intf.mjs?");

/***/ }),

/***/ "./output/if_http_server.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_http_server.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_server\": () => (/* binding */ if_http_server)\n/* harmony export */ });\n// if_http_server.intf.abap\nclass if_http_server {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"SESSION_ID\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"AUTHENTICATION_METHOD\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"RESPONSE\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_RESPONSE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"REQUEST\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_REQUEST\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"AUTHMETHOD_SERVICE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_COMPRESS_BASED_ON_MIME_TYPE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_DISABLED\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_ENABLED\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_PAGE_ERROR_TYPE\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_RESPONSE_PAGE_OPTION\": {\"type\": () => {return new abap.types.Character(1, {});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_HTTP_SERVER'] = if_http_server;\nif_http_server.if_http_server$authmethod_service = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_server.if_http_server$authmethod_service.set(4);\nif_http_server.if_http_server$co_compress_based_on_mime_type = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_server.if_http_server$co_compress_based_on_mime_type.set(2);\nif_http_server.if_http_server$co_disabled = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_server.if_http_server$co_disabled.set(0);\nif_http_server.if_http_server$co_enabled = new abap.types.Integer({qualifiedName: \"I\"});\nif_http_server.if_http_server$co_enabled.set(1);\nif_http_server.if_http_server$co_page_error_type = new abap.types.Character(1, {});\nif_http_server.if_http_server$co_page_error_type.set('1');\nif_http_server.if_http_server$co_response_page_option = new abap.types.Character(1, {});\nif_http_server.if_http_server$co_response_page_option.set(' ');\n\n//# sourceMappingURL=if_http_server.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_server.intf.mjs?");

/***/ }),

/***/ "./output/if_http_utility.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_http_utility.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_http_utility\": () => (/* binding */ if_http_utility)\n/* harmony export */ });\n// if_http_utility.intf.abap\nclass if_http_utility {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_HTTP_UTILITY'] = if_http_utility;\n\n//# sourceMappingURL=if_http_utility.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_http_utility.intf.mjs?");

/***/ }),

/***/ "./output/if_icf_tree.intf.mjs":
/*!*************************************!*\
  !*** ./output/if_icf_tree.intf.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_icf_tree\": () => (/* binding */ if_icf_tree)\n/* harmony export */ });\n// if_icf_tree.intf.abap\nclass if_icf_tree {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_ICF_TREE'] = if_icf_tree;\n\n//# sourceMappingURL=if_icf_tree.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_icf_tree.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml.intf.mjs":
/*!*********************************!*\
  !*** ./output/if_ixml.intf.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml\": () => (/* binding */ if_ixml)\n/* harmony export */ });\n// if_ixml.intf.abap\nclass if_ixml {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML'] = if_ixml;\n\n//# sourceMappingURL=if_ixml.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_attribute.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_ixml_attribute.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_attribute\": () => (/* binding */ if_ixml_attribute)\n/* harmony export */ });\n// if_ixml_attribute.intf.abap\nclass if_ixml_attribute {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_ATTRIBUTE'] = if_ixml_attribute;\n\n//# sourceMappingURL=if_ixml_attribute.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_attribute.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_document.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_ixml_document.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_document\": () => (/* binding */ if_ixml_document)\n/* harmony export */ });\n// if_ixml_document.intf.abap\nclass if_ixml_document {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_DOCUMENT'] = if_ixml_document;\n\n//# sourceMappingURL=if_ixml_document.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_document.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_element.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_ixml_element.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_element\": () => (/* binding */ if_ixml_element)\n/* harmony export */ });\n// if_ixml_element.intf.abap\nclass if_ixml_element {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_ELEMENT'] = if_ixml_element;\n\n//# sourceMappingURL=if_ixml_element.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_element.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_encoding.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_ixml_encoding.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_encoding\": () => (/* binding */ if_ixml_encoding)\n/* harmony export */ });\n// if_ixml_encoding.intf.abap\nclass if_ixml_encoding {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_PLATFORM_ENDIAN\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_IXML_ENCODING'] = if_ixml_encoding;\nif_ixml_encoding.if_ixml_encoding$co_platform_endian = new abap.types.String({qualifiedName: \"STRING\"});\nif_ixml_encoding.if_ixml_encoding$co_platform_endian.set('a');\n\n//# sourceMappingURL=if_ixml_encoding.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_encoding.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_istream.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_ixml_istream.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_istream\": () => (/* binding */ if_ixml_istream)\n/* harmony export */ });\n// if_ixml_istream.intf.abap\nclass if_ixml_istream {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_ISTREAM'] = if_ixml_istream;\n\n//# sourceMappingURL=if_ixml_istream.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_istream.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_named_node_map.intf.mjs":
/*!************************************************!*\
  !*** ./output/if_ixml_named_node_map.intf.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_named_node_map\": () => (/* binding */ if_ixml_named_node_map)\n/* harmony export */ });\n// if_ixml_named_node_map.intf.abap\nclass if_ixml_named_node_map {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_NAMED_NODE_MAP'] = if_ixml_named_node_map;\n\n//# sourceMappingURL=if_ixml_named_node_map.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_named_node_map.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_node.intf.mjs":
/*!**************************************!*\
  !*** ./output/if_ixml_node.intf.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_node\": () => (/* binding */ if_ixml_node)\n/* harmony export */ });\n// if_ixml_node.intf.abap\nclass if_ixml_node {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_NODE_ELEMENT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_NODE_TEXT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_IXML_NODE'] = if_ixml_node;\nif_ixml_node.if_ixml_node$co_node_element = new abap.types.Integer({qualifiedName: \"I\"});\nif_ixml_node.if_ixml_node$co_node_element.set(0);\nif_ixml_node.if_ixml_node$co_node_text = new abap.types.Integer({qualifiedName: \"I\"});\nif_ixml_node.if_ixml_node$co_node_text.set(0);\n\n//# sourceMappingURL=if_ixml_node.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_node.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_node_collection.intf.mjs":
/*!*************************************************!*\
  !*** ./output/if_ixml_node_collection.intf.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_node_collection\": () => (/* binding */ if_ixml_node_collection)\n/* harmony export */ });\n// if_ixml_node_collection.intf.abap\nclass if_ixml_node_collection {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_NODE_COLLECTION'] = if_ixml_node_collection;\n\n//# sourceMappingURL=if_ixml_node_collection.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_node_collection.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_node_filter.intf.mjs":
/*!*********************************************!*\
  !*** ./output/if_ixml_node_filter.intf.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_node_filter\": () => (/* binding */ if_ixml_node_filter)\n/* harmony export */ });\n// if_ixml_node_filter.intf.abap\nclass if_ixml_node_filter {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_NODE_FILTER'] = if_ixml_node_filter;\n\n//# sourceMappingURL=if_ixml_node_filter.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_node_filter.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_node_iterator.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_ixml_node_iterator.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_node_iterator\": () => (/* binding */ if_ixml_node_iterator)\n/* harmony export */ });\n// if_ixml_node_iterator.intf.abap\nclass if_ixml_node_iterator {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_NODE_ITERATOR'] = if_ixml_node_iterator;\n\n//# sourceMappingURL=if_ixml_node_iterator.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_node_iterator.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_node_list.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_ixml_node_list.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_node_list\": () => (/* binding */ if_ixml_node_list)\n/* harmony export */ });\n// if_ixml_node_list.intf.abap\nclass if_ixml_node_list {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_NODE_LIST'] = if_ixml_node_list;\n\n//# sourceMappingURL=if_ixml_node_list.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_node_list.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_ostream.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_ixml_ostream.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_ostream\": () => (/* binding */ if_ixml_ostream)\n/* harmony export */ });\n// if_ixml_ostream.intf.abap\nclass if_ixml_ostream {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_OSTREAM'] = if_ixml_ostream;\n\n//# sourceMappingURL=if_ixml_ostream.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_ostream.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_parse_error.intf.mjs":
/*!*********************************************!*\
  !*** ./output/if_ixml_parse_error.intf.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_parse_error\": () => (/* binding */ if_ixml_parse_error)\n/* harmony export */ });\n// if_ixml_parse_error.intf.abap\nclass if_ixml_parse_error {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_PARSE_ERROR'] = if_ixml_parse_error;\n\n//# sourceMappingURL=if_ixml_parse_error.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_parse_error.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_parser.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_ixml_parser.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_parser\": () => (/* binding */ if_ixml_parser)\n/* harmony export */ });\n// if_ixml_parser.intf.abap\nclass if_ixml_parser {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_NO_VALIDATION\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_IXML_PARSER'] = if_ixml_parser;\nif_ixml_parser.if_ixml_parser$co_no_validation = new abap.types.Integer({qualifiedName: \"I\"});\nif_ixml_parser.if_ixml_parser$co_no_validation.set(0);\n\n//# sourceMappingURL=if_ixml_parser.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_parser.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_renderer.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_ixml_renderer.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_renderer\": () => (/* binding */ if_ixml_renderer)\n/* harmony export */ });\n// if_ixml_renderer.intf.abap\nclass if_ixml_renderer {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_RENDERER'] = if_ixml_renderer;\n\n//# sourceMappingURL=if_ixml_renderer.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_renderer.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_stream_factory.intf.mjs":
/*!************************************************!*\
  !*** ./output/if_ixml_stream_factory.intf.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_stream_factory\": () => (/* binding */ if_ixml_stream_factory)\n/* harmony export */ });\n// if_ixml_stream_factory.intf.abap\nclass if_ixml_stream_factory {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_STREAM_FACTORY'] = if_ixml_stream_factory;\n\n//# sourceMappingURL=if_ixml_stream_factory.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_stream_factory.intf.mjs?");

/***/ }),

/***/ "./output/if_ixml_unknown.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_ixml_unknown.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_ixml_unknown\": () => (/* binding */ if_ixml_unknown)\n/* harmony export */ });\n// if_ixml_unknown.intf.abap\nclass if_ixml_unknown {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_IXML_UNKNOWN'] = if_ixml_unknown;\n\n//# sourceMappingURL=if_ixml_unknown.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_ixml_unknown.intf.mjs?");

/***/ }),

/***/ "./output/if_message.intf.mjs":
/*!************************************!*\
  !*** ./output/if_message.intf.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_message\": () => (/* binding */ if_message)\n/* harmony export */ });\n// if_message.intf.abap\nclass if_message {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_MESSAGE'] = if_message;\n\n//# sourceMappingURL=if_message.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_message.intf.mjs?");

/***/ }),

/***/ "./output/if_mr_api.intf.mjs":
/*!***********************************!*\
  !*** ./output/if_mr_api.intf.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_mr_api\": () => (/* binding */ if_mr_api)\n/* harmony export */ });\n// if_mr_api.intf.abap\nclass if_mr_api {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_MR_API'] = if_mr_api;\n\n//# sourceMappingURL=if_mr_api.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_mr_api.intf.mjs?");

/***/ }),

/***/ "./output/if_oo_adt_classrun.intf.mjs":
/*!********************************************!*\
  !*** ./output/if_oo_adt_classrun.intf.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_oo_adt_classrun\": () => (/* binding */ if_oo_adt_classrun)\n/* harmony export */ });\n// if_oo_adt_classrun.intf.abap\nclass if_oo_adt_classrun {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_OO_ADT_CLASSRUN'] = if_oo_adt_classrun;\n\n//# sourceMappingURL=if_oo_adt_classrun.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_oo_adt_classrun.intf.mjs?");

/***/ }),

/***/ "./output/if_oo_adt_classrun_out.intf.mjs":
/*!************************************************!*\
  !*** ./output/if_oo_adt_classrun_out.intf.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_oo_adt_classrun_out\": () => (/* binding */ if_oo_adt_classrun_out)\n/* harmony export */ });\n// if_oo_adt_classrun_out.intf.abap\nclass if_oo_adt_classrun_out {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_OO_ADT_CLASSRUN_OUT'] = if_oo_adt_classrun_out;\n\n//# sourceMappingURL=if_oo_adt_classrun_out.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_oo_adt_classrun_out.intf.mjs?");

/***/ }),

/***/ "./output/if_oo_clif_source.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_oo_clif_source.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_oo_clif_source\": () => (/* binding */ if_oo_clif_source)\n/* harmony export */ });\n// if_oo_clif_source.intf.abap\nclass if_oo_clif_source {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_OO_CLIF_SOURCE'] = if_oo_clif_source;\n\n//# sourceMappingURL=if_oo_clif_source.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_oo_clif_source.intf.mjs?");

/***/ }),

/***/ "./output/if_recipient_bcs.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_recipient_bcs.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_recipient_bcs\": () => (/* binding */ if_recipient_bcs)\n/* harmony export */ });\n// if_recipient_bcs.intf.abap\nclass if_recipient_bcs {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_RECIPIENT_BCS'] = if_recipient_bcs;\n\n//# sourceMappingURL=if_recipient_bcs.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_recipient_bcs.intf.mjs?");

/***/ }),

/***/ "./output/if_salv_c_bool_sap.intf.mjs":
/*!********************************************!*\
  !*** ./output/if_salv_c_bool_sap.intf.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_salv_c_bool_sap\": () => (/* binding */ if_salv_c_bool_sap)\n/* harmony export */ });\n// if_salv_c_bool_sap.intf.abap\nclass if_salv_c_bool_sap {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"TRUE_\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"FALSE_\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SALV_C_BOOL_SAP'] = if_salv_c_bool_sap;\nif_salv_c_bool_sap.if_salv_c_bool_sap$true_ = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\nif_salv_c_bool_sap.if_salv_c_bool_sap$true_.set(abap.builtin.abap_true);\nif_salv_c_bool_sap.if_salv_c_bool_sap$false_ = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\nif_salv_c_bool_sap.if_salv_c_bool_sap$false_.set(abap.builtin.abap_false);\n\n//# sourceMappingURL=if_salv_c_bool_sap.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_salv_c_bool_sap.intf.mjs?");

/***/ }),

/***/ "./output/if_salv_c_selection_mode.intf.mjs":
/*!**************************************************!*\
  !*** ./output/if_salv_c_selection_mode.intf.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_salv_c_selection_mode\": () => (/* binding */ if_salv_c_selection_mode)\n/* harmony export */ });\n// if_salv_c_selection_mode.intf.abap\nclass if_salv_c_selection_mode {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CELL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"MULTIPLE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"NONE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"ROW_COLUMN\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"SINGLE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SALV_C_SELECTION_MODE'] = if_salv_c_selection_mode;\nif_salv_c_selection_mode.if_salv_c_selection_mode$cell = new abap.types.Integer({qualifiedName: \"I\"});\nif_salv_c_selection_mode.if_salv_c_selection_mode$cell.set(1);\nif_salv_c_selection_mode.if_salv_c_selection_mode$multiple = new abap.types.Integer({qualifiedName: \"I\"});\nif_salv_c_selection_mode.if_salv_c_selection_mode$multiple.set(2);\nif_salv_c_selection_mode.if_salv_c_selection_mode$none = new abap.types.Integer({qualifiedName: \"I\"});\nif_salv_c_selection_mode.if_salv_c_selection_mode$none.set(3);\nif_salv_c_selection_mode.if_salv_c_selection_mode$row_column = new abap.types.Integer({qualifiedName: \"I\"});\nif_salv_c_selection_mode.if_salv_c_selection_mode$row_column.set(4);\nif_salv_c_selection_mode.if_salv_c_selection_mode$single = new abap.types.Integer({qualifiedName: \"I\"});\nif_salv_c_selection_mode.if_salv_c_selection_mode$single.set(5);\n\n//# sourceMappingURL=if_salv_c_selection_mode.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_salv_c_selection_mode.intf.mjs?");

/***/ }),

/***/ "./output/if_sender_bcs.intf.mjs":
/*!***************************************!*\
  !*** ./output/if_sender_bcs.intf.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sender_bcs\": () => (/* binding */ if_sender_bcs)\n/* harmony export */ });\n// if_sender_bcs.intf.abap\nclass if_sender_bcs {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SENDER_BCS'] = if_sender_bcs;\n\n//# sourceMappingURL=if_sender_bcs.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sender_bcs.intf.mjs?");

/***/ }),

/***/ "./output/if_serializable_object.intf.mjs":
/*!************************************************!*\
  !*** ./output/if_serializable_object.intf.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_serializable_object\": () => (/* binding */ if_serializable_object)\n/* harmony export */ });\n// if_serializable_object.intf.abap\nclass if_serializable_object {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SERIALIZABLE_OBJECT'] = if_serializable_object;\n\n//# sourceMappingURL=if_serializable_object.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_serializable_object.intf.mjs?");

/***/ }),

/***/ "./output/if_shm_build_instance.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_shm_build_instance.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_shm_build_instance\": () => (/* binding */ if_shm_build_instance)\n/* harmony export */ });\n// if_shm_build_instance.intf.abap\nclass if_shm_build_instance {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SHM_BUILD_INSTANCE'] = if_shm_build_instance;\n\n//# sourceMappingURL=if_shm_build_instance.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_shm_build_instance.intf.mjs?");

/***/ }),

/***/ "./output/if_shm_trace.intf.mjs":
/*!**************************************!*\
  !*** ./output/if_shm_trace.intf.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_shm_trace\": () => (/* binding */ if_shm_trace)\n/* harmony export */ });\n// if_shm_trace.intf.abap\nclass if_shm_trace {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"VARIANT\": {\"type\": () => {return new abap.types.Structure({\"def_name\": new abap.types.Character(32, {\"qualifiedName\":\"SHMM_TRC_VARIANT_NAME\",\"ddicName\":\"SHMM_TRC_VARIANT_NAME\"}), \"attach_for_upd\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"attach_for_read\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"free_area\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"detach_area\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"set_root\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"invalidate_inst\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"get_instance_inf\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"free_instance\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"invalidate_area\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"build\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"attach_for_write\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"get_root\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_SHM_TRACE'] = if_shm_trace;\n\n//# sourceMappingURL=if_shm_trace.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_shm_trace.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml.intf.mjs":
/*!*********************************!*\
  !*** ./output/if_sxml.intf.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml\": () => (/* binding */ if_sxml)\n/* harmony export */ });\n// if_sxml.intf.abap\nclass if_sxml {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_XT_XML10\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_XT_BINARY\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_XT_XOP\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_XT_JSON\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SXML'] = if_sxml;\nif_sxml.if_sxml$co_xt_xml10 = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\nif_sxml.if_sxml$co_xt_xml10.set(1);\nif_sxml.if_sxml$co_xt_binary = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\nif_sxml.if_sxml$co_xt_binary.set(2);\nif_sxml.if_sxml$co_xt_xop = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\nif_sxml.if_sxml$co_xt_xop.set(3);\nif_sxml.if_sxml$co_xt_json = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\nif_sxml.if_sxml$co_xt_json.set(4);\nif_sxml.xml_stream_type = new abap.types.Integer({qualifiedName: \"IF_SXML=>XML_STREAM_TYPE\"});\n\n//# sourceMappingURL=if_sxml.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_attribute.intf.mjs":
/*!*******************************************!*\
  !*** ./output/if_sxml_attribute.intf.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_attribute\": () => (/* binding */ if_sxml_attribute)\n/* harmony export */ });\n// if_sxml_attribute.intf.abap\nclass if_sxml_attribute {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"QNAME\": {\"type\": () => {return new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"STRING\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"VALUE_TYPE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_VALUE=>VALUE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_SXML_ATTRIBUTE'] = if_sxml_attribute;\nif_sxml_attribute.attributes = abap.types.TableFactory.construct(new abap.types.ABAPObject({qualifiedName: \"IF_SXML_ATTRIBUTE\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"if_sxml_attribute=>attributes\");\n\n//# sourceMappingURL=if_sxml_attribute.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_attribute.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_close_element.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_sxml_close_element.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_close_element\": () => (/* binding */ if_sxml_close_element)\n/* harmony export */ });\n// if_sxml_close_element.intf.abap\nclass if_sxml_close_element {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"QNAME\": {\"type\": () => {return new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"STRING\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_SXML_CLOSE_ELEMENT'] = if_sxml_close_element;\n\n//# sourceMappingURL=if_sxml_close_element.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_close_element.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_node.intf.mjs":
/*!**************************************!*\
  !*** ./output/if_sxml_node.intf.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_node\": () => (/* binding */ if_sxml_node)\n/* harmony export */ });\n// if_sxml_node.intf.abap\nclass if_sxml_node {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"TYPE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"CO_NT_ELEMENT_OPEN\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_NT_ELEMENT_CLOSE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_NT_VALUE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_NT_ATTRIBUTE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_NT_FINAL\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SXML_NODE'] = if_sxml_node;\nif_sxml_node.if_sxml_node$co_nt_element_open = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\nif_sxml_node.if_sxml_node$co_nt_element_open.set(1);\nif_sxml_node.if_sxml_node$co_nt_element_close = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\nif_sxml_node.if_sxml_node$co_nt_element_close.set(2);\nif_sxml_node.if_sxml_node$co_nt_value = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\nif_sxml_node.if_sxml_node$co_nt_value.set(4);\nif_sxml_node.if_sxml_node$co_nt_attribute = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\nif_sxml_node.if_sxml_node$co_nt_attribute.set(32);\nif_sxml_node.if_sxml_node$co_nt_final = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\nif_sxml_node.if_sxml_node$co_nt_final.set(128);\nif_sxml_node.node_type = new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});\n\n//# sourceMappingURL=if_sxml_node.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_node.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_open_element.intf.mjs":
/*!**********************************************!*\
  !*** ./output/if_sxml_open_element.intf.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_open_element\": () => (/* binding */ if_sxml_open_element)\n/* harmony export */ });\n// if_sxml_open_element.intf.abap\nclass if_sxml_open_element {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"QNAME\": {\"type\": () => {return new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"STRING\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_SXML_OPEN_ELEMENT'] = if_sxml_open_element;\n\n//# sourceMappingURL=if_sxml_open_element.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_open_element.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_reader.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_sxml_reader.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_reader\": () => (/* binding */ if_sxml_reader)\n/* harmony export */ });\n// if_sxml_reader.intf.abap\nclass if_sxml_reader {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"NODE_TYPE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_NODE=>NODE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"NAME\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"VALUE\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_SXML_READER'] = if_sxml_reader;\n\n//# sourceMappingURL=if_sxml_reader.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_reader.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_value.intf.mjs":
/*!***************************************!*\
  !*** ./output/if_sxml_value.intf.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_value\": () => (/* binding */ if_sxml_value)\n/* harmony export */ });\n// if_sxml_value.intf.abap\nclass if_sxml_value {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_VT_TEXT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"IF_SXML_VALUE=>VALUE_TYPE\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SXML_VALUE'] = if_sxml_value;\nif_sxml_value.if_sxml_value$co_vt_text = new abap.types.Integer({qualifiedName: \"IF_SXML_VALUE=>VALUE_TYPE\"});\nif_sxml_value.if_sxml_value$co_vt_text.set(2);\nif_sxml_value.value_type = new abap.types.Integer({qualifiedName: \"IF_SXML_VALUE=>VALUE_TYPE\"});\n\n//# sourceMappingURL=if_sxml_value.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_value.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_value_node.intf.mjs":
/*!********************************************!*\
  !*** ./output/if_sxml_value_node.intf.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_value_node\": () => (/* binding */ if_sxml_value_node)\n/* harmony export */ });\n// if_sxml_value_node.intf.abap\nclass if_sxml_value_node {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SXML_VALUE_NODE'] = if_sxml_value_node;\n\n//# sourceMappingURL=if_sxml_value_node.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_value_node.intf.mjs?");

/***/ }),

/***/ "./output/if_sxml_writer.intf.mjs":
/*!****************************************!*\
  !*** ./output/if_sxml_writer.intf.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxml_writer\": () => (/* binding */ if_sxml_writer)\n/* harmony export */ });\n// if_sxml_writer.intf.abap\nclass if_sxml_writer {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"CO_OPT_NORMALIZING\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_NO_EMPTY\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_IGNORE_CONV_ERRROS\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_LINEBREAKS\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_INDENT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_ILLEGAL_CHAR_REJECT\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_ILLEGAL_CHAR_REPLACE\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_ILLEGAL_CHAR_REPLACE_BY\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"CO_OPT_BASE64_NO_LF\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_SXML_WRITER'] = if_sxml_writer;\nif_sxml_writer.if_sxml_writer$co_opt_normalizing = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_normalizing.set(1);\nif_sxml_writer.if_sxml_writer$co_opt_no_empty = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_no_empty.set(2);\nif_sxml_writer.if_sxml_writer$co_opt_ignore_conv_errros = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_ignore_conv_errros.set(3);\nif_sxml_writer.if_sxml_writer$co_opt_linebreaks = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_linebreaks.set(4);\nif_sxml_writer.if_sxml_writer$co_opt_indent = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_indent.set(5);\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_reject = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_reject.set(6);\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_replace = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_replace.set(7);\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_replace_by = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_illegal_char_replace_by.set(8);\nif_sxml_writer.if_sxml_writer$co_opt_base64_no_lf = new abap.types.Integer({qualifiedName: \"I\"});\nif_sxml_writer.if_sxml_writer$co_opt_base64_no_lf.set(9);\n\n//# sourceMappingURL=if_sxml_writer.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxml_writer.intf.mjs?");

/***/ }),

/***/ "./output/if_sxmlp_factory.intf.mjs":
/*!******************************************!*\
  !*** ./output/if_sxmlp_factory.intf.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxmlp_factory\": () => (/* binding */ if_sxmlp_factory)\n/* harmony export */ });\n// if_sxmlp_factory.intf.abap\nclass if_sxmlp_factory {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SXMLP_FACTORY'] = if_sxmlp_factory;\n\n//# sourceMappingURL=if_sxmlp_factory.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxmlp_factory.intf.mjs?");

/***/ }),

/***/ "./output/if_sxmlp_list.intf.mjs":
/*!***************************************!*\
  !*** ./output/if_sxmlp_list.intf.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxmlp_list\": () => (/* binding */ if_sxmlp_list)\n/* harmony export */ });\n// if_sxmlp_list.intf.abap\nclass if_sxmlp_list {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SXMLP_LIST'] = if_sxmlp_list;\n\n//# sourceMappingURL=if_sxmlp_list.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxmlp_list.intf.mjs?");

/***/ }),

/***/ "./output/if_sxmlp_part.intf.mjs":
/*!***************************************!*\
  !*** ./output/if_sxmlp_part.intf.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxmlp_part\": () => (/* binding */ if_sxmlp_part)\n/* harmony export */ });\n// if_sxmlp_part.intf.abap\nclass if_sxmlp_part {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SXMLP_PART'] = if_sxmlp_part;\n\n//# sourceMappingURL=if_sxmlp_part.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxmlp_part.intf.mjs?");

/***/ }),

/***/ "./output/if_sxmlp_simple.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_sxmlp_simple.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_sxmlp_simple\": () => (/* binding */ if_sxmlp_simple)\n/* harmony export */ });\n// if_sxmlp_simple.intf.abap\nclass if_sxmlp_simple {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SXMLP_SIMPLE'] = if_sxmlp_simple;\n\n//# sourceMappingURL=if_sxmlp_simple.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_sxmlp_simple.intf.mjs?");

/***/ }),

/***/ "./output/if_system_uuid_rfc4122_static.intf.mjs":
/*!*******************************************************!*\
  !*** ./output/if_system_uuid_rfc4122_static.intf.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_system_uuid_rfc4122_static\": () => (/* binding */ if_system_uuid_rfc4122_static)\n/* harmony export */ });\n// if_system_uuid_rfc4122_static.intf.abap\nclass if_system_uuid_rfc4122_static {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SYSTEM_UUID_RFC4122_STATIC'] = if_system_uuid_rfc4122_static;\n\n//# sourceMappingURL=if_system_uuid_rfc4122_static.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_system_uuid_rfc4122_static.intf.mjs?");

/***/ }),

/***/ "./output/if_system_uuid_static.intf.mjs":
/*!***********************************************!*\
  !*** ./output/if_system_uuid_static.intf.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_system_uuid_static\": () => (/* binding */ if_system_uuid_static)\n/* harmony export */ });\n// if_system_uuid_static.intf.abap\nclass if_system_uuid_static {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {};\n}\nabap.Classes['IF_SYSTEM_UUID_STATIC'] = if_system_uuid_static;\n\n//# sourceMappingURL=if_system_uuid_static.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_system_uuid_static.intf.mjs?");

/***/ }),

/***/ "./output/if_t100_dyn_msg.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_t100_dyn_msg.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_t100_dyn_msg\": () => (/* binding */ if_t100_dyn_msg)\n/* harmony export */ });\n// if_t100_dyn_msg.intf.abap\nclass if_t100_dyn_msg {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"MSGTY\": {\"type\": () => {return new abap.types.Character(1, {\"qualifiedName\":\"SYMSGTY\",\"ddicName\":\"SYMSGTY\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MSGV1\": {\"type\": () => {return new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MSGV2\": {\"type\": () => {return new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MSGV3\": {\"type\": () => {return new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MSGV4\": {\"type\": () => {return new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n}\nabap.Classes['IF_T100_DYN_MSG'] = if_t100_dyn_msg;\n\n//# sourceMappingURL=if_t100_dyn_msg.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_t100_dyn_msg.intf.mjs?");

/***/ }),

/***/ "./output/if_t100_message.intf.mjs":
/*!*****************************************!*\
  !*** ./output/if_t100_message.intf.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"if_t100_message\": () => (/* binding */ if_t100_message)\n/* harmony export */ });\n// if_t100_message.intf.abap\nclass if_t100_message {\n  static INTERNAL_TYPE = 'INTF';\n  static ATTRIBUTES = {\"T100KEY\": {\"type\": () => {return new abap.types.Structure({\"msgid\": new abap.types.Character(20, {}), \"msgno\": new abap.types.Numc({length: 3}), \"attr1\": new abap.types.Character(255, {}), \"attr2\": new abap.types.Character(255, {}), \"attr3\": new abap.types.Character(255, {}), \"attr4\": new abap.types.Character(255, {})}, \"SCX_T100KEY\", \"SCX_T100KEY\");}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"DEFAULT_TEXTID\": {\"type\": () => {return new abap.types.Structure({\"msgid\": new abap.types.Character(20, {\"qualifiedName\":\"SYMSGID\",\"ddicName\":\"SYMSGID\"}), \"msgno\": new abap.types.Numc({length: 3, qualifiedName: \"SYMSGNO\"}), \"attr1\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr2\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr3\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr4\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n}\nabap.Classes['IF_T100_MESSAGE'] = if_t100_message;\nif_t100_message.if_t100_message$default_textid = new abap.types.Structure({\"msgid\": new abap.types.Character(20, {\"qualifiedName\":\"SYMSGID\",\"ddicName\":\"SYMSGID\"}), \"msgno\": new abap.types.Numc({length: 3, qualifiedName: \"SYMSGNO\"}), \"attr1\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr2\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr3\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}), \"attr4\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"})}, undefined);\nif_t100_message.if_t100_message$default_textid.get().msgid.set('AB');\nif_t100_message.if_t100_message$default_textid.get().msgno.set('123');\nif_t100_message.if_t100_message$default_textid.get().attr1.set('');\nif_t100_message.if_t100_message$default_textid.get().attr2.set('');\nif_t100_message.if_t100_message$default_textid.get().attr3.set('');\nif_t100_message.if_t100_message$default_textid.get().attr4.set('');\n\n//# sourceMappingURL=if_t100_message.intf.mjs.map\n\n//# sourceURL=webpack://open-table-maintenance/./output/if_t100_message.intf.mjs?");

/***/ }),

/***/ "./output/ihttpnvp.tabl.mjs":
/*!**********************************!*\
  !*** ./output/ihttpnvp.tabl.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"IHTTPNVP\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/ihttpnvp.tabl.mjs?");

/***/ }),

/***/ "./output/int1.dtel.mjs":
/*!******************************!*\
  !*** ./output/int1.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"INT1\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"INT1\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/int1.dtel.mjs?");

/***/ }),

/***/ "./output/int2.dtel.mjs":
/*!******************************!*\
  !*** ./output/int2.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"INT2\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"INT2\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/int2.dtel.mjs?");

/***/ }),

/***/ "./output/int4.dtel.mjs":
/*!******************************!*\
  !*** ./output/int4.dtel.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"INT4\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"INT4\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/int4.dtel.mjs?");

/***/ }),

/***/ "./output/kernel_authority_check.clas.mjs":
/*!************************************************!*\
  !*** ./output/kernel_authority_check.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_authority_check\": () => (/* binding */ kernel_authority_check)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_authority_check.clas.abap\nclass kernel_authority_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async call() {\n    return kernel_authority_check.call();\n  }\n  static async call() {\n    abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n  }\n}\nabap.Classes['KERNEL_AUTHORITY_CHECK'] = kernel_authority_check;\n\n//# sourceMappingURL=kernel_authority_check.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_authority_check.clas.mjs?");

/***/ }),

/***/ "./output/kernel_call.clas.mjs":
/*!*************************************!*\
  !*** ./output/kernel_call.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_call\": () => (/* binding */ kernel_call)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_call.clas.abap\nclass kernel_call {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async call(INPUT) {\n    return kernel_call.call(INPUT);\n  }\n  static async call(INPUT) {\n    let input = new abap.types.Character(4);\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    let uuid = new abap.types.Hex({length: 16});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    name.set(INPUT.name);\n    if (abap.compare.eq(name, new abap.types.Character(10).set('RFCControl'))) {\n      uuid.set((await abap.Classes['CL_SYSTEM_UUID'].if_system_uuid_static$create_uuid_x16()));\n      INPUT.uuid.set(uuid);\n    }\n  }\n}\nabap.Classes['KERNEL_CALL'] = kernel_call;\n\n//# sourceMappingURL=kernel_call.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_call.clas.mjs?");

/***/ }),

/***/ "./output/kernel_call_transformation.clas.mjs":
/*!****************************************************!*\
  !*** ./output/kernel_call_transformation.clas.mjs ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_call_transformation\": () => (/* binding */ kernel_call_transformation)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_kernel_call_transformation_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./kernel_call_transformation.clas.locals.mjs */ \"./output/kernel_call_transformation.clas.locals.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_call_transformation.clas.abap\nclass kernel_call_transformation {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MI_DOC\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MI_WRITER\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"IF_SXML_WRITER\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async call(INPUT) {\n    return kernel_call_transformation.call(INPUT);\n  }\n  static async call(INPUT) {\n    let input = new abap.types.Character(4);\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_source = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_result = new abap.types.String({qualifiedName: \"STRING\"});\n    let result = new abap.types.DataReference(new abap.types.Character(4));\n    let lt_rtab = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_trans_srcbind\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_trans_srcbind_tab\");\n    let lo_writer = new abap.types.ABAPObject({qualifiedName: \"CL_SXML_STRING_WRITER\"});\n    let ls_rtab = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"value\": new abap.types.DataReference(new abap.types.Character(4))}, \"abap_trans_srcbind\");\n    let lv_type = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.clear(kernel_call_transformation.mi_doc);\n    abap.statements.clear(kernel_call_transformation.mi_writer);\n    lv_name.set(INPUT.name.toUpperCase());\n    abap.statements.assert(abap.compare.eq(lv_name, new abap.types.Character(2).set('ID')));\n    if (INPUT.sourceXML?.constructor.name === \"ABAPObject\") this.mi_doc.set(INPUT.sourceXML);\n    if (INPUT.sourceXML?.constructor.name === \"String\") lv_source.set(INPUT.sourceXML);\n    if (abap.compare.initial(lv_source) === false) {\n      if (abap.compare.eq(lv_source.getOffset({length: 1}), new abap.types.Character(1).set('<'))) {\n        lv_type.set(new abap.types.Character(3).set('XML'));\n        await this.parse_xml({iv_xml: lv_source});\n      } else if (abap.compare.eq(lv_source.getOffset({length: 1}), new abap.types.Character(1).set('{')) || abap.compare.eq(lv_source.getOffset({length: 1}), new abap.types.Character(1).set('['))) {\n        lv_type.set(new abap.types.Character(4).set('JSON'));\n        kernel_call_transformation.mi_doc.set((await abap.Classes['KERNEL_JSON_TO_IXML'].build({iv_json: lv_source})));\n      } else {\n        throw await (new abap.Classes['CX_XSLT_FORMAT_ERROR']()).constructor_();\n      }\n    }\n    if (typeof INPUT.source === \"object\" && INPUT.resultXML?.constructor.name === \"ABAPObject\") {\n        this.mi_writer.set(INPUT.resultXML);\n    }\n    if (abap.compare.initial(kernel_call_transformation.mi_writer) === false) {\n      await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: new abap.types.Character(6).set('object')});\n      for (const name in INPUT.source) {\n          lv_name.set(name);\n          if (INPUT.source[name].constructor.name === \"FieldSymbol\") {\n              result.assign(INPUT.source[name].getPointer());\n            } else {\n                result.assign(INPUT.source[name]);\n              }\n            await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: new abap.types.Character(3).set('str')});\n            await kernel_call_transformation.mi_writer.get().if_sxml_writer$write_attribute({name: new abap.types.Character(4).set('name'), value: abap.builtin.to_upper({val: lv_name})});\n            await this.traverse_write({iv_ref: result});\n            await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n          }\n          await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n          return;\n        }\n        if (INPUT.resultXML && INPUT.resultXML.constructor.name === \"String\") {\n            lv_result.set(\"X\");\n        }\n        if (abap.compare.eq(lv_result, abap.builtin.abap_true)) {\n          lv_result.set(new abap.types.Character(114).set('<?xml version=\"1.0\" encoding=\"utf-16\"?><asx:abap xmlns:asx=\"http://www.sap.com/abapxml\" version=\"1.0\"><asx:values>'));\n          for (const name in INPUT.source) {\n              lv_name.set(name);\n              if (INPUT.source[name].constructor.name === \"FieldSymbol\") {\n                  result.assign(INPUT.source[name].getPointer());\n                } else {\n                    result.assign(INPUT.source[name]);\n                  }\n                lv_result.set(abap.operators.concat(lv_result,new abap.types.String().set(`<${abap.templateFormatting(abap.builtin.to_upper({val: lv_name}))}>`)));\n                lv_result.set(abap.operators.concat(lv_result,(await abap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_DATA_TO_XML'].run({iv_ref: result}))));\n                lv_result.set(abap.operators.concat(lv_result,new abap.types.String().set(`</${abap.templateFormatting(abap.builtin.to_upper({val: lv_name}))}>`)));\n              }\n              lv_result.set(abap.operators.concat(lv_result,new abap.types.String().set(`</asx:values></asx:abap>`)));\n                INPUT.resultXML.set(lv_result);\n              return;\n            }\n            if (abap.compare.initial(lv_source) && abap.compare.initial(kernel_call_transformation.mi_doc)) {\n              throw await (new abap.Classes['CX_XSLT_RUNTIME_ERROR']()).constructor_();\n            }\n            if (INPUT.result.constructor.name === \"Table\") {\n              lt_rtab = INPUT.result;\n              for await (const unique55 of abap.statements.loop(lt_rtab)) {\n                ls_rtab.set(unique55);\n                await abap.Classes['KERNEL_IXML_XML_TO_DATA'].build({iv_name: ls_rtab.get().name, iv_ref: ls_rtab.get().value, ii_doc: kernel_call_transformation.mi_doc});\n              }\n            } else {\n              for (const name in INPUT.result) {\n                  lv_name.set(name.toUpperCase());\n                  if (INPUT.result[name].constructor.name === \"FieldSymbol\") {\n                      result.assign(INPUT.result[name].getPointer());\n                    } else {\n                        result.assign(INPUT.result[name]);\n                      }\n                    if (abap.compare.eq(lv_type, new abap.types.Character(4).set('JSON'))) {\n                      await abap.Classes['KERNEL_IXML_JSON_TO_DATA'].build({iv_name: lv_name, iv_ref: result, ii_doc: kernel_call_transformation.mi_doc});\n                    } else {\n                      await abap.Classes['KERNEL_IXML_XML_TO_DATA'].build({iv_name: lv_name, iv_ref: result, ii_doc: kernel_call_transformation.mi_doc});\n                    }\n                  }\n                }\n              }\n              async traverse_write_type(INPUT) {\n                return kernel_call_transformation.traverse_write_type(INPUT);\n              }\n              static async traverse_write_type(INPUT) {\n                let rv_type = new abap.types.String({qualifiedName: \"STRING\"});\n                let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n                if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n                let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n                lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n                let unique56 = lo_type.get().type_kind;\n                if (abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int1) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int2) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int8) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_decfloat) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_decfloat16) || abap.compare.eq(unique56, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_decfloat34)) {\n                  rv_type.set(new abap.types.Character(3).set('num'));\n                } else {\n                  rv_type.set(new abap.types.Character(3).set('str'));\n                }\n                return rv_type;\n              }\n              async traverse_write(INPUT) {\n                return kernel_call_transformation.traverse_write(INPUT);\n              }\n              static async traverse_write(INPUT) {\n                let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n                if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n                let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n                let lo_struc = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n                let lt_comps = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n                let li_element = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n                let li_sub = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n                let ls_compo = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n                let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n                let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n                let fs_table_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n                let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n                lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n                let unique57 = lo_type.get().kind;\n                if (abap.compare.eq(unique57, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n                  await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: new abap.types.Character(6).set('object')});\n                  await abap.statements.cast(lo_struc, lo_type);\n                  lt_comps.set((await lo_struc.get().get_components()));\n                  abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n                  for await (const unique58 of abap.statements.loop(lt_comps)) {\n                    ls_compo.set(unique58);\n                    abap.statements.assign({component: ls_compo.get().name, target: fs_field_, source: fs_any_});\n                    lv_ref.assign(fs_field_.getPointer());\n                    await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: (await this.traverse_write_type({iv_ref: lv_ref}))});\n                    await kernel_call_transformation.mi_writer.get().if_sxml_writer$write_attribute({name: new abap.types.Character(4).set('name'), value: abap.builtin.to_upper({val: ls_compo.get().name})});\n                    await this.traverse_write({iv_ref: lv_ref});\n                    await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n                  }\n                  await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n                } else if (abap.compare.eq(unique57, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n                  await kernel_call_transformation.mi_writer.get().if_sxml_writer$write_value({value: (iv_ref).dereference()});\n                } else if (abap.compare.eq(unique57, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n                  await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: new abap.types.Character(5).set('array')});\n                  abap.statements.assign({target: fs_table_, source: (iv_ref).dereference()});\n                  for await (const unique59 of abap.statements.loop(fs_table_)) {\n                    fs_any_.assign(unique59);\n                    lv_ref.assign(fs_any_.getPointer());\n                    if (abap.compare.eq(((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (lv_ref).dereference()}))).get().kind, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n                      await kernel_call_transformation.mi_writer.get().if_sxml_writer$open_element({name: (await this.traverse_write_type({iv_ref: lv_ref}))});\n                    }\n                    await this.traverse_write({iv_ref: lv_ref});\n                    if (abap.compare.eq(((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (lv_ref).dereference()}))).get().kind, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n                      await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n                    }\n                  }\n                  await kernel_call_transformation.mi_writer.get().if_sxml_writer$close_element();\n                } else {\n                  abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(19).set('todo_traverse_write')));\n                }\n              }\n              async parse_xml(INPUT) {\n                return kernel_call_transformation.parse_xml(INPUT);\n              }\n              static async parse_xml(INPUT) {\n                let iv_xml = new abap.types.String({qualifiedName: \"STRING\"});\n                if (INPUT && INPUT.iv_xml) {iv_xml.set(INPUT.iv_xml);}\n                let li_factory = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_STREAM_FACTORY\"});\n                let li_istream = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ISTREAM\"});\n                let li_parser = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_PARSER\"});\n                let li_ixml = new abap.types.ABAPObject({qualifiedName: \"IF_IXML\"});\n                let lv_subrc = new abap.types.Integer({qualifiedName: \"I\"});\n                li_ixml.set((await abap.Classes['CL_IXML'].create()));\n                kernel_call_transformation.mi_doc.set((await li_ixml.get().if_ixml$create_document()));\n                li_factory.set((await li_ixml.get().if_ixml$create_stream_factory()));\n                li_istream.set((await li_factory.get().if_ixml_stream_factory$create_istream_string({xml: iv_xml})));\n                li_parser.set((await li_ixml.get().if_ixml$create_parser({stream_factory: li_factory, istream: li_istream, document: kernel_call_transformation.mi_doc})));\n                await li_parser.get().if_ixml_parser$add_strip_space_element();\n                lv_subrc.set((await li_parser.get().if_ixml_parser$parse()));\n                await li_istream.get().if_ixml_istream$close();\n                abap.statements.assert(abap.compare.eq(lv_subrc, new abap.types.Integer().set(0)));\n              }\n            }\n            abap.Classes['KERNEL_CALL_TRANSFORMATION'] = kernel_call_transformation;\n            kernel_call_transformation.mi_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n            kernel_call_transformation.mi_writer = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_WRITER\"});\n\n//# sourceMappingURL=kernel_call_transformation.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_call_transformation.clas.mjs?");

/***/ }),

/***/ "./output/kernel_create_data_handle.clas.mjs":
/*!***************************************************!*\
  !*** ./output/kernel_create_data_handle.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_create_data_handle\": () => (/* binding */ kernel_create_data_handle)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_create_data_handle.clas.abap\nclass kernel_create_data_handle {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async call(INPUT) {\n    return kernel_create_data_handle.call(INPUT);\n  }\n  static async call(INPUT) {\n    let handle = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.handle) {handle.set(INPUT.handle);}\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.dref) {dref = INPUT.dref;}\n    abap.statements.assert(abap.compare.initial(handle) === false);\n    let unique71 = handle.get().kind;\n    if (abap.compare.eq(unique71, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n      await this.elem({handle: handle, dref: dref});\n    } else if (abap.compare.eq(unique71, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n      await this.struct({handle: handle, dref: dref});\n    } else if (abap.compare.eq(unique71, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n      await this.table({handle: handle, dref: dref});\n    } else if (abap.compare.eq(unique71, abap.Classes['CL_ABAP_TYPEDESCR'].kind_ref)) {\n      await this.ref({handle: handle, dref: dref});\n    } else {\n      console.dir(handle);\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n  }\n  async ref(INPUT) {\n    return kernel_create_data_handle.ref(INPUT);\n  }\n  static async ref(INPUT) {\n    let handle = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.handle) {handle.set(INPUT.handle);}\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.dref) {dref = INPUT.dref;}\n    let lo_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_REFDESCR\"});\n    let lo_data = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let field = new abap.types.DataReference(new abap.types.Character(4));\n    await abap.statements.cast(lo_ref, handle);\n    await abap.statements.cast(lo_data, (await lo_ref.get().get_referenced_type()));\n    await this.call({handle: lo_data, dref: field});\n    dref.assign(new abap.types.DataReference(field.getPointer()));\n  }\n  async struct(INPUT) {\n    return kernel_create_data_handle.struct(INPUT);\n  }\n  static async struct(INPUT) {\n    let handle = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.handle) {handle.set(INPUT.handle);}\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.dref) {dref = INPUT.dref;}\n    let lo_struct = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let lt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let field = new abap.types.DataReference(new abap.types.Character(4));\n    await abap.statements.cast(lo_struct, handle);\n    lt_components.set((await lo_struct.get().get_components()));\n    let obj = {};\n    for await (const unique72 of abap.statements.loop(lt_components)) {\n      ls_component.set(unique72);\n      await this.call({handle: (await lo_struct.get().get_component_type({p_name: ls_component.get().name})), dref: field});\n      obj[ls_component.get().name.get().toLowerCase()] = field.getPointer();\n    }\n    dref.assign(new abap.types.Structure(obj));\n  }\n  async table(INPUT) {\n    return kernel_create_data_handle.table(INPUT);\n  }\n  static async table(INPUT) {\n    let handle = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.handle) {handle.set(INPUT.handle);}\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.dref) {dref = INPUT.dref;}\n    let lo_table = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TABLEDESCR\"});\n    let field = new abap.types.DataReference(new abap.types.Character(4));\n    await abap.statements.cast(lo_table, handle);\n    await this.call({handle: (await lo_table.get().get_table_line_type()), dref: field});\n    dref.assign(new abap.types.Table(field.getPointer()));\n  }\n  async elem(INPUT) {\n    return kernel_create_data_handle.elem(INPUT);\n  }\n  static async elem(INPUT) {\n    let handle = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    if (INPUT && INPUT.handle) {handle.set(INPUT.handle);}\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.dref) {dref = INPUT.dref;}\n    let lv_half = new abap.types.Integer({qualifiedName: \"I\"});\n    let unique73 = handle.get().type_kind;\n    if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_float)) {\n      abap.statements.createData(dref,{\"typeName\": \"F\"});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_string)) {\n      abap.statements.createData(dref,{\"typeName\": \"STRING\"});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_xstring)) {\n      abap.statements.createData(dref,{\"typeName\": \"XSTRING\"});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_int)) {\n      abap.statements.createData(dref,{\"typeName\": \"I\"});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_date)) {\n      abap.statements.createData(dref,{\"typeName\": \"D\"});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_hex)) {\n      abap.statements.createData(dref,{\"typeName\": \"X\",\"length\": handle.get().length});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_packed)) {\n      abap.statements.createData(dref,{\"typeName\": \"P\",\"length\": handle.get().length,\"decimals\": handle.get().decimals});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_char)) {\n      lv_half.set(abap.operators.divide(handle.get().length,new abap.types.Integer().set(2)));\n      abap.statements.createData(dref,{\"typeName\": \"C\",\"length\": lv_half});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_num)) {\n      lv_half.set(abap.operators.divide(handle.get().length,new abap.types.Integer().set(2)));\n      abap.statements.createData(dref,{\"typeName\": \"N\",\"length\": lv_half});\n    } else if (abap.compare.eq(unique73, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_time)) {\n      abap.statements.createData(dref,{\"typeName\": \"T\"});\n    } else {\n      console.dir(handle);\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n    }\n  }\n}\nabap.Classes['KERNEL_CREATE_DATA_HANDLE'] = kernel_create_data_handle;\n\n//# sourceMappingURL=kernel_create_data_handle.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_create_data_handle.clas.mjs?");

/***/ }),

/***/ "./output/kernel_cx_assert.clas.mjs":
/*!******************************************!*\
  !*** ./output/kernel_cx_assert.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_cx_assert\": () => (/* binding */ kernel_cx_assert)\n/* harmony export */ });\nconst {cx_dynamic_check} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_dynamic_check.clas.mjs */ \"./output/cx_dynamic_check.clas.mjs\"));\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_cx_assert.clas.abap\nclass kernel_cx_assert extends cx_dynamic_check {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_MESSAGE\",\"IF_MESSAGE\"];\n  static ATTRIBUTES = {\"ACTUAL\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"EXPECTED\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"MSG\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.actual = new abap.types.String({qualifiedName: \"STRING\"});\n    this.expected = new abap.types.String({qualifiedName: \"STRING\"});\n    this.msg = new abap.types.String({qualifiedName: \"STRING\"});\n    let msg = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.msg) {msg.set(INPUT.msg);}\n    let previous = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.previous) {previous.set(INPUT.previous);}\n    let expected = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.expected) {expected.set(INPUT.expected);}\n    let actual = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.actual) {actual.set(INPUT.actual);}\n    await super.constructor_({previous: previous});\n    this.me.get().expected.set(expected);\n    this.me.get().actual.set(actual);\n    this.me.get().msg.set(msg);\n    if (abap.compare.initial(this.me.get().msg)) {\n      this.me.get().msg.set(new abap.types.String().set(`Unit test assertion failed`));\n    }\n    return this;\n  }\n}\nabap.Classes['KERNEL_CX_ASSERT'] = kernel_cx_assert;\n\n//# sourceMappingURL=kernel_cx_assert.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_cx_assert.clas.mjs?");

/***/ }),

/***/ "./output/kernel_fugr_test.clas.mjs":
/*!******************************************!*\
  !*** ./output/kernel_fugr_test.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_fugr_test\": () => (/* binding */ kernel_fugr_test)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_fugr_test.clas.abap\nclass kernel_fugr_test {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n}\nabap.Classes['KERNEL_FUGR_TEST'] = kernel_fugr_test;\n\n//# sourceMappingURL=kernel_fugr_test.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_fugr_test.clas.mjs?");

/***/ }),

/***/ "./output/kernel_ixml_json_to_data.clas.mjs":
/*!**************************************************!*\
  !*** ./output/kernel_ixml_json_to_data.clas.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_ixml_json_to_data\": () => (/* binding */ kernel_ixml_json_to_data)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_ixml_json_to_data.clas.abap\nclass kernel_ixml_json_to_data {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async get_field_name(INPUT) {\n    return kernel_ixml_json_to_data.get_field_name(INPUT);\n  }\n  static async get_field_name(INPUT) {\n    let rv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let ii_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    if (INPUT && INPUT.ii_node) {ii_node.set(INPUT.ii_node);}\n    let li_aiterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    let li_anode = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let attr = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NAMED_NODE_MAP\"});\n    attr.set((await ii_node.get().if_ixml_node$get_attributes()));\n    if (abap.compare.initial(attr) === false) {\n      li_aiterator.set((await attr.get().if_ixml_named_node_map$create_iterator()));\n      const indexBackup1 = abap.builtin.sy.get().index.get();\n      let unique60 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique60++);\n        li_anode.set((await li_aiterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_anode)) {\n          break;\n        }\n        rv_name.set((await li_anode.get().if_ixml_node$get_value()));\n        abap.builtin.sy.get().index.set(indexBackup1);\n        return rv_name;\n      }\n      abap.builtin.sy.get().index.set(indexBackup1);\n    }\n    return rv_name;\n  }\n  async build(INPUT) {\n    return kernel_ixml_json_to_data.build(INPUT);\n  }\n  static async build(INPUT) {\n    let iv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n    let ii_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    if (INPUT && INPUT.ii_doc) {ii_doc.set(INPUT.ii_doc);}\n    let li_first = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let li_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    li_first.set((await (await ii_doc.get().if_ixml_document$get_root()).get().if_ixml_node$get_first_child()));\n    abap.statements.assert(abap.compare.eq((await li_first.get().if_ixml_node$get_name()), new abap.types.Character(6).set('object')));\n    li_iterator.set((await (await li_first.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n    const indexBackup1 = abap.builtin.sy.get().index.get();\n    let unique61 = 1;\n    while (true) {\n      abap.builtin.sy.get().index.set(unique61++);\n      li_node.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n      if (abap.compare.initial(li_node)) {\n        break;\n      }\n      lv_name.set((await this.get_field_name({ii_node: li_node})));\n      if (abap.compare.eq(lv_name, iv_name)) {\n        await this.traverse({iv_ref: iv_ref, ii_node: li_node});\n        abap.builtin.sy.get().index.set(indexBackup1);\n        return;\n      }\n    }\n    abap.builtin.sy.get().index.set(indexBackup1);\n  }\n  async traverse(INPUT) {\n    return kernel_ixml_json_to_data.traverse(INPUT);\n  }\n  static async traverse(INPUT) {\n    let ii_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    if (INPUT && INPUT.ii_node) {ii_node.set(INPUT.ii_node);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n    let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let li_child = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_tab_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n    let unique62 = lo_type.get().kind;\n    if (abap.compare.eq(unique62, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n      abap.statements.assert(abap.compare.eq((await ii_node.get().if_ixml_node$get_name()), new abap.types.Character(6).set('object')));\n      abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      const indexBackup1 = abap.builtin.sy.get().index.get();\n      let unique63 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique63++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        lv_name.set((await this.get_field_name({ii_node: li_child})));\n        abap.statements.assign({component: lv_name, target: fs_field_, source: fs_any_});\n        if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n          lv_ref.assign(fs_field_.getPointer());\n          await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        }\n      }\n      abap.builtin.sy.get().index.set(indexBackup1);\n    } else if (abap.compare.eq(unique62, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n      li_child.set((await ii_node.get().if_ixml_node$get_first_child()));\n      abap.statements.assert(abap.compare.eq((await li_child.get().if_ixml_node$get_name()), new abap.types.Character(5).set('#text')));\n      abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n      fs_any_.set((await li_child.get().if_ixml_node$get_value()));\n      if (abap.compare.eq(lo_type.get().type_kind, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_char) || abap.compare.eq(lo_type.get().type_kind, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_clike) || abap.compare.eq(lo_type.get().type_kind, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_string)) {\n        abap.statements.replace({target: fs_any_, all: true, with: new abap.types.Character(1).set('\"'), of: new abap.types.Character(2).set('\\\\\"')});\n      }\n    } else if (abap.compare.eq(unique62, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n      abap.statements.assert(abap.compare.eq((await ii_node.get().if_ixml_node$get_name()), new abap.types.Character(5).set('array')));\n      abap.statements.assign({target: fs_tab_, source: (iv_ref).dereference()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      const indexBackup2 = abap.builtin.sy.get().index.get();\n      let unique64 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique64++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        abap.statements.createData(lv_ref,{\"likeLineOf\": fs_tab_});\n        abap.statements.assign({target: fs_any_, source: (lv_ref).dereference()});\n        await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        abap.statements.insertInternal({data: fs_any_, table: fs_tab_});\n      }\n      abap.builtin.sy.get().index.set(indexBackup2);\n    } else {\n      console.dir(lo_type.get().kind.get());\n    }\n  }\n}\nabap.Classes['KERNEL_IXML_JSON_TO_DATA'] = kernel_ixml_json_to_data;\n\n//# sourceMappingURL=kernel_ixml_json_to_data.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_ixml_json_to_data.clas.mjs?");

/***/ }),

/***/ "./output/kernel_ixml_xml_to_data.clas.mjs":
/*!*************************************************!*\
  !*** ./output/kernel_ixml_xml_to_data.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_ixml_xml_to_data\": () => (/* binding */ kernel_ixml_xml_to_data)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_ixml_xml_to_data.clas.abap\nclass kernel_ixml_xml_to_data {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async build(INPUT) {\n    return kernel_ixml_xml_to_data.build(INPUT);\n  }\n  static async build(INPUT) {\n    let iv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n    let ii_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    if (INPUT && INPUT.ii_doc) {ii_doc.set(INPUT.ii_doc);}\n    let li_first = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n    let li_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    await abap.statements.cast(li_first, (await (await ii_doc.get().if_ixml_document$get_root()).get().if_ixml_node$get_first_child()));\n    li_node.set((await li_first.get().if_ixml_element$find_from_name_ns({name: iv_name, depth: new abap.types.Integer().set(0), namespace: new abap.types.Character(1).set('')})));\n    if (abap.compare.initial(li_node) === false) {\n      await this.traverse({ii_node: li_node, iv_ref: iv_ref});\n    }\n  }\n  async traverse(INPUT) {\n    return kernel_ixml_xml_to_data.traverse(INPUT);\n  }\n  static async traverse(INPUT) {\n    let ii_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    if (INPUT && INPUT.ii_node) {ii_node.set(INPUT.ii_node);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n    let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let li_child = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_tab_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n    let unique65 = lo_type.get().kind;\n    if (abap.compare.eq(unique65, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n      abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      const indexBackup1 = abap.builtin.sy.get().index.get();\n      let unique66 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique66++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        lv_name.set((await li_child.get().if_ixml_node$get_name()));\n        abap.statements.assign({component: lv_name, target: fs_field_, source: fs_any_});\n        if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n          lv_ref.assign(fs_field_.getPointer());\n          await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        }\n      }\n      abap.builtin.sy.get().index.set(indexBackup1);\n    } else if (abap.compare.eq(unique65, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n      li_child.set((await ii_node.get().if_ixml_node$get_first_child()));\n      if (abap.compare.initial(li_child) === false) {\n        abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n        fs_any_.set((await li_child.get().if_ixml_node$get_value()));\n      }\n    } else if (abap.compare.eq(unique65, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n      abap.statements.assign({target: fs_tab_, source: (iv_ref).dereference()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      const indexBackup2 = abap.builtin.sy.get().index.get();\n      let unique67 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique67++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        abap.statements.createData(lv_ref,{\"likeLineOf\": fs_tab_});\n        abap.statements.assign({target: fs_any_, source: (lv_ref).dereference()});\n        await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        abap.statements.insertInternal({data: fs_any_, table: fs_tab_});\n      }\n      abap.builtin.sy.get().index.set(indexBackup2);\n    } else {\n      console.dir(lo_type.get().kind.get());\n    }\n  }\n}\nabap.Classes['KERNEL_IXML_XML_TO_DATA'] = kernel_ixml_xml_to_data;\n\n//# sourceMappingURL=kernel_ixml_xml_to_data.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_ixml_xml_to_data.clas.mjs?");

/***/ }),

/***/ "./output/kernel_json_to_ixml.clas.mjs":
/*!*********************************************!*\
  !*** ./output/kernel_json_to_ixml.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_json_to_ixml\": () => (/* binding */ kernel_json_to_ixml)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_json_to_ixml.clas.abap\nclass kernel_json_to_ixml {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async build(INPUT) {\n    return kernel_json_to_ixml.build(INPUT);\n  }\n  static async build(INPUT) {\n    let ri_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    let iv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_json) {iv_json.set(INPUT.iv_json);}\n    let li_reader = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_READER\"});\n    let li_node = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_NODE\"});\n    let li_close = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_CLOSE_ELEMENT\"});\n    let li_open = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_OPEN_ELEMENT\"});\n    let li_value = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_VALUE_NODE\"});\n    let lt_attributes = abap.types.TableFactory.construct(new abap.types.ABAPObject({qualifiedName: \"IF_SXML_ATTRIBUTE\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"if_sxml_attribute=>attributes\");\n    let li_attribute = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_ATTRIBUTE\"});\n    let li_current = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_map = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NAMED_NODE_MAP\"});\n    let li_new = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let li_element = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n    li_reader.set((await abap.Classes['CL_SXML_STRING_READER'].create({data: (await abap.Classes['CL_ABAP_CODEPAGE'].convert_to({source: iv_json}))})));\n    ri_doc.set((await (await abap.Classes['CL_IXML'].create()).get().if_ixml$create_document()));\n    li_current.set((await ri_doc.get().if_ixml_document$get_root()));\n    const indexBackup1 = abap.builtin.sy.get().index.get();\n    let unique68 = 1;\n    while (true) {\n      abap.builtin.sy.get().index.set(unique68++);\n      li_node.set((await li_reader.get().if_sxml_reader$read_next_node()));\n      if (abap.compare.initial(li_node)) {\n        break;\n      }\n      let unique69 = li_node.get().if_sxml_node$type;\n      if (abap.compare.eq(unique69, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_element_open)) {\n        await abap.statements.cast(li_open, li_node);\n        abap.statements.clear(lv_name);\n        lt_attributes.set((await li_open.get().if_sxml_open_element$get_attributes()));\n        for await (const unique70 of abap.statements.loop(lt_attributes)) {\n          li_attribute.set(unique70);\n          lv_name.set((await li_attribute.get().if_sxml_attribute$get_value()));\n        }\n        li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: li_open.get().if_sxml_open_element$qname.get().name})));\n        await abap.statements.cast(li_new, li_element);\n        await li_current.get().if_ixml_node$append_child({new_child: li_new});\n        li_current.set(li_new);\n        if (abap.compare.initial(lv_name) === false) {\n          li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: new abap.types.Character(4).set('name')})));\n          await abap.statements.cast(li_new, li_element);\n          await li_new.get().if_ixml_node$set_value({value: lv_name});\n          li_map.set((await li_current.get().if_ixml_node$get_attributes()));\n          await li_map.get().if_ixml_named_node_map$set_named_item_ns({node: li_new});\n        }\n      } else if (abap.compare.eq(unique69, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_element_close)) {\n        await abap.statements.cast(li_close, li_node);\n        li_current.set((await li_current.get().if_ixml_node$get_parent()));\n      } else if (abap.compare.eq(unique69, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_value)) {\n        await abap.statements.cast(li_value, li_node);\n        li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: new abap.types.Character(5).set('#text')})));\n        await li_element.get().if_ixml_element$set_value({value: (await li_value.get().if_sxml_value_node$get_value())});\n        await abap.statements.cast(li_new, li_element);\n        await li_current.get().if_ixml_node$append_child({new_child: li_new});\n      }\n    }\n    abap.builtin.sy.get().index.set(indexBackup1);\n    return ri_doc;\n  }\n}\nabap.Classes['KERNEL_JSON_TO_IXML'] = kernel_json_to_ixml;\n\n//# sourceMappingURL=kernel_json_to_ixml.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_json_to_ixml.clas.mjs?");

/***/ }),

/***/ "./output/kernel_lock.clas.mjs":
/*!*************************************!*\
  !*** ./output/kernel_lock.clas.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_lock\": () => (/* binding */ kernel_lock)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_lock.clas.abap\nclass kernel_lock {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async enqueue(INPUT) {\n    return kernel_lock.enqueue(INPUT);\n  }\n  static async enqueue(INPUT) {\n    let input = new abap.types.Character(4);\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n    abap.builtin.sy.get().subrc.set(0);\n  }\n  async dequeue(INPUT) {\n    return kernel_lock.dequeue(INPUT);\n  }\n  static async dequeue(INPUT) {\n    let input = new abap.types.Character(4);\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n  }\n}\nabap.Classes['KERNEL_LOCK'] = kernel_lock;\n\n//# sourceMappingURL=kernel_lock.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_lock.clas.mjs?");

/***/ }),

/***/ "./output/kernel_numberrange.clas.mjs":
/*!********************************************!*\
  !*** ./output/kernel_numberrange.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_numberrange\": () => (/* binding */ kernel_numberrange)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_numberrange.clas.abap\nclass kernel_numberrange {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"STATUS\": {\"type\": () => {return abap.types.TableFactory.construct(new abap.types.Structure({\"nr_range_nr\": new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"}), \"object\": new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"}), \"number\": new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"})}, \"kernel_numberrange=>ty_status\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async number_get(INPUT) {\n    return kernel_numberrange.number_get(INPUT);\n  }\n  static async number_get(INPUT) {\n    let nr_range_nr = new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"});\n    if (INPUT && INPUT.nr_range_nr) {nr_range_nr.set(INPUT.nr_range_nr);}\n    let object = new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"});\n    if (INPUT && INPUT.object) {object.set(INPUT.object);}\n    let number = new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"});\n    if (INPUT && INPUT.number) {number = INPUT.number;}\n    let fs_row_ = new abap.types.FieldSymbol(new abap.types.Structure({\"nr_range_nr\": new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"}), \"object\": new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"}), \"number\": new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"})}, \"kernel_numberrange=>ty_status\"));\n    abap.statements.readTable(kernel_numberrange.status,{assigning: fs_row_,\n      withKey: (i) => {return abap.compare.eq(i.nr_range_nr, nr_range_nr) && abap.compare.eq(i.object, object);},\n      withKeyValue: [{key: (i) => {return i.nr_range_nr}, value: nr_range_nr},{key: (i) => {return i.object}, value: object}],\n      usesTableLine: false,\n      withKeySimple: {\"nr_range_nr\": nr_range_nr,\"object\": object}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))) {\n      fs_row_.get().number.set(abap.operators.add(fs_row_.get().number,new abap.types.Integer().set(1)));\n    } else {\n      fs_row_.assign(kernel_numberrange.status.appendInitial());\n      fs_row_.get().nr_range_nr.set(nr_range_nr);\n      fs_row_.get().object.set(object);\n      fs_row_.get().number.set(new abap.types.Integer().set(1));\n    }\n    number.set(fs_row_.get().number);\n  }\n}\nabap.Classes['KERNEL_NUMBERRANGE'] = kernel_numberrange;\nkernel_numberrange.status = abap.types.TableFactory.construct(new abap.types.Structure({\"nr_range_nr\": new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"}), \"object\": new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"}), \"number\": new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"})}, \"kernel_numberrange=>ty_status\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\nkernel_numberrange.ty_status = new abap.types.Structure({\"nr_range_nr\": new abap.types.Character(2, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_interval\"}), \"object\": new abap.types.Character(10, {\"qualifiedName\":\"cl_numberrange_runtime=>nr_object\"}), \"number\": new abap.types.Numc({length: 20, qualifiedName: \"cl_numberrange_runtime=>nr_number\"})}, \"kernel_numberrange=>ty_status\");\n\n//# sourceMappingURL=kernel_numberrange.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_numberrange.clas.mjs?");

/***/ }),

/***/ "./output/kernel_push_channels.clas.mjs":
/*!**********************************************!*\
  !*** ./output/kernel_push_channels.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_push_channels\": () => (/* binding */ kernel_push_channels)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_push_channels.clas.abap\nclass kernel_push_channels {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async wait() {\n    return kernel_push_channels.wait();\n  }\n  static async wait() {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n}\nabap.Classes['KERNEL_PUSH_CHANNELS'] = kernel_push_channels;\n\n//# sourceMappingURL=kernel_push_channels.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_push_channels.clas.mjs?");

/***/ }),

/***/ "./output/kernel_scan_abap_source.clas.mjs":
/*!*************************************************!*\
  !*** ./output/kernel_scan_abap_source.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_scan_abap_source\": () => (/* binding */ kernel_scan_abap_source)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_scan_abap_source.clas.abap\nclass kernel_scan_abap_source {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"GC_TOKEN\": {\"type\": () => {return new abap.types.Structure({\"comment\": new abap.types.Character(1, {}), \"identifier\": new abap.types.Character(1, {}), \"list\": new abap.types.Character(1, {}), \"literal\": new abap.types.Character(1, {}), \"pragma\": new abap.types.Character(1, {})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"},\n  \"GC_STATEMENT\": {\"type\": () => {return new abap.types.Structure({\"comment\": new abap.types.Character(1, {}), \"comment_in_stmnt\": new abap.types.Character(1, {}), \"compute_direct\": new abap.types.Character(1, {}), \"empty\": new abap.types.Character(1, {}), \"macro_call\": new abap.types.Character(1, {}), \"macro_definition\": new abap.types.Character(1, {}), \"method_direct\": new abap.types.Character(1, {}), \"native_sql\": new abap.types.Character(1, {}), \"pragma\": new abap.types.Character(1, {}), \"standard\": new abap.types.Character(1, {})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.gc_token = kernel_scan_abap_source.gc_token;\n    this.gc_statement = kernel_scan_abap_source.gc_statement;\n    return this;\n  }\n  async call(INPUT) {\n    return kernel_scan_abap_source.call(INPUT);\n  }\n  static async call(INPUT) {\n    let input = new abap.types.Character(4);\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    let lt_sstmnt = abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    let lt_stokes = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKES\", \"STOKES\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STOKES_TAB\");\n    let ls_stokes = new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKES\", \"STOKES\");\n    let lt_stokesx = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    let ls_stokesx = new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\");\n    let lv_source = new abap.types.String({qualifiedName: \"STRING\"});\n    lv_source.set(INPUT.scan_abap_source.array ? INPUT.scan_abap_source.array().map(e => e.get()).join(\"\\n\") : INPUT.scan_abap_source.get());\n    await this.call_internal({source: lv_source, et_stokesx: lt_stokesx, et_sstmnt: lt_sstmnt});\n    for await (const unique74 of abap.statements.loop(lt_stokesx)) {\n      ls_stokesx.set(unique74);\n      abap.statements.clear(ls_stokes);\n      abap.statements.moveCorresponding(ls_stokesx, ls_stokes);\n      abap.statements.append({source: ls_stokes, target: lt_stokes});\n    }\n    const len = Object.keys(INPUT.tokens_into.getRowType().get()).length;\n    INPUT.tokens_into.set(len == 4 ? lt_stokes : lt_stokesx);\n    INPUT.statements_into.set(lt_sstmnt);\n  }\n  async call_internal(INPUT) {\n    return kernel_scan_abap_source.call_internal(INPUT);\n  }\n  static async call_internal(INPUT) {\n    let source = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.source) {source.set(INPUT.source);}\n    let et_stokesx = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    if (INPUT && INPUT.et_stokesx) {et_stokesx = INPUT.et_stokesx;}\n    let et_sstmnt = abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    if (INPUT && INPUT.et_sstmnt) {et_sstmnt = INPUT.et_sstmnt;}\n    await this.pass1({source: source, et_tokens: et_stokesx, et_statements: et_sstmnt});\n    await this.pass2({ct_tokens: et_stokesx, ct_statements: et_sstmnt});\n  }\n  async pass1(INPUT) {\n    return kernel_scan_abap_source.pass1(INPUT);\n  }\n  static async pass1(INPUT) {\n    let source = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.source) {source.set(INPUT.source);}\n    let et_tokens = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    if (INPUT && INPUT.et_tokens) {et_tokens = INPUT.et_tokens;}\n    let et_statements = abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    if (INPUT && INPUT.et_statements) {et_statements = INPUT.et_statements;}\n    let c_mode = new abap.types.Structure({\"normal\": new abap.types.Integer({qualifiedName: \"I\"}), \"comment\": new abap.types.Integer({qualifiedName: \"I\"})}, undefined);\n    c_mode.get().normal.set(new abap.types.Integer().set(1));\n    c_mode.get().comment.set(new abap.types.Integer().set(2));\n    let character = new abap.types.Character(1, {});\n    let row = new abap.types.Integer({qualifiedName: \"I\"});\n    row.set(1);\n    let column = new abap.types.Integer({qualifiedName: \"I\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    let sfrom = new abap.types.Integer({qualifiedName: \"I\"});\n    sfrom.set(1);\n    let mode = new abap.types.Integer({qualifiedName: \"I\"});\n    let chain_tokens = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    let fs_trow_ = new abap.types.FieldSymbol(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"));\n    let fs_srow_ = new abap.types.FieldSymbol(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"));\n    mode.set(c_mode.get().normal);\n    const indexBackup1 = abap.builtin.sy.get().index.get();\n    let unique75 = 1;\n    while (abap.compare.initial(source) === false) {\n      abap.builtin.sy.get().index.set(unique75++);\n      character.set(source.getOffset({length: 1}));\n      source.set(source.getOffset({offset: 1}));\n      if (abap.compare.assigned(fs_trow_) === false && abap.compare.ne(character, new abap.types.Character(1).set('')) && abap.compare.ne(character, new abap.types.String().set(`\\n`))) {\n        fs_trow_.assign(et_tokens.appendInitial());\n        fs_trow_.get().row.set(row);\n        fs_trow_.get().col.set(column);\n        fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().identifier);\n      } else if (abap.compare.eq(mode, c_mode.get().normal) && (abap.compare.eq(character, new abap.types.Character(1).set('')) || abap.compare.ca(character, new abap.types.String().set(`.,`)))) {\n        fs_trow_.unassign();\n      } else if (abap.compare.eq(mode, c_mode.get().normal) && abap.compare.eq(character, new abap.types.Character(1).set(':'))) {\n        abap.statements.clear(chain_tokens);\n        abap.statements.append({source: et_tokens, from: sfrom, lines: true, target: chain_tokens});\n        await abap.statements.deleteInternal(chain_tokens,{where: (I) => {return abap.compare.eq(I.type, kernel_scan_abap_source.gc_token.get().comment);}});\n      }\n      if ((abap.compare.eq(mode, c_mode.get().normal) && abap.compare.ca(character, new abap.types.String().set(`.,`))) || abap.compare.eq(source, new abap.types.Character(1).set(''))) {\n        fs_srow_.assign(et_statements.appendInitial());\n        fs_srow_.get().terminator.set(character);\n        fs_srow_.get().from.set(sfrom);\n        fs_srow_.get().to.set(abap.builtin.lines({val: et_tokens}));\n        sfrom.set(abap.operators.add(fs_srow_.get().to,new abap.types.Integer().set(1)));\n        if (abap.compare.eq(character, new abap.types.Character(1).set(','))) {\n          abap.statements.append({source: chain_tokens, lines: true, target: et_tokens});\n        }\n      }\n      if (abap.compare.eq(character, new abap.types.String().set(`\\n`))) {\n        mode.set(c_mode.get().normal);\n        fs_trow_.unassign();\n        row.set(abap.operators.add(row,new abap.types.Integer().set(1)));\n        column.set(new abap.types.Integer().set(0));\n      } else {\n        if (abap.compare.assigned(fs_trow_)) {\n          if ((abap.compare.eq(character, new abap.types.Character(1).set('*')) && abap.compare.eq(column, new abap.types.Integer().set(0))) || abap.compare.eq(character, new abap.types.Character(1).set('\"'))) {\n            mode.set(c_mode.get().comment);\n            fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().comment);\n          }\n          if (abap.compare.eq(mode, c_mode.get().comment)) {\n            fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().comment);\n            abap.statements.concatenate({source: [fs_trow_.get().str, character], target: fs_trow_.get().str, respectingBlanks: true});\n          } else if (abap.compare.ne(character, new abap.types.Character(1).set(':'))) {\n            fs_trow_.get().str.set(abap.operators.concat(fs_trow_.get().str,abap.builtin.to_upper({val: new abap.types.String().set(`${abap.templateFormatting(character)}`)})));\n          }\n        }\n        column.set(abap.operators.add(column,new abap.types.Integer().set(1)));\n      }\n    }\n    abap.builtin.sy.get().index.set(indexBackup1);\n  }\n  async pass2(INPUT) {\n    return kernel_scan_abap_source.pass2(INPUT);\n  }\n  static async pass2(INPUT) {\n    let ct_tokens = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    if (INPUT && INPUT.ct_tokens) {ct_tokens = INPUT.ct_tokens;}\n    let ct_statements = abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    if (INPUT && INPUT.ct_statements) {ct_statements = INPUT.ct_statements;}\n    let fs_ls_statement_ = new abap.types.FieldSymbol(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"));\n    let ls_statement = new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\");\n    let ls_token = new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\");\n    let contains_comment = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let contains_normal = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let lv_count = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_statement_index = new abap.types.Integer({qualifiedName: \"I\"});\n    let lt_insert = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    let lt_delete = abap.types.TableFactory.construct(new abap.types.Integer({qualifiedName: \"I\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let lv_index = new abap.types.Integer({qualifiedName: \"I\"});\n    for await (const unique76 of abap.statements.loop(ct_statements)) {\n      fs_ls_statement_.assign(unique76);\n      lv_statement_index.set(abap.builtin.sy.get().tabix);\n      contains_comment.set(abap.builtin.abap_false);\n      contains_normal.set(abap.builtin.abap_false);\n      for await (const unique77 of abap.statements.loop(ct_tokens,{from: fs_ls_statement_.get().from,to: fs_ls_statement_.get().to})) {\n        ls_token.set(unique77);\n        if (abap.compare.eq(ls_token.get().type, kernel_scan_abap_source.gc_token.get().comment)) {\n          contains_comment.set(abap.builtin.abap_true);\n        } else {\n          contains_normal.set(abap.builtin.abap_true);\n        }\n      }\n      if (abap.compare.eq(contains_comment, abap.builtin.abap_true) && abap.compare.eq(contains_normal, abap.builtin.abap_true)) {\n        lv_count.set(new abap.types.Integer().set(0));\n        abap.statements.clear(lt_insert);\n        abap.statements.clear(lt_delete);\n        for await (const unique78 of abap.statements.loop(ct_tokens,{from: fs_ls_statement_.get().from,to: fs_ls_statement_.get().to})) {\n          ls_token.set(unique78);\n          if (abap.compare.eq(ls_token.get().type, kernel_scan_abap_source.gc_token.get().comment)) {\n            abap.statements.insertInternal({data: abap.builtin.sy.get().tabix, index: new abap.types.Integer().set(1), table: lt_delete});\n            abap.statements.insertInternal({data: ls_token, index: new abap.types.Integer().set(1), table: lt_insert});\n            lv_count.set(abap.operators.add(lv_count,new abap.types.Integer().set(1)));\n          }\n        }\n        for await (const unique79 of abap.statements.loop(lt_delete)) {\n          lv_index.set(unique79);\n          await abap.statements.deleteInternal(ct_tokens,{index: lv_index});\n        }\n        for await (const unique80 of abap.statements.loop(lt_insert)) {\n          ls_token.set(unique80);\n          abap.statements.insertInternal({data: ls_token, index: fs_ls_statement_.get().from, table: ct_tokens});\n        }\n        abap.statements.clear(ls_statement);\n        ls_statement.get().from.set(fs_ls_statement_.get().from);\n        ls_statement.get().to.set(abap.operators.minus(abap.operators.add(fs_ls_statement_.get().from,lv_count),new abap.types.Integer().set(1)));\n        ls_statement.get().type.set(kernel_scan_abap_source.gc_statement.get().comment);\n        fs_ls_statement_.get().from.set(abap.operators.add(fs_ls_statement_.get().from,lv_count));\n        abap.statements.insertInternal({data: ls_statement, index: lv_statement_index, table: ct_statements});\n      } else if (abap.compare.eq(contains_comment, abap.builtin.abap_true)) {\n        fs_ls_statement_.get().type.set(kernel_scan_abap_source.gc_statement.get().comment);\n      } else {\n        fs_ls_statement_.get().type.set(kernel_scan_abap_source.gc_statement.get().standard);\n      }\n    }\n  }\n}\nabap.Classes['KERNEL_SCAN_ABAP_SOURCE'] = kernel_scan_abap_source;\nkernel_scan_abap_source.gc_token = new abap.types.Structure({\"comment\": new abap.types.Character(1, {}), \"identifier\": new abap.types.Character(1, {}), \"list\": new abap.types.Character(1, {}), \"literal\": new abap.types.Character(1, {}), \"pragma\": new abap.types.Character(1, {})}, undefined);\nkernel_scan_abap_source.gc_token.get().comment.set('C');\nkernel_scan_abap_source.gc_token.get().identifier.set('I');\nkernel_scan_abap_source.gc_token.get().list.set('L');\nkernel_scan_abap_source.gc_token.get().literal.set('S');\nkernel_scan_abap_source.gc_token.get().pragma.set('P');\nkernel_scan_abap_source.gc_statement = new abap.types.Structure({\"comment\": new abap.types.Character(1, {}), \"comment_in_stmnt\": new abap.types.Character(1, {}), \"compute_direct\": new abap.types.Character(1, {}), \"empty\": new abap.types.Character(1, {}), \"macro_call\": new abap.types.Character(1, {}), \"macro_definition\": new abap.types.Character(1, {}), \"method_direct\": new abap.types.Character(1, {}), \"native_sql\": new abap.types.Character(1, {}), \"pragma\": new abap.types.Character(1, {}), \"standard\": new abap.types.Character(1, {})}, undefined);\nkernel_scan_abap_source.gc_statement.get().comment.set('P');\nkernel_scan_abap_source.gc_statement.get().comment_in_stmnt.set('S');\nkernel_scan_abap_source.gc_statement.get().compute_direct.set('C');\nkernel_scan_abap_source.gc_statement.get().empty.set('N');\nkernel_scan_abap_source.gc_statement.get().macro_call.set('D');\nkernel_scan_abap_source.gc_statement.get().macro_definition.set('M');\nkernel_scan_abap_source.gc_statement.get().method_direct.set('A');\nkernel_scan_abap_source.gc_statement.get().native_sql.set('E');\nkernel_scan_abap_source.gc_statement.get().pragma.set('G');\nkernel_scan_abap_source.gc_statement.get().standard.set('K');\nkernel_scan_abap_source.ty_stokesx = abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\nkernel_scan_abap_source.ty_sstmnt = abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n\n//# sourceMappingURL=kernel_scan_abap_source.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_scan_abap_source.clas.mjs?");

/***/ }),

/***/ "./output/kernel_unit_runner.clas.mjs":
/*!********************************************!*\
  !*** ./output/kernel_unit_runner.clas.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_unit_runner\": () => (/* binding */ kernel_unit_runner)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_unit_runner.clas.abap\nclass kernel_unit_runner {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_CONSOLE\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"U\", \"is_constant\": \" \"},\n  \"GC_STATUS\": {\"type\": () => {return new abap.types.Structure({\"success\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"failed\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"skipped\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"})}, undefined);}, \"visibility\": \"U\", \"is_constant\": \"X\"}};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.gc_status = kernel_unit_runner.gc_status;\n    return this;\n  }\n  async get_location(INPUT) {\n    return kernel_unit_runner.get_location(INPUT);\n  }\n  static async get_location(INPUT) {\n    let rv_location = new abap.types.String({qualifiedName: \"STRING\"});\n    let ix_error = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    if (INPUT && INPUT.ix_error) {ix_error.set(INPUT.ix_error);}\n    let lv_stack = new abap.types.String({qualifiedName: \"STRING\"});\n    let lt_lines = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let lv_found = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    lv_stack.set(INPUT.ix_error.get().stack);\n    abap.statements.split({source: lv_stack, at: new abap.types.String().set(`\\n`), table: lt_lines});\n    for await (const unique108 of abap.statements.loop(lt_lines)) {\n      lv_stack.set(unique108);\n      if (abap.compare.cp(lv_stack, new abap.types.Character(21).set('*cl_abap_unit_assert*'))) {\n        lv_found.set(abap.builtin.abap_true);\n        continue;\n      } else if (abap.compare.eq(lv_found, abap.builtin.abap_true)) {\n        abap.statements.replace({target: lv_stack, all: false, with: new abap.types.Character(1).set(''), of: new abap.types.String().set(`at `)});\n        rv_location.set(abap.builtin.condense({val: lv_stack}));\n        break;\n      }\n    }\n    return rv_location;\n  }\n  async to_json(INPUT) {\n    return kernel_unit_runner.to_json(INPUT);\n  }\n  static async to_json(INPUT) {\n    let rv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    let it_list = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_result-list\");\n    if (INPUT && INPUT.it_list) {it_list.set(INPUT.it_list);}\n    let ls_list = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\");\n    let lt_strings = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\n    let lv_string = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_message = new abap.types.String({qualifiedName: \"STRING\"});\n    for await (const unique109 of abap.statements.loop(it_list)) {\n      ls_list.set(unique109);\n      lv_message.set(ls_list.get().message);\n      abap.statements.replace({target: lv_message, all: true, with: new abap.types.String().set(`\\\"`), of: new abap.types.String().set(`\"`)});\n      abap.statements.replace({target: lv_message, all: true, with: new abap.types.String().set(`\\\\n`), of: new abap.types.String().set(`\\n`)});\n      abap.statements.replace({target: ls_list.get().expected, all: true, with: new abap.types.String().set(`\\\"`), of: new abap.types.String().set(`\"`)});\n      abap.statements.replace({target: ls_list.get().expected, all: true, with: new abap.types.String().set(`\\\\n`), of: new abap.types.String().set(`\\n`)});\n      abap.statements.replace({target: ls_list.get().actual, all: true, with: new abap.types.String().set(`\\\"`), of: new abap.types.String().set(`\"`)});\n      abap.statements.replace({target: ls_list.get().actual, all: true, with: new abap.types.String().set(`\\\\n`), of: new abap.types.String().set(`\\n`)});\n      abap.statements.replace({target: ls_list.get().console, all: true, with: new abap.types.String().set(`\\\"`), of: new abap.types.String().set(`\"`)});\n      abap.statements.replace({target: ls_list.get().console, all: true, with: new abap.types.String().set(`\\\\n`), of: new abap.types.String().set(`\\n`)});\n      lv_string.set(new abap.types.String().set(`\\{\"class_name\": \"${abap.templateFormatting(ls_list.get().class_name)}\",\"testclass_name\": \"${abap.templateFormatting(ls_list.get().testclass_name)}\",\"method_name\": \"${abap.templateFormatting(ls_list.get().method_name)}\",\"expected\": \"${abap.templateFormatting(ls_list.get().expected)}\",\"actual\": \"${abap.templateFormatting(ls_list.get().actual)}\",\"status\": \"${abap.templateFormatting(ls_list.get().status)}\",\"runtime\": ${abap.templateFormatting(ls_list.get().runtime)},\"console\": \"${abap.templateFormatting(ls_list.get().console)}\",\"message\": \"${abap.templateFormatting(lv_message)}\",\"js_location\": \"${abap.templateFormatting(ls_list.get().js_location)}\"\\}`));\n      abap.statements.append({source: lv_string, target: lt_strings});\n    }\n    abap.statements.concatenate({source: [lt_strings], target: rv_json, separatedBy: new abap.types.Character(1).set(','), lines: true});\n    rv_json.set(abap.operators.concat(new abap.types.Character(1).set('['),abap.operators.concat(rv_json,new abap.types.Character(1).set(']'))));\n    return rv_json;\n  }\n  async unique_classes(INPUT) {\n    return kernel_unit_runner.unique_classes(INPUT);\n  }\n  static async unique_classes(INPUT) {\n    let rt_classes = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_classes\");\n    let it_input = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_input\");\n    if (INPUT && INPUT.it_input) {it_input.set(INPUT.it_input);}\n    let ls_input = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\");\n    let ls_class = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\");\n    for await (const unique110 of abap.statements.loop(it_input)) {\n      ls_input.set(unique110);\n      abap.statements.moveCorresponding(ls_input, ls_class);\n      abap.statements.insertInternal({data: ls_class, table: rt_classes});\n    }\n    abap.statements.sort(rt_classes,{});\n    await abap.statements.deleteInternal(rt_classes,{adjacent: true});\n    return rt_classes;\n  }\n  async run(INPUT) {\n    return kernel_unit_runner.run(INPUT);\n  }\n  static async run(INPUT) {\n    let rs_result = new abap.types.Structure({\"list\": abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_result-list\"), \"json\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT-JSON\"})}, \"kernel_unit_runner=>ty_result\");\n    let it_input = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_input\");\n    if (INPUT && INPUT.it_input) {it_input.set(INPUT.it_input);}\n    let ls_input = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\");\n    let lv_time = new abap.types.Integer({qualifiedName: \"I\"});\n    let lo_obj = new abap.types.ABAPObject();\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let lt_classes = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_classes\");\n    let ls_class = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\");\n    let lx_root = new abap.types.ABAPObject({qualifiedName: \"CX_ROOT\"});\n    let lx_assert = new abap.types.ABAPObject({qualifiedName: \"KERNEL_CX_ASSERT\"});\n    let fs_ls_result_ = new abap.types.FieldSymbol(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\"));\n    lt_classes.set((await this.unique_classes({it_input: it_input})));\n    for await (const unique111 of abap.statements.loop(lt_classes)) {\n      ls_class.set(unique111);\n      lv_name.set(new abap.types.String().set(`CLAS-${abap.templateFormatting(ls_class.get().class_name)}-${abap.templateFormatting(ls_class.get().testclass_name)}`));\n      if (abap.Classes[lv_name.get()] === undefined) { throw new abap.Classes['CX_SY_CREATE_OBJECT_ERROR']; }\n      lo_obj.set(await (new abap.Classes[lv_name.get()]()).constructor_());\n      try {\n        if (lo_obj.get().class_setup === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n        if (lo_obj.get().class_setup === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n        await lo_obj.get().class_setup();\n      } catch (e) {\n        if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD']) {\n        } else {\n          throw e;\n        }\n      }\n      for await (const unique112 of abap.statements.loop(it_input,{where: async (I) => {return abap.compare.eq(I.class_name, ls_class.get().class_name) && abap.compare.eq(I.testclass_name, ls_class.get().testclass_name);},topEquals: {\"class_name\": ls_class.get().class_name,\"testclass_name\": ls_class.get().testclass_name}})) {\n        ls_input.set(unique112);\n        fs_ls_result_.assign(rs_result.get().list.appendInitial());\n        abap.statements.moveCorresponding(ls_input, fs_ls_result_);\n        try {\n          if (lo_obj.get().setup === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n          if (lo_obj.get().setup === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n          await lo_obj.get().setup();\n        } catch (e) {\n          if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD']) {\n          } else {\n            throw e;\n          }\n        }\n        abap.statements.getRunTime(lv_time);\n        abap.statements.clear(kernel_unit_runner.mv_console);\n        try {\n          if (lo_obj.get()[ls_input.get().method_name.get().toLowerCase().trimEnd()] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n          if (lo_obj.get()[ls_input.get().method_name.get().toLowerCase().trimEnd()] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n          await lo_obj.get()[ls_input.get().method_name.get().toLowerCase().trimEnd()]();\n          fs_ls_result_.get().status.set(kernel_unit_runner.gc_status.get().success);\n          fs_ls_result_.get().console.set(kernel_unit_runner.mv_console);\n        } catch (e) {\n          if (e instanceof abap.Classes['KERNEL_CX_ASSERT']) {\n            lx_assert.set(e);\n            fs_ls_result_.get().status.set(kernel_unit_runner.gc_status.get().failed);\n            fs_ls_result_.get().actual.set(lx_assert.get().actual);\n            fs_ls_result_.get().expected.set(lx_assert.get().expected);\n            fs_ls_result_.get().message.set(lx_assert.get().msg);\n            fs_ls_result_.get().js_location.set((await this.get_location({ix_error: lx_assert})));\n            fs_ls_result_.get().console.set(kernel_unit_runner.mv_console);\n          } else if (e instanceof abap.Classes['CX_ROOT']) {\n            lx_root.set(e);\n            fs_ls_result_.get().status.set(kernel_unit_runner.gc_status.get().failed);\n            fs_ls_result_.get().message.set(new abap.types.String().set(`Some exception raised`));\n            fs_ls_result_.get().js_location.set((await this.get_location({ix_error: lx_root})));\n            fs_ls_result_.get().console.set(kernel_unit_runner.mv_console);\n          } else {\n            throw e;\n          }\n        }\n        abap.statements.getRunTime(lv_time);\n        fs_ls_result_.get().runtime.set(lv_time);\n        try {\n          if (lo_obj.get().teardown === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n          if (lo_obj.get().teardown === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n          await lo_obj.get().teardown();\n        } catch (e) {\n          if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD']) {\n          } else {\n            throw e;\n          }\n        }\n      }\n      try {\n        if (lo_obj.get().class_teardown === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n        if (lo_obj.get().class_teardown === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n        await lo_obj.get().class_teardown();\n      } catch (e) {\n        if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD']) {\n        } else {\n          throw e;\n        }\n      }\n    }\n    rs_result.get().json.set((await this.to_json({it_list: rs_result.get().list})));\n    return rs_result;\n  }\n}\nabap.Classes['KERNEL_UNIT_RUNNER'] = kernel_unit_runner;\nkernel_unit_runner.mv_console = new abap.types.String({qualifiedName: \"STRING\"});\nkernel_unit_runner.gc_status = new abap.types.Structure({\"success\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"failed\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"skipped\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"})}, undefined);\nkernel_unit_runner.gc_status.get().success.set('SUCCESS');\nkernel_unit_runner.gc_status.get().failed.set('FAILED');\nkernel_unit_runner.gc_status.get().skipped.set('SKIPPED');\nkernel_unit_runner.ty_input_item = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\");\nkernel_unit_runner.ty_input = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"})}, \"kernel_unit_runner=>ty_input_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_input\");\nkernel_unit_runner.ty_status = new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"});\nkernel_unit_runner.ty_result_item = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\");\nkernel_unit_runner.ty_result = new abap.types.Structure({\"list\": abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-testclass_name\"}), \"method_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_input_item-method_name\"}), \"expected\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-EXPECTED\"}), \"actual\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-ACTUAL\"}), \"status\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_STATUS\"}), \"runtime\": new abap.types.Integer({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-RUNTIME\"}), \"message\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-MESSAGE\"}), \"js_location\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-JS_LOCATION\"}), \"console\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT_ITEM-CONSOLE\"})}, \"kernel_unit_runner=>ty_result_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_result-list\"), \"json\": new abap.types.String({qualifiedName: \"KERNEL_UNIT_RUNNER=>TY_RESULT-JSON\"})}, \"kernel_unit_runner=>ty_result\");\nkernel_unit_runner.ty_class_item = new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\");\nkernel_unit_runner.ty_classes = abap.types.TableFactory.construct(new abap.types.Structure({\"class_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-class_name\"}), \"testclass_name\": new abap.types.Character(30, {\"qualifiedName\":\"kernel_unit_runner=>ty_class_item-testclass_name\"})}, \"kernel_unit_runner=>ty_class_item\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"kernel_unit_runner=>ty_classes\");\n\n//# sourceMappingURL=kernel_unit_runner.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_unit_runner.clas.mjs?");

/***/ }),

/***/ "./output/laiso.dtel.mjs":
/*!*******************************!*\
  !*** ./output/laiso.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"LAISO\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(2, {\"qualifiedName\":\"LAISO\",\"ddicName\":\"LAISO\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/laiso.dtel.mjs?");

/***/ }),

/***/ "./output/land1.dtel.mjs":
/*!*******************************!*\
  !*** ./output/land1.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"LAND1\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"LAND1\",\"ddicName\":\"LAND1\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/land1.dtel.mjs?");

/***/ }),

/***/ "./output/langu.dtel.mjs":
/*!*******************************!*\
  !*** ./output/langu.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"LANGU\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"LANGU\",\"ddicName\":\"LANGU\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/langu.dtel.mjs?");

/***/ }),

/***/ "./output/lvc_nokeyc.dtel.mjs":
/*!************************************!*\
  !*** ./output/lvc_nokeyc.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"LVC_NOKEYC\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"LVC_NOKEYC\",\"ddicName\":\"LVC_NOKEYC\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/lvc_nokeyc.dtel.mjs?");

/***/ }),

/***/ "./output/mandt.dtel.mjs":
/*!*******************************!*\
  !*** ./output/mandt.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"MANDT\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/mandt.dtel.mjs?");

/***/ }),

/***/ "./output/match_result.tabl.mjs":
/*!**************************************!*\
  !*** ./output/match_result.tabl.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"MATCH_RESULT\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/match_result.tabl.mjs?");

/***/ }),

/***/ "./output/match_result_tab.ttyp.mjs":
/*!******************************************!*\
  !*** ./output/match_result_tab.ttyp.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"MATCH_RESULT_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Integer(), \"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer(), \"submatches\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\")}, \"MATCH_RESULT\", \"MATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"MATCH_RESULT_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/match_result_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/msehi.dtel.mjs":
/*!*******************************!*\
  !*** ./output/msehi.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"MSEHI\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"MSEHI\",\"ddicName\":\"MSEHI\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/msehi.dtel.mjs?");

/***/ }),

/***/ "./output/number_get_next.fugr.number_get_next.mjs":
/*!*********************************************************!*\
  !*** ./output/number_get_next.fugr.number_get_next.mjs ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// number_get_next.fugr.number_get_next.abap\nasync function number_get_next(INPUT) {\n  // importing NR_RANGE_NR undefined false\n  let nr_range_nr = INPUT.exporting?.nr_range_nr;\n  // importing OBJECT undefined false\n  let object = INPUT.exporting?.object;\n  // exporting NUMBER undefined true\n  let number = INPUT.importing?.number;\n  if (number === undefined) {\n      number = new abap.types.Character(4);\n  }\n  await abap.Classes['KERNEL_NUMBERRANGE'].number_get({nr_range_nr: nr_range_nr, object: object, number: number});\n  abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n}\nabap.FunctionModules['NUMBER_GET_NEXT'] = number_get_next;\n//# sourceMappingURL=number_get_next.fugr.number_get_next.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/number_get_next.fugr.number_get_next.mjs?");

/***/ }),

/***/ "./output/numc4.dtel.mjs":
/*!*******************************!*\
  !*** ./output/numc4.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"NUMC4\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Numc({length: 4, qualifiedName: \"NUMC4\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/numc4.dtel.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.call_v1_ping.mjs":
/*!***********************************************!*\
  !*** ./output/openabap.fugr.call_v1_ping.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.call_v1_ping.abap\nasync function call_v1_ping(INPUT) {\n}\nabap.FunctionModules['CALL_V1_PING'] = call_v1_ping;\n//# sourceMappingURL=openabap.fugr.call_v1_ping.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.call_v1_ping.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.conversion_exit_alpha_input.mjs":
/*!**************************************************************!*\
  !*** ./output/openabap.fugr.conversion_exit_alpha_input.mjs ***!
  \**************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.conversion_exit_alpha_input.abap\nasync function conversion_exit_alpha_input(INPUT) {\n  // importing INPUT CLIKE false\n  let input = INPUT.exporting?.input;\n  // exporting OUTPUT CLIKE true\n  let output = INPUT.importing?.output;\n  if (output === undefined) {\n      output = new abap.types.Character();\n  }\n  let lv_len = new abap.types.Integer({qualifiedName: \"I\"});\n  let lv_tmp = new abap.types.String({qualifiedName: \"STRING\"});\n  lv_tmp.set(input);\n  abap.statements.condense(lv_tmp, {nogaps: false});\n  abap.statements.describe({field: output, length: lv_len, mode: 'CHARACTER'});\n  const indexBackup1 = abap.builtin.sy.get().index.get();\n  const unique20 = abap.operators.minus(lv_len.get(),abap.builtin.strlen({val: lv_tmp}).get()).get();\n  for (let unique21 = 0; unique21 < unique20; unique21++) {\n    abap.builtin.sy.get().index.set(unique21 + 1);\n    lv_tmp.set(abap.operators.concat(new abap.types.String().set(`0`),lv_tmp));\n  }\n  abap.builtin.sy.get().index.set(indexBackup1);\n  output.set(lv_tmp);\n}\nabap.FunctionModules['CONVERSION_EXIT_ALPHA_INPUT'] = conversion_exit_alpha_input;\n//# sourceMappingURL=openabap.fugr.conversion_exit_alpha_input.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.conversion_exit_alpha_input.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.conversion_exit_alpha_output.mjs":
/*!***************************************************************!*\
  !*** ./output/openabap.fugr.conversion_exit_alpha_output.mjs ***!
  \***************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.conversion_exit_alpha_output.abap\nasync function conversion_exit_alpha_output(INPUT) {\n  // importing INPUT CLIKE false\n  let input = INPUT.exporting?.input;\n  // exporting OUTPUT CLIKE true\n  let output = INPUT.importing?.output;\n  if (output === undefined) {\n      output = new abap.types.Character();\n  }\n  output.set(input);\n  abap.statements.shift(output, {direction: 'LEFT',deletingLeading: new abap.types.Character(1).set('0')});\n  const indexBackup1 = abap.builtin.sy.get().index.get();\n  const unique22 = abap.operators.minus(abap.builtin.strlen({val: input}),abap.builtin.strlen({val: output}).get()).get();\n  for (let unique23 = 0; unique23 < unique22; unique23++) {\n    abap.builtin.sy.get().index.set(unique23 + 1);\n    output.set(abap.operators.concat(output,new abap.types.String().set(` `)));\n  }\n  abap.builtin.sy.get().index.set(indexBackup1);\n}\nabap.FunctionModules['CONVERSION_EXIT_ALPHA_OUTPUT'] = conversion_exit_alpha_output;\n//# sourceMappingURL=openabap.fugr.conversion_exit_alpha_output.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.conversion_exit_alpha_output.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.conversion_exit_isola_input.mjs":
/*!**************************************************************!*\
  !*** ./output/openabap.fugr.conversion_exit_isola_input.mjs ***!
  \**************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.conversion_exit_isola_input.abap\nasync function conversion_exit_isola_input(INPUT) {\n  // importing INPUT undefined false\n  let input = INPUT.exporting?.input;\n  // exporting OUTPUT undefined true\n  let output = INPUT.importing?.output;\n  if (output === undefined) {\n      output = new abap.types.Character(4);\n  }\n  output.set((await abap.Classes['CL_I18N_LANGUAGES'].sap2_to_sap1({im_lang_sap2: input})));\n  if (abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(1))) {\n    throw new abap.ClassicError({classic: \"unknown_language\"});\n  }\n}\nabap.FunctionModules['CONVERSION_EXIT_ISOLA_INPUT'] = conversion_exit_isola_input;\n//# sourceMappingURL=openabap.fugr.conversion_exit_isola_input.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.conversion_exit_isola_input.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.conversion_exit_isola_output.mjs":
/*!***************************************************************!*\
  !*** ./output/openabap.fugr.conversion_exit_isola_output.mjs ***!
  \***************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.conversion_exit_isola_output.abap\nasync function conversion_exit_isola_output(INPUT) {\n  // importing INPUT undefined false\n  let input = INPUT.exporting?.input;\n  // exporting OUTPUT undefined true\n  let output = INPUT.importing?.output;\n  if (output === undefined) {\n      output = new abap.types.Character(4);\n  }\n  output.set((await abap.Classes['CL_I18N_LANGUAGES'].sap1_to_sap2({im_lang_sap1: input})));\n}\nabap.FunctionModules['CONVERSION_EXIT_ISOLA_OUTPUT'] = conversion_exit_isola_output;\n//# sourceMappingURL=openabap.fugr.conversion_exit_isola_output.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.conversion_exit_isola_output.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.convert_itf_to_stream_text.mjs":
/*!*************************************************************!*\
  !*** ./output/openabap.fugr.convert_itf_to_stream_text.mjs ***!
  \*************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.convert_itf_to_stream_text.abap\nasync function convert_itf_to_stream_text(INPUT) {\n  // importing LF undefined false\n  let lf = INPUT.exporting?.lf;\n  // exporting STREAM_LINES STRING_TABLE true\n  let stream_lines = INPUT.importing?.stream_lines;\n  if (stream_lines === undefined) {\n      stream_lines = abap.types.TableFactory.construct(new abap.types.String(), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STRING_TABLE\");\n  }\n  // tables ITF_TEXT TLINE false\n  let itf_text = INPUT.tables?.itf_text;\n  // tables TEXT_STREAM undefined true\n  let text_stream = INPUT.tables?.text_stream;\n  if (text_stream === undefined) {\n      text_stream = abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":true,\"keyType\":\"DEFAULT\"});\n  }\n  abap.statements.clear(stream_lines);\n  abap.statements.clear(text_stream);\n  if (abap.compare.eq(abap.builtin.lines({val: itf_text}), new abap.types.Integer().set(0))) {\n    return;\n  }\n  abap.statements.assert(abap.compare.eq(new abap.types.Character(4).set('todo'), new abap.types.Integer().set(1)));\n}\nabap.FunctionModules['CONVERT_ITF_TO_STREAM_TEXT'] = convert_itf_to_stream_text;\n//# sourceMappingURL=openabap.fugr.convert_itf_to_stream_text.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.convert_itf_to_stream_text.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.docu_get.mjs":
/*!*******************************************!*\
  !*** ./output/openabap.fugr.docu_get.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.docu_get.abap\nasync function docu_get(INPUT) {\n  // importing ID undefined false\n  let id = INPUT.exporting?.id;\n  // importing LANGU undefined false\n  let langu = INPUT.exporting?.langu;\n  // importing OBJECT undefined false\n  let object = INPUT.exporting?.object;\n  // importing TYP undefined false\n  let typ = INPUT.exporting?.typ;\n  // tables LINE TLINE false\n  let line = INPUT.tables?.line;\n  abap.statements.clear(line);\n  if (abap.compare.eq(id, new abap.types.Character(2).set('NA')) && abap.compare.eq(object, new abap.types.Character(5).set('00001'))) {\n    return;\n  }\n  console.dir(INPUT);\n  abap.statements.assert(abap.compare.eq(new abap.types.Character(4).set('todo'), new abap.types.Integer().set(1)));\n}\nabap.FunctionModules['DOCU_GET'] = docu_get;\n//# sourceMappingURL=openabap.fugr.docu_get.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.docu_get.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.function_exists.mjs":
/*!**************************************************!*\
  !*** ./output/openabap.fugr.function_exists.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.function_exists.abap\nasync function function_exists(INPUT) {\n}\nabap.FunctionModules['FUNCTION_EXISTS'] = function_exists;\n//# sourceMappingURL=openabap.fugr.function_exists.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.function_exists.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.generate_sec_random.mjs":
/*!******************************************************!*\
  !*** ./output/openabap.fugr.generate_sec_random.mjs ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.generate_sec_random.abap\nasync function generate_sec_random(INPUT) {\n  // importing LENGTH I false\n  let length = INPUT.exporting?.length;\n  // exporting RANDOM XSTRING true\n  let random = INPUT.importing?.random;\n  if (random === undefined) {\n      random = new abap.types.XString({qualifiedName: \"XSTRING\"});\n  }\n  abap.statements.assert(abap.compare.gt(length, new abap.types.Integer().set(0)));\n  const crypto = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_crypto-browserify_index_js\"), __webpack_require__.e(\"_d546-_8131-_3fc0-_cd53-_4068-_e7e4-_7bec-_0aec-_fbf1-_ed1b-_d17e\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"./node_modules/crypto-browserify/index.js\", 19));\n  random.set(crypto.randomBytes(length.get()).toString(\"hex\").toUpperCase());\n}\nabap.FunctionModules['GENERATE_SEC_RANDOM'] = generate_sec_random;\n//# sourceMappingURL=openabap.fugr.generate_sec_random.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.generate_sec_random.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.get_system_timezone.mjs":
/*!******************************************************!*\
  !*** ./output/openabap.fugr.get_system_timezone.mjs ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.get_system_timezone.abap\nasync function get_system_timezone(INPUT) {\n  // exporting TIMEZONE TIMEZONE true\n  let timezone = INPUT.importing?.timezone;\n  if (timezone === undefined) {\n      timezone = new abap.types.Character(6, {\"qualifiedName\":\"TIMEZONE\",\"ddicName\":\"TIMEZONE\"});\n  }\n  timezone.set(new abap.types.Character(3).set('UTC'));\n}\nabap.FunctionModules['GET_SYSTEM_TIMEZONE'] = get_system_timezone;\n//# sourceMappingURL=openabap.fugr.get_system_timezone.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.get_system_timezone.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.system_callstack.mjs":
/*!***************************************************!*\
  !*** ./output/openabap.fugr.system_callstack.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.system_callstack.abap\nasync function system_callstack(INPUT) {\n  // exporting CALLSTACK ABAP_CALLSTACK true\n  let callstack = INPUT.importing?.callstack;\n  if (callstack === undefined) {\n      callstack = abap.types.TableFactory.construct(new abap.types.Structure({\"mainprogram\": new abap.types.Character(40, {}), \"include\": new abap.types.Character(40, {}), \"line\": new abap.types.Integer(), \"blockname\": new abap.types.String()}, \"ABAP_CALLSTACK_LINE\", \"ABAP_CALLSTACK_LINE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"ABAP_CALLSTACK\");\n  }\n  let fs_fs_ = new abap.types.FieldSymbol(new abap.types.Structure({\"mainprogram\": new abap.types.Character(40, {}), \"include\": new abap.types.Character(40, {}), \"line\": new abap.types.Integer(), \"blockname\": new abap.types.String()}, \"ABAP_CALLSTACK_LINE\", \"ABAP_CALLSTACK_LINE\"));\n  fs_fs_.assign(callstack.appendInitial());\n  fs_fs_.get().mainprogram.set(new abap.types.Character(5).set('ZTODO'));\n  fs_fs_.get().include.set(new abap.types.Character(5).set('ZTODO'));\n  fs_fs_.get().line.set(new abap.types.Character(3).set('123'));\n}\nabap.FunctionModules['SYSTEM_CALLSTACK'] = system_callstack;\n//# sourceMappingURL=openabap.fugr.system_callstack.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.system_callstack.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.system_installed_languages.mjs":
/*!*************************************************************!*\
  !*** ./output/openabap.fugr.system_installed_languages.mjs ***!
  \*************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.system_installed_languages.abap\nasync function system_installed_languages(INPUT) {\n  // exporting LANGUAGES undefined true\n  let languages = INPUT.importing?.languages;\n  if (languages === undefined) {\n      languages = new abap.types.Character(4);\n  }\n  languages.set(abap.builtin.sy.get().langu);\n  abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n}\nabap.FunctionModules['SYSTEM_INSTALLED_LANGUAGES'] = system_installed_languages;\n//# sourceMappingURL=openabap.fugr.system_installed_languages.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.system_installed_languages.mjs?");

/***/ }),

/***/ "./output/openabap.fugr.text_split.mjs":
/*!*********************************************!*\
  !*** ./output/openabap.fugr.text_split.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// openabap.fugr.text_split.abap\nasync function text_split(INPUT) {\n  // importing LENGTH undefined false\n  let length = INPUT.exporting?.length;\n  // importing TEXT undefined false\n  let text = INPUT.exporting?.text;\n  // exporting LINE undefined true\n  let line = INPUT.importing?.line;\n  if (line === undefined) {\n      line = new abap.types.Character(4);\n  }\n  // exporting REST undefined true\n  let rest = INPUT.importing?.rest;\n  if (rest === undefined) {\n      rest = new abap.types.Character(4);\n  }\n  if (abap.compare.lt(abap.builtin.strlen({val: text}), new abap.types.Integer().set(50))) {\n    line.set(text);\n    rest.set(new abap.types.Character(1).set(''));\n  } else {\n    line.set(text.getOffset({length: 50}));\n    rest.set(text.getOffset({offset: 50}));\n    abap.statements.condense(rest, {nogaps: false});\n  }\n}\nabap.FunctionModules['TEXT_SPLIT'] = text_split;\n//# sourceMappingURL=openabap.fugr.text_split.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/openabap.fugr.text_split.mjs?");

/***/ }),

/***/ "./output/reposrc.tabl.mjs":
/*!*********************************!*\
  !*** ./output/reposrc.tabl.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"REPOSRC\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"progname\": new abap.types.Character(40, {}), \"data\": new abap.types.String(), \"unam\": new abap.types.Character(12, {}), \"udat\": new abap.types.Date(), \"utime\": new abap.types.Time()}, \"REPOSRC\", \"REPOSRC\"),\n  \"keyFields\": [\"PROGNAME\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/reposrc.tabl.mjs?");

/***/ }),

/***/ "./output/rfcdest.dtel.mjs":
/*!*********************************!*\
  !*** ./output/rfcdest.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"RFCDEST\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"RFCDEST\",\"ddicName\":\"RFCDEST\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/rfcdest.dtel.mjs?");

/***/ }),

/***/ "./output/scrtext_l.dtel.mjs":
/*!***********************************!*\
  !*** ./output/scrtext_l.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SCRTEXT_L\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(40, {\"qualifiedName\":\"SCRTEXT_L\",\"ddicName\":\"SCRTEXT_L\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/scrtext_l.dtel.mjs?");

/***/ }),

/***/ "./output/scrtext_m.dtel.mjs":
/*!***********************************!*\
  !*** ./output/scrtext_m.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SCRTEXT_M\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"SCRTEXT_M\",\"ddicName\":\"SCRTEXT_M\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/scrtext_m.dtel.mjs?");

/***/ }),

/***/ "./output/scrtext_s.dtel.mjs":
/*!***********************************!*\
  !*** ./output/scrtext_s.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SCRTEXT_S\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(10, {\"qualifiedName\":\"SCRTEXT_S\",\"ddicName\":\"SCRTEXT_S\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/scrtext_s.dtel.mjs?");

/***/ }),

/***/ "./output/scx_attrname.dtel.mjs":
/*!**************************************!*\
  !*** ./output/scx_attrname.dtel.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SCX_ATTRNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.String({qualifiedName: \"SCX_ATTRNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/scx_attrname.dtel.mjs?");

/***/ }),

/***/ "./output/scx_t100key.tabl.mjs":
/*!*************************************!*\
  !*** ./output/scx_t100key.tabl.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SCX_T100KEY\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"msgid\": new abap.types.Character(20, {}), \"msgno\": new abap.types.Numc({length: 3}), \"attr1\": new abap.types.Character(255, {}), \"attr2\": new abap.types.Character(255, {}), \"attr3\": new abap.types.Character(255, {}), \"attr4\": new abap.types.Character(255, {})}, \"SCX_T100KEY\", \"SCX_T100KEY\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/scx_t100key.tabl.mjs?");

/***/ }),

/***/ "./output/sdok_class.dtel.mjs":
/*!************************************!*\
  !*** ./output/sdok_class.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SDOK_CLASS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}),\n  \"domain\": \"SDOK_CLASS\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sdok_class.dtel.mjs?");

/***/ }),

/***/ "./output/sdok_docid.dtel.mjs":
/*!************************************!*\
  !*** ./output/sdok_docid.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SDOK_DOCID\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"}),\n  \"domain\": \"SDOK_DOCID\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sdok_docid.dtel.mjs?");

/***/ }),

/***/ "./output/sdokobject.tabl.mjs":
/*!************************************!*\
  !*** ./output/sdokobject.tabl.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SDOKOBJECT\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sdokobject.tabl.mjs?");

/***/ }),

/***/ "./output/seoclsname.dtel.mjs":
/*!************************************!*\
  !*** ./output/seoclsname.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SEOCLSNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"SEOCLSNAME\",\"ddicName\":\"SEOCLSNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/seoclsname.dtel.mjs?");

/***/ }),

/***/ "./output/shm_affect_server.dtel.mjs":
/*!*******************************************!*\
  !*** ./output/shm_affect_server.dtel.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_AFFECT_SERVER\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SHM_AFFECT_SERVER\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_affect_server.dtel.mjs?");

/***/ }),

/***/ "./output/shm_area_name.dtel.mjs":
/*!***************************************!*\
  !*** ./output/shm_area_name.dtel.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_AREA_NAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_area_name.dtel.mjs?");

/***/ }),

/***/ "./output/shm_attach_mode.dtel.mjs":
/*!*****************************************!*\
  !*** ./output/shm_attach_mode.dtel.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_ATTACH_MODE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SHM_ATTACH_MODE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_attach_mode.dtel.mjs?");

/***/ }),

/***/ "./output/shm_auto_build_class_name.dtel.mjs":
/*!***************************************************!*\
  !*** ./output/shm_auto_build_class_name.dtel.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_AUTO_BUILD_CLASS_NAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"SHM_AUTO_BUILD_CLASS_NAME\",\"ddicName\":\"SHM_AUTO_BUILD_CLASS_NAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_auto_build_class_name.dtel.mjs?");

/***/ }),

/***/ "./output/shm_client.dtel.mjs":
/*!************************************!*\
  !*** ./output/shm_client.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_CLIENT\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"SHM_CLIENT\",\"ddicName\":\"SHM_CLIENT\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_client.dtel.mjs?");

/***/ }),

/***/ "./output/shm_constr_invocation_mode.dtel.mjs":
/*!****************************************************!*\
  !*** ./output/shm_constr_invocation_mode.dtel.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_CONSTR_INVOCATION_MODE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SHM_CONSTR_INVOCATION_MODE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_constr_invocation_mode.dtel.mjs?");

/***/ }),

/***/ "./output/shm_inst_info.tabl.mjs":
/*!***************************************!*\
  !*** ./output/shm_inst_info.tabl.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_INST_INFO\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"client\": new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"}), \"name\": new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"})}, \"SHM_INST_INFO\", \"SHM_INST_INFO\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_inst_info.tabl.mjs?");

/***/ }),

/***/ "./output/shm_inst_infos.ttyp.mjs":
/*!****************************************!*\
  !*** ./output/shm_inst_infos.ttyp.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_INST_INFOS\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"client\": new abap.types.Character(3, {\"qualifiedName\":\"MANDT\",\"ddicName\":\"MANDT\"}), \"name\": new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"})}, \"SHM_INST_INFO\", \"SHM_INST_INFO\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SHM_INST_INFOS\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_inst_infos.ttyp.mjs?");

/***/ }),

/***/ "./output/shm_inst_name.dtel.mjs":
/*!***************************************!*\
  !*** ./output/shm_inst_name.dtel.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_INST_NAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(80, {\"qualifiedName\":\"SHM_INST_NAME\",\"ddicName\":\"SHM_INST_NAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_inst_name.dtel.mjs?");

/***/ }),

/***/ "./output/shm_life_context.dtel.mjs":
/*!******************************************!*\
  !*** ./output/shm_life_context.dtel.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_LIFE_CONTEXT\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SHM_LIFE_CONTEXT\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_life_context.dtel.mjs?");

/***/ }),

/***/ "./output/shm_properties.tabl.mjs":
/*!****************************************!*\
  !*** ./output/shm_properties.tabl.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_PROPERTIES\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHM_PROPERTIES\", \"SHM_PROPERTIES\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_properties.tabl.mjs?");

/***/ }),

/***/ "./output/shm_rc.dtel.mjs":
/*!********************************!*\
  !*** ./output/shm_rc.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHM_RC\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SHM_RC\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shm_rc.dtel.mjs?");

/***/ }),

/***/ "./output/shma_attributes.tabl.mjs":
/*!*****************************************!*\
  !*** ./output/shma_attributes.tabl.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHMA_ATTRIBUTES\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"area_name\": new abap.types.Character(30, {\"qualifiedName\":\"SHM_AREA_NAME\",\"ddicName\":\"SHM_AREA_NAME\"}), \"properties\": new abap.types.Structure({\"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHM_PROPERTIES\", \"SHM_PROPERTIES\"), \"auto_build\": new abap.types.Character(1, {}), \"has_versions\": new abap.types.Character(1, {})}, \"SHMA_ATTRIBUTES\", \"SHMA_ATTRIBUTES\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shma_attributes.tabl.mjs?");

/***/ }),

/***/ "./output/shma_client.dtel.mjs":
/*!*************************************!*\
  !*** ./output/shma_client.dtel.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHMA_CLIENT\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(3, {\"qualifiedName\":\"SHMA_CLIENT\",\"ddicName\":\"SHMA_CLIENT\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shma_client.dtel.mjs?");

/***/ }),

/***/ "./output/shmm_trc_variant_name.dtel.mjs":
/*!***********************************************!*\
  !*** ./output/shmm_trc_variant_name.dtel.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SHMM_TRC_VARIANT_NAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"SHMM_TRC_VARIANT_NAME\",\"ddicName\":\"SHMM_TRC_VARIANT_NAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/shmm_trc_variant_name.dtel.mjs?");

/***/ }),

/***/ "./output/skwf_io.tabl.mjs":
/*!*********************************!*\
  !*** ./output/skwf_io.tabl.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SKWF_IO\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"objtype\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}), \"object\": new abap.types.Structure({\"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SDOKOBJECT\", \"SDOKOBJECT\"), \"class\": new abap.types.Character(10, {\"qualifiedName\":\"SDOK_CLASS\",\"ddicName\":\"SDOK_CLASS\"}), \"objid\": new abap.types.Character(32, {\"qualifiedName\":\"SDOK_DOCID\",\"ddicName\":\"SDOK_DOCID\"})}, \"SKWF_IO\", \"SKWF_IO\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/skwf_io.tabl.mjs?");

/***/ }),

/***/ "./output/skwf_ioty.dtel.mjs":
/*!***********************************!*\
  !*** ./output/skwf_ioty.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SKWF_IOTY\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"SKWF_IOTY\",\"ddicName\":\"SKWF_IOTY\"}),\n  \"domain\": \"SKWF_IOTY\",\n  \"fixedValues\": [{\"description\":\"Undefined (= all)\",\"language\":\"E\"},{\"description\":\"Directory\",\"low\":\"F\",\"language\":\"E\"},{\"description\":\"LOIO\",\"low\":\"L\",\"language\":\"E\"},{\"description\":\"PHIO\",\"low\":\"P\",\"language\":\"E\"},{\"description\":\"Relationship\",\"low\":\"R\",\"language\":\"E\"}],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/skwf_ioty.dtel.mjs?");

/***/ }),

/***/ "./output/so_raw255.dtel.mjs":
/*!***********************************!*\
  !*** ./output/so_raw255.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SO_RAW255\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Hex({length: 255}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/so_raw255.dtel.mjs?");

/***/ }),

/***/ "./output/so_text255.dtel.mjs":
/*!************************************!*\
  !*** ./output/so_text255.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SO_TEXT255\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(255, {\"qualifiedName\":\"SO_TEXT255\",\"ddicName\":\"SO_TEXT255\"}),\n  \"domain\": \"SO_TEXT255\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/so_text255.dtel.mjs?");

/***/ }),

/***/ "./output/soli.tabl.mjs":
/*!******************************!*\
  !*** ./output/soli.tabl.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SOLI\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"line\": new abap.types.Character(255, {\"qualifiedName\":\"SO_TEXT255\",\"ddicName\":\"SO_TEXT255\"})}, \"SOLI\", \"SOLI\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/soli.tabl.mjs?");

/***/ }),

/***/ "./output/soli_tab.ttyp.mjs":
/*!**********************************!*\
  !*** ./output/soli_tab.ttyp.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SOLI_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Character(255, {\"qualifiedName\":\"SO_TEXT255\",\"ddicName\":\"SO_TEXT255\"})}, \"SOLI\", \"SOLI\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SOLI_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/soli_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/solix.tabl.mjs":
/*!*******************************!*\
  !*** ./output/solix.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SOLIX\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"SOLIX\", \"SOLIX\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/solix.tabl.mjs?");

/***/ }),

/***/ "./output/solix_tab.ttyp.mjs":
/*!***********************************!*\
  !*** ./output/solix_tab.ttyp.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SOLIX_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"SOLIX\", \"SOLIX\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SOLIX_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/solix_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/sotr_conc.dtel.mjs":
/*!***********************************!*\
  !*** ./output/sotr_conc.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SOTR_CONC\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"SOTR_CONC\",\"ddicName\":\"SOTR_CONC\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sotr_conc.dtel.mjs?");

/***/ }),

/***/ "./output/spras.dtel.mjs":
/*!*******************************!*\
  !*** ./output/spras.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SPRAS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"SPRAS\",\"ddicName\":\"SPRAS\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/spras.dtel.mjs?");

/***/ }),

/***/ "./output/ssfapplssl.dtel.mjs":
/*!************************************!*\
  !*** ./output/ssfapplssl.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SSFAPPLSSL\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(6, {\"qualifiedName\":\"SSFAPPLSSL\",\"ddicName\":\"SSFAPPLSSL\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/ssfapplssl.dtel.mjs?");

/***/ }),

/***/ "./output/sstmnt.tabl.mjs":
/*!********************************!*\
  !*** ./output/sstmnt.tabl.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SSTMNT\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sstmnt.tabl.mjs?");

/***/ }),

/***/ "./output/sstmnt_tab.ttyp.mjs":
/*!************************************!*\
  !*** ./output/sstmnt_tab.ttyp.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SSTMNT_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"level\": new abap.types.Integer(), \"struc\": new abap.types.Integer(), \"from\": new abap.types.Integer(), \"to\": new abap.types.Integer(), \"number\": new abap.types.Integer(), \"colonrow\": new abap.types.Integer(), \"trow\": new abap.types.Integer(), \"coloncol\": new abap.types.Integer(), \"tcol\": new abap.types.Integer(), \"prefixlen\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {}), \"terminator\": new abap.types.Character(1, {}), \"enhmt\": new abap.types.Integer()}, \"SSTMNT\", \"SSTMNT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SSTMNT_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sstmnt_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/sstruc.tabl.mjs":
/*!********************************!*\
  !*** ./output/sstruc.tabl.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SSTRUC\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"type\": new abap.types.Character(1, {}), \"stmnt_type\": new abap.types.Character(1, {}), \"key_start\": new abap.types.Character(1, {}), \"key_end\": new abap.types.Character(1, {}), \"stmnt_from\": new abap.types.Integer(), \"stmnt_to\": new abap.types.Integer(), \"struc_from\": new abap.types.Integer(), \"struc_to\": new abap.types.Integer(), \"back\": new abap.types.Integer()}, \"SSTRUC\", \"SSTRUC\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sstruc.tabl.mjs?");

/***/ }),

/***/ "./output/sstruc_tab.ttyp.mjs":
/*!************************************!*\
  !*** ./output/sstruc_tab.ttyp.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SSTRUC_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"type\": new abap.types.Character(1, {}), \"stmnt_type\": new abap.types.Character(1, {}), \"key_start\": new abap.types.Character(1, {}), \"key_end\": new abap.types.Character(1, {}), \"stmnt_from\": new abap.types.Integer(), \"stmnt_to\": new abap.types.Integer(), \"struc_from\": new abap.types.Integer(), \"struc_to\": new abap.types.Integer(), \"back\": new abap.types.Integer()}, \"SSTRUC\", \"SSTRUC\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SSTRUC_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sstruc_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/stokes.tabl.mjs":
/*!********************************!*\
  !*** ./output/stokes.tabl.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"STOKES\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKES\", \"STOKES\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/stokes.tabl.mjs?");

/***/ }),

/***/ "./output/stokes_tab.ttyp.mjs":
/*!************************************!*\
  !*** ./output/stokes_tab.ttyp.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"STOKES_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKES\", \"STOKES\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STOKES_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/stokes_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/stokesx.tabl.mjs":
/*!*********************************!*\
  !*** ./output/stokesx.tabl.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"STOKESX\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"str\": new abap.types.String(), \"row\": new abap.types.Integer(), \"off2\": new abap.types.Integer(), \"off3\": new abap.types.Integer(), \"col\": new abap.types.Integer(), \"len1\": new abap.types.Integer(), \"len2\": new abap.types.Integer(), \"len3\": new abap.types.Integer(), \"type\": new abap.types.Character(1, {})}, \"STOKESX\", \"STOKESX\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/stokesx.tabl.mjs?");

/***/ }),

/***/ "./output/string_table.ttyp.mjs":
/*!**************************************!*\
  !*** ./output/string_table.ttyp.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"STRING_TABLE\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.String(), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"STRING_TABLE\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/string_table.ttyp.mjs?");

/***/ }),

/***/ "./output/submatch_result.tabl.mjs":
/*!*****************************************!*\
  !*** ./output/submatch_result.tabl.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SUBMATCH_RESULT\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/submatch_result.tabl.mjs?");

/***/ }),

/***/ "./output/submatch_result_tab.ttyp.mjs":
/*!*********************************************!*\
  !*** ./output/submatch_result_tab.ttyp.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SUBMATCH_RESULT_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"offset\": new abap.types.Integer(), \"length\": new abap.types.Integer()}, \"SUBMATCH_RESULT\", \"SUBMATCH_RESULT\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"SUBMATCH_RESULT_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/submatch_result_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/sxco_fm_name.dtel.mjs":
/*!**************************************!*\
  !*** ./output/sxco_fm_name.dtel.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SXCO_FM_NAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"SXCO_FM_NAME\",\"ddicName\":\"SXCO_FM_NAME\"}),\n  \"domain\": \"\",\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sxco_fm_name.dtel.mjs?");

/***/ }),

/***/ "./output/sxco_transport.dtel.mjs":
/*!****************************************!*\
  !*** ./output/sxco_transport.dtel.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SXCO_TRANSPORT\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"SXCO_TRANSPORT\",\"ddicName\":\"SXCO_TRANSPORT\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sxco_transport.dtel.mjs?");

/***/ }),

/***/ "./output/sydate.dtel.mjs":
/*!********************************!*\
  !*** ./output/sydate.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYDATE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Date({qualifiedName: \"SYDATE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sydate.dtel.mjs?");

/***/ }),

/***/ "./output/symsg.tabl.mjs":
/*!*******************************!*\
  !*** ./output/symsg.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYMSG\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"msgty\": new abap.types.Character(1, {}), \"msgid\": new abap.types.Character(20, {}), \"msgno\": new abap.types.Numc({length: 3}), \"msgv1\": new abap.types.Character(50, {}), \"msgv2\": new abap.types.Character(50, {}), \"msgv3\": new abap.types.Character(50, {}), \"msgv4\": new abap.types.Character(50, {})}, \"SYMSG\", \"SYMSG\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/symsg.tabl.mjs?");

/***/ }),

/***/ "./output/symsgid.dtel.mjs":
/*!*********************************!*\
  !*** ./output/symsgid.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYMSGID\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"SYMSGID\",\"ddicName\":\"SYMSGID\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/symsgid.dtel.mjs?");

/***/ }),

/***/ "./output/symsgno.dtel.mjs":
/*!*********************************!*\
  !*** ./output/symsgno.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYMSGNO\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Numc({length: 3, qualifiedName: \"SYMSGNO\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/symsgno.dtel.mjs?");

/***/ }),

/***/ "./output/symsgty.dtel.mjs":
/*!*********************************!*\
  !*** ./output/symsgty.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYMSGTY\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"SYMSGTY\",\"ddicName\":\"SYMSGTY\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/symsgty.dtel.mjs?");

/***/ }),

/***/ "./output/symsgv.dtel.mjs":
/*!********************************!*\
  !*** ./output/symsgv.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYMSGV\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(50, {\"qualifiedName\":\"SYMSGV\",\"ddicName\":\"SYMSGV\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/symsgv.dtel.mjs?");

/***/ }),

/***/ "./output/syst_host.dtel.mjs":
/*!***********************************!*\
  !*** ./output/syst_host.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYST_HOST\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(32, {\"qualifiedName\":\"SYST_HOST\",\"ddicName\":\"SYST_HOST\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/syst_host.dtel.mjs?");

/***/ }),

/***/ "./output/sysubrc.dtel.mjs":
/*!*********************************!*\
  !*** ./output/sysubrc.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYSUBRC\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Integer({qualifiedName: \"SYSUBRC\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sysubrc.dtel.mjs?");

/***/ }),

/***/ "./output/sysuuid_c36.dtel.mjs":
/*!*************************************!*\
  !*** ./output/sysuuid_c36.dtel.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYSUUID_C36\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(36, {\"qualifiedName\":\"SYSUUID_C36\",\"ddicName\":\"SYSUUID_C36\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sysuuid_c36.dtel.mjs?");

/***/ }),

/***/ "./output/sysuuid_x16.dtel.mjs":
/*!*************************************!*\
  !*** ./output/sysuuid_x16.dtel.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYSUUID_X16\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Hex({length: 16}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/sysuuid_x16.dtel.mjs?");

/***/ }),

/***/ "./output/syuname.dtel.mjs":
/*!*********************************!*\
  !*** ./output/syuname.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"SYUNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(12, {\"qualifiedName\":\"SYUNAME\",\"ddicName\":\"SYUNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/syuname.dtel.mjs?");

/***/ }),

/***/ "./output/t000.tabl.mjs":
/*!******************************!*\
  !*** ./output/t000.tabl.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"T000\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"mandt\": new abap.types.Character(3, {}), \"cccategory\": new abap.types.Character(1, {}), \"ccnocliind\": new abap.types.Character(1, {})}, \"T000\", \"T000\"),\n  \"keyFields\": [\"MANDT\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/t000.tabl.mjs?");

/***/ }),

/***/ "./output/t100.tabl.mjs":
/*!******************************!*\
  !*** ./output/t100.tabl.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"T100\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"sprsl\": new abap.types.Character(1, {}), \"arbgb\": new abap.types.Character(20, {}), \"msgnr\": new abap.types.Character(3, {}), \"text\": new abap.types.Character(73, {})}, \"T100\", \"T100\"),\n  \"keyFields\": [\"SPRSL\",\"ARBGB\",\"MSGNR\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/t100.tabl.mjs?");

/***/ }),

/***/ "./output/tabfdpos.dtel.mjs":
/*!**********************************!*\
  !*** ./output/tabfdpos.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TABFDPOS\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Numc({length: 4, qualifiedName: \"TABFDPOS\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tabfdpos.dtel.mjs?");

/***/ }),

/***/ "./output/tabname.dtel.mjs":
/*!*********************************!*\
  !*** ./output/tabname.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TABNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"TABNAME\",\"ddicName\":\"TABNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tabname.dtel.mjs?");

/***/ }),

/***/ "./output/tadir.tabl.mjs":
/*!*******************************!*\
  !*** ./output/tadir.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TADIR\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"pgmid\": new abap.types.Character(4, {}), \"object\": new abap.types.Character(4, {}), \"obj_name\": new abap.types.Character(40, {}), \"devclass\": new abap.types.Character(30, {}), \"korrnum\": new abap.types.Character(10, {}), \"delflag\": new abap.types.Character(1, {}), \"genflag\": new abap.types.Character(1, {}), \"srcsystem\": new abap.types.Character(5, {}), \"edtflag\": new abap.types.Character(1, {})}, \"TADIR\", \"TADIR\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tadir.tabl.mjs?");

/***/ }),

/***/ "./output/tdevc.tabl.mjs":
/*!*******************************!*\
  !*** ./output/tdevc.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TDEVC\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"devclass\": new abap.types.Character(30, {\"qualifiedName\":\"DEVCLASS\",\"ddicName\":\"DEVCLASS\"}), \"dlvunit\": new abap.types.Character(30, {}), \"component\": new abap.types.Character(20, {}), \"parentcl\": new abap.types.Character(30, {}), \"as4user\": new abap.types.Character(12, {}), \"created_by\": new abap.types.Character(12, {}), \"created_on\": new abap.types.Date(), \"ctext\": new abap.types.Character(60, {})}, \"TDEVC\", \"TDEVC\"),\n  \"keyFields\": [\"DEVCLASS\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tdevc.tabl.mjs?");

/***/ }),

/***/ "./output/tdline.dtel.mjs":
/*!********************************!*\
  !*** ./output/tdline.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TDLINE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(132, {\"qualifiedName\":\"TDLINE\",\"ddicName\":\"TDLINE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tdline.dtel.mjs?");

/***/ }),

/***/ "./output/text20.dtel.mjs":
/*!********************************!*\
  !*** ./output/text20.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXT20\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"TEXT20\",\"ddicName\":\"TEXT20\"}),\n  \"domain\": \"TEXT20\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/text20.dtel.mjs?");

/***/ }),

/***/ "./output/text200.dtel.mjs":
/*!*********************************!*\
  !*** ./output/text200.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXT200\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(200, {\"qualifiedName\":\"TEXT200\",\"ddicName\":\"TEXT200\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/text200.dtel.mjs?");

/***/ }),

/***/ "./output/text255.dtel.mjs":
/*!*********************************!*\
  !*** ./output/text255.dtel.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXT255\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(255, {\"qualifiedName\":\"TEXT255\",\"ddicName\":\"TEXT255\"}),\n  \"domain\": \"TEXT255\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/text255.dtel.mjs?");

/***/ }),

/***/ "./output/text30.dtel.mjs":
/*!********************************!*\
  !*** ./output/text30.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXT30\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(30, {\"qualifiedName\":\"TEXT30\",\"ddicName\":\"TEXT30\"}),\n  \"domain\": \"TEXT30\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/text30.dtel.mjs?");

/***/ }),

/***/ "./output/text80.dtel.mjs":
/*!********************************!*\
  !*** ./output/text80.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXT80\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(80, {\"qualifiedName\":\"TEXT80\",\"ddicName\":\"TEXT80\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/text80.dtel.mjs?");

/***/ }),

/***/ "./output/textpool.tabl.mjs":
/*!**********************************!*\
  !*** ./output/textpool.tabl.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TEXTPOOL\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"id\": new abap.types.Character(1, {}), \"key\": new abap.types.Character(8, {}), \"entry\": new abap.types.Character(255, {}), \"length\": new abap.types.Integer()}, \"TEXTPOOL\", \"TEXTPOOL\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/textpool.tabl.mjs?");

/***/ }),

/***/ "./output/tfdir.tabl.mjs":
/*!*******************************!*\
  !*** ./output/tfdir.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TFDIR\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"funcname\": new abap.types.Character(30, {})}, \"TFDIR\", \"TFDIR\"),\n  \"keyFields\": [\"FUNCNAME\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tfdir.tabl.mjs?");

/***/ }),

/***/ "./output/tihttpnvp.ttyp.mjs":
/*!***********************************!*\
  !*** ./output/tihttpnvp.ttyp.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TIHTTPNVP\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String(), \"value\": new abap.types.String()}, \"IHTTPNVP\", \"IHTTPNVP\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TIHTTPNVP\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tihttpnvp.ttyp.mjs?");

/***/ }),

/***/ "./output/timestamp.dtel.mjs":
/*!***********************************!*\
  !*** ./output/timestamp.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TIMESTAMP\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Packed({length: 15, decimals: 0, qualifiedName: \"TIMESTAMP\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/timestamp.dtel.mjs?");

/***/ }),

/***/ "./output/timestampl.dtel.mjs":
/*!************************************!*\
  !*** ./output/timestampl.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TIMESTAMPL\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Packed({length: 21, decimals: 7, qualifiedName: \"TIMESTAMPL\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/timestampl.dtel.mjs?");

/***/ }),

/***/ "./output/timezone.dtel.mjs":
/*!**********************************!*\
  !*** ./output/timezone.dtel.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TIMEZONE\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(6, {\"qualifiedName\":\"TIMEZONE\",\"ddicName\":\"TIMEZONE\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/timezone.dtel.mjs?");

/***/ }),

/***/ "./output/tline.tabl.mjs":
/*!*******************************!*\
  !*** ./output/tline.tabl.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TLINE\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"tdformat\": new abap.types.Character(2, {}), \"tdline\": new abap.types.Character(132, {})}, \"TLINE\", \"TLINE\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tline.tabl.mjs?");

/***/ }),

/***/ "./output/tline_tab.ttyp.mjs":
/*!***********************************!*\
  !*** ./output/tline_tab.ttyp.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TLINE_TAB\"] = {\n  \"objectType\": \"TTYP\",\n  \"type\": abap.types.TableFactory.construct(new abap.types.Structure({\"tdformat\": new abap.types.Character(2, {}), \"tdline\": new abap.types.Character(132, {})}, \"TLINE\", \"TLINE\"), {\"withHeader\":false,\"keyType\":\"USER\",\"secondary\":[]}, \"TLINE_TAB\"),\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tline_tab.ttyp.mjs?");

/***/ }),

/***/ "./output/trfunction.dtel.mjs":
/*!************************************!*\
  !*** ./output/trfunction.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TRFUNCTION\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"TRFUNCTION\",\"ddicName\":\"TRFUNCTION\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/trfunction.dtel.mjs?");

/***/ }),

/***/ "./output/trkorr.dtel.mjs":
/*!********************************!*\
  !*** ./output/trkorr.dtel.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TRKORR\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(20, {\"qualifiedName\":\"TRKORR\",\"ddicName\":\"TRKORR\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/trkorr.dtel.mjs?");

/***/ }),

/***/ "./output/tzntstmpl.dtel.mjs":
/*!***********************************!*\
  !*** ./output/tzntstmpl.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"TZNTSTMPL\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Packed({length: 21, decimals: 7, qualifiedName: \"TZNTSTMPL\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/tzntstmpl.dtel.mjs?");

/***/ }),

/***/ "./output/uname.dtel.mjs":
/*!*******************************!*\
  !*** ./output/uname.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"UNAME\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(12, {\"qualifiedName\":\"UNAME\",\"ddicName\":\"UNAME\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/uname.dtel.mjs?");

/***/ }),

/***/ "./output/usnam.dtel.mjs":
/*!*******************************!*\
  !*** ./output/usnam.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"USNAM\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(12, {\"qualifiedName\":\"USNAM\",\"ddicName\":\"USNAM\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/usnam.dtel.mjs?");

/***/ }),

/***/ "./output/w3mime.tabl.mjs":
/*!********************************!*\
  !*** ./output/w3mime.tabl.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"W3MIME\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"W3MIME\", \"W3MIME\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/w3mime.tabl.mjs?");

/***/ }),

/***/ "./output/wwwdatatab.tabl.mjs":
/*!************************************!*\
  !*** ./output/wwwdatatab.tabl.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"WWWDATATAB\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"relid\": new abap.types.Character(2, {}), \"objid\": new abap.types.Character(40, {})}, \"WWWDATATAB\", \"WWWDATATAB\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/wwwdatatab.tabl.mjs?");

/***/ }),

/***/ "./output/wwwparams.tabl.mjs":
/*!***********************************!*\
  !*** ./output/wwwparams.tabl.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"WWWPARAMS\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"relid\": new abap.types.Character(2, {}), \"objid\": new abap.types.Character(40, {}), \"name\": new abap.types.Character(50, {}), \"value\": new abap.types.Character(250, {})}, \"WWWPARAMS\", \"WWWPARAMS\"),\n  \"keyFields\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/wwwparams.tabl.mjs?");

/***/ }),

/***/ "./output/xfeld.dtel.mjs":
/*!*******************************!*\
  !*** ./output/xfeld.dtel.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"XFELD\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"XFELD\",\"ddicName\":\"XFELD\"}),\n  \"domain\": undefined,\n  \"fixedValues\": undefined,\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/xfeld.dtel.mjs?");

/***/ }),

/***/ "./output/xsdboolean.dtel.mjs":
/*!************************************!*\
  !*** ./output/xsdboolean.dtel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"XSDBOOLEAN\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Character(1, {\"qualifiedName\":\"XSDBOOLEAN\",\"ddicName\":\"XSDBOOLEAN\"}),\n  \"domain\": \"XSDBOOLEAN\",\n  \"fixedValues\": [{\"description\":\"True\",\"low\":\"X\",\"language\":\"E\"},{\"description\":\"False\",\"language\":\"E\"}],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/xsdboolean.dtel.mjs?");

/***/ }),

/***/ "./output/xsdtime_t.dtel.mjs":
/*!***********************************!*\
  !*** ./output/xsdtime_t.dtel.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"XSDTIME_T\"] = {\n  \"objectType\": \"DTEL\",\n  \"type\": new abap.types.Time({qualifiedName: \"XSDTIME_T\"}),\n  \"domain\": \"XSDTIME_T\",\n  \"fixedValues\": [],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/xsdtime_t.dtel.mjs?");

/***/ }),

/***/ "./output/zcl_http_handler.clas.mjs":
/*!******************************************!*\
  !*** ./output/zcl_http_handler.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_http_handler\": () => (/* binding */ zcl_http_handler)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zcl_http_handler.clas.abap\nclass zcl_http_handler {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_HTTP_EXTENSION\"];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.if_http_extension$co_flow_ok = abap.Classes['IF_HTTP_EXTENSION'].if_http_extension$co_flow_ok;\n    this.if_http_extension$co_flow_ok_others_mand = abap.Classes['IF_HTTP_EXTENSION'].if_http_extension$co_flow_ok_others_mand;\n    if (this.if_http_extension$flow_rc === undefined) this.if_http_extension$flow_rc = new abap.types.Integer({qualifiedName: \"I\"});\n    return this;\n  }\n  async if_http_extension$handle_request(INPUT) {\n    let server = new abap.types.ABAPObject({qualifiedName: \"IF_HTTP_SERVER\"});\n    if (INPUT && INPUT.server) {server.set(INPUT.server);}\n    let temp1 = new abap.types.Structure({\"method\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-METHOD\"}), \"path\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-PATH\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-BODY\"})}, \"zcl_otm_table_maintenance=>ty_request\");\n    let result = new abap.types.Structure({\"status\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-STATUS\"}), \"content_type\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-CONTENT_TYPE\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-BODY\"})}, \"zcl_otm_table_maintenance=>ty_http\");\n    let temp3 = new abap.types.ABAPObject({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE\"});\n    let temp2 = new abap.types.String({qualifiedName: \"STRING\"});\n    abap.statements.clear(temp1);\n    temp1.get().method.set((await server.get().if_http_server$request.get().if_http_request$get_method()));\n    temp1.get().path.set((await server.get().if_http_server$request.get().if_http_entity$get_header_field({name: new abap.types.Character(5).set('~path')})));\n    temp1.get().body.set((await server.get().if_http_server$request.get().if_http_entity$get_data()));\n    temp3.set(await (new abap.Classes['ZCL_OTM_TABLE_MAINTENANCE']()).constructor_({iv_table: new abap.types.Character(9).set('ZOPENTEST')}));\n    result.set((await temp3.get().serve({is_request: temp1})));\n    await server.get().if_http_server$response.get().if_http_entity$set_data({data: result.get().body});\n    await server.get().if_http_server$response.get().if_http_entity$set_content_type({content_type: result.get().content_type});\n    temp2.set(result.get().status);\n    await server.get().if_http_server$response.get().if_http_response$set_status({code: result.get().status, reason: temp2});\n  }\n}\nabap.Classes['ZCL_HTTP_HANDLER'] = zcl_http_handler;\nzcl_http_handler.if_http_extension$co_flow_ok = new abap.types.Integer({qualifiedName: \"I\"});\nzcl_http_handler.if_http_extension$co_flow_ok.set(0);\nzcl_http_handler.if_http_extension$co_flow_ok_others_mand = new abap.types.Integer({qualifiedName: \"I\"});\nzcl_http_handler.if_http_extension$co_flow_ok_others_mand.set(2);\n\n//# sourceMappingURL=zcl_http_handler.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zcl_http_handler.clas.mjs?");

/***/ }),

/***/ "./output/zcl_otm_table_maintenance.clas.mjs":
/*!***************************************************!*\
  !*** ./output/zcl_otm_table_maintenance.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_otm_table_maintenance\": () => (/* binding */ zcl_otm_table_maintenance)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zcl_otm_table_maintenance.clas.abap\nclass zcl_otm_table_maintenance {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_TABLE\": {\"type\": () => {return new abap.types.Character(30, {\"qualifiedName\":\"TABNAME\",\"ddicName\":\"TABNAME\"});}, \"visibility\": \"U\", \"is_constant\": \" \"}};\n  async build_metadata() {\n    let rt_metadata = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), \"key\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"length\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_FIELDDATA-LENGTH\"}), \"fixvalues\": abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\")}, \"zcl_otm_table_maintenance=>ty_fielddata\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_metadata\");\n    let lv_key = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let lo_element = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_ELEMDESCR\"});\n    let lt_values = abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\");\n    let lt_key_fields = abap.types.TableFactory.construct(new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_names\");\n    let temp1 = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let lt_components = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_component = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let temp2 = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), \"key\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"length\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_FIELDDATA-LENGTH\"}), \"fixvalues\": abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\")}, \"zcl_otm_table_maintenance=>ty_fielddata\");\n    lt_key_fields.set((await this.list_key_fields()));\n    await abap.statements.cast(temp1, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_name({p_name: this.mv_table})));\n    lt_components.set((await temp1.get().get_components()));\n    for await (const unique1 of abap.statements.loop(lt_components)) {\n      ls_component.set(unique1);\n      await abap.statements.cast(lo_element, ls_component.get().type);\n      lt_values.set((await lo_element.get().get_ddic_fixed_values()));\n      abap.statements.readTable(lt_key_fields,{withKey: (i) => {return abap.compare.eq(i.table_line, ls_component.get().name);},\n        withKeyValue: [{key: (i) => {return i.table_line}, value: ls_component.get().name}],\n        usesTableLine: true,\n        withKeySimple: {\"table_line\": ls_component.get().name}});\n      lv_key.set(abap.builtin.boolc(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0))));\n      abap.statements.clear(temp2);\n      temp2.get().name.set(ls_component.get().name);\n      temp2.get().key.set(lv_key);\n      temp2.get().type_kind.set(ls_component.get().type.get().type_kind);\n      temp2.get().length.set(ls_component.get().type.get().length);\n      temp2.get().fixvalues.set(lt_values);\n      abap.statements.append({source: temp2, target: rt_metadata});\n    }\n    return rt_metadata;\n  }\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_table = new abap.types.Character(30, {\"qualifiedName\":\"TABNAME\",\"ddicName\":\"TABNAME\"});\n    let iv_table = new abap.types.Character(30, {\"qualifiedName\":\"TABNAME\",\"ddicName\":\"TABNAME\"});\n    if (INPUT && INPUT.iv_table) {iv_table.set(INPUT.iv_table);}\n    abap.statements.assert(abap.compare.initial(iv_table) === false);\n    this.mv_table.set(iv_table);\n    return this;\n  }\n  async from_xstring(INPUT) {\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    let xstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.xstring) {xstring.set(INPUT.xstring);}\n    let conv = new abap.types.ABAPObject();\n    let conv_in_class = new abap.types.Character(18, {});\n    try {\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_CLASS not found\"; }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'](); }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_in === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_in === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      conv.set(await abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_in());\n      if (conv.get().if_abap_conv_in$convert === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (conv.get().if_abap_conv_in$convert === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      string.set(await conv.get().if_abap_conv_in$convert({source: xstring}));\n    } catch (e) {\n      if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS']) {\n        conv_in_class.set(new abap.types.Character(18).set('CL_ABAP_CONV_IN_CE'));\n        if (abap.Classes[conv_in_class.get()] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_CLASS not found\"; }\n        if (abap.Classes[conv_in_class.get()] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'](); }\n        conv.set(await abap.Classes[conv_in_class.get()].create({encoding: new abap.types.Character(5).set('UTF-8')}));\n        if (conv.get().convert === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n        if (conv.get().convert === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n        await conv.get().convert({input: xstring,data: string});\n      } else {\n        throw e;\n      }\n    }\n    return string;\n  }\n  async get_html() {\n    let rv_html = new abap.types.String({qualifiedName: \"STRING\"});\n    rv_html.set(abap.operators.concat(new abap.types.String().set(`<!DOCTYPE html>\\n`),abap.operators.concat(new abap.types.String().set(`<html>\\n`),abap.operators.concat(new abap.types.String().set(`<head>\\n`),abap.operators.concat(new abap.types.String().set(`<title>open-table-maintenance</title>\\n`),abap.operators.concat(new abap.types.String().set(`<script src=\"https://bossanova.uk/jspreadsheet/v4/jexcel.js\" async></script>\\n`),abap.operators.concat(new abap.types.String().set(`<script src=\"https://jsuites.net/v4/jsuites.js\" async></script>\\n`),abap.operators.concat(new abap.types.String().set(`<link rel=\"stylesheet\" href=\"https://jsuites.net/v4/jsuites.css\" type=\"text/css\" />\\n`),abap.operators.concat(new abap.types.String().set(`<link rel=\"stylesheet\" href=\"https://bossanova.uk/jspreadsheet/v4/jexcel.css\" type=\"text/css\" />\\n`),abap.operators.concat(new abap.types.String().set(`<script>\\n`),abap.operators.concat(new abap.types.Character(11).set('let jtable;'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(16).set('let columnNames;'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(47).set('const url = window.location.pathname + \"/rest\";'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(16).set('function run() {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(33).set('  fetch(url).then((response) => {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(27).set('    return response.json();'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(25).set('    }).then((parsed) => {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(53).set('    document.getElementById(\"tablename\").innerHTML = '),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(85).set('      \"<h1 style=\\\\\"display:inline\\\\\">hello \" + parsed.TABLENAME + \"</h1>&nbsp;<tt>\" + '),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(57).set('       parsed.SY.SYSID + \"-\" + parsed.SY.MANDT + \"</tt>\";'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(29).set('    const data = parsed.DATA;'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(29).set('    if (data.length === 0) { '),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(22).set('       const obj = {};'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(41).set('       obj[parsed.META[0][\"NAME\"]] = \"_\";'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(22).set('       data.push(obj);'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(5).set('    }'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(47).set('    columnNames = parsed.META.map(n => n.NAME);'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(54).set('    document.getElementById(\"content\").innerHTML = \"\";'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(55).set('    let columnSettings = parsed.META.map(n => {return {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(62).set('      \"type\": n.FIXVALUES.length > 0 ? \"dropdown\" : undefined,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(22).set('      \"title\": n.NAME,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(44).set('      \"source\": n.FIXVALUES.map(f => f.LOW),'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(43).set('      \"width\": Math.min(200, n.LENGTH * 20)'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(9).set('    };});'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(63).set('    jtable = jspreadsheet(document.getElementById(\"content\"), {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(29).set('      defaultColAlign:\"left\",'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(26).set('      allowInsertRow:true,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(32).set('      allowManualInsertRow:true,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(30).set('      allowInsertColumn:false,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(36).set('      allowManualInsertColumn:false,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(26).set('      allowDeleteRow:true,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(30).set('      allowRenameColumn:false,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(30).set('      allowDeleteColumn:false,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(17).set('      data: data,'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(34).set('      onload: function(instance) {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(71).set('        const keyCount = parsed.META.filter(n => n.KEY === \"X\").length;'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(44).set('        for (let i = 0; i < keyCount; i++) {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(70).set('          instance.jexcel.colgroup[i].style.backgroundColor=\"#F8F8F8\";'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(9).set('        }'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(8).set('      },'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(32).set('      columns: columnSettings});'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(5).set('  });'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(1).set('}'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(24).set('function toObject(row) {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(15).set('  let ret = {};'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(48).set('  for (let i = 0; i < columnNames.length; i++) {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(33).set('    ret[columnNames[i]] = row[i];'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(3).set('  }'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(13).set('  return ret;'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(1).set('}'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(17).set('function save() {'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(56).set('  const body = {\"DATA\": jtable.getData().map(toObject)};'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(94).set('  fetch(url, {method: \"POST\", body: JSON.stringify(body)}).then(() => {alert(\"data saved\");});'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.Character(1).set('}'),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.String().set(`</script>\\n`),abap.operators.concat(new abap.types.String().set(`</head>\\n`),abap.operators.concat(new abap.types.String().set(`<body onload=\"run()\">\\n`),abap.operators.concat(new abap.types.String().set(`<div id=\"tablename\"><h1>open-table-maintenance</h1></div>\\n`),abap.operators.concat(new abap.types.String().set(`<button type=\"button\" onclick=\"save()\">Save</button><br>\\n`),abap.operators.concat(new abap.types.String().set(`<div id=\"content\">loading</div><br>\\n`),abap.operators.concat(new abap.types.String().set(`</body>\\n`),new abap.types.String().set(`</html>`))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n    return rv_html;\n  }\n  async list_key_fields() {\n    let names = abap.types.TableFactory.construct(new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_names\");\n    let obj = new abap.types.ABAPObject();\n    let lv_tabname = new abap.types.Character(16, {});\n    let lr_ddfields = new abap.types.DataReference(new abap.types.Character(4));\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character());\n    let fs_ddfields_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let workaround = new abap.types.Character(8, {});\n    let temp3 = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    lv_tabname.set(this.mv_table);\n    try {\n      if (abap.Classes['XCO_CP_ABAP_DICTIONARY'] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_CLASS not found\"; }\n      if (abap.Classes['XCO_CP_ABAP_DICTIONARY'] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'](); }\n      if (abap.Classes['XCO_CP_ABAP_DICTIONARY'].database_table === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (abap.Classes['XCO_CP_ABAP_DICTIONARY'].database_table === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      obj.set(await abap.Classes['XCO_CP_ABAP_DICTIONARY'].database_table({iv_name: lv_tabname}));\n      abap.statements.assign({target: fs_any_, dynamicName: 'obj' + '->' + 'IF_XCO_DATABASE_TABLE~FIELDS->IF_XCO_DBT_FIELDS_FACTORY~KEY', dynamicSource: (() => {try { return obj; } catch {}})()});\n      abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n      obj.set(fs_any_);\n      if (obj.get().if_xco_dbt_fields$get_names === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (obj.get().if_xco_dbt_fields$get_names === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      names.set(await obj.get().if_xco_dbt_fields$get_names());\n    } catch (e) {\n      if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS']) {\n        workaround.set(new abap.types.Character(8).set('DDFIELDS'));\n        abap.statements.createData(lr_ddfields,{\"name\": workaround.get()});\n        abap.statements.assign({target: fs_ddfields_, source: (lr_ddfields).dereference()});\n        abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n        await abap.statements.cast(temp3, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_name({p_name: lv_tabname})));\n        fs_ddfields_.set((await temp3.get().get_ddic_field_list()));\n        for await (const unique2 of abap.statements.loop(fs_ddfields_)) {\n          fs_any_.assign(unique2);\n          abap.statements.assign({component: new abap.types.Character(7).set('KEYFLAG'), target: fs_field_, source: fs_any_});\n          if (abap.compare.ne(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)) || abap.compare.ne(fs_field_, abap.builtin.abap_true)) {\n            continue;\n          }\n          abap.statements.assign({component: new abap.types.Character(9).set('FIELDNAME'), target: fs_field_, source: fs_any_});\n          abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n          abap.statements.append({source: fs_field_, target: names});\n        }\n      } else {\n        throw e;\n      }\n    }\n    return names;\n  }\n  async read_table() {\n    let rv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    let fs_fs_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    abap.statements.createData(dref,{\"name\": this.mv_table.get(),\"table\": true});\n    abap.statements.assign({target: fs_fs_, source: (dref).dereference()});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n    await abap.statements.select(fs_fs_, {select: \"SELECT * FROM \" + this.mv_table.get() + \" ORDER BY PRIMARY KEY\"});\n    rv_json.set((await this.to_json({ref: dref})));\n    return rv_json;\n  }\n  async save_table(INPUT) {\n    let iv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_json) {iv_json.set(INPUT.iv_json);}\n    let fs_fs_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let dref = new abap.types.DataReference(new abap.types.Character(4));\n    abap.statements.createData(dref,{\"name\": this.mv_table.get(),\"table\": true});\n    abap.statements.assign({target: fs_fs_, source: (dref).dereference()});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n    if (abap.Classes['KERNEL_CALL_TRANSFORMATION'] === undefined) throw new Error(\"CallTransformation, kernel class missing\");\n    await abap.Classes['KERNEL_CALL_TRANSFORMATION'].call({name: \"id\",sourceXML: iv_json,result: {data:fs_fs_}});\n    await abap.statements.modifyDatabase(this.mv_table, {\"table\": fs_fs_});\n  }\n  async serve(INPUT) {\n    let rs_http = new abap.types.Structure({\"status\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-STATUS\"}), \"content_type\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-CONTENT_TYPE\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-BODY\"})}, \"zcl_otm_table_maintenance=>ty_http\");\n    let is_request = new abap.types.Structure({\"method\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-METHOD\"}), \"path\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-PATH\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-BODY\"})}, \"zcl_otm_table_maintenance=>ty_request\");\n    if (INPUT && INPUT.is_request) {is_request.set(INPUT.is_request);}\n    let lv_body = new abap.types.String({qualifiedName: \"STRING\"});\n    try {\n      rs_http.get().status.set(new abap.types.Integer().set(200));\n      if (abap.compare.cp(is_request.get().path, new abap.types.Character(6).set('*/rest'))) {\n        if (abap.compare.eq(is_request.get().method, new abap.types.Character(3).set('GET'))) {\n          lv_body.set((await this.read_table()));\n          rs_http.get().content_type.set(new abap.types.Character(16).set('application/json'));\n        } else if (abap.compare.eq(is_request.get().method, new abap.types.Character(4).set('POST'))) {\n          await this.save_table({iv_json: (await this.from_xstring({xstring: is_request.get().body}))});\n        } else {\n          abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Integer().set(2)));\n        }\n      } else {\n        lv_body.set((await this.get_html()));\n        rs_http.get().content_type.set(new abap.types.Character(9).set('text/html'));\n      }\n      rs_http.get().body.set((await this.to_xstring({string: lv_body})));\n    } catch (e) {\n      if (e instanceof abap.Classes['CX_ROOT']) {\n        rs_http.get().status.set(new abap.types.Integer().set(500));\n        rs_http.get().body.set((await this.to_xstring({string: new abap.types.String().set(`Exception occurred`)})));\n      } else {\n        throw e;\n      }\n    }\n    return rs_http;\n  }\n  async to_json(INPUT) {\n    let rv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    let ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.ref) {ref.set(INPUT.ref);}\n    let fs_fs_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let meta = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), \"key\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"length\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_FIELDDATA-LENGTH\"}), \"fixvalues\": abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\")}, \"zcl_otm_table_maintenance=>ty_fielddata\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_metadata\");\n    let writer = new abap.types.ABAPObject({qualifiedName: \"CL_SXML_STRING_WRITER\"});\n    abap.statements.assign({target: fs_fs_, source: (ref).dereference()});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n    meta.set((await this.build_metadata()));\n    writer.set((await abap.Classes['CL_SXML_STRING_WRITER'].create({type: abap.Classes['IF_SXML'].if_sxml$co_xt_json})));\n    if (abap.Classes['KERNEL_CALL_TRANSFORMATION'] === undefined) throw new Error(\"CallTransformation, kernel class missing\");\n    await abap.Classes['KERNEL_CALL_TRANSFORMATION'].call({name: \"id\",resultXML: writer,source: {data:fs_fs_,meta:meta,tablename:this.mv_table,sy:abap.builtin.sy}});\n    rv_json.set((await this.from_xstring({xstring: (await writer.get().get_output())})));\n    return rv_json;\n  }\n  async to_xstring(INPUT) {\n    let xstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.string) {string.set(INPUT.string);}\n    let conv = new abap.types.ABAPObject();\n    let conv_out_class = new abap.types.Character(19, {});\n    try {\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_CLASS not found\"; }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'](); }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_out === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_out === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      conv.set(await abap.Classes['CL_ABAP_CONV_CODEPAGE'].create_out());\n      if (conv.get().if_abap_conv_out$convert === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n      if (conv.get().if_abap_conv_out$convert === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n      xstring.set(await conv.get().if_abap_conv_out$convert({source: string}));\n    } catch (e) {\n      if (e instanceof abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS']) {\n        conv_out_class.set(new abap.types.Character(19).set('CL_ABAP_CONV_OUT_CE'));\n        if (abap.Classes[conv_out_class.get()] === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_CLASS not found\"; }\n        if (abap.Classes[conv_out_class.get()] === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_CLASS'](); }\n        conv.set(await abap.Classes[conv_out_class.get()].create({encoding: new abap.types.Character(5).set('UTF-8')}));\n        if (conv.get().convert === undefined && abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'] === undefined) { throw \"CX_SY_DYN_CALL_ILLEGAL_METHOD not found\"; }\n        if (conv.get().convert === undefined) { throw new abap.Classes['CX_SY_DYN_CALL_ILLEGAL_METHOD'](); }\n        await conv.get().convert({data: string,buffer: xstring});\n      } else {\n        throw e;\n      }\n    }\n    return xstring;\n  }\n}\nabap.Classes['ZCL_OTM_TABLE_MAINTENANCE'] = zcl_otm_table_maintenance;\nzcl_otm_table_maintenance.ty_request = new abap.types.Structure({\"method\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-METHOD\"}), \"path\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-PATH\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_REQUEST-BODY\"})}, \"zcl_otm_table_maintenance=>ty_request\");\nzcl_otm_table_maintenance.ty_http = new abap.types.Structure({\"status\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-STATUS\"}), \"content_type\": new abap.types.String({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-CONTENT_TYPE\"}), \"body\": new abap.types.XString({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_HTTP-BODY\"})}, \"zcl_otm_table_maintenance=>ty_http\");\nzcl_otm_table_maintenance.ty_names = abap.types.TableFactory.construct(new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_names\");\nzcl_otm_table_maintenance.ty_fixvalue = new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\");\nzcl_otm_table_maintenance.ty_fixvalues = abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\");\nzcl_otm_table_maintenance.ty_fielddata = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), \"key\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"length\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_FIELDDATA-LENGTH\"}), \"fixvalues\": abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\")}, \"zcl_otm_table_maintenance=>ty_fielddata\");\nzcl_otm_table_maintenance.ty_metadata = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_compname\"}), \"key\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"length\": new abap.types.Integer({qualifiedName: \"ZCL_OTM_TABLE_MAINTENANCE=>TY_FIELDDATA-LENGTH\"}), \"fixvalues\": abap.types.TableFactory.construct(new abap.types.Structure({\"low\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-low\"}), \"high\": new abap.types.Character(10, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-high\"}), \"option\": new abap.types.Character(2, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-option\"}), \"ddlanguage\": new abap.types.Character(1, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddlanguage\"}), \"ddtext\": new abap.types.Character(60, {\"qualifiedName\":\"zcl_otm_table_maintenance=>ty_fixvalue-ddtext\"})}, \"zcl_otm_table_maintenance=>ty_fixvalue\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_fixvalues\")}, \"zcl_otm_table_maintenance=>ty_fielddata\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"zcl_otm_table_maintenance=>ty_metadata\");\n\n//# sourceMappingURL=zcl_otm_table_maintenance.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zcl_otm_table_maintenance.clas.mjs?");

/***/ }),

/***/ "./output/zopentest.tabl.mjs":
/*!***********************************!*\
  !*** ./output/zopentest.tabl.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nabap.DDIC[\"ZOPENTEST\"] = {\n  \"objectType\": \"TABL\",\n  \"type\": new abap.types.Structure({\"keyfield\": new abap.types.Character(4, {}), \"valuefield\": new abap.types.Character(10, {}), \"boolean\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOLEAN\",\"ddicName\":\"ABAP_BOOLEAN\"})}, \"ZOPENTEST\", \"ZOPENTEST\"),\n  \"keyFields\": [\"KEYFIELD\"],\n};\n\n//# sourceURL=webpack://open-table-maintenance/./output/zopentest.tabl.mjs?");

/***/ }),

/***/ "./output/zw3mi.fugr.wwwdata_export.mjs":
/*!**********************************************!*\
  !*** ./output/zw3mi.fugr.wwwdata_export.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zw3mi.fugr.wwwdata_export.abap\nasync function wwwdata_export(INPUT) {\n  // importing KEY WWWDATATAB false\n  let key = INPUT.exporting?.key;\n  // tables MIME W3MIME true\n  let mime = INPUT.tables?.mime;\n  if (mime === undefined) {\n      mime = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"W3MIME\", \"W3MIME\"), {\"withHeader\":true,\"keyType\":\"DEFAULT\"});\n  }\n  abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n}\nabap.FunctionModules['WWWDATA_EXPORT'] = wwwdata_export;\n//# sourceMappingURL=zw3mi.fugr.wwwdata_export.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zw3mi.fugr.wwwdata_export.mjs?");

/***/ }),

/***/ "./output/zw3mi.fugr.wwwdata_import.mjs":
/*!**********************************************!*\
  !*** ./output/zw3mi.fugr.wwwdata_import.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zw3mi.fugr.wwwdata_import.abap\nasync function wwwdata_import(INPUT) {\n  // importing KEY WWWDATATAB false\n  let key = INPUT.exporting?.key;\n  // tables MIME W3MIME true\n  let mime = INPUT.tables?.mime;\n  if (mime === undefined) {\n      mime = abap.types.TableFactory.construct(new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"W3MIME\", \"W3MIME\"), {\"withHeader\":true,\"keyType\":\"DEFAULT\"});\n  }\n  let filename = new abap.types.String({qualifiedName: \"STRING\"});\n  let xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\n  let row = new abap.types.Structure({\"line\": new abap.types.Hex({length: 255})}, \"W3MIME\", \"W3MIME\");\n  let len = new abap.types.Integer({qualifiedName: \"I\"});\n  abap.statements.clear(mime);\n  filename.set(abap.W3MI[key.get().objid.get()].filename);\n  const fs = await __webpack_require__.e(/*! import() */ \"_a787\").then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"?a787\", 19));\n  const path = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_path-browserify_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"./node_modules/path-browserify/index.js\", 19));\n  const url = await __webpack_require__.e(/*! import() */ \"_8823\").then(__webpack_require__.t.bind(__webpack_require__, /*! url */ \"?8823\", 19));\n  const __filename = url.fileURLToPath(\"file:///home/runner/work/open-table-maintenance/open-table-maintenance/output/zw3mi.fugr.wwwdata_import.mjs\");\n  const __dirname = path.dirname(__filename);\n  xstr.set(fs.readFileSync(__dirname + path.sep + filename.get()).toString(\"hex\").toUpperCase());\n  const indexBackup1 = abap.builtin.sy.get().index.get();\n  let unique113 = 1;\n  while (abap.compare.gt(abap.builtin.xstrlen({val: xstr}), new abap.types.Integer().set(0))) {\n    abap.builtin.sy.get().index.set(unique113++);\n    len.set(new abap.types.Integer().set(255));\n    if (abap.compare.lt(abap.builtin.xstrlen({val: xstr}), len)) {\n      len.set(abap.builtin.xstrlen({val: xstr}));\n    }\n    row.get().line.set(xstr.getOffset({length: len}));\n    abap.statements.append({source: row, target: mime});\n    xstr.set(xstr.getOffset({offset: len}));\n  }\n  abap.builtin.sy.get().index.set(indexBackup1);\n  abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n}\nabap.FunctionModules['WWWDATA_IMPORT'] = wwwdata_import;\n//# sourceMappingURL=zw3mi.fugr.wwwdata_import.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zw3mi.fugr.wwwdata_import.mjs?");

/***/ }),

/***/ "./output/zw3mi.fugr.wwwparams_insert.mjs":
/*!************************************************!*\
  !*** ./output/zw3mi.fugr.wwwparams_insert.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zw3mi.fugr.wwwparams_insert.abap\nasync function wwwparams_insert(INPUT) {\n  // importing PARAMS WWWPARAMS false\n  let params = INPUT.exporting?.params;\n  abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n}\nabap.FunctionModules['WWWPARAMS_INSERT'] = wwwparams_insert;\n//# sourceMappingURL=zw3mi.fugr.wwwparams_insert.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zw3mi.fugr.wwwparams_insert.mjs?");

/***/ }),

/***/ "./output/zw3mi.fugr.wwwparams_read.mjs":
/*!**********************************************!*\
  !*** ./output/zw3mi.fugr.wwwparams_read.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// zw3mi.fugr.wwwparams_read.abap\nasync function wwwparams_read(INPUT) {\n  // importing RELID WWWPARAMS-RELID false\n  let relid = INPUT.exporting?.relid;\n  // importing OBJID WWWPARAMS-OBJID false\n  let objid = INPUT.exporting?.objid;\n  // importing NAME C false\n  let name = INPUT.exporting?.name;\n  // exporting VALUE C true\n  let value = INPUT.importing?.value;\n  if (value === undefined) {\n      value = new abap.types.Character(1, {});\n  }\n  let filename = new abap.types.String({qualifiedName: \"STRING\"});\n  let filesize = new abap.types.Integer({qualifiedName: \"I\"});\n  filename.set(abap.W3MI[objid.get()].filename);\n  const fs = await __webpack_require__.e(/*! import() */ \"_a787\").then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"?a787\", 19));\n  const path = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_path-browserify_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"./node_modules/path-browserify/index.js\", 19));\n  const url = await __webpack_require__.e(/*! import() */ \"_8823\").then(__webpack_require__.t.bind(__webpack_require__, /*! url */ \"?8823\", 19));\n  const __filename = url.fileURLToPath(\"file:///home/runner/work/open-table-maintenance/open-table-maintenance/output/zw3mi.fugr.wwwparams_read.mjs\");\n  const __dirname = path.dirname(__filename);\n  const buf = fs.readFileSync(__dirname + path.sep + filename.get());\n  if (abap.compare.eq(name, new abap.types.Character(8).set('filesize'))) {\n    filesize.set(buf.length);\n    value.set(filesize);\n    abap.statements.condense(value, {nogaps: false});\n  } else {\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\n  }\n  abap.builtin.sy.get().subrc.set(new abap.types.Integer().set(0));\n}\nabap.FunctionModules['WWWPARAMS_READ'] = wwwparams_read;\n//# sourceMappingURL=zw3mi.fugr.wwwparams_read.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/zw3mi.fugr.wwwparams_read.mjs?");

/***/ }),

/***/ "./test/web.mjs":
/*!**********************!*\
  !*** ./test/web.mjs ***!
  \**********************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _output_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../output/_init.mjs */ \"./output/_init.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_output_init_mjs__WEBPACK_IMPORTED_MODULE_0__]);\n_output_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nawait (0,_output_init_mjs__WEBPACK_IMPORTED_MODULE_0__.initializeABAP)();\n\nasync function redirectFetch(url, options) {\n  let data = \"\";\n\n  let res = {\n    append: (d) => {\n      console.dir(\"append2: \" + d); },\n    send: (d) => {\n      console.dir(\"send2\");\n      data = Buffer.from(d).toString();\n    },\n    status: (status) => {\n      console.dir(\"status2: \" + status);\n      return res; },\n  }\n\n  const method = options?.method || \"GET\";\n  const body = options?.body || \"\";\n\n  const req = {\n    body: Buffer.from(body).toString(\"hex\"),\n    method: method,\n    path: url,\n  };\n  console.dir(req);\n  await abap.Classes[\"CL_EXPRESS_ICF_SHIM\"].run({req: req, res, class: \"ZCL_HTTP_HANDLER\"})\n  console.log(\"redirectFetch RESPONSE,\");\n  console.dir(data);\n  return { json: async () => JSON.parse(data)};\n}\n\nasync function run() {\n  let res = {\n    append: (data) => {\n      console.dir(\"append: \" + data); },\n    send: (data) => {\n      console.dir(\"send\");\n      let r = Buffer.from(data).toString();\n\n      // document.write() doesnt work when loaded from async script\n      document.documentElement.innerHTML = r;\n\n      // and setting innerHTML does not automatically load/initialize the scripts\n      const scripts = Array.from(document.getElementsByTagName(\"script\"));\n{\n      var myScript = document.createElement('script');\n      myScript.src = scripts[0].src;\n      document.head.appendChild(myScript);\n}\n{\n      var myScript = document.createElement('script');\n      myScript.src = scripts[1].src;\n      document.head.appendChild(myScript);\n}\n{\n      var myScript = document.createElement('script');\n      myScript.textContent = scripts[2].textContent;\n      document.head.appendChild(myScript);\n}\n\n      globalThis.fetch = redirectFetch;\n\n      setTimeout(() => {\n        console.dir(\"dispatch load\");\n        window.dispatchEvent(new Event(\"load\"));\n      }, 1000);\n    },\n    status: (status) => {\n      console.dir(\"status: \" + status);\n      return res; },\n  }\n\n  await abap.Classes[\"CL_EXPRESS_ICF_SHIM\"].run({req: {body: \"\", method: \"GET\", path: \"\"}, res, class: \"ZCL_HTTP_HANDLER\"});\n}\n\nrun();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./test/web.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			if(queue) queue.moduleId = module.id;
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			promise.moduleId = module.id;
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "open-table-maintenance:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"app": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./test/web.mjs");
/******/ 	
/******/ })()
;