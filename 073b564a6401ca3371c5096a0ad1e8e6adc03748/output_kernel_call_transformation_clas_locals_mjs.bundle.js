"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_kernel_call_transformation_clas_locals_mjs"],{

/***/ "./output/kernel_call_transformation.clas.locals.mjs":
/*!***********************************************************!*\
  !*** ./output/kernel_call_transformation.clas.locals.mjs ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lcl_data_to_xml\": () => (/* binding */ lcl_data_to_xml)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_call_transformation.clas.locals_imp.abap\nclass lcl_data_to_xml {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {};\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async run(INPUT) {\n    return lcl_data_to_xml.run(INPUT);\n  }\n  static async run(INPUT) {\n    let rv_xml = new abap.types.String({qualifiedName: \"STRING\"});\n    let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n    let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let lo_struc = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let lt_comps = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n    let ls_compo = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n    let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    let fs_table_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n    let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n    lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n    let unique52 = lo_type.get().kind;\n    if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n      await abap.statements.cast(lo_struc, lo_type);\n      lt_comps.set((await lo_struc.get().get_components()));\n      abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n      for await (const unique53 of abap.statements.loop(lt_comps)) {\n        ls_compo.set(unique53);\n        abap.statements.assign({component: ls_compo.get().name, target: fs_field_, source: fs_any_});\n        lv_ref.assign(fs_field_.getPointer());\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<${abap.templateFormatting(abap.builtin.to_upper({val: ls_compo.get().name}))}>`)));\n        rv_xml.set(abap.operators.concat(rv_xml,(await this.run({iv_ref: lv_ref}))));\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`</${abap.templateFormatting(abap.builtin.to_upper({val: ls_compo.get().name}))}>`)));\n      }\n    } else if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n      rv_xml.set(abap.operators.concat(rv_xml,(iv_ref).dereference()));\n    } else if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n      abap.statements.assign({target: fs_table_, source: (iv_ref).dereference()});\n      for await (const unique54 of abap.statements.loop(fs_table_)) {\n        fs_any_.assign(unique54);\n        lv_ref.assign(fs_any_.getPointer());\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<item>`)));\n        rv_xml.set(abap.operators.concat(rv_xml,(await this.run({iv_ref: lv_ref}))));\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`</item>`)));\n      }\n    } else {\n      abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(20).set('todo,lcl_data_to_xml')));\n    }\n    return rv_xml;\n  }\n}\nabap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_DATA_TO_XML'] = lcl_data_to_xml;\n\n//# sourceMappingURL=kernel_call_transformation.clas.locals.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_call_transformation.clas.locals.mjs?");

/***/ })

}]);