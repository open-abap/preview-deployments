"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_gdt_conversion_clas_mjs"],{

/***/ "./output/cl_gdt_conversion.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_gdt_conversion.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gdt_conversion\": () => (/* binding */ cl_gdt_conversion)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_gdt_conversion.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass cl_gdt_conversion {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async amount_outbound(INPUT) {\n    return cl_gdt_conversion.amount_outbound(INPUT);\n  }\n  static async amount_outbound(INPUT) {\n    let im_value = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let im_currency_code = new abap.types.String();\n    if (INPUT && INPUT.im_currency_code) {im_currency_code.set(INPUT.im_currency_code);}\n    let ex_value = new abap.types.Packed({length: 1, decimals: 0});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async country_code_outbound(INPUT) {\n    return cl_gdt_conversion.country_code_outbound(INPUT);\n  }\n  static async country_code_outbound(INPUT) {\n    let im_value = new abap.types.String();\n    if (INPUT && INPUT.im_value) {im_value.set(INPUT.im_value);}\n    let ex_value = new abap.types.Character();\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async date_time_inbound(INPUT) {\n    return cl_gdt_conversion.date_time_inbound(INPUT);\n  }\n  static async date_time_inbound(INPUT) {\n    let im_value = new abap.types.Character();\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value_short = new abap.types.Packed({length: 15, decimals: 0});\n    if (INPUT && INPUT.ex_value_short) {ex_value_short = INPUT.ex_value_short;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async unit_code_inbound(INPUT) {\n    return cl_gdt_conversion.unit_code_inbound(INPUT);\n  }\n  static async unit_code_inbound(INPUT) {\n    let im_value = new abap.types.Character();\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value = new abap.types.String();\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async language_code_outbound(INPUT) {\n    return cl_gdt_conversion.language_code_outbound(INPUT);\n  }\n  static async language_code_outbound(INPUT) {\n    let im_value = new abap.types.Character({qualifiedName: \"SPRAS\"});\n    if (INPUT && INPUT.im_value) {im_value = INPUT.im_value;}\n    let ex_value = new abap.types.Character({length: 2, qualifiedName: \"LAISO\"});\n    if (INPUT && INPUT.ex_value) {ex_value = INPUT.ex_value;}\n    let unique10 = im_value;\n    if (abap.compare.eq(unique10, new abap.types.Character({length: 1}).set('E'))) {\n      ex_value.set(new abap.types.Character({length: 2}).set('en'));\n    } else {\n      abap.statements.assert(abap.compare.eq(constant_0, constant_1));\n    }\n  }\n}\nabap.Classes['CL_GDT_CONVERSION'] = cl_gdt_conversion;\n\n//# sourceMappingURL=cl_gdt_conversion.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_gdt_conversion.clas.mjs?");

/***/ })

}]);