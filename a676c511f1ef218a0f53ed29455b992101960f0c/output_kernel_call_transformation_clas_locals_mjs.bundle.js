"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_kernel_call_transformation_clas_locals_mjs"],{

/***/ "./output/kernel_call_transformation.clas.locals.mjs":
/*!***********************************************************!*\
  !*** ./output/kernel_call_transformation.clas.locals.mjs ***!
  \***********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lcl_data_to_xml\": () => (/* binding */ lcl_data_to_xml),\n/* harmony export */   \"lcl_heap\": () => (/* binding */ lcl_heap)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_call_transformation.clas.locals_imp.abap\nclass lcl_heap {\n  static INTERNAL_TYPE = 'CLAS';\n  static INTERNAL_NAME = 'CLAS-KERNEL_CALL_TRANSFORMATION-LCL_HEAP';\n  static IMPLEMENTED_INTERFACES = [];\n  static ATTRIBUTES = {\"MV_COUNTER\": {\"type\": () => {return new abap.types.Integer({qualifiedName: \"I\"});}, \"visibility\": \"I\", \"is_constant\": \" \", \"is_class\": \" \"},\n  \"MV_DATA\": {\"type\": () => {return new abap.types.String({qualifiedName: \"STRING\"});}, \"visibility\": \"I\", \"is_constant\": \" \", \"is_class\": \" \"}};\n  constructor() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_counter = new abap.types.Integer({qualifiedName: \"I\"});\n    this.mv_data = new abap.types.String({qualifiedName: \"STRING\"});\n  }\n  async constructor_(INPUT) {\n    if (super.constructor_) { await super.constructor_(INPUT); }\n    return this;\n  }\n  async serialize() {\n    let rv_xml = new abap.types.String({qualifiedName: \"STRING\"});\n    if (abap.compare.eq(this.mv_counter, new abap.types.Integer().set(0))) {\n      return rv_xml;\n    }\n    rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<asx:heap xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:abap=\"http://www.sap.com/abapxml/types/built-in\" xmlns:cls=\"http://www.sap.com/abapxml/classes/global\" xmlns:dic=\"http://www.sap.com/abapxml/types/dictionary\">`)));\n    rv_xml.set(abap.operators.concat(rv_xml,this.mv_data));\n    rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`</asx:heap>`)));\n    return rv_xml;\n  }\n  async add(INPUT) {\n    let rv_id = new abap.types.String({qualifiedName: \"STRING\"});\n    let iv_ref = new abap.types.Character(4);\n    if (INPUT && INPUT.iv_ref) {iv_ref = INPUT.iv_ref;}\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let is_serializable = new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"});\n    let lo_descr = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_CLASSDESCR\", RTTIName: \"\\\\CLASS=CL_ABAP_CLASSDESCR\"});\n    let ls_interface = new abap.types.Structure({\"name\": new abap.types.Character(30, {\"qualifiedName\":\"abap_intfname\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"})}, \"abap_intfdescr\");\n    let ls_attribute = new abap.types.Structure({\"length\": new abap.types.Integer({qualifiedName: \"LENGTH\"}), \"decimals\": new abap.types.Integer({qualifiedName: \"DECIMALS\"}), \"name\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"}), \"type_kind\": new abap.types.Character(1, {\"qualifiedName\":\"abap_typekind\"}), \"visibility\": new abap.types.Character(1, {\"qualifiedName\":\"abap_visibility\"}), \"is_interface\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_inherited\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_class\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_constant\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_virtual\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"is_read_only\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"alias_for\": new abap.types.Character(61, {\"qualifiedName\":\"abap_attrname\"})}, \"abap_attrdescr\");\n    let lo_data_to_xml = new abap.types.ABAPObject({qualifiedName: \"LCL_DATA_TO_XML\", RTTIName: \"\\\\CLASS-POOL=KERNEL_CALL_TRANSFORMATION\\\\CLASS=LCL_DATA_TO_XML\"});\n    let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n    let lv_internal = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_data = new abap.types.String({qualifiedName: \"STRING\"});\n    let lv_counter = new abap.types.Integer({qualifiedName: \"I\"});\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.DataReference(new abap.types.Character(4)));\n    this.mv_counter.set(abap.operators.add(this.mv_counter,new abap.types.Integer().set(1)));\n    lv_counter.set(this.mv_counter);\n    await abap.statements.cast(lo_descr, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_object_ref({p_object_ref: iv_ref})));\n    lv_name.set(lo_descr.get().relative_name);\n    for await (const unique58 of abap.statements.loop(lo_descr.get().interfaces)) {\n      ls_interface.set(unique58);\n      if (abap.compare.eq(ls_interface.get().name, new abap.types.Character(22).set('IF_SERIALIZABLE_OBJECT'))) {\n        is_serializable.set(abap.builtin.abap_true);\n      }\n    }\n    lv_internal.set(iv_ref.get().constructor.INTERNAL_NAME);\n    if (abap.compare.eq(is_serializable, abap.builtin.abap_true)) {\n      lo_data_to_xml.set(await (new abap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_DATA_TO_XML']()).constructor_({io_heap: this.me}));\n      lv_data.set(abap.operators.concat(lv_data,abap.operators.concat(new abap.types.String().set(`<prg:${abap.templateFormatting(lv_name)} xmlns:prg=\"http://www.sap.com/abapxml/classes/class-pool/TODO\" id=\"o${abap.templateFormatting(this.mv_counter)}\" internalName=\"${abap.templateFormatting(lv_internal)}\">`),new abap.types.String().set(`<local.${abap.templateFormatting(lv_name)}>`))));\n      for await (const unique59 of abap.statements.loop(lo_descr.get().attributes,{where: async (I) => {return abap.compare.eq(I.is_class, abap.builtin.abap_false);},topEquals: {\"is_class\": abap.builtin.abap_false}})) {\n        ls_attribute.set(unique59);\n        abap.statements.assign({target: fs_any_, dynamicName: 'iv_ref' + '->' + ls_attribute.get().name.get(), dynamicSource: (() => {\n                    try { return iv_ref; } catch {}\n                    try { return this.iv_ref; } catch {}\n                  })()});\n          abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\n          abap.statements.replace({target: ls_attribute.get().name, all: false, with: new abap.types.Character(1).set('.'), of: new abap.types.Character(1).set('~')});\n          lv_ref.assign(fs_any_.getPointer());\n          lv_data.set(abap.operators.concat(lv_data,(await lo_data_to_xml.get().run({iv_name: ls_attribute.get().name, iv_ref: lv_ref}))));\n        }\n        lv_data.set(abap.operators.concat(lv_data,abap.operators.concat(new abap.types.String().set(`</local.${abap.templateFormatting(lv_name)}>`),new abap.types.String().set(`</prg:${abap.templateFormatting(lv_name)}>`))));\n      } else {\n        lv_data.set(abap.operators.concat(lv_data,new abap.types.String().set(`<prg:${abap.templateFormatting(lv_name)} xmlns:prg=\"http://www.sap.com/abapxml/classes/class-pool/TODO\" id=\"o${abap.templateFormatting(this.mv_counter)}\"/>`)));\n      }\n      this.mv_data.set(abap.operators.concat(this.mv_data,lv_data));\n      rv_id.set(new abap.types.String().set(`${abap.templateFormatting(lv_counter)}`));\n      return rv_id;\n    }\n  }\n  abap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_HEAP'] = lcl_heap;\n  class lcl_data_to_xml {\n    static INTERNAL_TYPE = 'CLAS';\n    static INTERNAL_NAME = 'CLAS-KERNEL_CALL_TRANSFORMATION-LCL_DATA_TO_XML';\n    static IMPLEMENTED_INTERFACES = [];\n    static ATTRIBUTES = {\"MO_HEAP\": {\"type\": () => {return new abap.types.ABAPObject({qualifiedName: \"LCL_HEAP\", RTTIName: \"\\\\CLASS-POOL=KERNEL_CALL_TRANSFORMATION\\\\CLASS=LCL_HEAP\"});}, \"visibility\": \"I\", \"is_constant\": \" \", \"is_class\": \" \"}};\n    constructor() {\n      this.me = new abap.types.ABAPObject();\n      this.me.set(this);\n      this.mo_heap = new abap.types.ABAPObject({qualifiedName: \"LCL_HEAP\", RTTIName: \"\\\\CLASS-POOL=KERNEL_CALL_TRANSFORMATION\\\\CLASS=LCL_HEAP\"});\n    }\n    async constructor_(INPUT) {\n      let io_heap = new abap.types.ABAPObject({qualifiedName: \"LCL_HEAP\", RTTIName: \"\\\\CLASS-POOL=KERNEL_CALL_TRANSFORMATION\\\\CLASS=LCL_HEAP\"});\n      if (INPUT && INPUT.io_heap) {io_heap.set(INPUT.io_heap);}\n      if (abap.compare.initial(io_heap)) {\n        this.mo_heap.set(await (new abap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_HEAP']()).constructor_());\n      } else {\n        this.mo_heap.set(io_heap);\n      }\n      return this;\n    }\n    async serialize_heap() {\n      let rv_xml = new abap.types.String({qualifiedName: \"STRING\"});\n      rv_xml.set((await this.mo_heap.get().serialize()));\n      return rv_xml;\n    }\n    async run(INPUT) {\n      let rv_xml = new abap.types.String({qualifiedName: \"STRING\"});\n      let iv_name = new abap.types.String({qualifiedName: \"STRING\"});\n      if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n      let iv_ref = new abap.types.DataReference(new abap.types.Character(4));\n      if (INPUT && INPUT.iv_ref) {iv_ref.set(INPUT.iv_ref);}\n      let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\", RTTIName: \"\\\\CLASS=CL_ABAP_TYPEDESCR\"});\n      let lo_struc = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\", RTTIName: \"\\\\CLASS=CL_ABAP_STRUCTDESCR\"});\n      let lt_comps = abap.types.TableFactory.construct(new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\", RTTIName: \"\\\\CLASS=CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\"), {\"withHeader\":false,\"keyType\":\"DEFAULT\",\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"abap_component_tab\");\n      let ls_compo = new abap.types.Structure({\"name\": new abap.types.String({qualifiedName: \"NAME\"}), \"type\": new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\", RTTIName: \"\\\\CLASS=CL_ABAP_DATADESCR\"}), \"as_include\": new abap.types.Character(1, {\"qualifiedName\":\"ABAP_BOOL\",\"ddicName\":\"ABAP_BOOL\"}), \"suffix\": new abap.types.String({qualifiedName: \"SUFFIX\"})}, \"abap_componentdescr\");\n      let lv_ref = new abap.types.DataReference(new abap.types.Character(4));\n      let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n      let fs_table_ = new abap.types.FieldSymbol(abap.types.TableFactory.construct(new abap.types.Character(4), {\"withHeader\":false,\"keyType\":\"DEFAULT\"}));\n      let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character(4));\n      lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).dereference()})));\n      let unique60 = lo_type.get().kind;\n      if (abap.compare.eq(unique60, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n        await abap.statements.cast(lo_struc, lo_type);\n        lt_comps.set((await lo_struc.get().get_components()));\n        abap.statements.assign({target: fs_any_, source: (iv_ref).dereference()});\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<${abap.templateFormatting(iv_name)}>`)));\n        for await (const unique61 of abap.statements.loop(lt_comps)) {\n          ls_compo.set(unique61);\n          abap.statements.assign({component: ls_compo.get().name, target: fs_field_, source: fs_any_});\n          lv_ref.assign(fs_field_.getPointer());\n          rv_xml.set(abap.operators.concat(rv_xml,(await this.run({iv_name: abap.builtin.to_upper({val: ls_compo.get().name}), iv_ref: lv_ref}))));\n        }\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`</${abap.templateFormatting(iv_name)}>`)));\n      } else if (abap.compare.eq(unique60, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n        if (abap.compare.eq(lo_type.get().type_kind, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_string) && abap.compare.initial((iv_ref).dereference())) {\n          rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<${abap.templateFormatting(iv_name)}/>`)));\n        } else {\n          rv_xml.set(abap.operators.concat(rv_xml,abap.operators.concat(new abap.types.String().set(`<${abap.templateFormatting(iv_name)}>`),abap.operators.concat((iv_ref).dereference(),new abap.types.String().set(`</${abap.templateFormatting(iv_name)}>`)))));\n        }\n      } else if (abap.compare.eq(unique60, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n        abap.statements.assign({target: fs_table_, source: (iv_ref).dereference()});\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`<${abap.templateFormatting(iv_name)}>`)));\n        for await (const unique62 of abap.statements.loop(fs_table_)) {\n          fs_any_.assign(unique62);\n          lv_ref.assign(fs_any_.getPointer());\n          rv_xml.set(abap.operators.concat(rv_xml,(await this.run({iv_name: new abap.types.String().set(`item`), iv_ref: lv_ref}))));\n        }\n        rv_xml.set(abap.operators.concat(rv_xml,new abap.types.String().set(`</${abap.templateFormatting(iv_name)}>`)));\n      } else if (abap.compare.eq(unique60, abap.Classes['CL_ABAP_TYPEDESCR'].kind_ref)) {\n        let unique63 = lo_type.get().type_kind;\n        if (abap.compare.eq(unique63, abap.Classes['CL_ABAP_TYPEDESCR'].typekind_oref)) {\n          if (abap.compare.initial((iv_ref).dereference())) {\n            rv_xml.set(new abap.types.String().set(`<${abap.templateFormatting(iv_name)}/>`));\n            return rv_xml;\n          }\n          rv_xml.set(new abap.types.String().set(`<${abap.templateFormatting(iv_name)} href=\"#o${abap.templateFormatting((await this.mo_heap.get().add({iv_ref: (iv_ref).dereference()})))}\"/>`));\n        } else {\n          if (abap.compare.initial((iv_ref).dereference())) {\n            rv_xml.set(new abap.types.String().set(`<${abap.templateFormatting(iv_name)}/>`));\n            return rv_xml;\n          }\n          abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(20).set('todo,lcl_data_to_xml')));\n        }\n      } else {\n        abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(20).set('todo,lcl_data_to_xml')));\n      }\n      return rv_xml;\n    }\n  }\n  abap.Classes['CLAS-KERNEL_CALL_TRANSFORMATION-LCL_DATA_TO_XML'] = lcl_data_to_xml;\n\n//# sourceMappingURL=kernel_call_transformation.clas.locals.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_call_transformation.clas.locals.mjs?");

/***/ })

}]);