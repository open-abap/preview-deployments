"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_shm_service_clas_mjs"],{

/***/ "./output/cl_shm_service.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_shm_service.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_shm_service\": () => (/* binding */ cl_shm_service)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_shm_service.clas.abap\nconst constant_1 = new abap.types.Integer().set(1);\nclass cl_shm_service {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async initialize(INPUT) {\n    return cl_shm_service.initialize(INPUT);\n  }\n  static async initialize(INPUT) {\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    let client = new abap.types.Character({length: 3, qualifiedName: \"SHMA_CLIENT\"});\n    if (INPUT && INPUT.client) {client.set(INPUT.client);}\n    let attributes = new abap.types.Structure({area_name: new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"}), properties: new abap.types.Structure({auto_build: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-AUTO_BUILD\"}), has_versions: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-HAS_VERSIONS\"})}, \"SHM_PROPERTIES\"), auto_build: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-AUTO_BUILD\"}), has_versions: new abap.types.Character({qualifiedName: \"SHM_PROPERTIES-HAS_VERSIONS\"})}, \"SHMA_ATTRIBUTES\");\n    if (INPUT && INPUT.attributes) {attributes = INPUT.attributes;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async get_auto_build_class_name(INPUT) {\n    return cl_shm_service.get_auto_build_class_name(INPUT);\n  }\n  static async get_auto_build_class_name(INPUT) {\n    let auto_build_class_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AUTO_BUILD_CLASS_NAME\"});\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return auto_build_class_name;\n  }\n  async trace_get_service(INPUT) {\n    return cl_shm_service.trace_get_service(INPUT);\n  }\n  static async trace_get_service(INPUT) {\n    let trace_service = new abap.types.ABAPObject({qualifiedName: \"IF_SHM_TRACE\"});\n    let area_name = new abap.types.Character({length: 30, qualifiedName: \"SHM_AREA_NAME\"});\n    if (INPUT && INPUT.area_name) {area_name.set(INPUT.area_name);}\n    return trace_service;\n    return trace_service;\n  }\n  async trace_is_variant_active(INPUT) {\n    return cl_shm_service.trace_is_variant_active(INPUT);\n  }\n  static async trace_is_variant_active(INPUT) {\n    let is_active = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    let service_name = new abap.types.Character({length: 32, qualifiedName: \"SHMM_TRC_VARIANT_NAME\"});\n    if (INPUT && INPUT.service_name) {service_name.set(INPUT.service_name);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return is_active;\n  }\n}\nabap.Classes['CL_SHM_SERVICE'] = cl_shm_service;\n\n//# sourceMappingURL=cl_shm_service.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_shm_service.clas.mjs?");

/***/ })

}]);