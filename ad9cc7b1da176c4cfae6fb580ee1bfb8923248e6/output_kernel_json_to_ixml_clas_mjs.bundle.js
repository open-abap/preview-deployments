"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_kernel_json_to_ixml_clas_mjs"],{

/***/ "./output/kernel_json_to_ixml.clas.mjs":
/*!*********************************************!*\
  !*** ./output/kernel_json_to_ixml.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_json_to_ixml\": () => (/* binding */ kernel_json_to_ixml)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_json_to_ixml.clas.abap\nclass kernel_json_to_ixml {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async build(INPUT) {\n    return kernel_json_to_ixml.build(INPUT);\n  }\n  static async build(INPUT) {\n    let ri_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    let iv_json = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_json) {iv_json.set(INPUT.iv_json);}\n    let li_reader = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_READER\"});\n    let li_node = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_NODE\"});\n    let li_close = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_CLOSE_ELEMENT\"});\n    let li_open = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_OPEN_ELEMENT\"});\n    let li_value = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_VALUE_NODE\"});\n    let lt_attributes = new abap.types.Table(new abap.types.ABAPObject({qualifiedName: \"IF_SXML_ATTRIBUTE\"}), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"if_sxml_attribute=>attributes\");\n    let li_attribute = new abap.types.ABAPObject({qualifiedName: \"IF_SXML_ATTRIBUTE\"});\n    let li_current = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_map = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NAMED_NODE_MAP\"});\n    let li_new = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let li_element = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n    li_reader.set((await abap.Classes['CL_SXML_STRING_READER'].create({data: (await abap.Classes['CL_ABAP_CODEPAGE'].convert_to({source: iv_json}))})));\n    ri_doc.set((await (await abap.Classes['CL_IXML'].create()).get().if_ixml$create_document()));\n    li_current.set((await ri_doc.get().if_ixml_document$get_root()));\n    let unique55 = 1;\n    while (true) {\n      abap.builtin.sy.get().index.set(unique55++);\n      li_node.set((await li_reader.get().if_sxml_reader$read_next_node()));\n      if (abap.compare.initial(li_node)) {\n        break;\n      }\n      let unique56 = li_node.get().if_sxml_node$type;\n      if (abap.compare.eq(unique56, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_element_open)) {\n        await abap.statements.cast(li_open, li_node);\n        abap.statements.clear(lv_name);\n        lt_attributes.set((await li_open.get().if_sxml_open_element$get_attributes()));\n        for (const unique57 of abap.statements.loop(lt_attributes)) {\n          li_attribute.set(unique57);\n          lv_name.set((await li_attribute.get().if_sxml_attribute$get_value()));\n        }\n        li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: li_open.get().if_sxml_open_element$qname.get().name})));\n        await abap.statements.cast(li_new, li_element);\n        await li_current.get().if_ixml_node$append_child({new_child: li_new});\n        li_current.set(li_new);\n        if (abap.compare.initial(lv_name) === false) {\n          li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: new abap.types.Character({length: 4}).set('name')})));\n          await abap.statements.cast(li_new, li_element);\n          await li_new.get().if_ixml_node$set_value({value: lv_name});\n          li_map.set((await li_current.get().if_ixml_node$get_attributes()));\n          await li_map.get().if_ixml_named_node_map$set_named_item_ns({node: li_new});\n        }\n      } else if (abap.compare.eq(unique56, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_element_close)) {\n        await abap.statements.cast(li_close, li_node);\n        li_current.set((await li_current.get().if_ixml_node$get_parent()));\n      } else if (abap.compare.eq(unique56, abap.Classes['IF_SXML_NODE'].if_sxml_node$co_nt_value)) {\n        await abap.statements.cast(li_value, li_node);\n        li_element.set((await ri_doc.get().if_ixml_document$create_element_ns({name: new abap.types.Character({length: 5}).set('#text')})));\n        await li_element.get().if_ixml_element$set_value({value: (await li_value.get().if_sxml_value_node$get_value())});\n        await abap.statements.cast(li_new, li_element);\n        await li_current.get().if_ixml_node$append_child({new_child: li_new});\n      }\n    }\n    return ri_doc;\n  }\n}\nabap.Classes['KERNEL_JSON_TO_IXML'] = kernel_json_to_ixml;\n\n//# sourceMappingURL=kernel_json_to_ixml.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_json_to_ixml.clas.mjs?");

/***/ })

}]);