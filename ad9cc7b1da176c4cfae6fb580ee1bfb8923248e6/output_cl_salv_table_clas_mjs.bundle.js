"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_salv_table_clas_mjs"],{

/***/ "./output/cl_salv_table.clas.mjs":
/*!***************************************!*\
  !*** ./output/cl_salv_table.clas.mjs ***!
  \***************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_salv_table\": () => (/* binding */ cl_salv_table)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_salv_table.clas.abap\nconst constant_1 = new abap.types.Integer().set(1);\nclass cl_salv_table {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.c_functions_all = cl_salv_table.c_functions_all;\n    return this;\n  }\n  async get_functions() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_FUNCTIONS_LIST\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return val;\n  }\n  async get_selected_rows() {\n    let rows = new abap.types.Table(new abap.types.Integer({qualifiedName: \"I\"}), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"cl_salv_table=>ty_rows\");\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rows;\n  }\n  async get_metadata() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async set_selection_mode(INPUT) {\n    let val = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.val) {val.set(INPUT.val);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async set_striped_pattern(INPUT) {\n    let val = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async set_list_header(INPUT) {\n    let val = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async factory(INPUT) {\n    return cl_salv_table.factory(INPUT);\n  }\n  static async factory(INPUT) {\n    let r_container = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.r_container) {r_container = INPUT.r_container;}\n    let r_salv_table = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.r_salv_table) {r_salv_table = INPUT.r_salv_table;}\n    let t_table = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.t_table) {t_table = INPUT.t_table;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async is_offline() {\n    let value = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return value;\n  }\n  async get_selections() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_TABLE\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return val;\n  }\n  async close_screen() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async refresh() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async display() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async set_screen_status(INPUT) {\n    let pfstatus = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.pfstatus) {pfstatus = INPUT.pfstatus;}\n    let set_functions = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.set_functions) {set_functions = INPUT.set_functions;}\n    let report = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.report) {report = INPUT.report;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n  }\n  async set_screen_popup(INPUT) {\n    let start_column = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.start_column) {start_column.set(INPUT.start_column);}\n    let end_column = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.end_column) {end_column.set(INPUT.end_column);}\n    let start_line = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.start_line) {start_line.set(INPUT.start_line);}\n    let end_line = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.end_line) {end_line.set(INPUT.end_line);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n  }\n  async get_event() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_EVENTS_TABLE\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n    return val;\n  }\n  async get_display_settings() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_TABLE\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n    return val;\n  }\n  async set_top_of_list(INPUT) {\n    let val = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.val) {val = INPUT.val;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n  }\n  async get_columns() {\n    let val = new abap.types.ABAPObject({qualifiedName: \"CL_SALV_COLUMNS_TABLE\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('TODO')));\n    return val;\n  }\n}\nabap.Classes['CL_SALV_TABLE'] = cl_salv_table;\ncl_salv_table.c_functions_all = new abap.types.Integer({qualifiedName: \"I\"});\ncl_salv_table.c_functions_all.set(1);\n\n//# sourceMappingURL=cl_salv_table.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_salv_table.clas.mjs?");

/***/ })

}]);