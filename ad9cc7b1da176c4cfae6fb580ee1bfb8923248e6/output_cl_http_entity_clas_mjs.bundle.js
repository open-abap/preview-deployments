"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_http_entity_clas_mjs"],{

/***/ "./output/cl_http_entity.clas.mjs":
/*!****************************************!*\
  !*** ./output/cl_http_entity.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_entity\": () => (/* binding */ cl_http_entity)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_http_entity.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_2 = new abap.types.Integer().set(2);\nclass cl_http_entity {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [\"IF_HTTP_RESPONSE\",\"IF_HTTP_REQUEST\"];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_status = new abap.types.Integer({qualifiedName: \"I\"});\n    this.mv_reason = new abap.types.String({qualifiedName: \"STRING\"});\n    this.content_type = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_method = new abap.types.String({qualifiedName: \"STRING\"});\n    this.mv_data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    this.mt_headers = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    this.mt_form_fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    return this;\n  }\n  async if_http_response$set_header_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let ls_header = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    let fs_ls_header_ = new abap.types.FieldSymbol(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"));\n    abap.statements.readTable(this.mt_headers,{assigning: fs_ls_header_,withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      fs_ls_header_.get().value.set(value);\n    } else {\n      ls_header.get().name.set(abap.builtin.to_lower({val: name}));\n      ls_header.get().value.set(value);\n      abap.statements.append({source: ls_header, target: this.mt_headers});\n    }\n  }\n  async if_http_response$get_header_field(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let ls_header = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    abap.statements.readTable(this.mt_headers,{into: ls_header,withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      value.set(ls_header.get().value);\n    }\n    return value;\n  }\n  async if_http_response$get_header_fields(INPUT) {\n    let fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    fields.set(this.mt_headers);\n  }\n  async if_http_response$get_status(INPUT) {\n    let code = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.code) {code = INPUT.code;}\n    let reason = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.reason) {reason = INPUT.reason;}\n    code.set(this.mv_status);\n    reason.set(this.mv_reason);\n  }\n  async if_http_response$get_cdata() {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    await (await abap.Classes['CL_ABAP_CONV_IN_CE'].create({encoding: new abap.types.Character({length: 5}).set('UTF-8')})).get().convert({input: this.mv_data, data: data});\n    return data;\n  }\n  async if_http_response$set_status(INPUT) {\n    let code = new abap.types.Integer({qualifiedName: \"I\"});\n    if (INPUT && INPUT.code) {code.set(INPUT.code);}\n    let reason = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.reason) {reason.set(INPUT.reason);}\n    this.mv_status.set(code);\n    this.mv_reason.set(reason);\n  }\n  async if_http_response$set_cdata(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    await (await abap.Classes['CL_ABAP_CONV_OUT_CE'].create({encoding: new abap.types.Character({length: 5}).set('UTF-8')})).get().convert({data: data, buffer: this.mv_data});\n  }\n  async if_http_response$get_content_type() {\n    let val = new abap.types.String({qualifiedName: \"STRING\"});\n    val.set(this.content_type);\n    return val;\n  }\n  async if_http_response$set_content_type(INPUT) {\n    let val = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.val) {val.set(INPUT.val);}\n    this.content_type.set(val);\n  }\n  async if_http_request$set_content_type(INPUT) {\n    let val = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.val) {val.set(INPUT.val);}\n    this.content_type.set(val);\n  }\n  async if_http_response$get_data() {\n    let val = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    val.set(this.mv_data);\n    return val;\n  }\n  async if_http_response$set_data(INPUT) {\n    let val = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.val) {val.set(INPUT.val);}\n    this.mv_data.set(val);\n  }\n  async if_http_request$set_form_fields(INPUT) {\n    let fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields.set(INPUT.fields);}\n    this.mt_form_fields.set(fields);\n  }\n  async if_http_request$get_form_fields(INPUT) {\n    let fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    fields.set(this.mt_form_fields);\n  }\n  async if_http_request$get_form_field(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let ls_field = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    abap.statements.readTable(this.mt_form_fields,{into: ls_field,withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      value.set(ls_field.get().value);\n    }\n    return value;\n  }\n  async if_http_request$set_header_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let ls_header = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    let fs_ls_header_ = new abap.types.FieldSymbol(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"));\n    abap.statements.readTable(this.mt_headers,{assigning: fs_ls_header_,withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      fs_ls_header_.get().value.set(value);\n    } else {\n      ls_header.get().name.set(abap.builtin.to_lower({val: name}));\n      ls_header.get().value.set(value);\n      abap.statements.append({source: ls_header, target: this.mt_headers});\n    }\n    if (abap.compare.eq(name, new abap.types.Character({length: 15}).set('~request_method'))) {\n      await this.if_http_request$set_method({method: value});\n    }\n  }\n  async if_http_request$get_header_field(INPUT) {\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let ls_header = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    abap.statements.readTable(this.mt_headers,{into: ls_header,withKey: (i) => {return abap.compare.eq(i.name, abap.builtin.to_lower({val: name}));}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      value.set(ls_header.get().value);\n    }\n    return value;\n  }\n  async if_http_request$set_method(INPUT) {\n    let method = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.method) {method.set(INPUT.method);}\n    this.mv_method.set(method);\n  }\n  async if_http_request$get_method() {\n    let meth = new abap.types.String({qualifiedName: \"STRING\"});\n    meth.set(this.mv_method);\n    return meth;\n  }\n  async if_http_request$set_version(INPUT) {\n    let version = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.version) {version.set(INPUT.version);}\n    abap.statements.assert(abap.compare.eq(constant_2, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async if_http_request$set_data(INPUT) {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    this.mv_data.set(data);\n  }\n  async if_http_request$get_data() {\n    let data = new abap.types.XString({qualifiedName: \"XSTRING\"});\n    data.set(this.mv_data);\n    return data;\n  }\n  async if_http_request$set_cdata(INPUT) {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.data) {data.set(INPUT.data);}\n    await (await abap.Classes['CL_ABAP_CONV_OUT_CE'].create({encoding: new abap.types.Character({length: 5}).set('UTF-8')})).get().convert({data: data, buffer: this.mv_data});\n  }\n  async if_http_request$get_cdata() {\n    let data = new abap.types.String({qualifiedName: \"STRING\"});\n    await (await abap.Classes['CL_ABAP_CONV_IN_CE'].create({encoding: new abap.types.Character({length: 5}).set('UTF-8')})).get().convert({input: this.mv_data, data: data});\n    return data;\n  }\n  async if_http_request$set_form_field(INPUT) {\n    let name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.name) {name.set(INPUT.name);}\n    let value = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.value) {value.set(INPUT.value);}\n    let ls_field = new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\");\n    ls_field.get().name.set(name);\n    ls_field.get().value.set(value);\n    abap.statements.append({source: ls_field, target: this.mt_form_fields});\n  }\n  async if_http_request$get_header_fields(INPUT) {\n    let fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String({qualifiedName: \"IHTTPNVP-NAME\"}), value: new abap.types.String({qualifiedName: \"IHTTPNVP-VALUE\"})}, \"IHTTPNVP\"), {\"withHeader\":false}, \"TIHTTPNVP\");\n    if (INPUT && INPUT.fields) {fields = INPUT.fields;}\n    fields.set(this.mt_headers);\n  }\n}\nabap.Classes['CL_HTTP_ENTITY'] = cl_http_entity;\n\n//# sourceMappingURL=cl_http_entity.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_http_entity.clas.mjs?");

/***/ })

}]);