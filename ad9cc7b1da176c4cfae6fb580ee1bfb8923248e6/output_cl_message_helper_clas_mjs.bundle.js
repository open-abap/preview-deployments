"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_cl_message_helper_clas_mjs"],{

/***/ "./output/cl_message_helper.clas.mjs":
/*!*******************************************!*\
  !*** ./output/cl_message_helper.clas.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_message_helper\": () => (/* binding */ cl_message_helper)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// cl_message_helper.clas.abap\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_100 = new abap.types.Integer().set(100);\nconst constant_150 = new abap.types.Integer().set(150);\nconst constant_50 = new abap.types.Integer().set(50);\nclass cl_message_helper {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.gc_fallback = cl_message_helper.gc_fallback;\n    return this;\n  }\n  async get_text_for_message(INPUT) {\n    return cl_message_helper.get_text_for_message(INPUT);\n  }\n  static async get_text_for_message(INPUT) {\n    let result = new abap.types.String({qualifiedName: \"STRING\"});\n    let text = new abap.types.ABAPObject({qualifiedName: \"IF_MESSAGE\"});\n    if (INPUT && INPUT.text) {text.set(INPUT.text);}\n    let lv_msgid = new abap.types.Character({length: 20, qualifiedName: \"sy-msgid\"});\n    let lv_msgno = new abap.types.Numc({length: 3, qualifiedName: \"sy-msgno\"});\n    let lv_msgv1 = new abap.types.Character({length: 50, qualifiedName: \"sy-msgv1\"});\n    let lv_msgv2 = new abap.types.Character({length: 50, qualifiedName: \"sy-msgv2\"});\n    let lv_msgv3 = new abap.types.Character({length: 50, qualifiedName: \"sy-msgv3\"});\n    let lv_msgv4 = new abap.types.Character({length: 50, qualifiedName: \"sy-msgv4\"});\n    if (text.get().if_t100_message$t100key === undefined) { result.set(this.gc_fallback); return result; };\n    lv_msgid.set(text.get().if_t100_message$t100key.get().msgid);\n    lv_msgno.set(text.get().if_t100_message$t100key.get().msgno);\n    lv_msgv1.set(text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\")] ? text.get()[text.get().if_t100_message$t100key.get().attr1.get().toLowerCase().replace(\"~\", \"$\")].get() : \"\");\n    lv_msgv2.set(text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\")] ? text.get()[text.get().if_t100_message$t100key.get().attr2.get().toLowerCase().replace(\"~\", \"$\")].get() : \"\");\n    lv_msgv3.set(text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\")] ? text.get()[text.get().if_t100_message$t100key.get().attr3.get().toLowerCase().replace(\"~\", \"$\")].get() : \"\");\n    lv_msgv4.set(text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\")] ? text.get()[text.get().if_t100_message$t100key.get().attr4.get().toLowerCase().replace(\"~\", \"$\")].get() : \"\");\n    await abap.statements.message({into: result, id: lv_msgid, type: new abap.types.Character({length: 1}).set('I'), number: lv_msgno, with: [lv_msgv1,lv_msgv2,lv_msgv3,lv_msgv4]});\n    return result;\n  }\n  async set_msg_vars_for_if_msg(INPUT) {\n    return cl_message_helper.set_msg_vars_for_if_msg(INPUT);\n  }\n  static async set_msg_vars_for_if_msg(INPUT) {\n    let text = new abap.types.ABAPObject({qualifiedName: \"IF_MESSAGE\"});\n    if (INPUT && INPUT.text) {text.set(INPUT.text);}\n    let string = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.string) {string = INPUT.string;}\n    if (abap.compare.initial(text)) {\n      throw await (new abap.Classes['CX_SY_MESSAGE_ILLEGAL_TEXT']()).constructor_();\n    }\n    string.set((await this.get_text_for_message({text: text})));\n    if (abap.compare.ne(string, cl_message_helper.gc_fallback)) {\n      abap.statements.clear(abap.builtin.sy.get().msgty);\n      return;\n    }\n    string.set((await text.get().if_message$get_text()));\n    if (abap.compare.initial(string)) {\n      abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    }\n    await this.set_msg_vars_for_clike({text: string});\n  }\n  async set_msg_vars_for_clike(INPUT) {\n    return cl_message_helper.set_msg_vars_for_clike(INPUT);\n  }\n  static async set_msg_vars_for_clike(INPUT) {\n    let text = new abap.types.Character();\n    if (INPUT && INPUT.text) {text = INPUT.text;}\n    abap.builtin.sy.get().msgid.set(new abap.types.Character({length: 2}).set('00'));\n    abap.builtin.sy.get().msgno.set(new abap.types.Character({length: 3}).set('001'));\n    abap.builtin.sy.get().msgv1.set(text);\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), constant_50)) {\n      abap.builtin.sy.get().msgv2.set(text.getOffset({offset: 50}));\n    }\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), constant_100)) {\n      abap.builtin.sy.get().msgv3.set(text.getOffset({offset: 100}));\n    }\n    if (abap.compare.gt(abap.builtin.strlen({val: text}), constant_150)) {\n      abap.builtin.sy.get().msgv4.set(text.getOffset({offset: 150}));\n    }\n  }\n}\nabap.Classes['CL_MESSAGE_HELPER'] = cl_message_helper;\ncl_message_helper.gc_fallback = new abap.types.String({qualifiedName: \"STRING\"});\ncl_message_helper.gc_fallback.set('An exception was raised.');\n\n//# sourceMappingURL=cl_message_helper.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/cl_message_helper.clas.mjs?");

/***/ })

}]);