"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_kernel_ixml_xml_to_data_clas_mjs"],{

/***/ "./output/kernel_ixml_xml_to_data.clas.mjs":
/*!*************************************************!*\
  !*** ./output/kernel_ixml_xml_to_data.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_ixml_xml_to_data\": () => (/* binding */ kernel_ixml_xml_to_data)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_ixml_xml_to_data.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nclass kernel_ixml_xml_to_data {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    return this;\n  }\n  async build(INPUT) {\n    return kernel_ixml_xml_to_data.build(INPUT);\n  }\n  static async build(INPUT) {\n    let iv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character({length: 4}));\n    if (INPUT && INPUT.iv_ref) {iv_ref = INPUT.iv_ref;}\n    let ii_doc = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_DOCUMENT\"});\n    if (INPUT && INPUT.ii_doc) {ii_doc.set(INPUT.ii_doc);}\n    let li_first = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_ELEMENT\"});\n    let li_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    await abap.statements.cast(li_first, (await (await ii_doc.get().if_ixml_document$get_root()).get().if_ixml_node$get_first_child()));\n    li_node.set((await li_first.get().if_ixml_element$find_from_name_ns({name: iv_name, depth: constant_0, namespace: new abap.types.Character({length: 0}).set('')})));\n    if (abap.compare.initial(li_node) === false) {\n      await this.traverse({ii_node: li_node, iv_ref: iv_ref});\n    }\n  }\n  async traverse(INPUT) {\n    return kernel_ixml_xml_to_data.traverse(INPUT);\n  }\n  static async traverse(INPUT) {\n    let ii_node = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    if (INPUT && INPUT.ii_node) {ii_node.set(INPUT.ii_node);}\n    let iv_ref = new abap.types.DataReference(new abap.types.Character({length: 4}));\n    if (INPUT && INPUT.iv_ref) {iv_ref = INPUT.iv_ref;}\n    let lo_type = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"});\n    let li_child = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE\"});\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\n    let li_iterator = new abap.types.ABAPObject({qualifiedName: \"IF_IXML_NODE_ITERATOR\"});\n    let lv_ref = new abap.types.DataReference(new abap.types.Character({length: 4}));\n    let fs_any_ = new abap.types.FieldSymbol(new abap.types.Character({length: 4}));\n    let fs_field_ = new abap.types.FieldSymbol(new abap.types.Character({length: 4}));\n    let fs_tab_ = new abap.types.FieldSymbol(new abap.types.Table(new abap.types.Character({length: 4}), {\"withHeader\":false}));\n    lo_type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: (iv_ref).getPointer()})));\n    let unique52 = lo_type.get().kind;\n    if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_struct)) {\n      abap.statements.assign({target: fs_any_, source: (iv_ref).getPointer()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      let unique53 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique53++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        lv_name.set((await li_child.get().if_ixml_node$get_name()));\n        abap.statements.assign({component: lv_name, target: fs_field_, source: fs_any_});\n        if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n          lv_ref.assign(fs_field_.getPointer());\n          await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        }\n      }\n    } else if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_elem)) {\n      li_child.set((await ii_node.get().if_ixml_node$get_first_child()));\n      abap.statements.assign({target: fs_any_, source: (iv_ref).getPointer()});\n      fs_any_.set((await li_child.get().if_ixml_node$get_value()));\n    } else if (abap.compare.eq(unique52, abap.Classes['CL_ABAP_TYPEDESCR'].kind_table)) {\n      abap.statements.assign({target: fs_tab_, source: (iv_ref).getPointer()});\n      li_iterator.set((await (await ii_node.get().if_ixml_node$get_children()).get().if_ixml_node_list$create_iterator()));\n      let unique54 = 1;\n      while (true) {\n        abap.builtin.sy.get().index.set(unique54++);\n        li_child.set((await li_iterator.get().if_ixml_node_iterator$get_next()));\n        if (abap.compare.initial(li_child)) {\n          break;\n        }\n        abap.statements.createData(lv_ref,{\"likeLineOf\": fs_tab_});\n        abap.statements.assign({target: fs_any_, source: (lv_ref).getPointer()});\n        await this.traverse({ii_node: li_child, iv_ref: lv_ref});\n        abap.statements.insertInternal({data: fs_any_, table: fs_tab_});\n      }\n    } else {\n      console.dir(lo_type.get().kind.get());\n    }\n  }\n}\nabap.Classes['KERNEL_IXML_XML_TO_DATA'] = kernel_ixml_xml_to_data;\n\n//# sourceMappingURL=kernel_ixml_xml_to_data.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_ixml_xml_to_data.clas.mjs?");

/***/ })

}]);