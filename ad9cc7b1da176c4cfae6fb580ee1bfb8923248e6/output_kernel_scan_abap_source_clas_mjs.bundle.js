"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopen_table_maintenance"] = self["webpackChunkopen_table_maintenance"] || []).push([["output_kernel_scan_abap_source_clas_mjs"],{

/***/ "./output/kernel_scan_abap_source.clas.mjs":
/*!*************************************************!*\
  !*** ./output/kernel_scan_abap_source.clas.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kernel_scan_abap_source\": () => (/* binding */ kernel_scan_abap_source)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output/cx_root.clas.mjs\"));\n// kernel_scan_abap_source.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_2 = new abap.types.Integer().set(2);\nclass kernel_scan_abap_source {\n  static INTERNAL_TYPE = 'CLAS';\n  static IMPLEMENTED_INTERFACES = [];\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.gc_token = kernel_scan_abap_source.gc_token;\n    this.gc_statement = kernel_scan_abap_source.gc_statement;\n    return this;\n  }\n  async call(INPUT) {\n    return kernel_scan_abap_source.call(INPUT);\n  }\n  static async call(INPUT) {\n    let input = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.input) {input = INPUT.input;}\n    let source = new abap.types.String({qualifiedName: \"STRING\"});\n    let fs_tokens_ = new abap.types.FieldSymbol(new abap.types.Table(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_stokesx\"));\n    let fs_statements_ = new abap.types.FieldSymbol(new abap.types.Table(new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\"));\n    source.set(INPUT.scan_abap_source.array ? INPUT.scan_abap_source.array().map(e => e.get()).join(\"\\n\") : INPUT.scan_abap_source.get());\n    fs_tokens_.assign(INPUT.tokens_into);\n    fs_statements_.assign(INPUT.statements_into);\n    await this.pass1({source: source, et_tokens: fs_tokens_, et_statements: fs_statements_});\n    await this.pass2({ct_tokens: fs_tokens_, ct_statements: fs_statements_});\n  }\n  async pass1(INPUT) {\n    return kernel_scan_abap_source.pass1(INPUT);\n  }\n  static async pass1(INPUT) {\n    let source = new abap.types.String({qualifiedName: \"STRING\"});\n    if (INPUT && INPUT.source) {source.set(INPUT.source);}\n    let et_tokens = new abap.types.Table(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    if (INPUT && INPUT.et_tokens) {et_tokens = INPUT.et_tokens;}\n    let et_statements = new abap.types.Table(new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    if (INPUT && INPUT.et_statements) {et_statements = INPUT.et_statements;}\n    let c_mode = new abap.types.Structure({normal: new abap.types.Integer({qualifiedName: \"I\"}), comment: new abap.types.Integer({qualifiedName: \"I\"})});\n    c_mode.get().normal.set(constant_1);\n    c_mode.get().comment.set(constant_2);\n    let character = new abap.types.Character();\n    let row = new abap.types.Integer({qualifiedName: \"I\"});\n    row.set(1);\n    let column = new abap.types.Integer({qualifiedName: \"I\"});\n    let index = new abap.types.Integer({qualifiedName: \"I\"});\n    let sfrom = new abap.types.Integer({qualifiedName: \"I\"});\n    sfrom.set(1);\n    let mode = new abap.types.Integer({qualifiedName: \"I\"});\n    let chain_tokens = new abap.types.Table(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    let fs_trow_ = new abap.types.FieldSymbol(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"));\n    let fs_srow_ = new abap.types.FieldSymbol(new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\"));\n    mode.set(c_mode.get().normal);\n    while (abap.compare.initial(source) === false) {\n      character.set(source.getOffset({length: 1}));\n      source.set(source.getOffset({offset: 1}));\n      if (abap.compare.assigned(fs_trow_) === false && abap.compare.ne(character, new abap.types.Character({length: 0}).set('')) && abap.compare.ne(character, new abap.types.String().set(`\\n`))) {\n        fs_trow_.assign(et_tokens.appendInitial());\n        fs_trow_.get().row.set(row);\n        fs_trow_.get().col.set(column);\n        fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().identifier);\n      } else if (abap.compare.eq(mode, c_mode.get().normal) && (abap.compare.eq(character, new abap.types.Character({length: 0}).set('')) || abap.compare.ca(character, new abap.types.String().set(`.,`)))) {\n        fs_trow_.unassign();\n      } else if (abap.compare.eq(mode, c_mode.get().normal) && abap.compare.eq(character, new abap.types.Character({length: 1}).set(':'))) {\n        abap.statements.clear(chain_tokens);\n        abap.statements.append({source: et_tokens, from: sfrom, lines: true, target: chain_tokens});\n        abap.statements.deleteInternal(chain_tokens,{where: (i) => {return abap.compare.eq(i.type, kernel_scan_abap_source.gc_token.get().comment);}});\n      }\n      if ((abap.compare.eq(mode, c_mode.get().normal) && abap.compare.ca(character, new abap.types.String().set(`.,`))) || abap.compare.eq(source, new abap.types.Character({length: 0}).set(''))) {\n        fs_srow_.assign(et_statements.appendInitial());\n        fs_srow_.get().terminator.set(character);\n        fs_srow_.get().from.set(sfrom);\n        fs_srow_.get().to.set(abap.builtin.lines({val: et_tokens}));\n        sfrom.set(abap.operators.add(fs_srow_.get().to,constant_1));\n        if (abap.compare.eq(character, new abap.types.Character({length: 1}).set(','))) {\n          abap.statements.append({source: chain_tokens, lines: true, target: et_tokens});\n        }\n      }\n      if (abap.compare.eq(character, new abap.types.String().set(`\\n`))) {\n        mode.set(c_mode.get().normal);\n        fs_trow_.unassign();\n        row.set(abap.operators.add(row,constant_1));\n        column.set(constant_0);\n      } else {\n        if (abap.compare.assigned(fs_trow_)) {\n          if ((abap.compare.eq(character, new abap.types.Character({length: 1}).set('*')) && abap.compare.eq(column, constant_0)) || abap.compare.eq(character, new abap.types.Character({length: 1}).set('\"'))) {\n            mode.set(c_mode.get().comment);\n            fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().comment);\n          }\n          if (abap.compare.eq(mode, c_mode.get().comment)) {\n            fs_trow_.get().type.set(kernel_scan_abap_source.gc_token.get().comment);\n            fs_trow_.get().str.set(abap.operators.concat(fs_trow_.get().str,new abap.types.String().set(`${character.get()}`)));\n          } else if (abap.compare.ne(character, new abap.types.Character({length: 1}).set(':'))) {\n            fs_trow_.get().str.set(abap.operators.concat(fs_trow_.get().str,abap.builtin.to_upper({val: new abap.types.String().set(`${character.get()}`)})));\n          }\n        }\n        column.set(abap.operators.add(column,constant_1));\n      }\n    }\n  }\n  async pass2(INPUT) {\n    return kernel_scan_abap_source.pass2(INPUT);\n  }\n  static async pass2(INPUT) {\n    let ct_tokens = new abap.types.Table(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    if (INPUT && INPUT.ct_tokens) {ct_tokens = INPUT.ct_tokens;}\n    let ct_statements = new abap.types.Table(new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_sstmnt\");\n    if (INPUT && INPUT.ct_statements) {ct_statements = INPUT.ct_statements;}\n    let fs_ls_statement_ = new abap.types.FieldSymbol(new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\"));\n    let ls_statement = new abap.types.Structure({level: new abap.types.Integer({qualifiedName: \"SSTMNT-LEVEL\"}), struc: new abap.types.Integer({qualifiedName: \"SSTMNT-STRUC\"}), from: new abap.types.Integer({qualifiedName: \"SSTMNT-FROM\"}), to: new abap.types.Integer({qualifiedName: \"SSTMNT-TO\"}), number: new abap.types.Integer({qualifiedName: \"SSTMNT-NUMBER\"}), colonrow: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONROW\"}), trow: new abap.types.Integer({qualifiedName: \"SSTMNT-TROW\"}), coloncol: new abap.types.Integer({qualifiedName: \"SSTMNT-COLONCOL\"}), tcol: new abap.types.Integer({qualifiedName: \"SSTMNT-TCOL\"}), prefixlen: new abap.types.Integer({qualifiedName: \"SSTMNT-PREFIXLEN\"}), type: new abap.types.Character({qualifiedName: \"SSTMNT-TYPE\"}), terminator: new abap.types.Character({qualifiedName: \"SSTMNT-TERMINATOR\"}), enhmt: new abap.types.Integer({qualifiedName: \"SSTMNT-ENHMT\"})}, \"SSTMNT\");\n    let ls_token = new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\");\n    let contains_comment = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    let contains_normal = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    let lv_count = new abap.types.Integer({qualifiedName: \"I\"});\n    let lv_statement_index = new abap.types.Integer({qualifiedName: \"I\"});\n    let lt_insert = new abap.types.Table(new abap.types.Structure({str: new abap.types.String({qualifiedName: \"STOKESX-STR\"}), row: new abap.types.Integer({qualifiedName: \"STOKESX-ROW\"}), off2: new abap.types.Integer({qualifiedName: \"STOKESX-OFF2\"}), off3: new abap.types.Integer({qualifiedName: \"STOKESX-OFF3\"}), col: new abap.types.Integer({qualifiedName: \"STOKESX-COL\"}), len1: new abap.types.Integer({qualifiedName: \"STOKESX-LEN1\"}), len2: new abap.types.Integer({qualifiedName: \"STOKESX-LEN2\"}), len3: new abap.types.Integer({qualifiedName: \"STOKESX-LEN3\"}), type: new abap.types.Character({qualifiedName: \"STOKESX-TYPE\"})}, \"STOKESX\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"kernel_scan_abap_source=>ty_stokesx\");\n    let lt_delete = new abap.types.Table(new abap.types.Integer({qualifiedName: \"I\"}), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}, \"\");\n    let lv_index = new abap.types.Integer({qualifiedName: \"I\"});\n    for (const unique58 of abap.statements.loop(ct_statements)) {\n      fs_ls_statement_.assign(unique58);\n      lv_statement_index.set(abap.builtin.sy.get().tabix);\n      contains_comment.set(abap.builtin.abap_false);\n      contains_normal.set(abap.builtin.abap_false);\n      for (const unique59 of abap.statements.loop(ct_tokens,{from: fs_ls_statement_.get().from,to: fs_ls_statement_.get().to})) {\n        ls_token.set(unique59);\n        if (abap.compare.eq(ls_token.get().type, kernel_scan_abap_source.gc_token.get().comment)) {\n          contains_comment.set(abap.builtin.abap_true);\n        } else {\n          contains_normal.set(abap.builtin.abap_true);\n        }\n      }\n      if (abap.compare.eq(contains_comment, abap.builtin.abap_true) && abap.compare.eq(contains_normal, abap.builtin.abap_true)) {\n        lv_count.set(constant_0);\n        abap.statements.clear(lt_insert);\n        abap.statements.clear(lt_delete);\n        for (const unique60 of abap.statements.loop(ct_tokens,{from: fs_ls_statement_.get().from,to: fs_ls_statement_.get().to})) {\n          ls_token.set(unique60);\n          if (abap.compare.eq(ls_token.get().type, kernel_scan_abap_source.gc_token.get().comment)) {\n            abap.statements.insertInternal({data: abap.builtin.sy.get().tabix, index: constant_1, table: lt_delete});\n            abap.statements.insertInternal({data: ls_token, index: constant_1, table: lt_insert});\n            lv_count.set(abap.operators.add(lv_count,constant_1));\n          }\n        }\n        for (const unique61 of abap.statements.loop(lt_delete)) {\n          lv_index.set(unique61);\n          abap.statements.deleteInternal(ct_tokens,{index: lv_index});\n        }\n        for (const unique62 of abap.statements.loop(lt_insert)) {\n          ls_token.set(unique62);\n          abap.statements.insertInternal({data: ls_token, index: fs_ls_statement_.get().from, table: ct_tokens});\n        }\n        abap.statements.clear(ls_statement);\n        ls_statement.get().from.set(fs_ls_statement_.get().from);\n        ls_statement.get().to.set(abap.operators.minus(abap.operators.add(fs_ls_statement_.get().from,lv_count),constant_1));\n        ls_statement.get().type.set(kernel_scan_abap_source.gc_statement.get().comment);\n        fs_ls_statement_.get().from.set(abap.operators.add(fs_ls_statement_.get().from,lv_count));\n        abap.statements.insertInternal({data: ls_statement, index: lv_statement_index, table: ct_statements});\n      } else if (abap.compare.eq(contains_comment, abap.builtin.abap_true)) {\n        fs_ls_statement_.get().type.set(kernel_scan_abap_source.gc_statement.get().comment);\n      } else {\n        fs_ls_statement_.get().type.set(kernel_scan_abap_source.gc_statement.get().standard);\n      }\n    }\n  }\n}\nabap.Classes['KERNEL_SCAN_ABAP_SOURCE'] = kernel_scan_abap_source;\nkernel_scan_abap_source.gc_token = new abap.types.Structure({comment: new abap.types.Character(), identifier: new abap.types.Character(), list: new abap.types.Character(), literal: new abap.types.Character(), pragma: new abap.types.Character()});\nkernel_scan_abap_source.gc_token.get().comment.set('C');\nkernel_scan_abap_source.gc_token.get().identifier.set('I');\nkernel_scan_abap_source.gc_token.get().list.set('L');\nkernel_scan_abap_source.gc_token.get().literal.set('S');\nkernel_scan_abap_source.gc_token.get().pragma.set('P');\nkernel_scan_abap_source.gc_statement = new abap.types.Structure({comment: new abap.types.Character(), comment_in_stmnt: new abap.types.Character(), compute_direct: new abap.types.Character(), empty: new abap.types.Character(), macro_call: new abap.types.Character(), macro_definition: new abap.types.Character(), method_direct: new abap.types.Character(), native_sql: new abap.types.Character(), pragma: new abap.types.Character(), standard: new abap.types.Character()});\nkernel_scan_abap_source.gc_statement.get().comment.set('P');\nkernel_scan_abap_source.gc_statement.get().comment_in_stmnt.set('S');\nkernel_scan_abap_source.gc_statement.get().compute_direct.set('C');\nkernel_scan_abap_source.gc_statement.get().empty.set('N');\nkernel_scan_abap_source.gc_statement.get().macro_call.set('D');\nkernel_scan_abap_source.gc_statement.get().macro_definition.set('M');\nkernel_scan_abap_source.gc_statement.get().method_direct.set('A');\nkernel_scan_abap_source.gc_statement.get().native_sql.set('E');\nkernel_scan_abap_source.gc_statement.get().pragma.set('G');\nkernel_scan_abap_source.gc_statement.get().standard.set('K');\n\n//# sourceMappingURL=kernel_scan_abap_source.clas.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://open-table-maintenance/./output/kernel_scan_abap_source.clas.mjs?");

/***/ })

}]);